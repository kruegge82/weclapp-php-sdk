<?php
/**
 * Party
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Party Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Party implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'party';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'addresses' => '\kruegge82\weclapp\Model\Address[]',
        'bank_accounts' => '\kruegge82\weclapp\Model\PartyBankAccount[]',
        'birth_date' => 'int',
        'commercial_language_id' => 'string',
        'commission_block' => 'bool',
        'commission_sales_partners' => '\kruegge82\weclapp\Model\CommissionSalesPartner[]',
        'company' => 'string',
        'company2' => 'string',
        'company_size_id' => 'string',
        'competitor' => 'bool',
        'contacts' => '\kruegge82\weclapp\Model\OnlyId[]',
        'converted_on_date' => 'int',
        'created_date' => 'int',
        'currency_id' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'customer' => 'bool',
        'customer_allow_dropshipping_order_creation' => 'bool',
        'customer_amount_insured' => 'float',
        'customer_annual_revenue' => 'float',
        'customer_block_notice' => 'string',
        'customer_blocked' => 'bool',
        'customer_business_type' => 'string',
        'customer_category_id' => 'string',
        'customer_credit_limit' => 'float',
        'customer_current_sales_stage_id' => 'string',
        'customer_debtor_account_id' => 'string',
        'customer_debtor_accounting_code_id' => 'string',
        'customer_default_header_discount' => 'float',
        'customer_default_header_surcharge' => 'float',
        'customer_default_shipping_carrier_id' => 'string',
        'customer_delivery_block' => 'bool',
        'customer_insolvent' => 'bool',
        'customer_insured' => 'bool',
        'customer_internal_note' => 'string',
        'customer_loss_description' => 'string',
        'customer_loss_reason_id' => 'string',
        'customer_non_standard_tax_id' => 'string',
        'customer_number' => 'string',
        'customer_number_old' => 'string',
        'customer_payment_method_id' => 'string',
        'customer_sales_channel' => 'string',
        'customer_sales_order_payment_type' => 'string',
        'customer_sales_probability' => 'int',
        'customer_sales_stage_history' => '\kruegge82\weclapp\Model\SalesStageHistory[]',
        'customer_satisfaction' => 'string',
        'customer_shipment_method_id' => 'string',
        'customer_supplier_number' => 'string',
        'customer_term_of_payment_id' => 'string',
        'customer_use_customs_tariff_number' => 'bool',
        'delivery_address_id' => 'string',
        'delivery_email_addresses_id' => 'string',
        'description' => 'string',
        'dunning_address_id' => 'string',
        'dunning_email_addresses_id' => 'string',
        'email' => 'string',
        'enable_dropshipping_in_new_supply_sources' => 'bool',
        'eori_number' => 'string',
        'factoring' => 'bool',
        'fax' => 'string',
        'first_name' => 'string',
        'fix_phone2' => 'string',
        'fixed_responsible_user' => 'bool',
        'former_sales_partner' => 'bool',
        'habitual_exporter' => 'bool',
        'image_id' => 'string',
        'invoice_address_id' => 'string',
        'invoice_block' => 'bool',
        'invoice_recipient_id' => 'string',
        'last_modified_date' => 'int',
        'last_name' => 'string',
        'lead_rating_id' => 'string',
        'lead_source_id' => 'string',
        'lead_status' => 'string',
        'legal_form_id' => 'string',
        'middle_name' => 'string',
        'mobile_phone1' => 'string',
        'mobile_phone2' => 'string',
        'online_accounts' => '\kruegge82\weclapp\Model\OnlineAccount[]',
        'opt_in_email' => 'bool',
        'opt_in_letter' => 'bool',
        'opt_in_phone' => 'bool',
        'opt_in_sms' => 'bool',
        'parent_party_id' => 'string',
        'party_email_addresses' => '\kruegge82\weclapp\Model\PartyEmailAddresses[]',
        'party_habitual_exporter_letters_of_intent' => '\kruegge82\weclapp\Model\PartyHabitualExporterLetterOfIntent[]',
        'party_type' => 'string',
        'person_company' => 'string',
        'person_department_id' => 'string',
        'person_role_id' => 'string',
        'phone' => 'string',
        'phone_home' => 'string',
        'primary_address_id' => 'string',
        'primary_contact_id' => 'string',
        'public_page_expiration_date' => 'int',
        'public_page_uuid' => 'string',
        'purchase_email_addresses_id' => 'string',
        'purchase_via_plafond' => 'bool',
        'quotation_email_addresses_id' => 'string',
        'rating_id' => 'string',
        'reference_number' => 'string',
        'region_id' => 'string',
        'responsible_user_id' => 'string',
        'sales_invoice_email_addresses_id' => 'string',
        'sales_order_email_addresses_id' => 'string',
        'sales_partner' => 'bool',
        'sales_partner_default_commission_fix' => 'float',
        'sales_partner_default_commission_percentage' => 'float',
        'sales_partner_default_commission_type' => 'string',
        'salutation' => 'string',
        'sector_id' => 'string',
        'supplier' => 'bool',
        'supplier_active' => 'bool',
        'supplier_creditor_account_id' => 'string',
        'supplier_creditor_accounting_code_id' => 'string',
        'supplier_customer_number_at_supplier' => 'string',
        'supplier_default_shipping_carrier_id' => 'string',
        'supplier_internal_note' => 'string',
        'supplier_minimum_purchase_order_amount' => 'float',
        'supplier_non_standard_tax_id' => 'string',
        'supplier_number' => 'string',
        'supplier_number_old' => 'string',
        'supplier_order_block' => 'bool',
        'supplier_payment_method_id' => 'string',
        'supplier_shipment_method_id' => 'string',
        'supplier_term_of_payment_id' => 'string',
        'tags' => 'string[]',
        'tax_id' => 'string',
        'title_id' => 'string',
        'topics' => '\kruegge82\weclapp\Model\OnlyId[]',
        'vat_identification_number' => 'string',
        'website' => 'string',
        'x_rechnung_leitweg_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'addresses' => null,
        'bank_accounts' => null,
        'birth_date' => 'timestamp',
        'commercial_language_id' => null,
        'commission_block' => null,
        'commission_sales_partners' => null,
        'company' => null,
        'company2' => null,
        'company_size_id' => null,
        'competitor' => null,
        'contacts' => null,
        'converted_on_date' => 'timestamp',
        'created_date' => 'timestamp',
        'currency_id' => null,
        'custom_attributes' => null,
        'customer' => null,
        'customer_allow_dropshipping_order_creation' => null,
        'customer_amount_insured' => 'number',
        'customer_annual_revenue' => 'number',
        'customer_block_notice' => null,
        'customer_blocked' => null,
        'customer_business_type' => null,
        'customer_category_id' => null,
        'customer_credit_limit' => 'number',
        'customer_current_sales_stage_id' => null,
        'customer_debtor_account_id' => null,
        'customer_debtor_accounting_code_id' => null,
        'customer_default_header_discount' => 'number',
        'customer_default_header_surcharge' => 'number',
        'customer_default_shipping_carrier_id' => null,
        'customer_delivery_block' => null,
        'customer_insolvent' => null,
        'customer_insured' => null,
        'customer_internal_note' => null,
        'customer_loss_description' => null,
        'customer_loss_reason_id' => null,
        'customer_non_standard_tax_id' => null,
        'customer_number' => null,
        'customer_number_old' => null,
        'customer_payment_method_id' => null,
        'customer_sales_channel' => null,
        'customer_sales_order_payment_type' => null,
        'customer_sales_probability' => 'int32',
        'customer_sales_stage_history' => null,
        'customer_satisfaction' => null,
        'customer_shipment_method_id' => null,
        'customer_supplier_number' => null,
        'customer_term_of_payment_id' => null,
        'customer_use_customs_tariff_number' => null,
        'delivery_address_id' => null,
        'delivery_email_addresses_id' => null,
        'description' => null,
        'dunning_address_id' => null,
        'dunning_email_addresses_id' => null,
        'email' => null,
        'enable_dropshipping_in_new_supply_sources' => null,
        'eori_number' => null,
        'factoring' => null,
        'fax' => null,
        'first_name' => null,
        'fix_phone2' => null,
        'fixed_responsible_user' => null,
        'former_sales_partner' => null,
        'habitual_exporter' => null,
        'image_id' => null,
        'invoice_address_id' => null,
        'invoice_block' => null,
        'invoice_recipient_id' => null,
        'last_modified_date' => 'timestamp',
        'last_name' => null,
        'lead_rating_id' => null,
        'lead_source_id' => null,
        'lead_status' => null,
        'legal_form_id' => null,
        'middle_name' => null,
        'mobile_phone1' => null,
        'mobile_phone2' => null,
        'online_accounts' => null,
        'opt_in_email' => null,
        'opt_in_letter' => null,
        'opt_in_phone' => null,
        'opt_in_sms' => null,
        'parent_party_id' => null,
        'party_email_addresses' => null,
        'party_habitual_exporter_letters_of_intent' => null,
        'party_type' => null,
        'person_company' => null,
        'person_department_id' => null,
        'person_role_id' => null,
        'phone' => null,
        'phone_home' => null,
        'primary_address_id' => null,
        'primary_contact_id' => null,
        'public_page_expiration_date' => 'timestamp',
        'public_page_uuid' => null,
        'purchase_email_addresses_id' => null,
        'purchase_via_plafond' => null,
        'quotation_email_addresses_id' => null,
        'rating_id' => null,
        'reference_number' => null,
        'region_id' => null,
        'responsible_user_id' => null,
        'sales_invoice_email_addresses_id' => null,
        'sales_order_email_addresses_id' => null,
        'sales_partner' => null,
        'sales_partner_default_commission_fix' => 'number',
        'sales_partner_default_commission_percentage' => 'number',
        'sales_partner_default_commission_type' => null,
        'salutation' => null,
        'sector_id' => null,
        'supplier' => null,
        'supplier_active' => null,
        'supplier_creditor_account_id' => null,
        'supplier_creditor_accounting_code_id' => null,
        'supplier_customer_number_at_supplier' => null,
        'supplier_default_shipping_carrier_id' => null,
        'supplier_internal_note' => null,
        'supplier_minimum_purchase_order_amount' => 'number',
        'supplier_non_standard_tax_id' => null,
        'supplier_number' => null,
        'supplier_number_old' => null,
        'supplier_order_block' => null,
        'supplier_payment_method_id' => null,
        'supplier_shipment_method_id' => null,
        'supplier_term_of_payment_id' => null,
        'tags' => null,
        'tax_id' => null,
        'title_id' => null,
        'topics' => null,
        'vat_identification_number' => null,
        'website' => null,
        'x_rechnung_leitweg_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'addresses' => false,
        'bank_accounts' => false,
        'birth_date' => false,
        'commercial_language_id' => false,
        'commission_block' => false,
        'commission_sales_partners' => false,
        'company' => false,
        'company2' => false,
        'company_size_id' => false,
        'competitor' => false,
        'contacts' => false,
        'converted_on_date' => false,
        'created_date' => false,
        'currency_id' => false,
        'custom_attributes' => false,
        'customer' => false,
        'customer_allow_dropshipping_order_creation' => false,
        'customer_amount_insured' => false,
        'customer_annual_revenue' => false,
        'customer_block_notice' => false,
        'customer_blocked' => false,
        'customer_business_type' => false,
        'customer_category_id' => false,
        'customer_credit_limit' => false,
        'customer_current_sales_stage_id' => false,
        'customer_debtor_account_id' => false,
        'customer_debtor_accounting_code_id' => false,
        'customer_default_header_discount' => false,
        'customer_default_header_surcharge' => false,
        'customer_default_shipping_carrier_id' => false,
        'customer_delivery_block' => false,
        'customer_insolvent' => false,
        'customer_insured' => false,
        'customer_internal_note' => false,
        'customer_loss_description' => false,
        'customer_loss_reason_id' => false,
        'customer_non_standard_tax_id' => false,
        'customer_number' => false,
        'customer_number_old' => false,
        'customer_payment_method_id' => false,
        'customer_sales_channel' => false,
        'customer_sales_order_payment_type' => false,
        'customer_sales_probability' => false,
        'customer_sales_stage_history' => false,
        'customer_satisfaction' => false,
        'customer_shipment_method_id' => false,
        'customer_supplier_number' => false,
        'customer_term_of_payment_id' => false,
        'customer_use_customs_tariff_number' => false,
        'delivery_address_id' => false,
        'delivery_email_addresses_id' => false,
        'description' => false,
        'dunning_address_id' => false,
        'dunning_email_addresses_id' => false,
        'email' => false,
        'enable_dropshipping_in_new_supply_sources' => false,
        'eori_number' => false,
        'factoring' => false,
        'fax' => false,
        'first_name' => false,
        'fix_phone2' => false,
        'fixed_responsible_user' => false,
        'former_sales_partner' => false,
        'habitual_exporter' => false,
        'image_id' => false,
        'invoice_address_id' => false,
        'invoice_block' => false,
        'invoice_recipient_id' => false,
        'last_modified_date' => false,
        'last_name' => false,
        'lead_rating_id' => false,
        'lead_source_id' => false,
        'lead_status' => false,
        'legal_form_id' => false,
        'middle_name' => false,
        'mobile_phone1' => false,
        'mobile_phone2' => false,
        'online_accounts' => false,
        'opt_in_email' => false,
        'opt_in_letter' => false,
        'opt_in_phone' => false,
        'opt_in_sms' => false,
        'parent_party_id' => false,
        'party_email_addresses' => false,
        'party_habitual_exporter_letters_of_intent' => false,
        'party_type' => false,
        'person_company' => false,
        'person_department_id' => false,
        'person_role_id' => false,
        'phone' => false,
        'phone_home' => false,
        'primary_address_id' => false,
        'primary_contact_id' => false,
        'public_page_expiration_date' => false,
        'public_page_uuid' => false,
        'purchase_email_addresses_id' => false,
        'purchase_via_plafond' => false,
        'quotation_email_addresses_id' => false,
        'rating_id' => false,
        'reference_number' => false,
        'region_id' => false,
        'responsible_user_id' => false,
        'sales_invoice_email_addresses_id' => false,
        'sales_order_email_addresses_id' => false,
        'sales_partner' => false,
        'sales_partner_default_commission_fix' => false,
        'sales_partner_default_commission_percentage' => false,
        'sales_partner_default_commission_type' => false,
        'salutation' => false,
        'sector_id' => false,
        'supplier' => false,
        'supplier_active' => false,
        'supplier_creditor_account_id' => false,
        'supplier_creditor_accounting_code_id' => false,
        'supplier_customer_number_at_supplier' => false,
        'supplier_default_shipping_carrier_id' => false,
        'supplier_internal_note' => false,
        'supplier_minimum_purchase_order_amount' => false,
        'supplier_non_standard_tax_id' => false,
        'supplier_number' => false,
        'supplier_number_old' => false,
        'supplier_order_block' => false,
        'supplier_payment_method_id' => false,
        'supplier_shipment_method_id' => false,
        'supplier_term_of_payment_id' => false,
        'tags' => false,
        'tax_id' => false,
        'title_id' => false,
        'topics' => false,
        'vat_identification_number' => false,
        'website' => false,
        'x_rechnung_leitweg_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'addresses' => 'addresses',
        'bank_accounts' => 'bankAccounts',
        'birth_date' => 'birthDate',
        'commercial_language_id' => 'commercialLanguageId',
        'commission_block' => 'commissionBlock',
        'commission_sales_partners' => 'commissionSalesPartners',
        'company' => 'company',
        'company2' => 'company2',
        'company_size_id' => 'companySizeId',
        'competitor' => 'competitor',
        'contacts' => 'contacts',
        'converted_on_date' => 'convertedOnDate',
        'created_date' => 'createdDate',
        'currency_id' => 'currencyId',
        'custom_attributes' => 'customAttributes',
        'customer' => 'customer',
        'customer_allow_dropshipping_order_creation' => 'customerAllowDropshippingOrderCreation',
        'customer_amount_insured' => 'customerAmountInsured',
        'customer_annual_revenue' => 'customerAnnualRevenue',
        'customer_block_notice' => 'customerBlockNotice',
        'customer_blocked' => 'customerBlocked',
        'customer_business_type' => 'customerBusinessType',
        'customer_category_id' => 'customerCategoryId',
        'customer_credit_limit' => 'customerCreditLimit',
        'customer_current_sales_stage_id' => 'customerCurrentSalesStageId',
        'customer_debtor_account_id' => 'customerDebtorAccountId',
        'customer_debtor_accounting_code_id' => 'customerDebtorAccountingCodeId',
        'customer_default_header_discount' => 'customerDefaultHeaderDiscount',
        'customer_default_header_surcharge' => 'customerDefaultHeaderSurcharge',
        'customer_default_shipping_carrier_id' => 'customerDefaultShippingCarrierId',
        'customer_delivery_block' => 'customerDeliveryBlock',
        'customer_insolvent' => 'customerInsolvent',
        'customer_insured' => 'customerInsured',
        'customer_internal_note' => 'customerInternalNote',
        'customer_loss_description' => 'customerLossDescription',
        'customer_loss_reason_id' => 'customerLossReasonId',
        'customer_non_standard_tax_id' => 'customerNonStandardTaxId',
        'customer_number' => 'customerNumber',
        'customer_number_old' => 'customerNumberOld',
        'customer_payment_method_id' => 'customerPaymentMethodId',
        'customer_sales_channel' => 'customerSalesChannel',
        'customer_sales_order_payment_type' => 'customerSalesOrderPaymentType',
        'customer_sales_probability' => 'customerSalesProbability',
        'customer_sales_stage_history' => 'customerSalesStageHistory',
        'customer_satisfaction' => 'customerSatisfaction',
        'customer_shipment_method_id' => 'customerShipmentMethodId',
        'customer_supplier_number' => 'customerSupplierNumber',
        'customer_term_of_payment_id' => 'customerTermOfPaymentId',
        'customer_use_customs_tariff_number' => 'customerUseCustomsTariffNumber',
        'delivery_address_id' => 'deliveryAddressId',
        'delivery_email_addresses_id' => 'deliveryEmailAddressesId',
        'description' => 'description',
        'dunning_address_id' => 'dunningAddressId',
        'dunning_email_addresses_id' => 'dunningEmailAddressesId',
        'email' => 'email',
        'enable_dropshipping_in_new_supply_sources' => 'enableDropshippingInNewSupplySources',
        'eori_number' => 'eoriNumber',
        'factoring' => 'factoring',
        'fax' => 'fax',
        'first_name' => 'firstName',
        'fix_phone2' => 'fixPhone2',
        'fixed_responsible_user' => 'fixedResponsibleUser',
        'former_sales_partner' => 'formerSalesPartner',
        'habitual_exporter' => 'habitualExporter',
        'image_id' => 'imageId',
        'invoice_address_id' => 'invoiceAddressId',
        'invoice_block' => 'invoiceBlock',
        'invoice_recipient_id' => 'invoiceRecipientId',
        'last_modified_date' => 'lastModifiedDate',
        'last_name' => 'lastName',
        'lead_rating_id' => 'leadRatingId',
        'lead_source_id' => 'leadSourceId',
        'lead_status' => 'leadStatus',
        'legal_form_id' => 'legalFormId',
        'middle_name' => 'middleName',
        'mobile_phone1' => 'mobilePhone1',
        'mobile_phone2' => 'mobilePhone2',
        'online_accounts' => 'onlineAccounts',
        'opt_in_email' => 'optInEmail',
        'opt_in_letter' => 'optInLetter',
        'opt_in_phone' => 'optInPhone',
        'opt_in_sms' => 'optInSms',
        'parent_party_id' => 'parentPartyId',
        'party_email_addresses' => 'partyEmailAddresses',
        'party_habitual_exporter_letters_of_intent' => 'partyHabitualExporterLettersOfIntent',
        'party_type' => 'partyType',
        'person_company' => 'personCompany',
        'person_department_id' => 'personDepartmentId',
        'person_role_id' => 'personRoleId',
        'phone' => 'phone',
        'phone_home' => 'phoneHome',
        'primary_address_id' => 'primaryAddressId',
        'primary_contact_id' => 'primaryContactId',
        'public_page_expiration_date' => 'publicPageExpirationDate',
        'public_page_uuid' => 'publicPageUuid',
        'purchase_email_addresses_id' => 'purchaseEmailAddressesId',
        'purchase_via_plafond' => 'purchaseViaPlafond',
        'quotation_email_addresses_id' => 'quotationEmailAddressesId',
        'rating_id' => 'ratingId',
        'reference_number' => 'referenceNumber',
        'region_id' => 'regionId',
        'responsible_user_id' => 'responsibleUserId',
        'sales_invoice_email_addresses_id' => 'salesInvoiceEmailAddressesId',
        'sales_order_email_addresses_id' => 'salesOrderEmailAddressesId',
        'sales_partner' => 'salesPartner',
        'sales_partner_default_commission_fix' => 'salesPartnerDefaultCommissionFix',
        'sales_partner_default_commission_percentage' => 'salesPartnerDefaultCommissionPercentage',
        'sales_partner_default_commission_type' => 'salesPartnerDefaultCommissionType',
        'salutation' => 'salutation',
        'sector_id' => 'sectorId',
        'supplier' => 'supplier',
        'supplier_active' => 'supplierActive',
        'supplier_creditor_account_id' => 'supplierCreditorAccountId',
        'supplier_creditor_accounting_code_id' => 'supplierCreditorAccountingCodeId',
        'supplier_customer_number_at_supplier' => 'supplierCustomerNumberAtSupplier',
        'supplier_default_shipping_carrier_id' => 'supplierDefaultShippingCarrierId',
        'supplier_internal_note' => 'supplierInternalNote',
        'supplier_minimum_purchase_order_amount' => 'supplierMinimumPurchaseOrderAmount',
        'supplier_non_standard_tax_id' => 'supplierNonStandardTaxId',
        'supplier_number' => 'supplierNumber',
        'supplier_number_old' => 'supplierNumberOld',
        'supplier_order_block' => 'supplierOrderBlock',
        'supplier_payment_method_id' => 'supplierPaymentMethodId',
        'supplier_shipment_method_id' => 'supplierShipmentMethodId',
        'supplier_term_of_payment_id' => 'supplierTermOfPaymentId',
        'tags' => 'tags',
        'tax_id' => 'taxId',
        'title_id' => 'titleId',
        'topics' => 'topics',
        'vat_identification_number' => 'vatIdentificationNumber',
        'website' => 'website',
        'x_rechnung_leitweg_id' => 'xRechnungLeitwegId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'addresses' => 'setAddresses',
        'bank_accounts' => 'setBankAccounts',
        'birth_date' => 'setBirthDate',
        'commercial_language_id' => 'setCommercialLanguageId',
        'commission_block' => 'setCommissionBlock',
        'commission_sales_partners' => 'setCommissionSalesPartners',
        'company' => 'setCompany',
        'company2' => 'setCompany2',
        'company_size_id' => 'setCompanySizeId',
        'competitor' => 'setCompetitor',
        'contacts' => 'setContacts',
        'converted_on_date' => 'setConvertedOnDate',
        'created_date' => 'setCreatedDate',
        'currency_id' => 'setCurrencyId',
        'custom_attributes' => 'setCustomAttributes',
        'customer' => 'setCustomer',
        'customer_allow_dropshipping_order_creation' => 'setCustomerAllowDropshippingOrderCreation',
        'customer_amount_insured' => 'setCustomerAmountInsured',
        'customer_annual_revenue' => 'setCustomerAnnualRevenue',
        'customer_block_notice' => 'setCustomerBlockNotice',
        'customer_blocked' => 'setCustomerBlocked',
        'customer_business_type' => 'setCustomerBusinessType',
        'customer_category_id' => 'setCustomerCategoryId',
        'customer_credit_limit' => 'setCustomerCreditLimit',
        'customer_current_sales_stage_id' => 'setCustomerCurrentSalesStageId',
        'customer_debtor_account_id' => 'setCustomerDebtorAccountId',
        'customer_debtor_accounting_code_id' => 'setCustomerDebtorAccountingCodeId',
        'customer_default_header_discount' => 'setCustomerDefaultHeaderDiscount',
        'customer_default_header_surcharge' => 'setCustomerDefaultHeaderSurcharge',
        'customer_default_shipping_carrier_id' => 'setCustomerDefaultShippingCarrierId',
        'customer_delivery_block' => 'setCustomerDeliveryBlock',
        'customer_insolvent' => 'setCustomerInsolvent',
        'customer_insured' => 'setCustomerInsured',
        'customer_internal_note' => 'setCustomerInternalNote',
        'customer_loss_description' => 'setCustomerLossDescription',
        'customer_loss_reason_id' => 'setCustomerLossReasonId',
        'customer_non_standard_tax_id' => 'setCustomerNonStandardTaxId',
        'customer_number' => 'setCustomerNumber',
        'customer_number_old' => 'setCustomerNumberOld',
        'customer_payment_method_id' => 'setCustomerPaymentMethodId',
        'customer_sales_channel' => 'setCustomerSalesChannel',
        'customer_sales_order_payment_type' => 'setCustomerSalesOrderPaymentType',
        'customer_sales_probability' => 'setCustomerSalesProbability',
        'customer_sales_stage_history' => 'setCustomerSalesStageHistory',
        'customer_satisfaction' => 'setCustomerSatisfaction',
        'customer_shipment_method_id' => 'setCustomerShipmentMethodId',
        'customer_supplier_number' => 'setCustomerSupplierNumber',
        'customer_term_of_payment_id' => 'setCustomerTermOfPaymentId',
        'customer_use_customs_tariff_number' => 'setCustomerUseCustomsTariffNumber',
        'delivery_address_id' => 'setDeliveryAddressId',
        'delivery_email_addresses_id' => 'setDeliveryEmailAddressesId',
        'description' => 'setDescription',
        'dunning_address_id' => 'setDunningAddressId',
        'dunning_email_addresses_id' => 'setDunningEmailAddressesId',
        'email' => 'setEmail',
        'enable_dropshipping_in_new_supply_sources' => 'setEnableDropshippingInNewSupplySources',
        'eori_number' => 'setEoriNumber',
        'factoring' => 'setFactoring',
        'fax' => 'setFax',
        'first_name' => 'setFirstName',
        'fix_phone2' => 'setFixPhone2',
        'fixed_responsible_user' => 'setFixedResponsibleUser',
        'former_sales_partner' => 'setFormerSalesPartner',
        'habitual_exporter' => 'setHabitualExporter',
        'image_id' => 'setImageId',
        'invoice_address_id' => 'setInvoiceAddressId',
        'invoice_block' => 'setInvoiceBlock',
        'invoice_recipient_id' => 'setInvoiceRecipientId',
        'last_modified_date' => 'setLastModifiedDate',
        'last_name' => 'setLastName',
        'lead_rating_id' => 'setLeadRatingId',
        'lead_source_id' => 'setLeadSourceId',
        'lead_status' => 'setLeadStatus',
        'legal_form_id' => 'setLegalFormId',
        'middle_name' => 'setMiddleName',
        'mobile_phone1' => 'setMobilePhone1',
        'mobile_phone2' => 'setMobilePhone2',
        'online_accounts' => 'setOnlineAccounts',
        'opt_in_email' => 'setOptInEmail',
        'opt_in_letter' => 'setOptInLetter',
        'opt_in_phone' => 'setOptInPhone',
        'opt_in_sms' => 'setOptInSms',
        'parent_party_id' => 'setParentPartyId',
        'party_email_addresses' => 'setPartyEmailAddresses',
        'party_habitual_exporter_letters_of_intent' => 'setPartyHabitualExporterLettersOfIntent',
        'party_type' => 'setPartyType',
        'person_company' => 'setPersonCompany',
        'person_department_id' => 'setPersonDepartmentId',
        'person_role_id' => 'setPersonRoleId',
        'phone' => 'setPhone',
        'phone_home' => 'setPhoneHome',
        'primary_address_id' => 'setPrimaryAddressId',
        'primary_contact_id' => 'setPrimaryContactId',
        'public_page_expiration_date' => 'setPublicPageExpirationDate',
        'public_page_uuid' => 'setPublicPageUuid',
        'purchase_email_addresses_id' => 'setPurchaseEmailAddressesId',
        'purchase_via_plafond' => 'setPurchaseViaPlafond',
        'quotation_email_addresses_id' => 'setQuotationEmailAddressesId',
        'rating_id' => 'setRatingId',
        'reference_number' => 'setReferenceNumber',
        'region_id' => 'setRegionId',
        'responsible_user_id' => 'setResponsibleUserId',
        'sales_invoice_email_addresses_id' => 'setSalesInvoiceEmailAddressesId',
        'sales_order_email_addresses_id' => 'setSalesOrderEmailAddressesId',
        'sales_partner' => 'setSalesPartner',
        'sales_partner_default_commission_fix' => 'setSalesPartnerDefaultCommissionFix',
        'sales_partner_default_commission_percentage' => 'setSalesPartnerDefaultCommissionPercentage',
        'sales_partner_default_commission_type' => 'setSalesPartnerDefaultCommissionType',
        'salutation' => 'setSalutation',
        'sector_id' => 'setSectorId',
        'supplier' => 'setSupplier',
        'supplier_active' => 'setSupplierActive',
        'supplier_creditor_account_id' => 'setSupplierCreditorAccountId',
        'supplier_creditor_accounting_code_id' => 'setSupplierCreditorAccountingCodeId',
        'supplier_customer_number_at_supplier' => 'setSupplierCustomerNumberAtSupplier',
        'supplier_default_shipping_carrier_id' => 'setSupplierDefaultShippingCarrierId',
        'supplier_internal_note' => 'setSupplierInternalNote',
        'supplier_minimum_purchase_order_amount' => 'setSupplierMinimumPurchaseOrderAmount',
        'supplier_non_standard_tax_id' => 'setSupplierNonStandardTaxId',
        'supplier_number' => 'setSupplierNumber',
        'supplier_number_old' => 'setSupplierNumberOld',
        'supplier_order_block' => 'setSupplierOrderBlock',
        'supplier_payment_method_id' => 'setSupplierPaymentMethodId',
        'supplier_shipment_method_id' => 'setSupplierShipmentMethodId',
        'supplier_term_of_payment_id' => 'setSupplierTermOfPaymentId',
        'tags' => 'setTags',
        'tax_id' => 'setTaxId',
        'title_id' => 'setTitleId',
        'topics' => 'setTopics',
        'vat_identification_number' => 'setVatIdentificationNumber',
        'website' => 'setWebsite',
        'x_rechnung_leitweg_id' => 'setXRechnungLeitwegId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'addresses' => 'getAddresses',
        'bank_accounts' => 'getBankAccounts',
        'birth_date' => 'getBirthDate',
        'commercial_language_id' => 'getCommercialLanguageId',
        'commission_block' => 'getCommissionBlock',
        'commission_sales_partners' => 'getCommissionSalesPartners',
        'company' => 'getCompany',
        'company2' => 'getCompany2',
        'company_size_id' => 'getCompanySizeId',
        'competitor' => 'getCompetitor',
        'contacts' => 'getContacts',
        'converted_on_date' => 'getConvertedOnDate',
        'created_date' => 'getCreatedDate',
        'currency_id' => 'getCurrencyId',
        'custom_attributes' => 'getCustomAttributes',
        'customer' => 'getCustomer',
        'customer_allow_dropshipping_order_creation' => 'getCustomerAllowDropshippingOrderCreation',
        'customer_amount_insured' => 'getCustomerAmountInsured',
        'customer_annual_revenue' => 'getCustomerAnnualRevenue',
        'customer_block_notice' => 'getCustomerBlockNotice',
        'customer_blocked' => 'getCustomerBlocked',
        'customer_business_type' => 'getCustomerBusinessType',
        'customer_category_id' => 'getCustomerCategoryId',
        'customer_credit_limit' => 'getCustomerCreditLimit',
        'customer_current_sales_stage_id' => 'getCustomerCurrentSalesStageId',
        'customer_debtor_account_id' => 'getCustomerDebtorAccountId',
        'customer_debtor_accounting_code_id' => 'getCustomerDebtorAccountingCodeId',
        'customer_default_header_discount' => 'getCustomerDefaultHeaderDiscount',
        'customer_default_header_surcharge' => 'getCustomerDefaultHeaderSurcharge',
        'customer_default_shipping_carrier_id' => 'getCustomerDefaultShippingCarrierId',
        'customer_delivery_block' => 'getCustomerDeliveryBlock',
        'customer_insolvent' => 'getCustomerInsolvent',
        'customer_insured' => 'getCustomerInsured',
        'customer_internal_note' => 'getCustomerInternalNote',
        'customer_loss_description' => 'getCustomerLossDescription',
        'customer_loss_reason_id' => 'getCustomerLossReasonId',
        'customer_non_standard_tax_id' => 'getCustomerNonStandardTaxId',
        'customer_number' => 'getCustomerNumber',
        'customer_number_old' => 'getCustomerNumberOld',
        'customer_payment_method_id' => 'getCustomerPaymentMethodId',
        'customer_sales_channel' => 'getCustomerSalesChannel',
        'customer_sales_order_payment_type' => 'getCustomerSalesOrderPaymentType',
        'customer_sales_probability' => 'getCustomerSalesProbability',
        'customer_sales_stage_history' => 'getCustomerSalesStageHistory',
        'customer_satisfaction' => 'getCustomerSatisfaction',
        'customer_shipment_method_id' => 'getCustomerShipmentMethodId',
        'customer_supplier_number' => 'getCustomerSupplierNumber',
        'customer_term_of_payment_id' => 'getCustomerTermOfPaymentId',
        'customer_use_customs_tariff_number' => 'getCustomerUseCustomsTariffNumber',
        'delivery_address_id' => 'getDeliveryAddressId',
        'delivery_email_addresses_id' => 'getDeliveryEmailAddressesId',
        'description' => 'getDescription',
        'dunning_address_id' => 'getDunningAddressId',
        'dunning_email_addresses_id' => 'getDunningEmailAddressesId',
        'email' => 'getEmail',
        'enable_dropshipping_in_new_supply_sources' => 'getEnableDropshippingInNewSupplySources',
        'eori_number' => 'getEoriNumber',
        'factoring' => 'getFactoring',
        'fax' => 'getFax',
        'first_name' => 'getFirstName',
        'fix_phone2' => 'getFixPhone2',
        'fixed_responsible_user' => 'getFixedResponsibleUser',
        'former_sales_partner' => 'getFormerSalesPartner',
        'habitual_exporter' => 'getHabitualExporter',
        'image_id' => 'getImageId',
        'invoice_address_id' => 'getInvoiceAddressId',
        'invoice_block' => 'getInvoiceBlock',
        'invoice_recipient_id' => 'getInvoiceRecipientId',
        'last_modified_date' => 'getLastModifiedDate',
        'last_name' => 'getLastName',
        'lead_rating_id' => 'getLeadRatingId',
        'lead_source_id' => 'getLeadSourceId',
        'lead_status' => 'getLeadStatus',
        'legal_form_id' => 'getLegalFormId',
        'middle_name' => 'getMiddleName',
        'mobile_phone1' => 'getMobilePhone1',
        'mobile_phone2' => 'getMobilePhone2',
        'online_accounts' => 'getOnlineAccounts',
        'opt_in_email' => 'getOptInEmail',
        'opt_in_letter' => 'getOptInLetter',
        'opt_in_phone' => 'getOptInPhone',
        'opt_in_sms' => 'getOptInSms',
        'parent_party_id' => 'getParentPartyId',
        'party_email_addresses' => 'getPartyEmailAddresses',
        'party_habitual_exporter_letters_of_intent' => 'getPartyHabitualExporterLettersOfIntent',
        'party_type' => 'getPartyType',
        'person_company' => 'getPersonCompany',
        'person_department_id' => 'getPersonDepartmentId',
        'person_role_id' => 'getPersonRoleId',
        'phone' => 'getPhone',
        'phone_home' => 'getPhoneHome',
        'primary_address_id' => 'getPrimaryAddressId',
        'primary_contact_id' => 'getPrimaryContactId',
        'public_page_expiration_date' => 'getPublicPageExpirationDate',
        'public_page_uuid' => 'getPublicPageUuid',
        'purchase_email_addresses_id' => 'getPurchaseEmailAddressesId',
        'purchase_via_plafond' => 'getPurchaseViaPlafond',
        'quotation_email_addresses_id' => 'getQuotationEmailAddressesId',
        'rating_id' => 'getRatingId',
        'reference_number' => 'getReferenceNumber',
        'region_id' => 'getRegionId',
        'responsible_user_id' => 'getResponsibleUserId',
        'sales_invoice_email_addresses_id' => 'getSalesInvoiceEmailAddressesId',
        'sales_order_email_addresses_id' => 'getSalesOrderEmailAddressesId',
        'sales_partner' => 'getSalesPartner',
        'sales_partner_default_commission_fix' => 'getSalesPartnerDefaultCommissionFix',
        'sales_partner_default_commission_percentage' => 'getSalesPartnerDefaultCommissionPercentage',
        'sales_partner_default_commission_type' => 'getSalesPartnerDefaultCommissionType',
        'salutation' => 'getSalutation',
        'sector_id' => 'getSectorId',
        'supplier' => 'getSupplier',
        'supplier_active' => 'getSupplierActive',
        'supplier_creditor_account_id' => 'getSupplierCreditorAccountId',
        'supplier_creditor_accounting_code_id' => 'getSupplierCreditorAccountingCodeId',
        'supplier_customer_number_at_supplier' => 'getSupplierCustomerNumberAtSupplier',
        'supplier_default_shipping_carrier_id' => 'getSupplierDefaultShippingCarrierId',
        'supplier_internal_note' => 'getSupplierInternalNote',
        'supplier_minimum_purchase_order_amount' => 'getSupplierMinimumPurchaseOrderAmount',
        'supplier_non_standard_tax_id' => 'getSupplierNonStandardTaxId',
        'supplier_number' => 'getSupplierNumber',
        'supplier_number_old' => 'getSupplierNumberOld',
        'supplier_order_block' => 'getSupplierOrderBlock',
        'supplier_payment_method_id' => 'getSupplierPaymentMethodId',
        'supplier_shipment_method_id' => 'getSupplierShipmentMethodId',
        'supplier_term_of_payment_id' => 'getSupplierTermOfPaymentId',
        'tags' => 'getTags',
        'tax_id' => 'getTaxId',
        'title_id' => 'getTitleId',
        'topics' => 'getTopics',
        'vat_identification_number' => 'getVatIdentificationNumber',
        'website' => 'getWebsite',
        'x_rechnung_leitweg_id' => 'getXRechnungLeitwegId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CUSTOMER_BUSINESS_TYPE_B2_B = 'B2B';
    public const CUSTOMER_BUSINESS_TYPE_B2_C = 'B2C';
    public const CUSTOMER_BUSINESS_TYPE_B2_G = 'B2G';
    public const CUSTOMER_SALES_ORDER_PAYMENT_TYPE_ADVANCE_PAYMENT = 'ADVANCE_PAYMENT';
    public const CUSTOMER_SALES_ORDER_PAYMENT_TYPE_COUNTER_SALES = 'COUNTER_SALES';
    public const CUSTOMER_SALES_ORDER_PAYMENT_TYPE_PART_PAYMENT = 'PART_PAYMENT';
    public const CUSTOMER_SALES_ORDER_PAYMENT_TYPE_PREPAYMENT = 'PREPAYMENT';
    public const CUSTOMER_SALES_ORDER_PAYMENT_TYPE_STANDARD = 'STANDARD';
    public const CUSTOMER_SATISFACTION_NEUTRAL = 'NEUTRAL';
    public const CUSTOMER_SATISFACTION_SATISFIED = 'SATISFIED';
    public const CUSTOMER_SATISFACTION_UNSATISFIED = 'UNSATISFIED';
    public const LEAD_STATUS_CONVERTED = 'CONVERTED';
    public const LEAD_STATUS_DISQUALIFIED = 'DISQUALIFIED';
    public const LEAD_STATUS__NEW = 'NEW';
    public const LEAD_STATUS_PREQUALIFIED = 'PREQUALIFIED';
    public const LEAD_STATUS_QUALIFIED = 'QUALIFIED';
    public const PARTY_TYPE_ORGANIZATION = 'ORGANIZATION';
    public const PARTY_TYPE_PERSON = 'PERSON';
    public const SALES_PARTNER_DEFAULT_COMMISSION_TYPE_FIX = 'FIX';
    public const SALES_PARTNER_DEFAULT_COMMISSION_TYPE_FIX_AND_MARGIN = 'FIX_AND_MARGIN';
    public const SALES_PARTNER_DEFAULT_COMMISSION_TYPE_FIX_AND_REVENUE = 'FIX_AND_REVENUE';
    public const SALES_PARTNER_DEFAULT_COMMISSION_TYPE_MARGIN = 'MARGIN';
    public const SALES_PARTNER_DEFAULT_COMMISSION_TYPE_NO_COMMISSION = 'NO_COMMISSION';
    public const SALES_PARTNER_DEFAULT_COMMISSION_TYPE_REVENUE = 'REVENUE';
    public const SALUTATION_COMPANY = 'COMPANY';
    public const SALUTATION_FAMILY = 'FAMILY';
    public const SALUTATION_MR = 'MR';
    public const SALUTATION_MRS = 'MRS';
    public const SALUTATION_NO_SALUTATION = 'NO_SALUTATION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerBusinessTypeAllowableValues()
    {
        return [
            self::CUSTOMER_BUSINESS_TYPE_B2_B,
            self::CUSTOMER_BUSINESS_TYPE_B2_C,
            self::CUSTOMER_BUSINESS_TYPE_B2_G,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerSalesOrderPaymentTypeAllowableValues()
    {
        return [
            self::CUSTOMER_SALES_ORDER_PAYMENT_TYPE_ADVANCE_PAYMENT,
            self::CUSTOMER_SALES_ORDER_PAYMENT_TYPE_COUNTER_SALES,
            self::CUSTOMER_SALES_ORDER_PAYMENT_TYPE_PART_PAYMENT,
            self::CUSTOMER_SALES_ORDER_PAYMENT_TYPE_PREPAYMENT,
            self::CUSTOMER_SALES_ORDER_PAYMENT_TYPE_STANDARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerSatisfactionAllowableValues()
    {
        return [
            self::CUSTOMER_SATISFACTION_NEUTRAL,
            self::CUSTOMER_SATISFACTION_SATISFIED,
            self::CUSTOMER_SATISFACTION_UNSATISFIED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeadStatusAllowableValues()
    {
        return [
            self::LEAD_STATUS_CONVERTED,
            self::LEAD_STATUS_DISQUALIFIED,
            self::LEAD_STATUS__NEW,
            self::LEAD_STATUS_PREQUALIFIED,
            self::LEAD_STATUS_QUALIFIED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartyTypeAllowableValues()
    {
        return [
            self::PARTY_TYPE_ORGANIZATION,
            self::PARTY_TYPE_PERSON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalesPartnerDefaultCommissionTypeAllowableValues()
    {
        return [
            self::SALES_PARTNER_DEFAULT_COMMISSION_TYPE_FIX,
            self::SALES_PARTNER_DEFAULT_COMMISSION_TYPE_FIX_AND_MARGIN,
            self::SALES_PARTNER_DEFAULT_COMMISSION_TYPE_FIX_AND_REVENUE,
            self::SALES_PARTNER_DEFAULT_COMMISSION_TYPE_MARGIN,
            self::SALES_PARTNER_DEFAULT_COMMISSION_TYPE_NO_COMMISSION,
            self::SALES_PARTNER_DEFAULT_COMMISSION_TYPE_REVENUE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalutationAllowableValues()
    {
        return [
            self::SALUTATION_COMPANY,
            self::SALUTATION_FAMILY,
            self::SALUTATION_MR,
            self::SALUTATION_MRS,
            self::SALUTATION_NO_SALUTATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('bank_accounts', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('commercial_language_id', $data ?? [], null);
        $this->setIfExists('commission_block', $data ?? [], null);
        $this->setIfExists('commission_sales_partners', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('company2', $data ?? [], null);
        $this->setIfExists('company_size_id', $data ?? [], null);
        $this->setIfExists('competitor', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('converted_on_date', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('customer_allow_dropshipping_order_creation', $data ?? [], null);
        $this->setIfExists('customer_amount_insured', $data ?? [], null);
        $this->setIfExists('customer_annual_revenue', $data ?? [], null);
        $this->setIfExists('customer_block_notice', $data ?? [], null);
        $this->setIfExists('customer_blocked', $data ?? [], null);
        $this->setIfExists('customer_business_type', $data ?? [], null);
        $this->setIfExists('customer_category_id', $data ?? [], null);
        $this->setIfExists('customer_credit_limit', $data ?? [], null);
        $this->setIfExists('customer_current_sales_stage_id', $data ?? [], null);
        $this->setIfExists('customer_debtor_account_id', $data ?? [], null);
        $this->setIfExists('customer_debtor_accounting_code_id', $data ?? [], null);
        $this->setIfExists('customer_default_header_discount', $data ?? [], null);
        $this->setIfExists('customer_default_header_surcharge', $data ?? [], null);
        $this->setIfExists('customer_default_shipping_carrier_id', $data ?? [], null);
        $this->setIfExists('customer_delivery_block', $data ?? [], null);
        $this->setIfExists('customer_insolvent', $data ?? [], null);
        $this->setIfExists('customer_insured', $data ?? [], null);
        $this->setIfExists('customer_internal_note', $data ?? [], null);
        $this->setIfExists('customer_loss_description', $data ?? [], null);
        $this->setIfExists('customer_loss_reason_id', $data ?? [], null);
        $this->setIfExists('customer_non_standard_tax_id', $data ?? [], null);
        $this->setIfExists('customer_number', $data ?? [], null);
        $this->setIfExists('customer_number_old', $data ?? [], null);
        $this->setIfExists('customer_payment_method_id', $data ?? [], null);
        $this->setIfExists('customer_sales_channel', $data ?? [], null);
        $this->setIfExists('customer_sales_order_payment_type', $data ?? [], null);
        $this->setIfExists('customer_sales_probability', $data ?? [], null);
        $this->setIfExists('customer_sales_stage_history', $data ?? [], null);
        $this->setIfExists('customer_satisfaction', $data ?? [], null);
        $this->setIfExists('customer_shipment_method_id', $data ?? [], null);
        $this->setIfExists('customer_supplier_number', $data ?? [], null);
        $this->setIfExists('customer_term_of_payment_id', $data ?? [], null);
        $this->setIfExists('customer_use_customs_tariff_number', $data ?? [], null);
        $this->setIfExists('delivery_address_id', $data ?? [], null);
        $this->setIfExists('delivery_email_addresses_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('dunning_address_id', $data ?? [], null);
        $this->setIfExists('dunning_email_addresses_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('enable_dropshipping_in_new_supply_sources', $data ?? [], null);
        $this->setIfExists('eori_number', $data ?? [], null);
        $this->setIfExists('factoring', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('fix_phone2', $data ?? [], null);
        $this->setIfExists('fixed_responsible_user', $data ?? [], null);
        $this->setIfExists('former_sales_partner', $data ?? [], null);
        $this->setIfExists('habitual_exporter', $data ?? [], null);
        $this->setIfExists('image_id', $data ?? [], null);
        $this->setIfExists('invoice_address_id', $data ?? [], null);
        $this->setIfExists('invoice_block', $data ?? [], null);
        $this->setIfExists('invoice_recipient_id', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('lead_rating_id', $data ?? [], null);
        $this->setIfExists('lead_source_id', $data ?? [], null);
        $this->setIfExists('lead_status', $data ?? [], null);
        $this->setIfExists('legal_form_id', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('mobile_phone1', $data ?? [], null);
        $this->setIfExists('mobile_phone2', $data ?? [], null);
        $this->setIfExists('online_accounts', $data ?? [], null);
        $this->setIfExists('opt_in_email', $data ?? [], null);
        $this->setIfExists('opt_in_letter', $data ?? [], null);
        $this->setIfExists('opt_in_phone', $data ?? [], null);
        $this->setIfExists('opt_in_sms', $data ?? [], null);
        $this->setIfExists('parent_party_id', $data ?? [], null);
        $this->setIfExists('party_email_addresses', $data ?? [], null);
        $this->setIfExists('party_habitual_exporter_letters_of_intent', $data ?? [], null);
        $this->setIfExists('party_type', $data ?? [], null);
        $this->setIfExists('person_company', $data ?? [], null);
        $this->setIfExists('person_department_id', $data ?? [], null);
        $this->setIfExists('person_role_id', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('phone_home', $data ?? [], null);
        $this->setIfExists('primary_address_id', $data ?? [], null);
        $this->setIfExists('primary_contact_id', $data ?? [], null);
        $this->setIfExists('public_page_expiration_date', $data ?? [], null);
        $this->setIfExists('public_page_uuid', $data ?? [], null);
        $this->setIfExists('purchase_email_addresses_id', $data ?? [], null);
        $this->setIfExists('purchase_via_plafond', $data ?? [], null);
        $this->setIfExists('quotation_email_addresses_id', $data ?? [], null);
        $this->setIfExists('rating_id', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('region_id', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('sales_invoice_email_addresses_id', $data ?? [], null);
        $this->setIfExists('sales_order_email_addresses_id', $data ?? [], null);
        $this->setIfExists('sales_partner', $data ?? [], null);
        $this->setIfExists('sales_partner_default_commission_fix', $data ?? [], null);
        $this->setIfExists('sales_partner_default_commission_percentage', $data ?? [], null);
        $this->setIfExists('sales_partner_default_commission_type', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('sector_id', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('supplier_active', $data ?? [], null);
        $this->setIfExists('supplier_creditor_account_id', $data ?? [], null);
        $this->setIfExists('supplier_creditor_accounting_code_id', $data ?? [], null);
        $this->setIfExists('supplier_customer_number_at_supplier', $data ?? [], null);
        $this->setIfExists('supplier_default_shipping_carrier_id', $data ?? [], null);
        $this->setIfExists('supplier_internal_note', $data ?? [], null);
        $this->setIfExists('supplier_minimum_purchase_order_amount', $data ?? [], null);
        $this->setIfExists('supplier_non_standard_tax_id', $data ?? [], null);
        $this->setIfExists('supplier_number', $data ?? [], null);
        $this->setIfExists('supplier_number_old', $data ?? [], null);
        $this->setIfExists('supplier_order_block', $data ?? [], null);
        $this->setIfExists('supplier_payment_method_id', $data ?? [], null);
        $this->setIfExists('supplier_shipment_method_id', $data ?? [], null);
        $this->setIfExists('supplier_term_of_payment_id', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('title_id', $data ?? [], null);
        $this->setIfExists('topics', $data ?? [], null);
        $this->setIfExists('vat_identification_number', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('x_rechnung_leitweg_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCustomerBusinessTypeAllowableValues();
        if (!is_null($this->container['customer_business_type']) && !in_array($this->container['customer_business_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customer_business_type', must be one of '%s'",
                $this->container['customer_business_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomerSalesOrderPaymentTypeAllowableValues();
        if (!is_null($this->container['customer_sales_order_payment_type']) && !in_array($this->container['customer_sales_order_payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customer_sales_order_payment_type', must be one of '%s'",
                $this->container['customer_sales_order_payment_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomerSatisfactionAllowableValues();
        if (!is_null($this->container['customer_satisfaction']) && !in_array($this->container['customer_satisfaction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customer_satisfaction', must be one of '%s'",
                $this->container['customer_satisfaction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeadStatusAllowableValues();
        if (!is_null($this->container['lead_status']) && !in_array($this->container['lead_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lead_status', must be one of '%s'",
                $this->container['lead_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['party_type'] === null) {
            $invalidProperties[] = "'party_type' can't be null";
        }
        $allowedValues = $this->getPartyTypeAllowableValues();
        if (!is_null($this->container['party_type']) && !in_array($this->container['party_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'party_type', must be one of '%s'",
                $this->container['party_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSalesPartnerDefaultCommissionTypeAllowableValues();
        if (!is_null($this->container['sales_partner_default_commission_type']) && !in_array($this->container['sales_partner_default_commission_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sales_partner_default_commission_type', must be one of '%s'",
                $this->container['sales_partner_default_commission_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSalutationAllowableValues();
        if (!is_null($this->container['salutation']) && !in_array($this->container['salutation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'salutation', must be one of '%s'",
                $this->container['salutation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \kruegge82\weclapp\Model\Address[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \kruegge82\weclapp\Model\Address[]|null $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets bank_accounts
     *
     * @return \kruegge82\weclapp\Model\PartyBankAccount[]|null
     */
    public function getBankAccounts()
    {
        return $this->container['bank_accounts'];
    }

    /**
     * Sets bank_accounts
     *
     * @param \kruegge82\weclapp\Model\PartyBankAccount[]|null $bank_accounts bank_accounts
     *
     * @return self
     */
    public function setBankAccounts($bank_accounts)
    {
        if (is_null($bank_accounts)) {
            throw new \InvalidArgumentException('non-nullable bank_accounts cannot be null');
        }
        $this->container['bank_accounts'] = $bank_accounts;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return int|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param int|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets commercial_language_id
     *
     * @return string|null
     */
    public function getCommercialLanguageId()
    {
        return $this->container['commercial_language_id'];
    }

    /**
     * Sets commercial_language_id
     *
     * @param string|null $commercial_language_id commercial_language_id
     *
     * @return self
     */
    public function setCommercialLanguageId($commercial_language_id)
    {
        if (is_null($commercial_language_id)) {
            throw new \InvalidArgumentException('non-nullable commercial_language_id cannot be null');
        }
        $this->container['commercial_language_id'] = $commercial_language_id;

        return $this;
    }

    /**
     * Gets commission_block
     *
     * @return bool|null
     */
    public function getCommissionBlock()
    {
        return $this->container['commission_block'];
    }

    /**
     * Sets commission_block
     *
     * @param bool|null $commission_block commission_block
     *
     * @return self
     */
    public function setCommissionBlock($commission_block)
    {
        if (is_null($commission_block)) {
            throw new \InvalidArgumentException('non-nullable commission_block cannot be null');
        }
        $this->container['commission_block'] = $commission_block;

        return $this;
    }

    /**
     * Gets commission_sales_partners
     *
     * @return \kruegge82\weclapp\Model\CommissionSalesPartner[]|null
     */
    public function getCommissionSalesPartners()
    {
        return $this->container['commission_sales_partners'];
    }

    /**
     * Sets commission_sales_partners
     *
     * @param \kruegge82\weclapp\Model\CommissionSalesPartner[]|null $commission_sales_partners commission_sales_partners
     *
     * @return self
     */
    public function setCommissionSalesPartners($commission_sales_partners)
    {
        if (is_null($commission_sales_partners)) {
            throw new \InvalidArgumentException('non-nullable commission_sales_partners cannot be null');
        }
        $this->container['commission_sales_partners'] = $commission_sales_partners;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets company2
     *
     * @return string|null
     */
    public function getCompany2()
    {
        return $this->container['company2'];
    }

    /**
     * Sets company2
     *
     * @param string|null $company2 company2
     *
     * @return self
     */
    public function setCompany2($company2)
    {
        if (is_null($company2)) {
            throw new \InvalidArgumentException('non-nullable company2 cannot be null');
        }
        $this->container['company2'] = $company2;

        return $this;
    }

    /**
     * Gets company_size_id
     *
     * @return string|null
     */
    public function getCompanySizeId()
    {
        return $this->container['company_size_id'];
    }

    /**
     * Sets company_size_id
     *
     * @param string|null $company_size_id company_size_id
     *
     * @return self
     */
    public function setCompanySizeId($company_size_id)
    {
        if (is_null($company_size_id)) {
            throw new \InvalidArgumentException('non-nullable company_size_id cannot be null');
        }
        $this->container['company_size_id'] = $company_size_id;

        return $this;
    }

    /**
     * Gets competitor
     *
     * @return bool|null
     */
    public function getCompetitor()
    {
        return $this->container['competitor'];
    }

    /**
     * Sets competitor
     *
     * @param bool|null $competitor competitor
     *
     * @return self
     */
    public function setCompetitor($competitor)
    {
        if (is_null($competitor)) {
            throw new \InvalidArgumentException('non-nullable competitor cannot be null');
        }
        $this->container['competitor'] = $competitor;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets converted_on_date
     *
     * @return int|null
     */
    public function getConvertedOnDate()
    {
        return $this->container['converted_on_date'];
    }

    /**
     * Sets converted_on_date
     *
     * @param int|null $converted_on_date converted_on_date
     *
     * @return self
     */
    public function setConvertedOnDate($converted_on_date)
    {
        if (is_null($converted_on_date)) {
            throw new \InvalidArgumentException('non-nullable converted_on_date cannot be null');
        }
        $this->container['converted_on_date'] = $converted_on_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            throw new \InvalidArgumentException('non-nullable currency_id cannot be null');
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return bool|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param bool|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_allow_dropshipping_order_creation
     *
     * @return bool|null
     */
    public function getCustomerAllowDropshippingOrderCreation()
    {
        return $this->container['customer_allow_dropshipping_order_creation'];
    }

    /**
     * Sets customer_allow_dropshipping_order_creation
     *
     * @param bool|null $customer_allow_dropshipping_order_creation customer_allow_dropshipping_order_creation
     *
     * @return self
     */
    public function setCustomerAllowDropshippingOrderCreation($customer_allow_dropshipping_order_creation)
    {
        if (is_null($customer_allow_dropshipping_order_creation)) {
            throw new \InvalidArgumentException('non-nullable customer_allow_dropshipping_order_creation cannot be null');
        }
        $this->container['customer_allow_dropshipping_order_creation'] = $customer_allow_dropshipping_order_creation;

        return $this;
    }

    /**
     * Gets customer_amount_insured
     *
     * @return float|null
     */
    public function getCustomerAmountInsured()
    {
        return $this->container['customer_amount_insured'];
    }

    /**
     * Sets customer_amount_insured
     *
     * @param float|null $customer_amount_insured customer_amount_insured
     *
     * @return self
     */
    public function setCustomerAmountInsured($customer_amount_insured)
    {
        if (is_null($customer_amount_insured)) {
            throw new \InvalidArgumentException('non-nullable customer_amount_insured cannot be null');
        }
        $this->container['customer_amount_insured'] = $customer_amount_insured;

        return $this;
    }

    /**
     * Gets customer_annual_revenue
     *
     * @return float|null
     */
    public function getCustomerAnnualRevenue()
    {
        return $this->container['customer_annual_revenue'];
    }

    /**
     * Sets customer_annual_revenue
     *
     * @param float|null $customer_annual_revenue customer_annual_revenue
     *
     * @return self
     */
    public function setCustomerAnnualRevenue($customer_annual_revenue)
    {
        if (is_null($customer_annual_revenue)) {
            throw new \InvalidArgumentException('non-nullable customer_annual_revenue cannot be null');
        }
        $this->container['customer_annual_revenue'] = $customer_annual_revenue;

        return $this;
    }

    /**
     * Gets customer_block_notice
     *
     * @return string|null
     */
    public function getCustomerBlockNotice()
    {
        return $this->container['customer_block_notice'];
    }

    /**
     * Sets customer_block_notice
     *
     * @param string|null $customer_block_notice customer_block_notice
     *
     * @return self
     */
    public function setCustomerBlockNotice($customer_block_notice)
    {
        if (is_null($customer_block_notice)) {
            throw new \InvalidArgumentException('non-nullable customer_block_notice cannot be null');
        }
        $this->container['customer_block_notice'] = $customer_block_notice;

        return $this;
    }

    /**
     * Gets customer_blocked
     *
     * @return bool|null
     */
    public function getCustomerBlocked()
    {
        return $this->container['customer_blocked'];
    }

    /**
     * Sets customer_blocked
     *
     * @param bool|null $customer_blocked customer_blocked
     *
     * @return self
     */
    public function setCustomerBlocked($customer_blocked)
    {
        if (is_null($customer_blocked)) {
            throw new \InvalidArgumentException('non-nullable customer_blocked cannot be null');
        }
        $this->container['customer_blocked'] = $customer_blocked;

        return $this;
    }

    /**
     * Gets customer_business_type
     *
     * @return string|null
     */
    public function getCustomerBusinessType()
    {
        return $this->container['customer_business_type'];
    }

    /**
     * Sets customer_business_type
     *
     * @param string|null $customer_business_type customer_business_type
     *
     * @return self
     */
    public function setCustomerBusinessType($customer_business_type)
    {
        if (is_null($customer_business_type)) {
            throw new \InvalidArgumentException('non-nullable customer_business_type cannot be null');
        }
        $allowedValues = $this->getCustomerBusinessTypeAllowableValues();
        if (!in_array($customer_business_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customer_business_type', must be one of '%s'",
                    $customer_business_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_business_type'] = $customer_business_type;

        return $this;
    }

    /**
     * Gets customer_category_id
     *
     * @return string|null
     */
    public function getCustomerCategoryId()
    {
        return $this->container['customer_category_id'];
    }

    /**
     * Sets customer_category_id
     *
     * @param string|null $customer_category_id customer_category_id
     *
     * @return self
     */
    public function setCustomerCategoryId($customer_category_id)
    {
        if (is_null($customer_category_id)) {
            throw new \InvalidArgumentException('non-nullable customer_category_id cannot be null');
        }
        $this->container['customer_category_id'] = $customer_category_id;

        return $this;
    }

    /**
     * Gets customer_credit_limit
     *
     * @return float|null
     */
    public function getCustomerCreditLimit()
    {
        return $this->container['customer_credit_limit'];
    }

    /**
     * Sets customer_credit_limit
     *
     * @param float|null $customer_credit_limit customer_credit_limit
     *
     * @return self
     */
    public function setCustomerCreditLimit($customer_credit_limit)
    {
        if (is_null($customer_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable customer_credit_limit cannot be null');
        }
        $this->container['customer_credit_limit'] = $customer_credit_limit;

        return $this;
    }

    /**
     * Gets customer_current_sales_stage_id
     *
     * @return string|null
     */
    public function getCustomerCurrentSalesStageId()
    {
        return $this->container['customer_current_sales_stage_id'];
    }

    /**
     * Sets customer_current_sales_stage_id
     *
     * @param string|null $customer_current_sales_stage_id customer_current_sales_stage_id
     *
     * @return self
     */
    public function setCustomerCurrentSalesStageId($customer_current_sales_stage_id)
    {
        if (is_null($customer_current_sales_stage_id)) {
            throw new \InvalidArgumentException('non-nullable customer_current_sales_stage_id cannot be null');
        }
        $this->container['customer_current_sales_stage_id'] = $customer_current_sales_stage_id;

        return $this;
    }

    /**
     * Gets customer_debtor_account_id
     *
     * @return string|null
     */
    public function getCustomerDebtorAccountId()
    {
        return $this->container['customer_debtor_account_id'];
    }

    /**
     * Sets customer_debtor_account_id
     *
     * @param string|null $customer_debtor_account_id customer_debtor_account_id
     *
     * @return self
     */
    public function setCustomerDebtorAccountId($customer_debtor_account_id)
    {
        if (is_null($customer_debtor_account_id)) {
            throw new \InvalidArgumentException('non-nullable customer_debtor_account_id cannot be null');
        }
        $this->container['customer_debtor_account_id'] = $customer_debtor_account_id;

        return $this;
    }

    /**
     * Gets customer_debtor_accounting_code_id
     *
     * @return string|null
     */
    public function getCustomerDebtorAccountingCodeId()
    {
        return $this->container['customer_debtor_accounting_code_id'];
    }

    /**
     * Sets customer_debtor_accounting_code_id
     *
     * @param string|null $customer_debtor_accounting_code_id customer_debtor_accounting_code_id
     *
     * @return self
     */
    public function setCustomerDebtorAccountingCodeId($customer_debtor_accounting_code_id)
    {
        if (is_null($customer_debtor_accounting_code_id)) {
            throw new \InvalidArgumentException('non-nullable customer_debtor_accounting_code_id cannot be null');
        }
        $this->container['customer_debtor_accounting_code_id'] = $customer_debtor_accounting_code_id;

        return $this;
    }

    /**
     * Gets customer_default_header_discount
     *
     * @return float|null
     */
    public function getCustomerDefaultHeaderDiscount()
    {
        return $this->container['customer_default_header_discount'];
    }

    /**
     * Sets customer_default_header_discount
     *
     * @param float|null $customer_default_header_discount customer_default_header_discount
     *
     * @return self
     */
    public function setCustomerDefaultHeaderDiscount($customer_default_header_discount)
    {
        if (is_null($customer_default_header_discount)) {
            throw new \InvalidArgumentException('non-nullable customer_default_header_discount cannot be null');
        }
        $this->container['customer_default_header_discount'] = $customer_default_header_discount;

        return $this;
    }

    /**
     * Gets customer_default_header_surcharge
     *
     * @return float|null
     */
    public function getCustomerDefaultHeaderSurcharge()
    {
        return $this->container['customer_default_header_surcharge'];
    }

    /**
     * Sets customer_default_header_surcharge
     *
     * @param float|null $customer_default_header_surcharge customer_default_header_surcharge
     *
     * @return self
     */
    public function setCustomerDefaultHeaderSurcharge($customer_default_header_surcharge)
    {
        if (is_null($customer_default_header_surcharge)) {
            throw new \InvalidArgumentException('non-nullable customer_default_header_surcharge cannot be null');
        }
        $this->container['customer_default_header_surcharge'] = $customer_default_header_surcharge;

        return $this;
    }

    /**
     * Gets customer_default_shipping_carrier_id
     *
     * @return string|null
     */
    public function getCustomerDefaultShippingCarrierId()
    {
        return $this->container['customer_default_shipping_carrier_id'];
    }

    /**
     * Sets customer_default_shipping_carrier_id
     *
     * @param string|null $customer_default_shipping_carrier_id customer_default_shipping_carrier_id
     *
     * @return self
     */
    public function setCustomerDefaultShippingCarrierId($customer_default_shipping_carrier_id)
    {
        if (is_null($customer_default_shipping_carrier_id)) {
            throw new \InvalidArgumentException('non-nullable customer_default_shipping_carrier_id cannot be null');
        }
        $this->container['customer_default_shipping_carrier_id'] = $customer_default_shipping_carrier_id;

        return $this;
    }

    /**
     * Gets customer_delivery_block
     *
     * @return bool|null
     */
    public function getCustomerDeliveryBlock()
    {
        return $this->container['customer_delivery_block'];
    }

    /**
     * Sets customer_delivery_block
     *
     * @param bool|null $customer_delivery_block customer_delivery_block
     *
     * @return self
     */
    public function setCustomerDeliveryBlock($customer_delivery_block)
    {
        if (is_null($customer_delivery_block)) {
            throw new \InvalidArgumentException('non-nullable customer_delivery_block cannot be null');
        }
        $this->container['customer_delivery_block'] = $customer_delivery_block;

        return $this;
    }

    /**
     * Gets customer_insolvent
     *
     * @return bool|null
     */
    public function getCustomerInsolvent()
    {
        return $this->container['customer_insolvent'];
    }

    /**
     * Sets customer_insolvent
     *
     * @param bool|null $customer_insolvent customer_insolvent
     *
     * @return self
     */
    public function setCustomerInsolvent($customer_insolvent)
    {
        if (is_null($customer_insolvent)) {
            throw new \InvalidArgumentException('non-nullable customer_insolvent cannot be null');
        }
        $this->container['customer_insolvent'] = $customer_insolvent;

        return $this;
    }

    /**
     * Gets customer_insured
     *
     * @return bool|null
     */
    public function getCustomerInsured()
    {
        return $this->container['customer_insured'];
    }

    /**
     * Sets customer_insured
     *
     * @param bool|null $customer_insured customer_insured
     *
     * @return self
     */
    public function setCustomerInsured($customer_insured)
    {
        if (is_null($customer_insured)) {
            throw new \InvalidArgumentException('non-nullable customer_insured cannot be null');
        }
        $this->container['customer_insured'] = $customer_insured;

        return $this;
    }

    /**
     * Gets customer_internal_note
     *
     * @return string|null
     */
    public function getCustomerInternalNote()
    {
        return $this->container['customer_internal_note'];
    }

    /**
     * Sets customer_internal_note
     *
     * @param string|null $customer_internal_note customer_internal_note
     *
     * @return self
     */
    public function setCustomerInternalNote($customer_internal_note)
    {
        if (is_null($customer_internal_note)) {
            throw new \InvalidArgumentException('non-nullable customer_internal_note cannot be null');
        }
        $this->container['customer_internal_note'] = $customer_internal_note;

        return $this;
    }

    /**
     * Gets customer_loss_description
     *
     * @return string|null
     */
    public function getCustomerLossDescription()
    {
        return $this->container['customer_loss_description'];
    }

    /**
     * Sets customer_loss_description
     *
     * @param string|null $customer_loss_description customer_loss_description
     *
     * @return self
     */
    public function setCustomerLossDescription($customer_loss_description)
    {
        if (is_null($customer_loss_description)) {
            throw new \InvalidArgumentException('non-nullable customer_loss_description cannot be null');
        }
        $this->container['customer_loss_description'] = $customer_loss_description;

        return $this;
    }

    /**
     * Gets customer_loss_reason_id
     *
     * @return string|null
     */
    public function getCustomerLossReasonId()
    {
        return $this->container['customer_loss_reason_id'];
    }

    /**
     * Sets customer_loss_reason_id
     *
     * @param string|null $customer_loss_reason_id customer_loss_reason_id
     *
     * @return self
     */
    public function setCustomerLossReasonId($customer_loss_reason_id)
    {
        if (is_null($customer_loss_reason_id)) {
            throw new \InvalidArgumentException('non-nullable customer_loss_reason_id cannot be null');
        }
        $this->container['customer_loss_reason_id'] = $customer_loss_reason_id;

        return $this;
    }

    /**
     * Gets customer_non_standard_tax_id
     *
     * @return string|null
     */
    public function getCustomerNonStandardTaxId()
    {
        return $this->container['customer_non_standard_tax_id'];
    }

    /**
     * Sets customer_non_standard_tax_id
     *
     * @param string|null $customer_non_standard_tax_id customer_non_standard_tax_id
     *
     * @return self
     */
    public function setCustomerNonStandardTaxId($customer_non_standard_tax_id)
    {
        if (is_null($customer_non_standard_tax_id)) {
            throw new \InvalidArgumentException('non-nullable customer_non_standard_tax_id cannot be null');
        }
        $this->container['customer_non_standard_tax_id'] = $customer_non_standard_tax_id;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string|null $customer_number customer_number
     *
     * @return self
     */
    public function setCustomerNumber($customer_number)
    {
        if (is_null($customer_number)) {
            throw new \InvalidArgumentException('non-nullable customer_number cannot be null');
        }
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets customer_number_old
     *
     * @return string|null
     */
    public function getCustomerNumberOld()
    {
        return $this->container['customer_number_old'];
    }

    /**
     * Sets customer_number_old
     *
     * @param string|null $customer_number_old customer_number_old
     *
     * @return self
     */
    public function setCustomerNumberOld($customer_number_old)
    {
        if (is_null($customer_number_old)) {
            throw new \InvalidArgumentException('non-nullable customer_number_old cannot be null');
        }
        $this->container['customer_number_old'] = $customer_number_old;

        return $this;
    }

    /**
     * Gets customer_payment_method_id
     *
     * @return string|null
     */
    public function getCustomerPaymentMethodId()
    {
        return $this->container['customer_payment_method_id'];
    }

    /**
     * Sets customer_payment_method_id
     *
     * @param string|null $customer_payment_method_id customer_payment_method_id
     *
     * @return self
     */
    public function setCustomerPaymentMethodId($customer_payment_method_id)
    {
        if (is_null($customer_payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable customer_payment_method_id cannot be null');
        }
        $this->container['customer_payment_method_id'] = $customer_payment_method_id;

        return $this;
    }

    /**
     * Gets customer_sales_channel
     *
     * @return string|null
     */
    public function getCustomerSalesChannel()
    {
        return $this->container['customer_sales_channel'];
    }

    /**
     * Sets customer_sales_channel
     *
     * @param string|null $customer_sales_channel customer_sales_channel
     *
     * @return self
     */
    public function setCustomerSalesChannel($customer_sales_channel)
    {
        if (is_null($customer_sales_channel)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_channel cannot be null');
        }
        $this->container['customer_sales_channel'] = $customer_sales_channel;

        return $this;
    }

    /**
     * Gets customer_sales_order_payment_type
     *
     * @return string|null
     */
    public function getCustomerSalesOrderPaymentType()
    {
        return $this->container['customer_sales_order_payment_type'];
    }

    /**
     * Sets customer_sales_order_payment_type
     *
     * @param string|null $customer_sales_order_payment_type customer_sales_order_payment_type
     *
     * @return self
     */
    public function setCustomerSalesOrderPaymentType($customer_sales_order_payment_type)
    {
        if (is_null($customer_sales_order_payment_type)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_order_payment_type cannot be null');
        }
        $allowedValues = $this->getCustomerSalesOrderPaymentTypeAllowableValues();
        if (!in_array($customer_sales_order_payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customer_sales_order_payment_type', must be one of '%s'",
                    $customer_sales_order_payment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_sales_order_payment_type'] = $customer_sales_order_payment_type;

        return $this;
    }

    /**
     * Gets customer_sales_probability
     *
     * @return int|null
     */
    public function getCustomerSalesProbability()
    {
        return $this->container['customer_sales_probability'];
    }

    /**
     * Sets customer_sales_probability
     *
     * @param int|null $customer_sales_probability customer_sales_probability
     *
     * @return self
     */
    public function setCustomerSalesProbability($customer_sales_probability)
    {
        if (is_null($customer_sales_probability)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_probability cannot be null');
        }
        $this->container['customer_sales_probability'] = $customer_sales_probability;

        return $this;
    }

    /**
     * Gets customer_sales_stage_history
     *
     * @return \kruegge82\weclapp\Model\SalesStageHistory[]|null
     */
    public function getCustomerSalesStageHistory()
    {
        return $this->container['customer_sales_stage_history'];
    }

    /**
     * Sets customer_sales_stage_history
     *
     * @param \kruegge82\weclapp\Model\SalesStageHistory[]|null $customer_sales_stage_history customer_sales_stage_history
     *
     * @return self
     */
    public function setCustomerSalesStageHistory($customer_sales_stage_history)
    {
        if (is_null($customer_sales_stage_history)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_stage_history cannot be null');
        }
        $this->container['customer_sales_stage_history'] = $customer_sales_stage_history;

        return $this;
    }

    /**
     * Gets customer_satisfaction
     *
     * @return string|null
     */
    public function getCustomerSatisfaction()
    {
        return $this->container['customer_satisfaction'];
    }

    /**
     * Sets customer_satisfaction
     *
     * @param string|null $customer_satisfaction customer_satisfaction
     *
     * @return self
     */
    public function setCustomerSatisfaction($customer_satisfaction)
    {
        if (is_null($customer_satisfaction)) {
            throw new \InvalidArgumentException('non-nullable customer_satisfaction cannot be null');
        }
        $allowedValues = $this->getCustomerSatisfactionAllowableValues();
        if (!in_array($customer_satisfaction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customer_satisfaction', must be one of '%s'",
                    $customer_satisfaction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_satisfaction'] = $customer_satisfaction;

        return $this;
    }

    /**
     * Gets customer_shipment_method_id
     *
     * @return string|null
     */
    public function getCustomerShipmentMethodId()
    {
        return $this->container['customer_shipment_method_id'];
    }

    /**
     * Sets customer_shipment_method_id
     *
     * @param string|null $customer_shipment_method_id customer_shipment_method_id
     *
     * @return self
     */
    public function setCustomerShipmentMethodId($customer_shipment_method_id)
    {
        if (is_null($customer_shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable customer_shipment_method_id cannot be null');
        }
        $this->container['customer_shipment_method_id'] = $customer_shipment_method_id;

        return $this;
    }

    /**
     * Gets customer_supplier_number
     *
     * @return string|null
     */
    public function getCustomerSupplierNumber()
    {
        return $this->container['customer_supplier_number'];
    }

    /**
     * Sets customer_supplier_number
     *
     * @param string|null $customer_supplier_number customer_supplier_number
     *
     * @return self
     */
    public function setCustomerSupplierNumber($customer_supplier_number)
    {
        if (is_null($customer_supplier_number)) {
            throw new \InvalidArgumentException('non-nullable customer_supplier_number cannot be null');
        }
        $this->container['customer_supplier_number'] = $customer_supplier_number;

        return $this;
    }

    /**
     * Gets customer_term_of_payment_id
     *
     * @return string|null
     */
    public function getCustomerTermOfPaymentId()
    {
        return $this->container['customer_term_of_payment_id'];
    }

    /**
     * Sets customer_term_of_payment_id
     *
     * @param string|null $customer_term_of_payment_id customer_term_of_payment_id
     *
     * @return self
     */
    public function setCustomerTermOfPaymentId($customer_term_of_payment_id)
    {
        if (is_null($customer_term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable customer_term_of_payment_id cannot be null');
        }
        $this->container['customer_term_of_payment_id'] = $customer_term_of_payment_id;

        return $this;
    }

    /**
     * Gets customer_use_customs_tariff_number
     *
     * @return bool|null
     */
    public function getCustomerUseCustomsTariffNumber()
    {
        return $this->container['customer_use_customs_tariff_number'];
    }

    /**
     * Sets customer_use_customs_tariff_number
     *
     * @param bool|null $customer_use_customs_tariff_number customer_use_customs_tariff_number
     *
     * @return self
     */
    public function setCustomerUseCustomsTariffNumber($customer_use_customs_tariff_number)
    {
        if (is_null($customer_use_customs_tariff_number)) {
            throw new \InvalidArgumentException('non-nullable customer_use_customs_tariff_number cannot be null');
        }
        $this->container['customer_use_customs_tariff_number'] = $customer_use_customs_tariff_number;

        return $this;
    }

    /**
     * Gets delivery_address_id
     *
     * @return string|null
     */
    public function getDeliveryAddressId()
    {
        return $this->container['delivery_address_id'];
    }

    /**
     * Sets delivery_address_id
     *
     * @param string|null $delivery_address_id delivery_address_id
     *
     * @return self
     */
    public function setDeliveryAddressId($delivery_address_id)
    {
        if (is_null($delivery_address_id)) {
            throw new \InvalidArgumentException('non-nullable delivery_address_id cannot be null');
        }
        $this->container['delivery_address_id'] = $delivery_address_id;

        return $this;
    }

    /**
     * Gets delivery_email_addresses_id
     *
     * @return string|null
     */
    public function getDeliveryEmailAddressesId()
    {
        return $this->container['delivery_email_addresses_id'];
    }

    /**
     * Sets delivery_email_addresses_id
     *
     * @param string|null $delivery_email_addresses_id delivery_email_addresses_id
     *
     * @return self
     */
    public function setDeliveryEmailAddressesId($delivery_email_addresses_id)
    {
        if (is_null($delivery_email_addresses_id)) {
            throw new \InvalidArgumentException('non-nullable delivery_email_addresses_id cannot be null');
        }
        $this->container['delivery_email_addresses_id'] = $delivery_email_addresses_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dunning_address_id
     *
     * @return string|null
     */
    public function getDunningAddressId()
    {
        return $this->container['dunning_address_id'];
    }

    /**
     * Sets dunning_address_id
     *
     * @param string|null $dunning_address_id dunning_address_id
     *
     * @return self
     */
    public function setDunningAddressId($dunning_address_id)
    {
        if (is_null($dunning_address_id)) {
            throw new \InvalidArgumentException('non-nullable dunning_address_id cannot be null');
        }
        $this->container['dunning_address_id'] = $dunning_address_id;

        return $this;
    }

    /**
     * Gets dunning_email_addresses_id
     *
     * @return string|null
     */
    public function getDunningEmailAddressesId()
    {
        return $this->container['dunning_email_addresses_id'];
    }

    /**
     * Sets dunning_email_addresses_id
     *
     * @param string|null $dunning_email_addresses_id dunning_email_addresses_id
     *
     * @return self
     */
    public function setDunningEmailAddressesId($dunning_email_addresses_id)
    {
        if (is_null($dunning_email_addresses_id)) {
            throw new \InvalidArgumentException('non-nullable dunning_email_addresses_id cannot be null');
        }
        $this->container['dunning_email_addresses_id'] = $dunning_email_addresses_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets enable_dropshipping_in_new_supply_sources
     *
     * @return bool|null
     */
    public function getEnableDropshippingInNewSupplySources()
    {
        return $this->container['enable_dropshipping_in_new_supply_sources'];
    }

    /**
     * Sets enable_dropshipping_in_new_supply_sources
     *
     * @param bool|null $enable_dropshipping_in_new_supply_sources enable_dropshipping_in_new_supply_sources
     *
     * @return self
     */
    public function setEnableDropshippingInNewSupplySources($enable_dropshipping_in_new_supply_sources)
    {
        if (is_null($enable_dropshipping_in_new_supply_sources)) {
            throw new \InvalidArgumentException('non-nullable enable_dropshipping_in_new_supply_sources cannot be null');
        }
        $this->container['enable_dropshipping_in_new_supply_sources'] = $enable_dropshipping_in_new_supply_sources;

        return $this;
    }

    /**
     * Gets eori_number
     *
     * @return string|null
     */
    public function getEoriNumber()
    {
        return $this->container['eori_number'];
    }

    /**
     * Sets eori_number
     *
     * @param string|null $eori_number eori_number
     *
     * @return self
     */
    public function setEoriNumber($eori_number)
    {
        if (is_null($eori_number)) {
            throw new \InvalidArgumentException('non-nullable eori_number cannot be null');
        }
        $this->container['eori_number'] = $eori_number;

        return $this;
    }

    /**
     * Gets factoring
     *
     * @return bool|null
     */
    public function getFactoring()
    {
        return $this->container['factoring'];
    }

    /**
     * Sets factoring
     *
     * @param bool|null $factoring factoring
     *
     * @return self
     */
    public function setFactoring($factoring)
    {
        if (is_null($factoring)) {
            throw new \InvalidArgumentException('non-nullable factoring cannot be null');
        }
        $this->container['factoring'] = $factoring;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets fix_phone2
     *
     * @return string|null
     */
    public function getFixPhone2()
    {
        return $this->container['fix_phone2'];
    }

    /**
     * Sets fix_phone2
     *
     * @param string|null $fix_phone2 fix_phone2
     *
     * @return self
     */
    public function setFixPhone2($fix_phone2)
    {
        if (is_null($fix_phone2)) {
            throw new \InvalidArgumentException('non-nullable fix_phone2 cannot be null');
        }
        $this->container['fix_phone2'] = $fix_phone2;

        return $this;
    }

    /**
     * Gets fixed_responsible_user
     *
     * @return bool|null
     */
    public function getFixedResponsibleUser()
    {
        return $this->container['fixed_responsible_user'];
    }

    /**
     * Sets fixed_responsible_user
     *
     * @param bool|null $fixed_responsible_user fixed_responsible_user
     *
     * @return self
     */
    public function setFixedResponsibleUser($fixed_responsible_user)
    {
        if (is_null($fixed_responsible_user)) {
            throw new \InvalidArgumentException('non-nullable fixed_responsible_user cannot be null');
        }
        $this->container['fixed_responsible_user'] = $fixed_responsible_user;

        return $this;
    }

    /**
     * Gets former_sales_partner
     *
     * @return bool|null
     */
    public function getFormerSalesPartner()
    {
        return $this->container['former_sales_partner'];
    }

    /**
     * Sets former_sales_partner
     *
     * @param bool|null $former_sales_partner former_sales_partner
     *
     * @return self
     */
    public function setFormerSalesPartner($former_sales_partner)
    {
        if (is_null($former_sales_partner)) {
            throw new \InvalidArgumentException('non-nullable former_sales_partner cannot be null');
        }
        $this->container['former_sales_partner'] = $former_sales_partner;

        return $this;
    }

    /**
     * Gets habitual_exporter
     *
     * @return bool|null
     */
    public function getHabitualExporter()
    {
        return $this->container['habitual_exporter'];
    }

    /**
     * Sets habitual_exporter
     *
     * @param bool|null $habitual_exporter habitual_exporter
     *
     * @return self
     */
    public function setHabitualExporter($habitual_exporter)
    {
        if (is_null($habitual_exporter)) {
            throw new \InvalidArgumentException('non-nullable habitual_exporter cannot be null');
        }
        $this->container['habitual_exporter'] = $habitual_exporter;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string|null
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string|null $image_id image_id
     *
     * @return self
     */
    public function setImageId($image_id)
    {
        if (is_null($image_id)) {
            throw new \InvalidArgumentException('non-nullable image_id cannot be null');
        }
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets invoice_address_id
     *
     * @return string|null
     */
    public function getInvoiceAddressId()
    {
        return $this->container['invoice_address_id'];
    }

    /**
     * Sets invoice_address_id
     *
     * @param string|null $invoice_address_id invoice_address_id
     *
     * @return self
     */
    public function setInvoiceAddressId($invoice_address_id)
    {
        if (is_null($invoice_address_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_address_id cannot be null');
        }
        $this->container['invoice_address_id'] = $invoice_address_id;

        return $this;
    }

    /**
     * Gets invoice_block
     *
     * @return bool|null
     */
    public function getInvoiceBlock()
    {
        return $this->container['invoice_block'];
    }

    /**
     * Sets invoice_block
     *
     * @param bool|null $invoice_block invoice_block
     *
     * @return self
     */
    public function setInvoiceBlock($invoice_block)
    {
        if (is_null($invoice_block)) {
            throw new \InvalidArgumentException('non-nullable invoice_block cannot be null');
        }
        $this->container['invoice_block'] = $invoice_block;

        return $this;
    }

    /**
     * Gets invoice_recipient_id
     *
     * @return string|null
     */
    public function getInvoiceRecipientId()
    {
        return $this->container['invoice_recipient_id'];
    }

    /**
     * Sets invoice_recipient_id
     *
     * @param string|null $invoice_recipient_id invoice_recipient_id
     *
     * @return self
     */
    public function setInvoiceRecipientId($invoice_recipient_id)
    {
        if (is_null($invoice_recipient_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_recipient_id cannot be null');
        }
        $this->container['invoice_recipient_id'] = $invoice_recipient_id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets lead_rating_id
     *
     * @return string|null
     */
    public function getLeadRatingId()
    {
        return $this->container['lead_rating_id'];
    }

    /**
     * Sets lead_rating_id
     *
     * @param string|null $lead_rating_id lead_rating_id
     *
     * @return self
     */
    public function setLeadRatingId($lead_rating_id)
    {
        if (is_null($lead_rating_id)) {
            throw new \InvalidArgumentException('non-nullable lead_rating_id cannot be null');
        }
        $this->container['lead_rating_id'] = $lead_rating_id;

        return $this;
    }

    /**
     * Gets lead_source_id
     *
     * @return string|null
     */
    public function getLeadSourceId()
    {
        return $this->container['lead_source_id'];
    }

    /**
     * Sets lead_source_id
     *
     * @param string|null $lead_source_id lead_source_id
     *
     * @return self
     */
    public function setLeadSourceId($lead_source_id)
    {
        if (is_null($lead_source_id)) {
            throw new \InvalidArgumentException('non-nullable lead_source_id cannot be null');
        }
        $this->container['lead_source_id'] = $lead_source_id;

        return $this;
    }

    /**
     * Gets lead_status
     *
     * @return string|null
     */
    public function getLeadStatus()
    {
        return $this->container['lead_status'];
    }

    /**
     * Sets lead_status
     *
     * @param string|null $lead_status lead_status
     *
     * @return self
     */
    public function setLeadStatus($lead_status)
    {
        if (is_null($lead_status)) {
            throw new \InvalidArgumentException('non-nullable lead_status cannot be null');
        }
        $allowedValues = $this->getLeadStatusAllowableValues();
        if (!in_array($lead_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lead_status', must be one of '%s'",
                    $lead_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lead_status'] = $lead_status;

        return $this;
    }

    /**
     * Gets legal_form_id
     *
     * @return string|null
     */
    public function getLegalFormId()
    {
        return $this->container['legal_form_id'];
    }

    /**
     * Sets legal_form_id
     *
     * @param string|null $legal_form_id legal_form_id
     *
     * @return self
     */
    public function setLegalFormId($legal_form_id)
    {
        if (is_null($legal_form_id)) {
            throw new \InvalidArgumentException('non-nullable legal_form_id cannot be null');
        }
        $this->container['legal_form_id'] = $legal_form_id;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets mobile_phone1
     *
     * @return string|null
     */
    public function getMobilePhone1()
    {
        return $this->container['mobile_phone1'];
    }

    /**
     * Sets mobile_phone1
     *
     * @param string|null $mobile_phone1 mobile_phone1
     *
     * @return self
     */
    public function setMobilePhone1($mobile_phone1)
    {
        if (is_null($mobile_phone1)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone1 cannot be null');
        }
        $this->container['mobile_phone1'] = $mobile_phone1;

        return $this;
    }

    /**
     * Gets mobile_phone2
     *
     * @return string|null
     */
    public function getMobilePhone2()
    {
        return $this->container['mobile_phone2'];
    }

    /**
     * Sets mobile_phone2
     *
     * @param string|null $mobile_phone2 mobile_phone2
     *
     * @return self
     */
    public function setMobilePhone2($mobile_phone2)
    {
        if (is_null($mobile_phone2)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone2 cannot be null');
        }
        $this->container['mobile_phone2'] = $mobile_phone2;

        return $this;
    }

    /**
     * Gets online_accounts
     *
     * @return \kruegge82\weclapp\Model\OnlineAccount[]|null
     */
    public function getOnlineAccounts()
    {
        return $this->container['online_accounts'];
    }

    /**
     * Sets online_accounts
     *
     * @param \kruegge82\weclapp\Model\OnlineAccount[]|null $online_accounts online_accounts
     *
     * @return self
     */
    public function setOnlineAccounts($online_accounts)
    {
        if (is_null($online_accounts)) {
            throw new \InvalidArgumentException('non-nullable online_accounts cannot be null');
        }
        $this->container['online_accounts'] = $online_accounts;

        return $this;
    }

    /**
     * Gets opt_in_email
     *
     * @return bool|null
     */
    public function getOptInEmail()
    {
        return $this->container['opt_in_email'];
    }

    /**
     * Sets opt_in_email
     *
     * @param bool|null $opt_in_email opt_in_email
     *
     * @return self
     */
    public function setOptInEmail($opt_in_email)
    {
        if (is_null($opt_in_email)) {
            throw new \InvalidArgumentException('non-nullable opt_in_email cannot be null');
        }
        $this->container['opt_in_email'] = $opt_in_email;

        return $this;
    }

    /**
     * Gets opt_in_letter
     *
     * @return bool|null
     */
    public function getOptInLetter()
    {
        return $this->container['opt_in_letter'];
    }

    /**
     * Sets opt_in_letter
     *
     * @param bool|null $opt_in_letter opt_in_letter
     *
     * @return self
     */
    public function setOptInLetter($opt_in_letter)
    {
        if (is_null($opt_in_letter)) {
            throw new \InvalidArgumentException('non-nullable opt_in_letter cannot be null');
        }
        $this->container['opt_in_letter'] = $opt_in_letter;

        return $this;
    }

    /**
     * Gets opt_in_phone
     *
     * @return bool|null
     */
    public function getOptInPhone()
    {
        return $this->container['opt_in_phone'];
    }

    /**
     * Sets opt_in_phone
     *
     * @param bool|null $opt_in_phone opt_in_phone
     *
     * @return self
     */
    public function setOptInPhone($opt_in_phone)
    {
        if (is_null($opt_in_phone)) {
            throw new \InvalidArgumentException('non-nullable opt_in_phone cannot be null');
        }
        $this->container['opt_in_phone'] = $opt_in_phone;

        return $this;
    }

    /**
     * Gets opt_in_sms
     *
     * @return bool|null
     */
    public function getOptInSms()
    {
        return $this->container['opt_in_sms'];
    }

    /**
     * Sets opt_in_sms
     *
     * @param bool|null $opt_in_sms opt_in_sms
     *
     * @return self
     */
    public function setOptInSms($opt_in_sms)
    {
        if (is_null($opt_in_sms)) {
            throw new \InvalidArgumentException('non-nullable opt_in_sms cannot be null');
        }
        $this->container['opt_in_sms'] = $opt_in_sms;

        return $this;
    }

    /**
     * Gets parent_party_id
     *
     * @return string|null
     */
    public function getParentPartyId()
    {
        return $this->container['parent_party_id'];
    }

    /**
     * Sets parent_party_id
     *
     * @param string|null $parent_party_id parent_party_id
     *
     * @return self
     */
    public function setParentPartyId($parent_party_id)
    {
        if (is_null($parent_party_id)) {
            throw new \InvalidArgumentException('non-nullable parent_party_id cannot be null');
        }
        $this->container['parent_party_id'] = $parent_party_id;

        return $this;
    }

    /**
     * Gets party_email_addresses
     *
     * @return \kruegge82\weclapp\Model\PartyEmailAddresses[]|null
     */
    public function getPartyEmailAddresses()
    {
        return $this->container['party_email_addresses'];
    }

    /**
     * Sets party_email_addresses
     *
     * @param \kruegge82\weclapp\Model\PartyEmailAddresses[]|null $party_email_addresses party_email_addresses
     *
     * @return self
     */
    public function setPartyEmailAddresses($party_email_addresses)
    {
        if (is_null($party_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable party_email_addresses cannot be null');
        }
        $this->container['party_email_addresses'] = $party_email_addresses;

        return $this;
    }

    /**
     * Gets party_habitual_exporter_letters_of_intent
     *
     * @return \kruegge82\weclapp\Model\PartyHabitualExporterLetterOfIntent[]|null
     */
    public function getPartyHabitualExporterLettersOfIntent()
    {
        return $this->container['party_habitual_exporter_letters_of_intent'];
    }

    /**
     * Sets party_habitual_exporter_letters_of_intent
     *
     * @param \kruegge82\weclapp\Model\PartyHabitualExporterLetterOfIntent[]|null $party_habitual_exporter_letters_of_intent party_habitual_exporter_letters_of_intent
     *
     * @return self
     */
    public function setPartyHabitualExporterLettersOfIntent($party_habitual_exporter_letters_of_intent)
    {
        if (is_null($party_habitual_exporter_letters_of_intent)) {
            throw new \InvalidArgumentException('non-nullable party_habitual_exporter_letters_of_intent cannot be null');
        }
        $this->container['party_habitual_exporter_letters_of_intent'] = $party_habitual_exporter_letters_of_intent;

        return $this;
    }

    /**
     * Gets party_type
     *
     * @return string
     */
    public function getPartyType()
    {
        return $this->container['party_type'];
    }

    /**
     * Sets party_type
     *
     * @param string $party_type party_type
     *
     * @return self
     */
    public function setPartyType($party_type)
    {
        if (is_null($party_type)) {
            throw new \InvalidArgumentException('non-nullable party_type cannot be null');
        }
        $allowedValues = $this->getPartyTypeAllowableValues();
        if (!in_array($party_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'party_type', must be one of '%s'",
                    $party_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['party_type'] = $party_type;

        return $this;
    }

    /**
     * Gets person_company
     *
     * @return string|null
     */
    public function getPersonCompany()
    {
        return $this->container['person_company'];
    }

    /**
     * Sets person_company
     *
     * @param string|null $person_company person_company
     *
     * @return self
     */
    public function setPersonCompany($person_company)
    {
        if (is_null($person_company)) {
            throw new \InvalidArgumentException('non-nullable person_company cannot be null');
        }
        $this->container['person_company'] = $person_company;

        return $this;
    }

    /**
     * Gets person_department_id
     *
     * @return string|null
     */
    public function getPersonDepartmentId()
    {
        return $this->container['person_department_id'];
    }

    /**
     * Sets person_department_id
     *
     * @param string|null $person_department_id person_department_id
     *
     * @return self
     */
    public function setPersonDepartmentId($person_department_id)
    {
        if (is_null($person_department_id)) {
            throw new \InvalidArgumentException('non-nullable person_department_id cannot be null');
        }
        $this->container['person_department_id'] = $person_department_id;

        return $this;
    }

    /**
     * Gets person_role_id
     *
     * @return string|null
     */
    public function getPersonRoleId()
    {
        return $this->container['person_role_id'];
    }

    /**
     * Sets person_role_id
     *
     * @param string|null $person_role_id person_role_id
     *
     * @return self
     */
    public function setPersonRoleId($person_role_id)
    {
        if (is_null($person_role_id)) {
            throw new \InvalidArgumentException('non-nullable person_role_id cannot be null');
        }
        $this->container['person_role_id'] = $person_role_id;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_home
     *
     * @return string|null
     */
    public function getPhoneHome()
    {
        return $this->container['phone_home'];
    }

    /**
     * Sets phone_home
     *
     * @param string|null $phone_home phone_home
     *
     * @return self
     */
    public function setPhoneHome($phone_home)
    {
        if (is_null($phone_home)) {
            throw new \InvalidArgumentException('non-nullable phone_home cannot be null');
        }
        $this->container['phone_home'] = $phone_home;

        return $this;
    }

    /**
     * Gets primary_address_id
     *
     * @return string|null
     */
    public function getPrimaryAddressId()
    {
        return $this->container['primary_address_id'];
    }

    /**
     * Sets primary_address_id
     *
     * @param string|null $primary_address_id primary_address_id
     *
     * @return self
     */
    public function setPrimaryAddressId($primary_address_id)
    {
        if (is_null($primary_address_id)) {
            throw new \InvalidArgumentException('non-nullable primary_address_id cannot be null');
        }
        $this->container['primary_address_id'] = $primary_address_id;

        return $this;
    }

    /**
     * Gets primary_contact_id
     *
     * @return string|null
     */
    public function getPrimaryContactId()
    {
        return $this->container['primary_contact_id'];
    }

    /**
     * Sets primary_contact_id
     *
     * @param string|null $primary_contact_id primary_contact_id
     *
     * @return self
     */
    public function setPrimaryContactId($primary_contact_id)
    {
        if (is_null($primary_contact_id)) {
            throw new \InvalidArgumentException('non-nullable primary_contact_id cannot be null');
        }
        $this->container['primary_contact_id'] = $primary_contact_id;

        return $this;
    }

    /**
     * Gets public_page_expiration_date
     *
     * @return int|null
     */
    public function getPublicPageExpirationDate()
    {
        return $this->container['public_page_expiration_date'];
    }

    /**
     * Sets public_page_expiration_date
     *
     * @param int|null $public_page_expiration_date public_page_expiration_date
     *
     * @return self
     */
    public function setPublicPageExpirationDate($public_page_expiration_date)
    {
        if (is_null($public_page_expiration_date)) {
            throw new \InvalidArgumentException('non-nullable public_page_expiration_date cannot be null');
        }
        $this->container['public_page_expiration_date'] = $public_page_expiration_date;

        return $this;
    }

    /**
     * Gets public_page_uuid
     *
     * @return string|null
     */
    public function getPublicPageUuid()
    {
        return $this->container['public_page_uuid'];
    }

    /**
     * Sets public_page_uuid
     *
     * @param string|null $public_page_uuid public_page_uuid
     *
     * @return self
     */
    public function setPublicPageUuid($public_page_uuid)
    {
        if (is_null($public_page_uuid)) {
            throw new \InvalidArgumentException('non-nullable public_page_uuid cannot be null');
        }
        $this->container['public_page_uuid'] = $public_page_uuid;

        return $this;
    }

    /**
     * Gets purchase_email_addresses_id
     *
     * @return string|null
     */
    public function getPurchaseEmailAddressesId()
    {
        return $this->container['purchase_email_addresses_id'];
    }

    /**
     * Sets purchase_email_addresses_id
     *
     * @param string|null $purchase_email_addresses_id purchase_email_addresses_id
     *
     * @return self
     */
    public function setPurchaseEmailAddressesId($purchase_email_addresses_id)
    {
        if (is_null($purchase_email_addresses_id)) {
            throw new \InvalidArgumentException('non-nullable purchase_email_addresses_id cannot be null');
        }
        $this->container['purchase_email_addresses_id'] = $purchase_email_addresses_id;

        return $this;
    }

    /**
     * Gets purchase_via_plafond
     *
     * @return bool|null
     */
    public function getPurchaseViaPlafond()
    {
        return $this->container['purchase_via_plafond'];
    }

    /**
     * Sets purchase_via_plafond
     *
     * @param bool|null $purchase_via_plafond purchase_via_plafond
     *
     * @return self
     */
    public function setPurchaseViaPlafond($purchase_via_plafond)
    {
        if (is_null($purchase_via_plafond)) {
            throw new \InvalidArgumentException('non-nullable purchase_via_plafond cannot be null');
        }
        $this->container['purchase_via_plafond'] = $purchase_via_plafond;

        return $this;
    }

    /**
     * Gets quotation_email_addresses_id
     *
     * @return string|null
     */
    public function getQuotationEmailAddressesId()
    {
        return $this->container['quotation_email_addresses_id'];
    }

    /**
     * Sets quotation_email_addresses_id
     *
     * @param string|null $quotation_email_addresses_id quotation_email_addresses_id
     *
     * @return self
     */
    public function setQuotationEmailAddressesId($quotation_email_addresses_id)
    {
        if (is_null($quotation_email_addresses_id)) {
            throw new \InvalidArgumentException('non-nullable quotation_email_addresses_id cannot be null');
        }
        $this->container['quotation_email_addresses_id'] = $quotation_email_addresses_id;

        return $this;
    }

    /**
     * Gets rating_id
     *
     * @return string|null
     */
    public function getRatingId()
    {
        return $this->container['rating_id'];
    }

    /**
     * Sets rating_id
     *
     * @param string|null $rating_id rating_id
     *
     * @return self
     */
    public function setRatingId($rating_id)
    {
        if (is_null($rating_id)) {
            throw new \InvalidArgumentException('non-nullable rating_id cannot be null');
        }
        $this->container['rating_id'] = $rating_id;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number reference_number
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        if (is_null($reference_number)) {
            throw new \InvalidArgumentException('non-nullable reference_number cannot be null');
        }
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string|null
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string|null $region_id region_id
     *
     * @return self
     */
    public function setRegionId($region_id)
    {
        if (is_null($region_id)) {
            throw new \InvalidArgumentException('non-nullable region_id cannot be null');
        }
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets sales_invoice_email_addresses_id
     *
     * @return string|null
     */
    public function getSalesInvoiceEmailAddressesId()
    {
        return $this->container['sales_invoice_email_addresses_id'];
    }

    /**
     * Sets sales_invoice_email_addresses_id
     *
     * @param string|null $sales_invoice_email_addresses_id sales_invoice_email_addresses_id
     *
     * @return self
     */
    public function setSalesInvoiceEmailAddressesId($sales_invoice_email_addresses_id)
    {
        if (is_null($sales_invoice_email_addresses_id)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_email_addresses_id cannot be null');
        }
        $this->container['sales_invoice_email_addresses_id'] = $sales_invoice_email_addresses_id;

        return $this;
    }

    /**
     * Gets sales_order_email_addresses_id
     *
     * @return string|null
     */
    public function getSalesOrderEmailAddressesId()
    {
        return $this->container['sales_order_email_addresses_id'];
    }

    /**
     * Sets sales_order_email_addresses_id
     *
     * @param string|null $sales_order_email_addresses_id sales_order_email_addresses_id
     *
     * @return self
     */
    public function setSalesOrderEmailAddressesId($sales_order_email_addresses_id)
    {
        if (is_null($sales_order_email_addresses_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_email_addresses_id cannot be null');
        }
        $this->container['sales_order_email_addresses_id'] = $sales_order_email_addresses_id;

        return $this;
    }

    /**
     * Gets sales_partner
     *
     * @return bool|null
     */
    public function getSalesPartner()
    {
        return $this->container['sales_partner'];
    }

    /**
     * Sets sales_partner
     *
     * @param bool|null $sales_partner sales_partner
     *
     * @return self
     */
    public function setSalesPartner($sales_partner)
    {
        if (is_null($sales_partner)) {
            throw new \InvalidArgumentException('non-nullable sales_partner cannot be null');
        }
        $this->container['sales_partner'] = $sales_partner;

        return $this;
    }

    /**
     * Gets sales_partner_default_commission_fix
     *
     * @return float|null
     */
    public function getSalesPartnerDefaultCommissionFix()
    {
        return $this->container['sales_partner_default_commission_fix'];
    }

    /**
     * Sets sales_partner_default_commission_fix
     *
     * @param float|null $sales_partner_default_commission_fix sales_partner_default_commission_fix
     *
     * @return self
     */
    public function setSalesPartnerDefaultCommissionFix($sales_partner_default_commission_fix)
    {
        if (is_null($sales_partner_default_commission_fix)) {
            throw new \InvalidArgumentException('non-nullable sales_partner_default_commission_fix cannot be null');
        }
        $this->container['sales_partner_default_commission_fix'] = $sales_partner_default_commission_fix;

        return $this;
    }

    /**
     * Gets sales_partner_default_commission_percentage
     *
     * @return float|null
     */
    public function getSalesPartnerDefaultCommissionPercentage()
    {
        return $this->container['sales_partner_default_commission_percentage'];
    }

    /**
     * Sets sales_partner_default_commission_percentage
     *
     * @param float|null $sales_partner_default_commission_percentage sales_partner_default_commission_percentage
     *
     * @return self
     */
    public function setSalesPartnerDefaultCommissionPercentage($sales_partner_default_commission_percentage)
    {
        if (is_null($sales_partner_default_commission_percentage)) {
            throw new \InvalidArgumentException('non-nullable sales_partner_default_commission_percentage cannot be null');
        }
        $this->container['sales_partner_default_commission_percentage'] = $sales_partner_default_commission_percentage;

        return $this;
    }

    /**
     * Gets sales_partner_default_commission_type
     *
     * @return string|null
     */
    public function getSalesPartnerDefaultCommissionType()
    {
        return $this->container['sales_partner_default_commission_type'];
    }

    /**
     * Sets sales_partner_default_commission_type
     *
     * @param string|null $sales_partner_default_commission_type sales_partner_default_commission_type
     *
     * @return self
     */
    public function setSalesPartnerDefaultCommissionType($sales_partner_default_commission_type)
    {
        if (is_null($sales_partner_default_commission_type)) {
            throw new \InvalidArgumentException('non-nullable sales_partner_default_commission_type cannot be null');
        }
        $allowedValues = $this->getSalesPartnerDefaultCommissionTypeAllowableValues();
        if (!in_array($sales_partner_default_commission_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sales_partner_default_commission_type', must be one of '%s'",
                    $sales_partner_default_commission_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sales_partner_default_commission_type'] = $sales_partner_default_commission_type;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation salutation
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            throw new \InvalidArgumentException('non-nullable salutation cannot be null');
        }
        $allowedValues = $this->getSalutationAllowableValues();
        if (!in_array($salutation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'salutation', must be one of '%s'",
                    $salutation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets sector_id
     *
     * @return string|null
     */
    public function getSectorId()
    {
        return $this->container['sector_id'];
    }

    /**
     * Sets sector_id
     *
     * @param string|null $sector_id sector_id
     *
     * @return self
     */
    public function setSectorId($sector_id)
    {
        if (is_null($sector_id)) {
            throw new \InvalidArgumentException('non-nullable sector_id cannot be null');
        }
        $this->container['sector_id'] = $sector_id;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return bool|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param bool|null $supplier supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            throw new \InvalidArgumentException('non-nullable supplier cannot be null');
        }
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets supplier_active
     *
     * @return bool|null
     */
    public function getSupplierActive()
    {
        return $this->container['supplier_active'];
    }

    /**
     * Sets supplier_active
     *
     * @param bool|null $supplier_active supplier_active
     *
     * @return self
     */
    public function setSupplierActive($supplier_active)
    {
        if (is_null($supplier_active)) {
            throw new \InvalidArgumentException('non-nullable supplier_active cannot be null');
        }
        $this->container['supplier_active'] = $supplier_active;

        return $this;
    }

    /**
     * Gets supplier_creditor_account_id
     *
     * @return string|null
     */
    public function getSupplierCreditorAccountId()
    {
        return $this->container['supplier_creditor_account_id'];
    }

    /**
     * Sets supplier_creditor_account_id
     *
     * @param string|null $supplier_creditor_account_id supplier_creditor_account_id
     *
     * @return self
     */
    public function setSupplierCreditorAccountId($supplier_creditor_account_id)
    {
        if (is_null($supplier_creditor_account_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_creditor_account_id cannot be null');
        }
        $this->container['supplier_creditor_account_id'] = $supplier_creditor_account_id;

        return $this;
    }

    /**
     * Gets supplier_creditor_accounting_code_id
     *
     * @return string|null
     */
    public function getSupplierCreditorAccountingCodeId()
    {
        return $this->container['supplier_creditor_accounting_code_id'];
    }

    /**
     * Sets supplier_creditor_accounting_code_id
     *
     * @param string|null $supplier_creditor_accounting_code_id supplier_creditor_accounting_code_id
     *
     * @return self
     */
    public function setSupplierCreditorAccountingCodeId($supplier_creditor_accounting_code_id)
    {
        if (is_null($supplier_creditor_accounting_code_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_creditor_accounting_code_id cannot be null');
        }
        $this->container['supplier_creditor_accounting_code_id'] = $supplier_creditor_accounting_code_id;

        return $this;
    }

    /**
     * Gets supplier_customer_number_at_supplier
     *
     * @return string|null
     */
    public function getSupplierCustomerNumberAtSupplier()
    {
        return $this->container['supplier_customer_number_at_supplier'];
    }

    /**
     * Sets supplier_customer_number_at_supplier
     *
     * @param string|null $supplier_customer_number_at_supplier supplier_customer_number_at_supplier
     *
     * @return self
     */
    public function setSupplierCustomerNumberAtSupplier($supplier_customer_number_at_supplier)
    {
        if (is_null($supplier_customer_number_at_supplier)) {
            throw new \InvalidArgumentException('non-nullable supplier_customer_number_at_supplier cannot be null');
        }
        $this->container['supplier_customer_number_at_supplier'] = $supplier_customer_number_at_supplier;

        return $this;
    }

    /**
     * Gets supplier_default_shipping_carrier_id
     *
     * @return string|null
     */
    public function getSupplierDefaultShippingCarrierId()
    {
        return $this->container['supplier_default_shipping_carrier_id'];
    }

    /**
     * Sets supplier_default_shipping_carrier_id
     *
     * @param string|null $supplier_default_shipping_carrier_id supplier_default_shipping_carrier_id
     *
     * @return self
     */
    public function setSupplierDefaultShippingCarrierId($supplier_default_shipping_carrier_id)
    {
        if (is_null($supplier_default_shipping_carrier_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_default_shipping_carrier_id cannot be null');
        }
        $this->container['supplier_default_shipping_carrier_id'] = $supplier_default_shipping_carrier_id;

        return $this;
    }

    /**
     * Gets supplier_internal_note
     *
     * @return string|null
     */
    public function getSupplierInternalNote()
    {
        return $this->container['supplier_internal_note'];
    }

    /**
     * Sets supplier_internal_note
     *
     * @param string|null $supplier_internal_note supplier_internal_note
     *
     * @return self
     */
    public function setSupplierInternalNote($supplier_internal_note)
    {
        if (is_null($supplier_internal_note)) {
            throw new \InvalidArgumentException('non-nullable supplier_internal_note cannot be null');
        }
        $this->container['supplier_internal_note'] = $supplier_internal_note;

        return $this;
    }

    /**
     * Gets supplier_minimum_purchase_order_amount
     *
     * @return float|null
     */
    public function getSupplierMinimumPurchaseOrderAmount()
    {
        return $this->container['supplier_minimum_purchase_order_amount'];
    }

    /**
     * Sets supplier_minimum_purchase_order_amount
     *
     * @param float|null $supplier_minimum_purchase_order_amount supplier_minimum_purchase_order_amount
     *
     * @return self
     */
    public function setSupplierMinimumPurchaseOrderAmount($supplier_minimum_purchase_order_amount)
    {
        if (is_null($supplier_minimum_purchase_order_amount)) {
            throw new \InvalidArgumentException('non-nullable supplier_minimum_purchase_order_amount cannot be null');
        }
        $this->container['supplier_minimum_purchase_order_amount'] = $supplier_minimum_purchase_order_amount;

        return $this;
    }

    /**
     * Gets supplier_non_standard_tax_id
     *
     * @return string|null
     */
    public function getSupplierNonStandardTaxId()
    {
        return $this->container['supplier_non_standard_tax_id'];
    }

    /**
     * Sets supplier_non_standard_tax_id
     *
     * @param string|null $supplier_non_standard_tax_id supplier_non_standard_tax_id
     *
     * @return self
     */
    public function setSupplierNonStandardTaxId($supplier_non_standard_tax_id)
    {
        if (is_null($supplier_non_standard_tax_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_non_standard_tax_id cannot be null');
        }
        $this->container['supplier_non_standard_tax_id'] = $supplier_non_standard_tax_id;

        return $this;
    }

    /**
     * Gets supplier_number
     *
     * @return string|null
     */
    public function getSupplierNumber()
    {
        return $this->container['supplier_number'];
    }

    /**
     * Sets supplier_number
     *
     * @param string|null $supplier_number supplier_number
     *
     * @return self
     */
    public function setSupplierNumber($supplier_number)
    {
        if (is_null($supplier_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_number cannot be null');
        }
        $this->container['supplier_number'] = $supplier_number;

        return $this;
    }

    /**
     * Gets supplier_number_old
     *
     * @return string|null
     */
    public function getSupplierNumberOld()
    {
        return $this->container['supplier_number_old'];
    }

    /**
     * Sets supplier_number_old
     *
     * @param string|null $supplier_number_old supplier_number_old
     *
     * @return self
     */
    public function setSupplierNumberOld($supplier_number_old)
    {
        if (is_null($supplier_number_old)) {
            throw new \InvalidArgumentException('non-nullable supplier_number_old cannot be null');
        }
        $this->container['supplier_number_old'] = $supplier_number_old;

        return $this;
    }

    /**
     * Gets supplier_order_block
     *
     * @return bool|null
     */
    public function getSupplierOrderBlock()
    {
        return $this->container['supplier_order_block'];
    }

    /**
     * Sets supplier_order_block
     *
     * @param bool|null $supplier_order_block supplier_order_block
     *
     * @return self
     */
    public function setSupplierOrderBlock($supplier_order_block)
    {
        if (is_null($supplier_order_block)) {
            throw new \InvalidArgumentException('non-nullable supplier_order_block cannot be null');
        }
        $this->container['supplier_order_block'] = $supplier_order_block;

        return $this;
    }

    /**
     * Gets supplier_payment_method_id
     *
     * @return string|null
     */
    public function getSupplierPaymentMethodId()
    {
        return $this->container['supplier_payment_method_id'];
    }

    /**
     * Sets supplier_payment_method_id
     *
     * @param string|null $supplier_payment_method_id supplier_payment_method_id
     *
     * @return self
     */
    public function setSupplierPaymentMethodId($supplier_payment_method_id)
    {
        if (is_null($supplier_payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_payment_method_id cannot be null');
        }
        $this->container['supplier_payment_method_id'] = $supplier_payment_method_id;

        return $this;
    }

    /**
     * Gets supplier_shipment_method_id
     *
     * @return string|null
     */
    public function getSupplierShipmentMethodId()
    {
        return $this->container['supplier_shipment_method_id'];
    }

    /**
     * Sets supplier_shipment_method_id
     *
     * @param string|null $supplier_shipment_method_id supplier_shipment_method_id
     *
     * @return self
     */
    public function setSupplierShipmentMethodId($supplier_shipment_method_id)
    {
        if (is_null($supplier_shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_shipment_method_id cannot be null');
        }
        $this->container['supplier_shipment_method_id'] = $supplier_shipment_method_id;

        return $this;
    }

    /**
     * Gets supplier_term_of_payment_id
     *
     * @return string|null
     */
    public function getSupplierTermOfPaymentId()
    {
        return $this->container['supplier_term_of_payment_id'];
    }

    /**
     * Sets supplier_term_of_payment_id
     *
     * @param string|null $supplier_term_of_payment_id supplier_term_of_payment_id
     *
     * @return self
     */
    public function setSupplierTermOfPaymentId($supplier_term_of_payment_id)
    {
        if (is_null($supplier_term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_term_of_payment_id cannot be null');
        }
        $this->container['supplier_term_of_payment_id'] = $supplier_term_of_payment_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets title_id
     *
     * @return string|null
     */
    public function getTitleId()
    {
        return $this->container['title_id'];
    }

    /**
     * Sets title_id
     *
     * @param string|null $title_id title_id
     *
     * @return self
     */
    public function setTitleId($title_id)
    {
        if (is_null($title_id)) {
            throw new \InvalidArgumentException('non-nullable title_id cannot be null');
        }
        $this->container['title_id'] = $title_id;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getTopics()
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $topics topics
     *
     * @return self
     */
    public function setTopics($topics)
    {
        if (is_null($topics)) {
            throw new \InvalidArgumentException('non-nullable topics cannot be null');
        }
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets vat_identification_number
     *
     * @return string|null
     */
    public function getVatIdentificationNumber()
    {
        return $this->container['vat_identification_number'];
    }

    /**
     * Sets vat_identification_number
     *
     * @param string|null $vat_identification_number vat_identification_number
     *
     * @return self
     */
    public function setVatIdentificationNumber($vat_identification_number)
    {
        if (is_null($vat_identification_number)) {
            throw new \InvalidArgumentException('non-nullable vat_identification_number cannot be null');
        }
        $this->container['vat_identification_number'] = $vat_identification_number;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets x_rechnung_leitweg_id
     *
     * @return string|null
     */
    public function getXRechnungLeitwegId()
    {
        return $this->container['x_rechnung_leitweg_id'];
    }

    /**
     * Sets x_rechnung_leitweg_id
     *
     * @param string|null $x_rechnung_leitweg_id x_rechnung_leitweg_id
     *
     * @return self
     */
    public function setXRechnungLeitwegId($x_rechnung_leitweg_id)
    {
        if (is_null($x_rechnung_leitweg_id)) {
            throw new \InvalidArgumentException('non-nullable x_rechnung_leitweg_id cannot be null');
        }
        $this->container['x_rechnung_leitweg_id'] = $x_rechnung_leitweg_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


