<?php
/**
 * ArticleSupplySource
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * ArticleSupplySource Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ArticleSupplySource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'articleSupplySource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'article_number' => 'string',
        'article_prices' => '\kruegge82\weclapp\Model\ArticlePriceWithoutSalesChannel[]',
        'created_date' => 'int',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'description' => 'string',
        'dropshipping_possible' => 'bool',
        'ean' => 'string',
        'fixed_purchase_quantity' => 'float',
        'ignore_in_dropshipping_automation' => 'bool',
        'internal_note' => 'string',
        'last_modified_date' => 'int',
        'manufacturer_part_number' => 'string',
        'match_code' => 'string',
        'minimum_purchase_quantity' => 'float',
        'name' => 'string',
        'procurement_lead_days' => 'int',
        'short_description1' => 'string',
        'short_description2' => 'string',
        'supplier_id' => 'string',
        'supplier_stock_quantity' => 'float',
        'tax_rate_type' => 'string',
        'unit_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'article_number' => null,
        'article_prices' => null,
        'created_date' => 'timestamp',
        'custom_attributes' => null,
        'description' => null,
        'dropshipping_possible' => null,
        'ean' => null,
        'fixed_purchase_quantity' => 'number',
        'ignore_in_dropshipping_automation' => null,
        'internal_note' => null,
        'last_modified_date' => 'timestamp',
        'manufacturer_part_number' => null,
        'match_code' => null,
        'minimum_purchase_quantity' => 'number',
        'name' => null,
        'procurement_lead_days' => 'int32',
        'short_description1' => null,
        'short_description2' => null,
        'supplier_id' => null,
        'supplier_stock_quantity' => 'number',
        'tax_rate_type' => null,
        'unit_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'article_number' => false,
        'article_prices' => false,
        'created_date' => false,
        'custom_attributes' => false,
        'description' => false,
        'dropshipping_possible' => false,
        'ean' => false,
        'fixed_purchase_quantity' => false,
        'ignore_in_dropshipping_automation' => false,
        'internal_note' => false,
        'last_modified_date' => false,
        'manufacturer_part_number' => false,
        'match_code' => false,
        'minimum_purchase_quantity' => false,
        'name' => false,
        'procurement_lead_days' => false,
        'short_description1' => false,
        'short_description2' => false,
        'supplier_id' => false,
        'supplier_stock_quantity' => false,
        'tax_rate_type' => false,
        'unit_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'article_number' => 'articleNumber',
        'article_prices' => 'articlePrices',
        'created_date' => 'createdDate',
        'custom_attributes' => 'customAttributes',
        'description' => 'description',
        'dropshipping_possible' => 'dropshippingPossible',
        'ean' => 'ean',
        'fixed_purchase_quantity' => 'fixedPurchaseQuantity',
        'ignore_in_dropshipping_automation' => 'ignoreInDropshippingAutomation',
        'internal_note' => 'internalNote',
        'last_modified_date' => 'lastModifiedDate',
        'manufacturer_part_number' => 'manufacturerPartNumber',
        'match_code' => 'matchCode',
        'minimum_purchase_quantity' => 'minimumPurchaseQuantity',
        'name' => 'name',
        'procurement_lead_days' => 'procurementLeadDays',
        'short_description1' => 'shortDescription1',
        'short_description2' => 'shortDescription2',
        'supplier_id' => 'supplierId',
        'supplier_stock_quantity' => 'supplierStockQuantity',
        'tax_rate_type' => 'taxRateType',
        'unit_id' => 'unitId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'article_number' => 'setArticleNumber',
        'article_prices' => 'setArticlePrices',
        'created_date' => 'setCreatedDate',
        'custom_attributes' => 'setCustomAttributes',
        'description' => 'setDescription',
        'dropshipping_possible' => 'setDropshippingPossible',
        'ean' => 'setEan',
        'fixed_purchase_quantity' => 'setFixedPurchaseQuantity',
        'ignore_in_dropshipping_automation' => 'setIgnoreInDropshippingAutomation',
        'internal_note' => 'setInternalNote',
        'last_modified_date' => 'setLastModifiedDate',
        'manufacturer_part_number' => 'setManufacturerPartNumber',
        'match_code' => 'setMatchCode',
        'minimum_purchase_quantity' => 'setMinimumPurchaseQuantity',
        'name' => 'setName',
        'procurement_lead_days' => 'setProcurementLeadDays',
        'short_description1' => 'setShortDescription1',
        'short_description2' => 'setShortDescription2',
        'supplier_id' => 'setSupplierId',
        'supplier_stock_quantity' => 'setSupplierStockQuantity',
        'tax_rate_type' => 'setTaxRateType',
        'unit_id' => 'setUnitId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'article_number' => 'getArticleNumber',
        'article_prices' => 'getArticlePrices',
        'created_date' => 'getCreatedDate',
        'custom_attributes' => 'getCustomAttributes',
        'description' => 'getDescription',
        'dropshipping_possible' => 'getDropshippingPossible',
        'ean' => 'getEan',
        'fixed_purchase_quantity' => 'getFixedPurchaseQuantity',
        'ignore_in_dropshipping_automation' => 'getIgnoreInDropshippingAutomation',
        'internal_note' => 'getInternalNote',
        'last_modified_date' => 'getLastModifiedDate',
        'manufacturer_part_number' => 'getManufacturerPartNumber',
        'match_code' => 'getMatchCode',
        'minimum_purchase_quantity' => 'getMinimumPurchaseQuantity',
        'name' => 'getName',
        'procurement_lead_days' => 'getProcurementLeadDays',
        'short_description1' => 'getShortDescription1',
        'short_description2' => 'getShortDescription2',
        'supplier_id' => 'getSupplierId',
        'supplier_stock_quantity' => 'getSupplierStockQuantity',
        'tax_rate_type' => 'getTaxRateType',
        'unit_id' => 'getUnitId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TAX_RATE_TYPE_REDUCED = 'REDUCED';
    public const TAX_RATE_TYPE_SLIGHTLY_REDUCED = 'SLIGHTLY_REDUCED';
    public const TAX_RATE_TYPE_STANDARD = 'STANDARD';
    public const TAX_RATE_TYPE_SUPER_REDUCED = 'SUPER_REDUCED';
    public const TAX_RATE_TYPE_ZERO = 'ZERO';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxRateTypeAllowableValues()
    {
        return [
            self::TAX_RATE_TYPE_REDUCED,
            self::TAX_RATE_TYPE_SLIGHTLY_REDUCED,
            self::TAX_RATE_TYPE_STANDARD,
            self::TAX_RATE_TYPE_SUPER_REDUCED,
            self::TAX_RATE_TYPE_ZERO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('article_number', $data ?? [], null);
        $this->setIfExists('article_prices', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('dropshipping_possible', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('fixed_purchase_quantity', $data ?? [], null);
        $this->setIfExists('ignore_in_dropshipping_automation', $data ?? [], null);
        $this->setIfExists('internal_note', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('manufacturer_part_number', $data ?? [], null);
        $this->setIfExists('match_code', $data ?? [], null);
        $this->setIfExists('minimum_purchase_quantity', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('procurement_lead_days', $data ?? [], null);
        $this->setIfExists('short_description1', $data ?? [], null);
        $this->setIfExists('short_description2', $data ?? [], null);
        $this->setIfExists('supplier_id', $data ?? [], null);
        $this->setIfExists('supplier_stock_quantity', $data ?? [], null);
        $this->setIfExists('tax_rate_type', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getTaxRateTypeAllowableValues();
        if (!is_null($this->container['tax_rate_type']) && !in_array($this->container['tax_rate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_rate_type', must be one of '%s'",
                $this->container['tax_rate_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string|null
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string|null $article_number article_number
     *
     * @return self
     */
    public function setArticleNumber($article_number)
    {
        if (is_null($article_number)) {
            throw new \InvalidArgumentException('non-nullable article_number cannot be null');
        }
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets article_prices
     *
     * @return \kruegge82\weclapp\Model\ArticlePriceWithoutSalesChannel[]|null
     */
    public function getArticlePrices()
    {
        return $this->container['article_prices'];
    }

    /**
     * Sets article_prices
     *
     * @param \kruegge82\weclapp\Model\ArticlePriceWithoutSalesChannel[]|null $article_prices article_prices
     *
     * @return self
     */
    public function setArticlePrices($article_prices)
    {
        if (is_null($article_prices)) {
            throw new \InvalidArgumentException('non-nullable article_prices cannot be null');
        }
        $this->container['article_prices'] = $article_prices;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dropshipping_possible
     *
     * @return bool|null
     */
    public function getDropshippingPossible()
    {
        return $this->container['dropshipping_possible'];
    }

    /**
     * Sets dropshipping_possible
     *
     * @param bool|null $dropshipping_possible dropshipping_possible
     *
     * @return self
     */
    public function setDropshippingPossible($dropshipping_possible)
    {
        if (is_null($dropshipping_possible)) {
            throw new \InvalidArgumentException('non-nullable dropshipping_possible cannot be null');
        }
        $this->container['dropshipping_possible'] = $dropshipping_possible;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets fixed_purchase_quantity
     *
     * @return float|null
     */
    public function getFixedPurchaseQuantity()
    {
        return $this->container['fixed_purchase_quantity'];
    }

    /**
     * Sets fixed_purchase_quantity
     *
     * @param float|null $fixed_purchase_quantity fixed_purchase_quantity
     *
     * @return self
     */
    public function setFixedPurchaseQuantity($fixed_purchase_quantity)
    {
        if (is_null($fixed_purchase_quantity)) {
            throw new \InvalidArgumentException('non-nullable fixed_purchase_quantity cannot be null');
        }
        $this->container['fixed_purchase_quantity'] = $fixed_purchase_quantity;

        return $this;
    }

    /**
     * Gets ignore_in_dropshipping_automation
     *
     * @return bool|null
     */
    public function getIgnoreInDropshippingAutomation()
    {
        return $this->container['ignore_in_dropshipping_automation'];
    }

    /**
     * Sets ignore_in_dropshipping_automation
     *
     * @param bool|null $ignore_in_dropshipping_automation ignore_in_dropshipping_automation
     *
     * @return self
     */
    public function setIgnoreInDropshippingAutomation($ignore_in_dropshipping_automation)
    {
        if (is_null($ignore_in_dropshipping_automation)) {
            throw new \InvalidArgumentException('non-nullable ignore_in_dropshipping_automation cannot be null');
        }
        $this->container['ignore_in_dropshipping_automation'] = $ignore_in_dropshipping_automation;

        return $this;
    }

    /**
     * Gets internal_note
     *
     * @return string|null
     */
    public function getInternalNote()
    {
        return $this->container['internal_note'];
    }

    /**
     * Sets internal_note
     *
     * @param string|null $internal_note internal_note
     *
     * @return self
     */
    public function setInternalNote($internal_note)
    {
        if (is_null($internal_note)) {
            throw new \InvalidArgumentException('non-nullable internal_note cannot be null');
        }
        $this->container['internal_note'] = $internal_note;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets manufacturer_part_number
     *
     * @return string|null
     */
    public function getManufacturerPartNumber()
    {
        return $this->container['manufacturer_part_number'];
    }

    /**
     * Sets manufacturer_part_number
     *
     * @param string|null $manufacturer_part_number manufacturer_part_number
     *
     * @return self
     */
    public function setManufacturerPartNumber($manufacturer_part_number)
    {
        if (is_null($manufacturer_part_number)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_part_number cannot be null');
        }
        $this->container['manufacturer_part_number'] = $manufacturer_part_number;

        return $this;
    }

    /**
     * Gets match_code
     *
     * @return string|null
     */
    public function getMatchCode()
    {
        return $this->container['match_code'];
    }

    /**
     * Sets match_code
     *
     * @param string|null $match_code match_code
     *
     * @return self
     */
    public function setMatchCode($match_code)
    {
        if (is_null($match_code)) {
            throw new \InvalidArgumentException('non-nullable match_code cannot be null');
        }
        $this->container['match_code'] = $match_code;

        return $this;
    }

    /**
     * Gets minimum_purchase_quantity
     *
     * @return float|null
     */
    public function getMinimumPurchaseQuantity()
    {
        return $this->container['minimum_purchase_quantity'];
    }

    /**
     * Sets minimum_purchase_quantity
     *
     * @param float|null $minimum_purchase_quantity minimum_purchase_quantity
     *
     * @return self
     */
    public function setMinimumPurchaseQuantity($minimum_purchase_quantity)
    {
        if (is_null($minimum_purchase_quantity)) {
            throw new \InvalidArgumentException('non-nullable minimum_purchase_quantity cannot be null');
        }
        $this->container['minimum_purchase_quantity'] = $minimum_purchase_quantity;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets procurement_lead_days
     *
     * @return int|null
     */
    public function getProcurementLeadDays()
    {
        return $this->container['procurement_lead_days'];
    }

    /**
     * Sets procurement_lead_days
     *
     * @param int|null $procurement_lead_days procurement_lead_days
     *
     * @return self
     */
    public function setProcurementLeadDays($procurement_lead_days)
    {
        if (is_null($procurement_lead_days)) {
            throw new \InvalidArgumentException('non-nullable procurement_lead_days cannot be null');
        }
        $this->container['procurement_lead_days'] = $procurement_lead_days;

        return $this;
    }

    /**
     * Gets short_description1
     *
     * @return string|null
     */
    public function getShortDescription1()
    {
        return $this->container['short_description1'];
    }

    /**
     * Sets short_description1
     *
     * @param string|null $short_description1 short_description1
     *
     * @return self
     */
    public function setShortDescription1($short_description1)
    {
        if (is_null($short_description1)) {
            throw new \InvalidArgumentException('non-nullable short_description1 cannot be null');
        }
        $this->container['short_description1'] = $short_description1;

        return $this;
    }

    /**
     * Gets short_description2
     *
     * @return string|null
     */
    public function getShortDescription2()
    {
        return $this->container['short_description2'];
    }

    /**
     * Sets short_description2
     *
     * @param string|null $short_description2 short_description2
     *
     * @return self
     */
    public function setShortDescription2($short_description2)
    {
        if (is_null($short_description2)) {
            throw new \InvalidArgumentException('non-nullable short_description2 cannot be null');
        }
        $this->container['short_description2'] = $short_description2;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string|null $supplier_id supplier_id
     *
     * @return self
     */
    public function setSupplierId($supplier_id)
    {
        if (is_null($supplier_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_id cannot be null');
        }
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets supplier_stock_quantity
     *
     * @return float|null
     */
    public function getSupplierStockQuantity()
    {
        return $this->container['supplier_stock_quantity'];
    }

    /**
     * Sets supplier_stock_quantity
     *
     * @param float|null $supplier_stock_quantity supplier_stock_quantity
     *
     * @return self
     */
    public function setSupplierStockQuantity($supplier_stock_quantity)
    {
        if (is_null($supplier_stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable supplier_stock_quantity cannot be null');
        }
        $this->container['supplier_stock_quantity'] = $supplier_stock_quantity;

        return $this;
    }

    /**
     * Gets tax_rate_type
     *
     * @return string|null
     */
    public function getTaxRateType()
    {
        return $this->container['tax_rate_type'];
    }

    /**
     * Sets tax_rate_type
     *
     * @param string|null $tax_rate_type tax_rate_type
     *
     * @return self
     */
    public function setTaxRateType($tax_rate_type)
    {
        if (is_null($tax_rate_type)) {
            throw new \InvalidArgumentException('non-nullable tax_rate_type cannot be null');
        }
        $allowedValues = $this->getTaxRateTypeAllowableValues();
        if (!in_array($tax_rate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_rate_type', must be one of '%s'",
                    $tax_rate_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_rate_type'] = $tax_rate_type;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string|null $unit_id unit_id
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            throw new \InvalidArgumentException('non-nullable unit_id cannot be null');
        }
        $this->container['unit_id'] = $unit_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


