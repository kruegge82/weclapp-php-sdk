<?php
/**
 * PartyGet200ResponseAdditionalProperties
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * PartyGet200ResponseAdditionalProperties Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartyGet200ResponseAdditionalProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_party_get_200_response_additionalProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_children_sales_order_volume_current_year' => 'float[]',
        'customer_children_sales_order_volume_previous_year' => 'float[]',
        'customer_children_sales_revenue_current_year' => 'float[]',
        'customer_children_sales_revenue_previous_year' => 'float[]',
        'customer_quotation_acceptance_percentage' => 'float[]',
        'customer_quotation_acceptance_time_in_days' => 'int[]',
        'customer_return_percentage_current_year' => 'float[]',
        'customer_return_percentage_previous_year' => 'float[]',
        'customer_sales_open_item_overdue_sum' => 'float[]',
        'customer_sales_open_item_sum' => 'float[]',
        'customer_sales_order_volume_current_year' => 'float[]',
        'customer_sales_order_volume_previous_year' => 'float[]',
        'customer_sales_revenue_current_year' => 'float[]',
        'customer_sales_revenue_previous_year' => 'float[]',
        'lead_children_expected_revenue_opportunities' => 'float[]',
        'lead_children_expected_revenue_quotations' => 'float[]',
        'lead_children_quotation_volume' => 'float[]',
        'lead_expected_revenue_opportunities' => 'float[]',
        'lead_expected_revenue_quotations' => 'float[]',
        'lead_quotation_volume' => 'float[]',
        'supplier_children_purchase_order_volume_current_year' => 'float[]',
        'supplier_children_purchase_order_volume_previous_year' => 'float[]',
        'supplier_children_purchase_revenue_current_year' => 'float[]',
        'supplier_children_purchase_revenue_previous_year' => 'float[]',
        'supplier_purchase_order_volume_current_year' => 'float[]',
        'supplier_purchase_order_volume_previous_year' => 'float[]',
        'supplier_purchase_revenue_current_year' => 'float[]',
        'supplier_purchase_revenue_previous_year' => 'float[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_children_sales_order_volume_current_year' => 'decimal',
        'customer_children_sales_order_volume_previous_year' => 'decimal',
        'customer_children_sales_revenue_current_year' => 'decimal',
        'customer_children_sales_revenue_previous_year' => 'decimal',
        'customer_quotation_acceptance_percentage' => 'decimal',
        'customer_quotation_acceptance_time_in_days' => 'int64',
        'customer_return_percentage_current_year' => 'decimal',
        'customer_return_percentage_previous_year' => 'decimal',
        'customer_sales_open_item_overdue_sum' => 'decimal',
        'customer_sales_open_item_sum' => 'decimal',
        'customer_sales_order_volume_current_year' => 'decimal',
        'customer_sales_order_volume_previous_year' => 'decimal',
        'customer_sales_revenue_current_year' => 'decimal',
        'customer_sales_revenue_previous_year' => 'decimal',
        'lead_children_expected_revenue_opportunities' => 'decimal',
        'lead_children_expected_revenue_quotations' => 'decimal',
        'lead_children_quotation_volume' => 'decimal',
        'lead_expected_revenue_opportunities' => 'decimal',
        'lead_expected_revenue_quotations' => 'decimal',
        'lead_quotation_volume' => 'decimal',
        'supplier_children_purchase_order_volume_current_year' => 'decimal',
        'supplier_children_purchase_order_volume_previous_year' => 'decimal',
        'supplier_children_purchase_revenue_current_year' => 'decimal',
        'supplier_children_purchase_revenue_previous_year' => 'decimal',
        'supplier_purchase_order_volume_current_year' => 'decimal',
        'supplier_purchase_order_volume_previous_year' => 'decimal',
        'supplier_purchase_revenue_current_year' => 'decimal',
        'supplier_purchase_revenue_previous_year' => 'decimal'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer_children_sales_order_volume_current_year' => false,
        'customer_children_sales_order_volume_previous_year' => false,
        'customer_children_sales_revenue_current_year' => false,
        'customer_children_sales_revenue_previous_year' => false,
        'customer_quotation_acceptance_percentage' => false,
        'customer_quotation_acceptance_time_in_days' => false,
        'customer_return_percentage_current_year' => false,
        'customer_return_percentage_previous_year' => false,
        'customer_sales_open_item_overdue_sum' => false,
        'customer_sales_open_item_sum' => false,
        'customer_sales_order_volume_current_year' => false,
        'customer_sales_order_volume_previous_year' => false,
        'customer_sales_revenue_current_year' => false,
        'customer_sales_revenue_previous_year' => false,
        'lead_children_expected_revenue_opportunities' => false,
        'lead_children_expected_revenue_quotations' => false,
        'lead_children_quotation_volume' => false,
        'lead_expected_revenue_opportunities' => false,
        'lead_expected_revenue_quotations' => false,
        'lead_quotation_volume' => false,
        'supplier_children_purchase_order_volume_current_year' => false,
        'supplier_children_purchase_order_volume_previous_year' => false,
        'supplier_children_purchase_revenue_current_year' => false,
        'supplier_children_purchase_revenue_previous_year' => false,
        'supplier_purchase_order_volume_current_year' => false,
        'supplier_purchase_order_volume_previous_year' => false,
        'supplier_purchase_revenue_current_year' => false,
        'supplier_purchase_revenue_previous_year' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_children_sales_order_volume_current_year' => 'customerChildrenSalesOrderVolumeCurrentYear',
        'customer_children_sales_order_volume_previous_year' => 'customerChildrenSalesOrderVolumePreviousYear',
        'customer_children_sales_revenue_current_year' => 'customerChildrenSalesRevenueCurrentYear',
        'customer_children_sales_revenue_previous_year' => 'customerChildrenSalesRevenuePreviousYear',
        'customer_quotation_acceptance_percentage' => 'customerQuotationAcceptancePercentage',
        'customer_quotation_acceptance_time_in_days' => 'customerQuotationAcceptanceTimeInDays',
        'customer_return_percentage_current_year' => 'customerReturnPercentageCurrentYear',
        'customer_return_percentage_previous_year' => 'customerReturnPercentagePreviousYear',
        'customer_sales_open_item_overdue_sum' => 'customerSalesOpenItemOverdueSum',
        'customer_sales_open_item_sum' => 'customerSalesOpenItemSum',
        'customer_sales_order_volume_current_year' => 'customerSalesOrderVolumeCurrentYear',
        'customer_sales_order_volume_previous_year' => 'customerSalesOrderVolumePreviousYear',
        'customer_sales_revenue_current_year' => 'customerSalesRevenueCurrentYear',
        'customer_sales_revenue_previous_year' => 'customerSalesRevenuePreviousYear',
        'lead_children_expected_revenue_opportunities' => 'leadChildrenExpectedRevenueOpportunities',
        'lead_children_expected_revenue_quotations' => 'leadChildrenExpectedRevenueQuotations',
        'lead_children_quotation_volume' => 'leadChildrenQuotationVolume',
        'lead_expected_revenue_opportunities' => 'leadExpectedRevenueOpportunities',
        'lead_expected_revenue_quotations' => 'leadExpectedRevenueQuotations',
        'lead_quotation_volume' => 'leadQuotationVolume',
        'supplier_children_purchase_order_volume_current_year' => 'supplierChildrenPurchaseOrderVolumeCurrentYear',
        'supplier_children_purchase_order_volume_previous_year' => 'supplierChildrenPurchaseOrderVolumePreviousYear',
        'supplier_children_purchase_revenue_current_year' => 'supplierChildrenPurchaseRevenueCurrentYear',
        'supplier_children_purchase_revenue_previous_year' => 'supplierChildrenPurchaseRevenuePreviousYear',
        'supplier_purchase_order_volume_current_year' => 'supplierPurchaseOrderVolumeCurrentYear',
        'supplier_purchase_order_volume_previous_year' => 'supplierPurchaseOrderVolumePreviousYear',
        'supplier_purchase_revenue_current_year' => 'supplierPurchaseRevenueCurrentYear',
        'supplier_purchase_revenue_previous_year' => 'supplierPurchaseRevenuePreviousYear'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_children_sales_order_volume_current_year' => 'setCustomerChildrenSalesOrderVolumeCurrentYear',
        'customer_children_sales_order_volume_previous_year' => 'setCustomerChildrenSalesOrderVolumePreviousYear',
        'customer_children_sales_revenue_current_year' => 'setCustomerChildrenSalesRevenueCurrentYear',
        'customer_children_sales_revenue_previous_year' => 'setCustomerChildrenSalesRevenuePreviousYear',
        'customer_quotation_acceptance_percentage' => 'setCustomerQuotationAcceptancePercentage',
        'customer_quotation_acceptance_time_in_days' => 'setCustomerQuotationAcceptanceTimeInDays',
        'customer_return_percentage_current_year' => 'setCustomerReturnPercentageCurrentYear',
        'customer_return_percentage_previous_year' => 'setCustomerReturnPercentagePreviousYear',
        'customer_sales_open_item_overdue_sum' => 'setCustomerSalesOpenItemOverdueSum',
        'customer_sales_open_item_sum' => 'setCustomerSalesOpenItemSum',
        'customer_sales_order_volume_current_year' => 'setCustomerSalesOrderVolumeCurrentYear',
        'customer_sales_order_volume_previous_year' => 'setCustomerSalesOrderVolumePreviousYear',
        'customer_sales_revenue_current_year' => 'setCustomerSalesRevenueCurrentYear',
        'customer_sales_revenue_previous_year' => 'setCustomerSalesRevenuePreviousYear',
        'lead_children_expected_revenue_opportunities' => 'setLeadChildrenExpectedRevenueOpportunities',
        'lead_children_expected_revenue_quotations' => 'setLeadChildrenExpectedRevenueQuotations',
        'lead_children_quotation_volume' => 'setLeadChildrenQuotationVolume',
        'lead_expected_revenue_opportunities' => 'setLeadExpectedRevenueOpportunities',
        'lead_expected_revenue_quotations' => 'setLeadExpectedRevenueQuotations',
        'lead_quotation_volume' => 'setLeadQuotationVolume',
        'supplier_children_purchase_order_volume_current_year' => 'setSupplierChildrenPurchaseOrderVolumeCurrentYear',
        'supplier_children_purchase_order_volume_previous_year' => 'setSupplierChildrenPurchaseOrderVolumePreviousYear',
        'supplier_children_purchase_revenue_current_year' => 'setSupplierChildrenPurchaseRevenueCurrentYear',
        'supplier_children_purchase_revenue_previous_year' => 'setSupplierChildrenPurchaseRevenuePreviousYear',
        'supplier_purchase_order_volume_current_year' => 'setSupplierPurchaseOrderVolumeCurrentYear',
        'supplier_purchase_order_volume_previous_year' => 'setSupplierPurchaseOrderVolumePreviousYear',
        'supplier_purchase_revenue_current_year' => 'setSupplierPurchaseRevenueCurrentYear',
        'supplier_purchase_revenue_previous_year' => 'setSupplierPurchaseRevenuePreviousYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_children_sales_order_volume_current_year' => 'getCustomerChildrenSalesOrderVolumeCurrentYear',
        'customer_children_sales_order_volume_previous_year' => 'getCustomerChildrenSalesOrderVolumePreviousYear',
        'customer_children_sales_revenue_current_year' => 'getCustomerChildrenSalesRevenueCurrentYear',
        'customer_children_sales_revenue_previous_year' => 'getCustomerChildrenSalesRevenuePreviousYear',
        'customer_quotation_acceptance_percentage' => 'getCustomerQuotationAcceptancePercentage',
        'customer_quotation_acceptance_time_in_days' => 'getCustomerQuotationAcceptanceTimeInDays',
        'customer_return_percentage_current_year' => 'getCustomerReturnPercentageCurrentYear',
        'customer_return_percentage_previous_year' => 'getCustomerReturnPercentagePreviousYear',
        'customer_sales_open_item_overdue_sum' => 'getCustomerSalesOpenItemOverdueSum',
        'customer_sales_open_item_sum' => 'getCustomerSalesOpenItemSum',
        'customer_sales_order_volume_current_year' => 'getCustomerSalesOrderVolumeCurrentYear',
        'customer_sales_order_volume_previous_year' => 'getCustomerSalesOrderVolumePreviousYear',
        'customer_sales_revenue_current_year' => 'getCustomerSalesRevenueCurrentYear',
        'customer_sales_revenue_previous_year' => 'getCustomerSalesRevenuePreviousYear',
        'lead_children_expected_revenue_opportunities' => 'getLeadChildrenExpectedRevenueOpportunities',
        'lead_children_expected_revenue_quotations' => 'getLeadChildrenExpectedRevenueQuotations',
        'lead_children_quotation_volume' => 'getLeadChildrenQuotationVolume',
        'lead_expected_revenue_opportunities' => 'getLeadExpectedRevenueOpportunities',
        'lead_expected_revenue_quotations' => 'getLeadExpectedRevenueQuotations',
        'lead_quotation_volume' => 'getLeadQuotationVolume',
        'supplier_children_purchase_order_volume_current_year' => 'getSupplierChildrenPurchaseOrderVolumeCurrentYear',
        'supplier_children_purchase_order_volume_previous_year' => 'getSupplierChildrenPurchaseOrderVolumePreviousYear',
        'supplier_children_purchase_revenue_current_year' => 'getSupplierChildrenPurchaseRevenueCurrentYear',
        'supplier_children_purchase_revenue_previous_year' => 'getSupplierChildrenPurchaseRevenuePreviousYear',
        'supplier_purchase_order_volume_current_year' => 'getSupplierPurchaseOrderVolumeCurrentYear',
        'supplier_purchase_order_volume_previous_year' => 'getSupplierPurchaseOrderVolumePreviousYear',
        'supplier_purchase_revenue_current_year' => 'getSupplierPurchaseRevenueCurrentYear',
        'supplier_purchase_revenue_previous_year' => 'getSupplierPurchaseRevenuePreviousYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('customer_children_sales_order_volume_current_year', $data ?? [], null);
        $this->setIfExists('customer_children_sales_order_volume_previous_year', $data ?? [], null);
        $this->setIfExists('customer_children_sales_revenue_current_year', $data ?? [], null);
        $this->setIfExists('customer_children_sales_revenue_previous_year', $data ?? [], null);
        $this->setIfExists('customer_quotation_acceptance_percentage', $data ?? [], null);
        $this->setIfExists('customer_quotation_acceptance_time_in_days', $data ?? [], null);
        $this->setIfExists('customer_return_percentage_current_year', $data ?? [], null);
        $this->setIfExists('customer_return_percentage_previous_year', $data ?? [], null);
        $this->setIfExists('customer_sales_open_item_overdue_sum', $data ?? [], null);
        $this->setIfExists('customer_sales_open_item_sum', $data ?? [], null);
        $this->setIfExists('customer_sales_order_volume_current_year', $data ?? [], null);
        $this->setIfExists('customer_sales_order_volume_previous_year', $data ?? [], null);
        $this->setIfExists('customer_sales_revenue_current_year', $data ?? [], null);
        $this->setIfExists('customer_sales_revenue_previous_year', $data ?? [], null);
        $this->setIfExists('lead_children_expected_revenue_opportunities', $data ?? [], null);
        $this->setIfExists('lead_children_expected_revenue_quotations', $data ?? [], null);
        $this->setIfExists('lead_children_quotation_volume', $data ?? [], null);
        $this->setIfExists('lead_expected_revenue_opportunities', $data ?? [], null);
        $this->setIfExists('lead_expected_revenue_quotations', $data ?? [], null);
        $this->setIfExists('lead_quotation_volume', $data ?? [], null);
        $this->setIfExists('supplier_children_purchase_order_volume_current_year', $data ?? [], null);
        $this->setIfExists('supplier_children_purchase_order_volume_previous_year', $data ?? [], null);
        $this->setIfExists('supplier_children_purchase_revenue_current_year', $data ?? [], null);
        $this->setIfExists('supplier_children_purchase_revenue_previous_year', $data ?? [], null);
        $this->setIfExists('supplier_purchase_order_volume_current_year', $data ?? [], null);
        $this->setIfExists('supplier_purchase_order_volume_previous_year', $data ?? [], null);
        $this->setIfExists('supplier_purchase_revenue_current_year', $data ?? [], null);
        $this->setIfExists('supplier_purchase_revenue_previous_year', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_children_sales_order_volume_current_year
     *
     * @return float[]|null
     */
    public function getCustomerChildrenSalesOrderVolumeCurrentYear()
    {
        return $this->container['customer_children_sales_order_volume_current_year'];
    }

    /**
     * Sets customer_children_sales_order_volume_current_year
     *
     * @param float[]|null $customer_children_sales_order_volume_current_year customer_children_sales_order_volume_current_year
     *
     * @return self
     */
    public function setCustomerChildrenSalesOrderVolumeCurrentYear($customer_children_sales_order_volume_current_year)
    {
        if (is_null($customer_children_sales_order_volume_current_year)) {
            throw new \InvalidArgumentException('non-nullable customer_children_sales_order_volume_current_year cannot be null');
        }
        $this->container['customer_children_sales_order_volume_current_year'] = $customer_children_sales_order_volume_current_year;

        return $this;
    }

    /**
     * Gets customer_children_sales_order_volume_previous_year
     *
     * @return float[]|null
     */
    public function getCustomerChildrenSalesOrderVolumePreviousYear()
    {
        return $this->container['customer_children_sales_order_volume_previous_year'];
    }

    /**
     * Sets customer_children_sales_order_volume_previous_year
     *
     * @param float[]|null $customer_children_sales_order_volume_previous_year customer_children_sales_order_volume_previous_year
     *
     * @return self
     */
    public function setCustomerChildrenSalesOrderVolumePreviousYear($customer_children_sales_order_volume_previous_year)
    {
        if (is_null($customer_children_sales_order_volume_previous_year)) {
            throw new \InvalidArgumentException('non-nullable customer_children_sales_order_volume_previous_year cannot be null');
        }
        $this->container['customer_children_sales_order_volume_previous_year'] = $customer_children_sales_order_volume_previous_year;

        return $this;
    }

    /**
     * Gets customer_children_sales_revenue_current_year
     *
     * @return float[]|null
     */
    public function getCustomerChildrenSalesRevenueCurrentYear()
    {
        return $this->container['customer_children_sales_revenue_current_year'];
    }

    /**
     * Sets customer_children_sales_revenue_current_year
     *
     * @param float[]|null $customer_children_sales_revenue_current_year customer_children_sales_revenue_current_year
     *
     * @return self
     */
    public function setCustomerChildrenSalesRevenueCurrentYear($customer_children_sales_revenue_current_year)
    {
        if (is_null($customer_children_sales_revenue_current_year)) {
            throw new \InvalidArgumentException('non-nullable customer_children_sales_revenue_current_year cannot be null');
        }
        $this->container['customer_children_sales_revenue_current_year'] = $customer_children_sales_revenue_current_year;

        return $this;
    }

    /**
     * Gets customer_children_sales_revenue_previous_year
     *
     * @return float[]|null
     */
    public function getCustomerChildrenSalesRevenuePreviousYear()
    {
        return $this->container['customer_children_sales_revenue_previous_year'];
    }

    /**
     * Sets customer_children_sales_revenue_previous_year
     *
     * @param float[]|null $customer_children_sales_revenue_previous_year customer_children_sales_revenue_previous_year
     *
     * @return self
     */
    public function setCustomerChildrenSalesRevenuePreviousYear($customer_children_sales_revenue_previous_year)
    {
        if (is_null($customer_children_sales_revenue_previous_year)) {
            throw new \InvalidArgumentException('non-nullable customer_children_sales_revenue_previous_year cannot be null');
        }
        $this->container['customer_children_sales_revenue_previous_year'] = $customer_children_sales_revenue_previous_year;

        return $this;
    }

    /**
     * Gets customer_quotation_acceptance_percentage
     *
     * @return float[]|null
     */
    public function getCustomerQuotationAcceptancePercentage()
    {
        return $this->container['customer_quotation_acceptance_percentage'];
    }

    /**
     * Sets customer_quotation_acceptance_percentage
     *
     * @param float[]|null $customer_quotation_acceptance_percentage customer_quotation_acceptance_percentage
     *
     * @return self
     */
    public function setCustomerQuotationAcceptancePercentage($customer_quotation_acceptance_percentage)
    {
        if (is_null($customer_quotation_acceptance_percentage)) {
            throw new \InvalidArgumentException('non-nullable customer_quotation_acceptance_percentage cannot be null');
        }
        $this->container['customer_quotation_acceptance_percentage'] = $customer_quotation_acceptance_percentage;

        return $this;
    }

    /**
     * Gets customer_quotation_acceptance_time_in_days
     *
     * @return int[]|null
     */
    public function getCustomerQuotationAcceptanceTimeInDays()
    {
        return $this->container['customer_quotation_acceptance_time_in_days'];
    }

    /**
     * Sets customer_quotation_acceptance_time_in_days
     *
     * @param int[]|null $customer_quotation_acceptance_time_in_days customer_quotation_acceptance_time_in_days
     *
     * @return self
     */
    public function setCustomerQuotationAcceptanceTimeInDays($customer_quotation_acceptance_time_in_days)
    {
        if (is_null($customer_quotation_acceptance_time_in_days)) {
            throw new \InvalidArgumentException('non-nullable customer_quotation_acceptance_time_in_days cannot be null');
        }
        $this->container['customer_quotation_acceptance_time_in_days'] = $customer_quotation_acceptance_time_in_days;

        return $this;
    }

    /**
     * Gets customer_return_percentage_current_year
     *
     * @return float[]|null
     */
    public function getCustomerReturnPercentageCurrentYear()
    {
        return $this->container['customer_return_percentage_current_year'];
    }

    /**
     * Sets customer_return_percentage_current_year
     *
     * @param float[]|null $customer_return_percentage_current_year customer_return_percentage_current_year
     *
     * @return self
     */
    public function setCustomerReturnPercentageCurrentYear($customer_return_percentage_current_year)
    {
        if (is_null($customer_return_percentage_current_year)) {
            throw new \InvalidArgumentException('non-nullable customer_return_percentage_current_year cannot be null');
        }
        $this->container['customer_return_percentage_current_year'] = $customer_return_percentage_current_year;

        return $this;
    }

    /**
     * Gets customer_return_percentage_previous_year
     *
     * @return float[]|null
     */
    public function getCustomerReturnPercentagePreviousYear()
    {
        return $this->container['customer_return_percentage_previous_year'];
    }

    /**
     * Sets customer_return_percentage_previous_year
     *
     * @param float[]|null $customer_return_percentage_previous_year customer_return_percentage_previous_year
     *
     * @return self
     */
    public function setCustomerReturnPercentagePreviousYear($customer_return_percentage_previous_year)
    {
        if (is_null($customer_return_percentage_previous_year)) {
            throw new \InvalidArgumentException('non-nullable customer_return_percentage_previous_year cannot be null');
        }
        $this->container['customer_return_percentage_previous_year'] = $customer_return_percentage_previous_year;

        return $this;
    }

    /**
     * Gets customer_sales_open_item_overdue_sum
     *
     * @return float[]|null
     */
    public function getCustomerSalesOpenItemOverdueSum()
    {
        return $this->container['customer_sales_open_item_overdue_sum'];
    }

    /**
     * Sets customer_sales_open_item_overdue_sum
     *
     * @param float[]|null $customer_sales_open_item_overdue_sum customer_sales_open_item_overdue_sum
     *
     * @return self
     */
    public function setCustomerSalesOpenItemOverdueSum($customer_sales_open_item_overdue_sum)
    {
        if (is_null($customer_sales_open_item_overdue_sum)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_open_item_overdue_sum cannot be null');
        }
        $this->container['customer_sales_open_item_overdue_sum'] = $customer_sales_open_item_overdue_sum;

        return $this;
    }

    /**
     * Gets customer_sales_open_item_sum
     *
     * @return float[]|null
     */
    public function getCustomerSalesOpenItemSum()
    {
        return $this->container['customer_sales_open_item_sum'];
    }

    /**
     * Sets customer_sales_open_item_sum
     *
     * @param float[]|null $customer_sales_open_item_sum customer_sales_open_item_sum
     *
     * @return self
     */
    public function setCustomerSalesOpenItemSum($customer_sales_open_item_sum)
    {
        if (is_null($customer_sales_open_item_sum)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_open_item_sum cannot be null');
        }
        $this->container['customer_sales_open_item_sum'] = $customer_sales_open_item_sum;

        return $this;
    }

    /**
     * Gets customer_sales_order_volume_current_year
     *
     * @return float[]|null
     */
    public function getCustomerSalesOrderVolumeCurrentYear()
    {
        return $this->container['customer_sales_order_volume_current_year'];
    }

    /**
     * Sets customer_sales_order_volume_current_year
     *
     * @param float[]|null $customer_sales_order_volume_current_year customer_sales_order_volume_current_year
     *
     * @return self
     */
    public function setCustomerSalesOrderVolumeCurrentYear($customer_sales_order_volume_current_year)
    {
        if (is_null($customer_sales_order_volume_current_year)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_order_volume_current_year cannot be null');
        }
        $this->container['customer_sales_order_volume_current_year'] = $customer_sales_order_volume_current_year;

        return $this;
    }

    /**
     * Gets customer_sales_order_volume_previous_year
     *
     * @return float[]|null
     */
    public function getCustomerSalesOrderVolumePreviousYear()
    {
        return $this->container['customer_sales_order_volume_previous_year'];
    }

    /**
     * Sets customer_sales_order_volume_previous_year
     *
     * @param float[]|null $customer_sales_order_volume_previous_year customer_sales_order_volume_previous_year
     *
     * @return self
     */
    public function setCustomerSalesOrderVolumePreviousYear($customer_sales_order_volume_previous_year)
    {
        if (is_null($customer_sales_order_volume_previous_year)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_order_volume_previous_year cannot be null');
        }
        $this->container['customer_sales_order_volume_previous_year'] = $customer_sales_order_volume_previous_year;

        return $this;
    }

    /**
     * Gets customer_sales_revenue_current_year
     *
     * @return float[]|null
     */
    public function getCustomerSalesRevenueCurrentYear()
    {
        return $this->container['customer_sales_revenue_current_year'];
    }

    /**
     * Sets customer_sales_revenue_current_year
     *
     * @param float[]|null $customer_sales_revenue_current_year customer_sales_revenue_current_year
     *
     * @return self
     */
    public function setCustomerSalesRevenueCurrentYear($customer_sales_revenue_current_year)
    {
        if (is_null($customer_sales_revenue_current_year)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_revenue_current_year cannot be null');
        }
        $this->container['customer_sales_revenue_current_year'] = $customer_sales_revenue_current_year;

        return $this;
    }

    /**
     * Gets customer_sales_revenue_previous_year
     *
     * @return float[]|null
     */
    public function getCustomerSalesRevenuePreviousYear()
    {
        return $this->container['customer_sales_revenue_previous_year'];
    }

    /**
     * Sets customer_sales_revenue_previous_year
     *
     * @param float[]|null $customer_sales_revenue_previous_year customer_sales_revenue_previous_year
     *
     * @return self
     */
    public function setCustomerSalesRevenuePreviousYear($customer_sales_revenue_previous_year)
    {
        if (is_null($customer_sales_revenue_previous_year)) {
            throw new \InvalidArgumentException('non-nullable customer_sales_revenue_previous_year cannot be null');
        }
        $this->container['customer_sales_revenue_previous_year'] = $customer_sales_revenue_previous_year;

        return $this;
    }

    /**
     * Gets lead_children_expected_revenue_opportunities
     *
     * @return float[]|null
     */
    public function getLeadChildrenExpectedRevenueOpportunities()
    {
        return $this->container['lead_children_expected_revenue_opportunities'];
    }

    /**
     * Sets lead_children_expected_revenue_opportunities
     *
     * @param float[]|null $lead_children_expected_revenue_opportunities lead_children_expected_revenue_opportunities
     *
     * @return self
     */
    public function setLeadChildrenExpectedRevenueOpportunities($lead_children_expected_revenue_opportunities)
    {
        if (is_null($lead_children_expected_revenue_opportunities)) {
            throw new \InvalidArgumentException('non-nullable lead_children_expected_revenue_opportunities cannot be null');
        }
        $this->container['lead_children_expected_revenue_opportunities'] = $lead_children_expected_revenue_opportunities;

        return $this;
    }

    /**
     * Gets lead_children_expected_revenue_quotations
     *
     * @return float[]|null
     */
    public function getLeadChildrenExpectedRevenueQuotations()
    {
        return $this->container['lead_children_expected_revenue_quotations'];
    }

    /**
     * Sets lead_children_expected_revenue_quotations
     *
     * @param float[]|null $lead_children_expected_revenue_quotations lead_children_expected_revenue_quotations
     *
     * @return self
     */
    public function setLeadChildrenExpectedRevenueQuotations($lead_children_expected_revenue_quotations)
    {
        if (is_null($lead_children_expected_revenue_quotations)) {
            throw new \InvalidArgumentException('non-nullable lead_children_expected_revenue_quotations cannot be null');
        }
        $this->container['lead_children_expected_revenue_quotations'] = $lead_children_expected_revenue_quotations;

        return $this;
    }

    /**
     * Gets lead_children_quotation_volume
     *
     * @return float[]|null
     */
    public function getLeadChildrenQuotationVolume()
    {
        return $this->container['lead_children_quotation_volume'];
    }

    /**
     * Sets lead_children_quotation_volume
     *
     * @param float[]|null $lead_children_quotation_volume lead_children_quotation_volume
     *
     * @return self
     */
    public function setLeadChildrenQuotationVolume($lead_children_quotation_volume)
    {
        if (is_null($lead_children_quotation_volume)) {
            throw new \InvalidArgumentException('non-nullable lead_children_quotation_volume cannot be null');
        }
        $this->container['lead_children_quotation_volume'] = $lead_children_quotation_volume;

        return $this;
    }

    /**
     * Gets lead_expected_revenue_opportunities
     *
     * @return float[]|null
     */
    public function getLeadExpectedRevenueOpportunities()
    {
        return $this->container['lead_expected_revenue_opportunities'];
    }

    /**
     * Sets lead_expected_revenue_opportunities
     *
     * @param float[]|null $lead_expected_revenue_opportunities lead_expected_revenue_opportunities
     *
     * @return self
     */
    public function setLeadExpectedRevenueOpportunities($lead_expected_revenue_opportunities)
    {
        if (is_null($lead_expected_revenue_opportunities)) {
            throw new \InvalidArgumentException('non-nullable lead_expected_revenue_opportunities cannot be null');
        }
        $this->container['lead_expected_revenue_opportunities'] = $lead_expected_revenue_opportunities;

        return $this;
    }

    /**
     * Gets lead_expected_revenue_quotations
     *
     * @return float[]|null
     */
    public function getLeadExpectedRevenueQuotations()
    {
        return $this->container['lead_expected_revenue_quotations'];
    }

    /**
     * Sets lead_expected_revenue_quotations
     *
     * @param float[]|null $lead_expected_revenue_quotations lead_expected_revenue_quotations
     *
     * @return self
     */
    public function setLeadExpectedRevenueQuotations($lead_expected_revenue_quotations)
    {
        if (is_null($lead_expected_revenue_quotations)) {
            throw new \InvalidArgumentException('non-nullable lead_expected_revenue_quotations cannot be null');
        }
        $this->container['lead_expected_revenue_quotations'] = $lead_expected_revenue_quotations;

        return $this;
    }

    /**
     * Gets lead_quotation_volume
     *
     * @return float[]|null
     */
    public function getLeadQuotationVolume()
    {
        return $this->container['lead_quotation_volume'];
    }

    /**
     * Sets lead_quotation_volume
     *
     * @param float[]|null $lead_quotation_volume lead_quotation_volume
     *
     * @return self
     */
    public function setLeadQuotationVolume($lead_quotation_volume)
    {
        if (is_null($lead_quotation_volume)) {
            throw new \InvalidArgumentException('non-nullable lead_quotation_volume cannot be null');
        }
        $this->container['lead_quotation_volume'] = $lead_quotation_volume;

        return $this;
    }

    /**
     * Gets supplier_children_purchase_order_volume_current_year
     *
     * @return float[]|null
     */
    public function getSupplierChildrenPurchaseOrderVolumeCurrentYear()
    {
        return $this->container['supplier_children_purchase_order_volume_current_year'];
    }

    /**
     * Sets supplier_children_purchase_order_volume_current_year
     *
     * @param float[]|null $supplier_children_purchase_order_volume_current_year supplier_children_purchase_order_volume_current_year
     *
     * @return self
     */
    public function setSupplierChildrenPurchaseOrderVolumeCurrentYear($supplier_children_purchase_order_volume_current_year)
    {
        if (is_null($supplier_children_purchase_order_volume_current_year)) {
            throw new \InvalidArgumentException('non-nullable supplier_children_purchase_order_volume_current_year cannot be null');
        }
        $this->container['supplier_children_purchase_order_volume_current_year'] = $supplier_children_purchase_order_volume_current_year;

        return $this;
    }

    /**
     * Gets supplier_children_purchase_order_volume_previous_year
     *
     * @return float[]|null
     */
    public function getSupplierChildrenPurchaseOrderVolumePreviousYear()
    {
        return $this->container['supplier_children_purchase_order_volume_previous_year'];
    }

    /**
     * Sets supplier_children_purchase_order_volume_previous_year
     *
     * @param float[]|null $supplier_children_purchase_order_volume_previous_year supplier_children_purchase_order_volume_previous_year
     *
     * @return self
     */
    public function setSupplierChildrenPurchaseOrderVolumePreviousYear($supplier_children_purchase_order_volume_previous_year)
    {
        if (is_null($supplier_children_purchase_order_volume_previous_year)) {
            throw new \InvalidArgumentException('non-nullable supplier_children_purchase_order_volume_previous_year cannot be null');
        }
        $this->container['supplier_children_purchase_order_volume_previous_year'] = $supplier_children_purchase_order_volume_previous_year;

        return $this;
    }

    /**
     * Gets supplier_children_purchase_revenue_current_year
     *
     * @return float[]|null
     */
    public function getSupplierChildrenPurchaseRevenueCurrentYear()
    {
        return $this->container['supplier_children_purchase_revenue_current_year'];
    }

    /**
     * Sets supplier_children_purchase_revenue_current_year
     *
     * @param float[]|null $supplier_children_purchase_revenue_current_year supplier_children_purchase_revenue_current_year
     *
     * @return self
     */
    public function setSupplierChildrenPurchaseRevenueCurrentYear($supplier_children_purchase_revenue_current_year)
    {
        if (is_null($supplier_children_purchase_revenue_current_year)) {
            throw new \InvalidArgumentException('non-nullable supplier_children_purchase_revenue_current_year cannot be null');
        }
        $this->container['supplier_children_purchase_revenue_current_year'] = $supplier_children_purchase_revenue_current_year;

        return $this;
    }

    /**
     * Gets supplier_children_purchase_revenue_previous_year
     *
     * @return float[]|null
     */
    public function getSupplierChildrenPurchaseRevenuePreviousYear()
    {
        return $this->container['supplier_children_purchase_revenue_previous_year'];
    }

    /**
     * Sets supplier_children_purchase_revenue_previous_year
     *
     * @param float[]|null $supplier_children_purchase_revenue_previous_year supplier_children_purchase_revenue_previous_year
     *
     * @return self
     */
    public function setSupplierChildrenPurchaseRevenuePreviousYear($supplier_children_purchase_revenue_previous_year)
    {
        if (is_null($supplier_children_purchase_revenue_previous_year)) {
            throw new \InvalidArgumentException('non-nullable supplier_children_purchase_revenue_previous_year cannot be null');
        }
        $this->container['supplier_children_purchase_revenue_previous_year'] = $supplier_children_purchase_revenue_previous_year;

        return $this;
    }

    /**
     * Gets supplier_purchase_order_volume_current_year
     *
     * @return float[]|null
     */
    public function getSupplierPurchaseOrderVolumeCurrentYear()
    {
        return $this->container['supplier_purchase_order_volume_current_year'];
    }

    /**
     * Sets supplier_purchase_order_volume_current_year
     *
     * @param float[]|null $supplier_purchase_order_volume_current_year supplier_purchase_order_volume_current_year
     *
     * @return self
     */
    public function setSupplierPurchaseOrderVolumeCurrentYear($supplier_purchase_order_volume_current_year)
    {
        if (is_null($supplier_purchase_order_volume_current_year)) {
            throw new \InvalidArgumentException('non-nullable supplier_purchase_order_volume_current_year cannot be null');
        }
        $this->container['supplier_purchase_order_volume_current_year'] = $supplier_purchase_order_volume_current_year;

        return $this;
    }

    /**
     * Gets supplier_purchase_order_volume_previous_year
     *
     * @return float[]|null
     */
    public function getSupplierPurchaseOrderVolumePreviousYear()
    {
        return $this->container['supplier_purchase_order_volume_previous_year'];
    }

    /**
     * Sets supplier_purchase_order_volume_previous_year
     *
     * @param float[]|null $supplier_purchase_order_volume_previous_year supplier_purchase_order_volume_previous_year
     *
     * @return self
     */
    public function setSupplierPurchaseOrderVolumePreviousYear($supplier_purchase_order_volume_previous_year)
    {
        if (is_null($supplier_purchase_order_volume_previous_year)) {
            throw new \InvalidArgumentException('non-nullable supplier_purchase_order_volume_previous_year cannot be null');
        }
        $this->container['supplier_purchase_order_volume_previous_year'] = $supplier_purchase_order_volume_previous_year;

        return $this;
    }

    /**
     * Gets supplier_purchase_revenue_current_year
     *
     * @return float[]|null
     */
    public function getSupplierPurchaseRevenueCurrentYear()
    {
        return $this->container['supplier_purchase_revenue_current_year'];
    }

    /**
     * Sets supplier_purchase_revenue_current_year
     *
     * @param float[]|null $supplier_purchase_revenue_current_year supplier_purchase_revenue_current_year
     *
     * @return self
     */
    public function setSupplierPurchaseRevenueCurrentYear($supplier_purchase_revenue_current_year)
    {
        if (is_null($supplier_purchase_revenue_current_year)) {
            throw new \InvalidArgumentException('non-nullable supplier_purchase_revenue_current_year cannot be null');
        }
        $this->container['supplier_purchase_revenue_current_year'] = $supplier_purchase_revenue_current_year;

        return $this;
    }

    /**
     * Gets supplier_purchase_revenue_previous_year
     *
     * @return float[]|null
     */
    public function getSupplierPurchaseRevenuePreviousYear()
    {
        return $this->container['supplier_purchase_revenue_previous_year'];
    }

    /**
     * Sets supplier_purchase_revenue_previous_year
     *
     * @param float[]|null $supplier_purchase_revenue_previous_year supplier_purchase_revenue_previous_year
     *
     * @return self
     */
    public function setSupplierPurchaseRevenuePreviousYear($supplier_purchase_revenue_previous_year)
    {
        if (is_null($supplier_purchase_revenue_previous_year)) {
            throw new \InvalidArgumentException('non-nullable supplier_purchase_revenue_previous_year cannot be null');
        }
        $this->container['supplier_purchase_revenue_previous_year'] = $supplier_purchase_revenue_previous_year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


