<?php
/**
 * ContractItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * ContractItem Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContractItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contractItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'add_page_break_before' => 'bool',
        'article_id' => 'string',
        'billing_group_id' => 'string',
        'commission_sales_partners' => '\kruegge82\weclapp\Model\CommissionSalesPartner[]',
        'cost_center_items' => '\kruegge82\weclapp\Model\CostCenterWithDistributionPercentage[]',
        'cost_type_id' => 'string',
        'created_date' => 'int',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'description' => 'string',
        'description_fixed' => 'bool',
        'discount_percentage' => 'float',
        'gross_amount' => 'float',
        'gross_amount_in_company_currency' => 'float',
        'group_name' => 'string',
        'interval' => 'string',
        'interval_type' => 'string',
        'item_type' => 'string',
        'last_modified_date' => 'int',
        'manual_quantity' => 'bool',
        'manual_unit_price' => 'bool',
        'net_amount' => 'float',
        'net_amount_for_statistics' => 'float',
        'net_amount_for_statistics_in_company_currency' => 'float',
        'net_amount_in_company_currency' => 'float',
        'next_contract_billing_date' => 'int',
        'note' => 'string',
        'parent_item_id' => 'string',
        'position_number' => 'int',
        'previous_contract_billing_date' => 'int',
        'quantity' => 'float',
        'reduction_addition_items' => '\kruegge82\weclapp\Model\ReductionAdditionItem[]',
        'service_period_from_date' => 'int',
        'service_period_to_date' => 'int',
        'tax_id' => 'string',
        'title' => 'string',
        'type' => 'string',
        'unit_id' => 'string',
        'unit_price' => 'float',
        'unit_price_in_company_currency' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'add_page_break_before' => null,
        'article_id' => null,
        'billing_group_id' => null,
        'commission_sales_partners' => null,
        'cost_center_items' => null,
        'cost_type_id' => null,
        'created_date' => 'timestamp',
        'custom_attributes' => null,
        'description' => null,
        'description_fixed' => null,
        'discount_percentage' => 'number',
        'gross_amount' => 'number',
        'gross_amount_in_company_currency' => 'number',
        'group_name' => null,
        'interval' => null,
        'interval_type' => null,
        'item_type' => null,
        'last_modified_date' => 'timestamp',
        'manual_quantity' => null,
        'manual_unit_price' => null,
        'net_amount' => 'number',
        'net_amount_for_statistics' => 'number',
        'net_amount_for_statistics_in_company_currency' => 'number',
        'net_amount_in_company_currency' => 'number',
        'next_contract_billing_date' => 'timestamp',
        'note' => null,
        'parent_item_id' => null,
        'position_number' => 'int32',
        'previous_contract_billing_date' => 'timestamp',
        'quantity' => 'number',
        'reduction_addition_items' => null,
        'service_period_from_date' => 'timestamp',
        'service_period_to_date' => 'timestamp',
        'tax_id' => null,
        'title' => null,
        'type' => null,
        'unit_id' => null,
        'unit_price' => 'number',
        'unit_price_in_company_currency' => 'number'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'add_page_break_before' => false,
        'article_id' => false,
        'billing_group_id' => false,
        'commission_sales_partners' => false,
        'cost_center_items' => false,
        'cost_type_id' => false,
        'created_date' => false,
        'custom_attributes' => false,
        'description' => false,
        'description_fixed' => false,
        'discount_percentage' => false,
        'gross_amount' => false,
        'gross_amount_in_company_currency' => false,
        'group_name' => false,
        'interval' => false,
        'interval_type' => false,
        'item_type' => false,
        'last_modified_date' => false,
        'manual_quantity' => false,
        'manual_unit_price' => false,
        'net_amount' => false,
        'net_amount_for_statistics' => false,
        'net_amount_for_statistics_in_company_currency' => false,
        'net_amount_in_company_currency' => false,
        'next_contract_billing_date' => false,
        'note' => false,
        'parent_item_id' => false,
        'position_number' => false,
        'previous_contract_billing_date' => false,
        'quantity' => false,
        'reduction_addition_items' => false,
        'service_period_from_date' => false,
        'service_period_to_date' => false,
        'tax_id' => false,
        'title' => false,
        'type' => false,
        'unit_id' => false,
        'unit_price' => false,
        'unit_price_in_company_currency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'add_page_break_before' => 'addPageBreakBefore',
        'article_id' => 'articleId',
        'billing_group_id' => 'billingGroupId',
        'commission_sales_partners' => 'commissionSalesPartners',
        'cost_center_items' => 'costCenterItems',
        'cost_type_id' => 'costTypeId',
        'created_date' => 'createdDate',
        'custom_attributes' => 'customAttributes',
        'description' => 'description',
        'description_fixed' => 'descriptionFixed',
        'discount_percentage' => 'discountPercentage',
        'gross_amount' => 'grossAmount',
        'gross_amount_in_company_currency' => 'grossAmountInCompanyCurrency',
        'group_name' => 'groupName',
        'interval' => 'interval',
        'interval_type' => 'intervalType',
        'item_type' => 'itemType',
        'last_modified_date' => 'lastModifiedDate',
        'manual_quantity' => 'manualQuantity',
        'manual_unit_price' => 'manualUnitPrice',
        'net_amount' => 'netAmount',
        'net_amount_for_statistics' => 'netAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'netAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'netAmountInCompanyCurrency',
        'next_contract_billing_date' => 'nextContractBillingDate',
        'note' => 'note',
        'parent_item_id' => 'parentItemId',
        'position_number' => 'positionNumber',
        'previous_contract_billing_date' => 'previousContractBillingDate',
        'quantity' => 'quantity',
        'reduction_addition_items' => 'reductionAdditionItems',
        'service_period_from_date' => 'servicePeriodFromDate',
        'service_period_to_date' => 'servicePeriodToDate',
        'tax_id' => 'taxId',
        'title' => 'title',
        'type' => 'type',
        'unit_id' => 'unitId',
        'unit_price' => 'unitPrice',
        'unit_price_in_company_currency' => 'unitPriceInCompanyCurrency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'add_page_break_before' => 'setAddPageBreakBefore',
        'article_id' => 'setArticleId',
        'billing_group_id' => 'setBillingGroupId',
        'commission_sales_partners' => 'setCommissionSalesPartners',
        'cost_center_items' => 'setCostCenterItems',
        'cost_type_id' => 'setCostTypeId',
        'created_date' => 'setCreatedDate',
        'custom_attributes' => 'setCustomAttributes',
        'description' => 'setDescription',
        'description_fixed' => 'setDescriptionFixed',
        'discount_percentage' => 'setDiscountPercentage',
        'gross_amount' => 'setGrossAmount',
        'gross_amount_in_company_currency' => 'setGrossAmountInCompanyCurrency',
        'group_name' => 'setGroupName',
        'interval' => 'setInterval',
        'interval_type' => 'setIntervalType',
        'item_type' => 'setItemType',
        'last_modified_date' => 'setLastModifiedDate',
        'manual_quantity' => 'setManualQuantity',
        'manual_unit_price' => 'setManualUnitPrice',
        'net_amount' => 'setNetAmount',
        'net_amount_for_statistics' => 'setNetAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'setNetAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'setNetAmountInCompanyCurrency',
        'next_contract_billing_date' => 'setNextContractBillingDate',
        'note' => 'setNote',
        'parent_item_id' => 'setParentItemId',
        'position_number' => 'setPositionNumber',
        'previous_contract_billing_date' => 'setPreviousContractBillingDate',
        'quantity' => 'setQuantity',
        'reduction_addition_items' => 'setReductionAdditionItems',
        'service_period_from_date' => 'setServicePeriodFromDate',
        'service_period_to_date' => 'setServicePeriodToDate',
        'tax_id' => 'setTaxId',
        'title' => 'setTitle',
        'type' => 'setType',
        'unit_id' => 'setUnitId',
        'unit_price' => 'setUnitPrice',
        'unit_price_in_company_currency' => 'setUnitPriceInCompanyCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'add_page_break_before' => 'getAddPageBreakBefore',
        'article_id' => 'getArticleId',
        'billing_group_id' => 'getBillingGroupId',
        'commission_sales_partners' => 'getCommissionSalesPartners',
        'cost_center_items' => 'getCostCenterItems',
        'cost_type_id' => 'getCostTypeId',
        'created_date' => 'getCreatedDate',
        'custom_attributes' => 'getCustomAttributes',
        'description' => 'getDescription',
        'description_fixed' => 'getDescriptionFixed',
        'discount_percentage' => 'getDiscountPercentage',
        'gross_amount' => 'getGrossAmount',
        'gross_amount_in_company_currency' => 'getGrossAmountInCompanyCurrency',
        'group_name' => 'getGroupName',
        'interval' => 'getInterval',
        'interval_type' => 'getIntervalType',
        'item_type' => 'getItemType',
        'last_modified_date' => 'getLastModifiedDate',
        'manual_quantity' => 'getManualQuantity',
        'manual_unit_price' => 'getManualUnitPrice',
        'net_amount' => 'getNetAmount',
        'net_amount_for_statistics' => 'getNetAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'getNetAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'getNetAmountInCompanyCurrency',
        'next_contract_billing_date' => 'getNextContractBillingDate',
        'note' => 'getNote',
        'parent_item_id' => 'getParentItemId',
        'position_number' => 'getPositionNumber',
        'previous_contract_billing_date' => 'getPreviousContractBillingDate',
        'quantity' => 'getQuantity',
        'reduction_addition_items' => 'getReductionAdditionItems',
        'service_period_from_date' => 'getServicePeriodFromDate',
        'service_period_to_date' => 'getServicePeriodToDate',
        'tax_id' => 'getTaxId',
        'title' => 'getTitle',
        'type' => 'getType',
        'unit_id' => 'getUnitId',
        'unit_price' => 'getUnitPrice',
        'unit_price_in_company_currency' => 'getUnitPriceInCompanyCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INTERVAL_DAILY = 'DAILY';
    public const INTERVAL_FIVE_YEARLY = 'FIVE_YEARLY';
    public const INTERVAL_FOUR_YEARLY = 'FOUR_YEARLY';
    public const INTERVAL_HALF_YEARLY = 'HALF_YEARLY';
    public const INTERVAL_MONTHLY = 'MONTHLY';
    public const INTERVAL_NONE = 'NONE';
    public const INTERVAL_QUARTER = 'QUARTER';
    public const INTERVAL_THREE_YEARLY = 'THREE_YEARLY';
    public const INTERVAL_TWO_YEARLY = 'TWO_YEARLY';
    public const INTERVAL_WEEKLY = 'WEEKLY';
    public const INTERVAL_YEARLY = 'YEARLY';
    public const INTERVAL_TYPE_NON_RECURRENT = 'NON_RECURRENT';
    public const INTERVAL_TYPE_RECURRENT = 'RECURRENT';
    public const ITEM_TYPE__DEFAULT = 'DEFAULT';
    public const ITEM_TYPE_FREE_TEXT = 'FREE_TEXT';
    public const ITEM_TYPE_SERVICE = 'SERVICE';
    public const TYPE_COST = 'COST';
    public const TYPE_REVENUE = 'REVENUE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntervalAllowableValues()
    {
        return [
            self::INTERVAL_DAILY,
            self::INTERVAL_FIVE_YEARLY,
            self::INTERVAL_FOUR_YEARLY,
            self::INTERVAL_HALF_YEARLY,
            self::INTERVAL_MONTHLY,
            self::INTERVAL_NONE,
            self::INTERVAL_QUARTER,
            self::INTERVAL_THREE_YEARLY,
            self::INTERVAL_TWO_YEARLY,
            self::INTERVAL_WEEKLY,
            self::INTERVAL_YEARLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntervalTypeAllowableValues()
    {
        return [
            self::INTERVAL_TYPE_NON_RECURRENT,
            self::INTERVAL_TYPE_RECURRENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemTypeAllowableValues()
    {
        return [
            self::ITEM_TYPE__DEFAULT,
            self::ITEM_TYPE_FREE_TEXT,
            self::ITEM_TYPE_SERVICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_COST,
            self::TYPE_REVENUE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('add_page_break_before', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('billing_group_id', $data ?? [], null);
        $this->setIfExists('commission_sales_partners', $data ?? [], null);
        $this->setIfExists('cost_center_items', $data ?? [], null);
        $this->setIfExists('cost_type_id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description_fixed', $data ?? [], null);
        $this->setIfExists('discount_percentage', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('gross_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('interval_type', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('manual_quantity', $data ?? [], null);
        $this->setIfExists('manual_unit_price', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('net_amount_for_statistics', $data ?? [], null);
        $this->setIfExists('net_amount_for_statistics_in_company_currency', $data ?? [], null);
        $this->setIfExists('net_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('next_contract_billing_date', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('parent_item_id', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('previous_contract_billing_date', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('reduction_addition_items', $data ?? [], null);
        $this->setIfExists('service_period_from_date', $data ?? [], null);
        $this->setIfExists('service_period_to_date', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('unit_price_in_company_currency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        $allowedValues = $this->getIntervalAllowableValues();
        if (!is_null($this->container['interval']) && !in_array($this->container['interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interval', must be one of '%s'",
                $this->container['interval'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['interval_type'] === null) {
            $invalidProperties[] = "'interval_type' can't be null";
        }
        $allowedValues = $this->getIntervalTypeAllowableValues();
        if (!is_null($this->container['interval_type']) && !in_array($this->container['interval_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interval_type', must be one of '%s'",
                $this->container['interval_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($this->container['item_type']) && !in_array($this->container['item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_type', must be one of '%s'",
                $this->container['item_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets add_page_break_before
     *
     * @return bool|null
     */
    public function getAddPageBreakBefore()
    {
        return $this->container['add_page_break_before'];
    }

    /**
     * Sets add_page_break_before
     *
     * @param bool|null $add_page_break_before add_page_break_before
     *
     * @return self
     */
    public function setAddPageBreakBefore($add_page_break_before)
    {
        if (is_null($add_page_break_before)) {
            throw new \InvalidArgumentException('non-nullable add_page_break_before cannot be null');
        }
        $this->container['add_page_break_before'] = $add_page_break_before;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets billing_group_id
     *
     * @return string|null
     */
    public function getBillingGroupId()
    {
        return $this->container['billing_group_id'];
    }

    /**
     * Sets billing_group_id
     *
     * @param string|null $billing_group_id billing_group_id
     *
     * @return self
     */
    public function setBillingGroupId($billing_group_id)
    {
        if (is_null($billing_group_id)) {
            throw new \InvalidArgumentException('non-nullable billing_group_id cannot be null');
        }
        $this->container['billing_group_id'] = $billing_group_id;

        return $this;
    }

    /**
     * Gets commission_sales_partners
     *
     * @return \kruegge82\weclapp\Model\CommissionSalesPartner[]|null
     */
    public function getCommissionSalesPartners()
    {
        return $this->container['commission_sales_partners'];
    }

    /**
     * Sets commission_sales_partners
     *
     * @param \kruegge82\weclapp\Model\CommissionSalesPartner[]|null $commission_sales_partners commission_sales_partners
     *
     * @return self
     */
    public function setCommissionSalesPartners($commission_sales_partners)
    {
        if (is_null($commission_sales_partners)) {
            throw new \InvalidArgumentException('non-nullable commission_sales_partners cannot be null');
        }
        $this->container['commission_sales_partners'] = $commission_sales_partners;

        return $this;
    }

    /**
     * Gets cost_center_items
     *
     * @return \kruegge82\weclapp\Model\CostCenterWithDistributionPercentage[]|null
     */
    public function getCostCenterItems()
    {
        return $this->container['cost_center_items'];
    }

    /**
     * Sets cost_center_items
     *
     * @param \kruegge82\weclapp\Model\CostCenterWithDistributionPercentage[]|null $cost_center_items cost_center_items
     *
     * @return self
     */
    public function setCostCenterItems($cost_center_items)
    {
        if (is_null($cost_center_items)) {
            throw new \InvalidArgumentException('non-nullable cost_center_items cannot be null');
        }
        $this->container['cost_center_items'] = $cost_center_items;

        return $this;
    }

    /**
     * Gets cost_type_id
     *
     * @return string|null
     */
    public function getCostTypeId()
    {
        return $this->container['cost_type_id'];
    }

    /**
     * Sets cost_type_id
     *
     * @param string|null $cost_type_id cost_type_id
     *
     * @return self
     */
    public function setCostTypeId($cost_type_id)
    {
        if (is_null($cost_type_id)) {
            throw new \InvalidArgumentException('non-nullable cost_type_id cannot be null');
        }
        $this->container['cost_type_id'] = $cost_type_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_fixed
     *
     * @return bool|null
     */
    public function getDescriptionFixed()
    {
        return $this->container['description_fixed'];
    }

    /**
     * Sets description_fixed
     *
     * @param bool|null $description_fixed description_fixed
     *
     * @return self
     */
    public function setDescriptionFixed($description_fixed)
    {
        if (is_null($description_fixed)) {
            throw new \InvalidArgumentException('non-nullable description_fixed cannot be null');
        }
        $this->container['description_fixed'] = $description_fixed;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param float|null $discount_percentage discount_percentage
     *
     * @return self
     */
    public function setDiscountPercentage($discount_percentage)
    {
        if (is_null($discount_percentage)) {
            throw new \InvalidArgumentException('non-nullable discount_percentage cannot be null');
        }
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets gross_amount_in_company_currency
     *
     * @return float|null
     */
    public function getGrossAmountInCompanyCurrency()
    {
        return $this->container['gross_amount_in_company_currency'];
    }

    /**
     * Sets gross_amount_in_company_currency
     *
     * @param float|null $gross_amount_in_company_currency gross_amount_in_company_currency
     *
     * @return self
     */
    public function setGrossAmountInCompanyCurrency($gross_amount_in_company_currency)
    {
        if (is_null($gross_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable gross_amount_in_company_currency cannot be null');
        }
        $this->container['gross_amount_in_company_currency'] = $gross_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name group_name
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            throw new \InvalidArgumentException('non-nullable group_name cannot be null');
        }
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval interval
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }
        $allowedValues = $this->getIntervalAllowableValues();
        if (!in_array($interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval', must be one of '%s'",
                    $interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets interval_type
     *
     * @return string
     */
    public function getIntervalType()
    {
        return $this->container['interval_type'];
    }

    /**
     * Sets interval_type
     *
     * @param string $interval_type interval_type
     *
     * @return self
     */
    public function setIntervalType($interval_type)
    {
        if (is_null($interval_type)) {
            throw new \InvalidArgumentException('non-nullable interval_type cannot be null');
        }
        $allowedValues = $this->getIntervalTypeAllowableValues();
        if (!in_array($interval_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval_type', must be one of '%s'",
                    $interval_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interval_type'] = $interval_type;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string|null $item_type item_type
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        if (is_null($item_type)) {
            throw new \InvalidArgumentException('non-nullable item_type cannot be null');
        }
        $allowedValues = $this->getItemTypeAllowableValues();
        if (!in_array($item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_type', must be one of '%s'",
                    $item_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets manual_quantity
     *
     * @return bool|null
     */
    public function getManualQuantity()
    {
        return $this->container['manual_quantity'];
    }

    /**
     * Sets manual_quantity
     *
     * @param bool|null $manual_quantity manual_quantity
     *
     * @return self
     */
    public function setManualQuantity($manual_quantity)
    {
        if (is_null($manual_quantity)) {
            throw new \InvalidArgumentException('non-nullable manual_quantity cannot be null');
        }
        $this->container['manual_quantity'] = $manual_quantity;

        return $this;
    }

    /**
     * Gets manual_unit_price
     *
     * @return bool|null
     */
    public function getManualUnitPrice()
    {
        return $this->container['manual_unit_price'];
    }

    /**
     * Sets manual_unit_price
     *
     * @param bool|null $manual_unit_price manual_unit_price
     *
     * @return self
     */
    public function setManualUnitPrice($manual_unit_price)
    {
        if (is_null($manual_unit_price)) {
            throw new \InvalidArgumentException('non-nullable manual_unit_price cannot be null');
        }
        $this->container['manual_unit_price'] = $manual_unit_price;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets net_amount_for_statistics
     *
     * @return float|null
     */
    public function getNetAmountForStatistics()
    {
        return $this->container['net_amount_for_statistics'];
    }

    /**
     * Sets net_amount_for_statistics
     *
     * @param float|null $net_amount_for_statistics net_amount_for_statistics
     *
     * @return self
     */
    public function setNetAmountForStatistics($net_amount_for_statistics)
    {
        if (is_null($net_amount_for_statistics)) {
            throw new \InvalidArgumentException('non-nullable net_amount_for_statistics cannot be null');
        }
        $this->container['net_amount_for_statistics'] = $net_amount_for_statistics;

        return $this;
    }

    /**
     * Gets net_amount_for_statistics_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountForStatisticsInCompanyCurrency()
    {
        return $this->container['net_amount_for_statistics_in_company_currency'];
    }

    /**
     * Sets net_amount_for_statistics_in_company_currency
     *
     * @param float|null $net_amount_for_statistics_in_company_currency net_amount_for_statistics_in_company_currency
     *
     * @return self
     */
    public function setNetAmountForStatisticsInCompanyCurrency($net_amount_for_statistics_in_company_currency)
    {
        if (is_null($net_amount_for_statistics_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_for_statistics_in_company_currency cannot be null');
        }
        $this->container['net_amount_for_statistics_in_company_currency'] = $net_amount_for_statistics_in_company_currency;

        return $this;
    }

    /**
     * Gets net_amount_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountInCompanyCurrency()
    {
        return $this->container['net_amount_in_company_currency'];
    }

    /**
     * Sets net_amount_in_company_currency
     *
     * @param float|null $net_amount_in_company_currency net_amount_in_company_currency
     *
     * @return self
     */
    public function setNetAmountInCompanyCurrency($net_amount_in_company_currency)
    {
        if (is_null($net_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_in_company_currency cannot be null');
        }
        $this->container['net_amount_in_company_currency'] = $net_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets next_contract_billing_date
     *
     * @return int|null
     */
    public function getNextContractBillingDate()
    {
        return $this->container['next_contract_billing_date'];
    }

    /**
     * Sets next_contract_billing_date
     *
     * @param int|null $next_contract_billing_date next_contract_billing_date
     *
     * @return self
     */
    public function setNextContractBillingDate($next_contract_billing_date)
    {
        if (is_null($next_contract_billing_date)) {
            throw new \InvalidArgumentException('non-nullable next_contract_billing_date cannot be null');
        }
        $this->container['next_contract_billing_date'] = $next_contract_billing_date;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets parent_item_id
     *
     * @return string|null
     */
    public function getParentItemId()
    {
        return $this->container['parent_item_id'];
    }

    /**
     * Sets parent_item_id
     *
     * @param string|null $parent_item_id parent_item_id
     *
     * @return self
     */
    public function setParentItemId($parent_item_id)
    {
        if (is_null($parent_item_id)) {
            throw new \InvalidArgumentException('non-nullable parent_item_id cannot be null');
        }
        $this->container['parent_item_id'] = $parent_item_id;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets previous_contract_billing_date
     *
     * @return int|null
     */
    public function getPreviousContractBillingDate()
    {
        return $this->container['previous_contract_billing_date'];
    }

    /**
     * Sets previous_contract_billing_date
     *
     * @param int|null $previous_contract_billing_date previous_contract_billing_date
     *
     * @return self
     */
    public function setPreviousContractBillingDate($previous_contract_billing_date)
    {
        if (is_null($previous_contract_billing_date)) {
            throw new \InvalidArgumentException('non-nullable previous_contract_billing_date cannot be null');
        }
        $this->container['previous_contract_billing_date'] = $previous_contract_billing_date;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reduction_addition_items
     *
     * @return \kruegge82\weclapp\Model\ReductionAdditionItem[]|null
     */
    public function getReductionAdditionItems()
    {
        return $this->container['reduction_addition_items'];
    }

    /**
     * Sets reduction_addition_items
     *
     * @param \kruegge82\weclapp\Model\ReductionAdditionItem[]|null $reduction_addition_items reduction_addition_items
     *
     * @return self
     */
    public function setReductionAdditionItems($reduction_addition_items)
    {
        if (is_null($reduction_addition_items)) {
            throw new \InvalidArgumentException('non-nullable reduction_addition_items cannot be null');
        }
        $this->container['reduction_addition_items'] = $reduction_addition_items;

        return $this;
    }

    /**
     * Gets service_period_from_date
     *
     * @return int|null
     */
    public function getServicePeriodFromDate()
    {
        return $this->container['service_period_from_date'];
    }

    /**
     * Sets service_period_from_date
     *
     * @param int|null $service_period_from_date service_period_from_date
     *
     * @return self
     */
    public function setServicePeriodFromDate($service_period_from_date)
    {
        if (is_null($service_period_from_date)) {
            throw new \InvalidArgumentException('non-nullable service_period_from_date cannot be null');
        }
        $this->container['service_period_from_date'] = $service_period_from_date;

        return $this;
    }

    /**
     * Gets service_period_to_date
     *
     * @return int|null
     */
    public function getServicePeriodToDate()
    {
        return $this->container['service_period_to_date'];
    }

    /**
     * Sets service_period_to_date
     *
     * @param int|null $service_period_to_date service_period_to_date
     *
     * @return self
     */
    public function setServicePeriodToDate($service_period_to_date)
    {
        if (is_null($service_period_to_date)) {
            throw new \InvalidArgumentException('non-nullable service_period_to_date cannot be null');
        }
        $this->container['service_period_to_date'] = $service_period_to_date;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string|null $unit_id unit_id
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            throw new \InvalidArgumentException('non-nullable unit_id cannot be null');
        }
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price unit_price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_in_company_currency
     *
     * @return float|null
     */
    public function getUnitPriceInCompanyCurrency()
    {
        return $this->container['unit_price_in_company_currency'];
    }

    /**
     * Sets unit_price_in_company_currency
     *
     * @param float|null $unit_price_in_company_currency unit_price_in_company_currency
     *
     * @return self
     */
    public function setUnitPriceInCompanyCurrency($unit_price_in_company_currency)
    {
        if (is_null($unit_price_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable unit_price_in_company_currency cannot be null');
        }
        $this->container['unit_price_in_company_currency'] = $unit_price_in_company_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


