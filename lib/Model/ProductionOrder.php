<?php
/**
 * ProductionOrder
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * ProductionOrder Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductionOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'productionOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'actual_end_date' => 'int',
        'actual_quantity' => 'float',
        'actual_start_date' => 'int',
        'article_id' => 'string',
        'assembly_storage_place_id' => 'string',
        'picking_instructions' => 'string',
        'picks_complete' => 'bool',
        'production_order_items' => '\kruegge82\weclapp\Model\ProductionOrderItem[]',
        'production_order_number' => 'string',
        'status' => '\kruegge82\weclapp\Model\ProductionOrderStatusType',
        'status_history' => '\kruegge82\weclapp\Model\ProductionOrderStatusHistory[]',
        'target_end_date' => 'int',
        'target_quantity' => 'float',
        'target_start_date' => 'int',
        'warehouse_id' => 'string',
        'work_items' => '\kruegge82\weclapp\Model\ProductionOrderWorkItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'actual_end_date' => 'timestamp',
        'actual_quantity' => 'decimal',
        'actual_start_date' => 'timestamp',
        'article_id' => null,
        'assembly_storage_place_id' => null,
        'picking_instructions' => null,
        'picks_complete' => null,
        'production_order_items' => null,
        'production_order_number' => null,
        'status' => null,
        'status_history' => null,
        'target_end_date' => 'timestamp',
        'target_quantity' => 'decimal',
        'target_start_date' => 'timestamp',
        'warehouse_id' => null,
        'work_items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'actual_end_date' => false,
        'actual_quantity' => false,
        'actual_start_date' => false,
        'article_id' => false,
        'assembly_storage_place_id' => false,
        'picking_instructions' => false,
        'picks_complete' => false,
        'production_order_items' => false,
        'production_order_number' => false,
        'status' => false,
        'status_history' => false,
        'target_end_date' => false,
        'target_quantity' => false,
        'target_start_date' => false,
        'warehouse_id' => false,
        'work_items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'actual_end_date' => 'actualEndDate',
        'actual_quantity' => 'actualQuantity',
        'actual_start_date' => 'actualStartDate',
        'article_id' => 'articleId',
        'assembly_storage_place_id' => 'assemblyStoragePlaceId',
        'picking_instructions' => 'pickingInstructions',
        'picks_complete' => 'picksComplete',
        'production_order_items' => 'productionOrderItems',
        'production_order_number' => 'productionOrderNumber',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'target_end_date' => 'targetEndDate',
        'target_quantity' => 'targetQuantity',
        'target_start_date' => 'targetStartDate',
        'warehouse_id' => 'warehouseId',
        'work_items' => 'workItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'actual_end_date' => 'setActualEndDate',
        'actual_quantity' => 'setActualQuantity',
        'actual_start_date' => 'setActualStartDate',
        'article_id' => 'setArticleId',
        'assembly_storage_place_id' => 'setAssemblyStoragePlaceId',
        'picking_instructions' => 'setPickingInstructions',
        'picks_complete' => 'setPicksComplete',
        'production_order_items' => 'setProductionOrderItems',
        'production_order_number' => 'setProductionOrderNumber',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'target_end_date' => 'setTargetEndDate',
        'target_quantity' => 'setTargetQuantity',
        'target_start_date' => 'setTargetStartDate',
        'warehouse_id' => 'setWarehouseId',
        'work_items' => 'setWorkItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'actual_end_date' => 'getActualEndDate',
        'actual_quantity' => 'getActualQuantity',
        'actual_start_date' => 'getActualStartDate',
        'article_id' => 'getArticleId',
        'assembly_storage_place_id' => 'getAssemblyStoragePlaceId',
        'picking_instructions' => 'getPickingInstructions',
        'picks_complete' => 'getPicksComplete',
        'production_order_items' => 'getProductionOrderItems',
        'production_order_number' => 'getProductionOrderNumber',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'target_end_date' => 'getTargetEndDate',
        'target_quantity' => 'getTargetQuantity',
        'target_start_date' => 'getTargetStartDate',
        'warehouse_id' => 'getWarehouseId',
        'work_items' => 'getWorkItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('actual_end_date', $data ?? [], null);
        $this->setIfExists('actual_quantity', $data ?? [], null);
        $this->setIfExists('actual_start_date', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('assembly_storage_place_id', $data ?? [], null);
        $this->setIfExists('picking_instructions', $data ?? [], null);
        $this->setIfExists('picks_complete', $data ?? [], null);
        $this->setIfExists('production_order_items', $data ?? [], null);
        $this->setIfExists('production_order_number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('target_end_date', $data ?? [], null);
        $this->setIfExists('target_quantity', $data ?? [], null);
        $this->setIfExists('target_start_date', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('work_items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['actual_quantity']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['actual_quantity'])) {
            $invalidProperties[] = "invalid value for 'actual_quantity', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['picking_instructions']) && (mb_strlen($this->container['picking_instructions']) > 255)) {
            $invalidProperties[] = "invalid value for 'picking_instructions', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['production_order_number']) && (mb_strlen($this->container['production_order_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'production_order_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['target_quantity']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['target_quantity'])) {
            $invalidProperties[] = "invalid value for 'target_quantity', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets actual_end_date
     *
     * @return int|null
     */
    public function getActualEndDate()
    {
        return $this->container['actual_end_date'];
    }

    /**
     * Sets actual_end_date
     *
     * @param int|null $actual_end_date actual_end_date
     *
     * @return self
     */
    public function setActualEndDate($actual_end_date)
    {
        if (is_null($actual_end_date)) {
            throw new \InvalidArgumentException('non-nullable actual_end_date cannot be null');
        }
        $this->container['actual_end_date'] = $actual_end_date;

        return $this;
    }

    /**
     * Gets actual_quantity
     *
     * @return float|null
     */
    public function getActualQuantity()
    {
        return $this->container['actual_quantity'];
    }

    /**
     * Sets actual_quantity
     *
     * @param float|null $actual_quantity actual_quantity
     *
     * @return self
     */
    public function setActualQuantity($actual_quantity)
    {
        if (is_null($actual_quantity)) {
            throw new \InvalidArgumentException('non-nullable actual_quantity cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($actual_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$actual_quantity when calling ProductionOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['actual_quantity'] = $actual_quantity;

        return $this;
    }

    /**
     * Gets actual_start_date
     *
     * @return int|null
     */
    public function getActualStartDate()
    {
        return $this->container['actual_start_date'];
    }

    /**
     * Sets actual_start_date
     *
     * @param int|null $actual_start_date actual_start_date
     *
     * @return self
     */
    public function setActualStartDate($actual_start_date)
    {
        if (is_null($actual_start_date)) {
            throw new \InvalidArgumentException('non-nullable actual_start_date cannot be null');
        }
        $this->container['actual_start_date'] = $actual_start_date;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets assembly_storage_place_id
     *
     * @return string|null
     */
    public function getAssemblyStoragePlaceId()
    {
        return $this->container['assembly_storage_place_id'];
    }

    /**
     * Sets assembly_storage_place_id
     *
     * @param string|null $assembly_storage_place_id assembly_storage_place_id
     *
     * @return self
     */
    public function setAssemblyStoragePlaceId($assembly_storage_place_id)
    {
        if (is_null($assembly_storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable assembly_storage_place_id cannot be null');
        }
        $this->container['assembly_storage_place_id'] = $assembly_storage_place_id;

        return $this;
    }

    /**
     * Gets picking_instructions
     *
     * @return string|null
     */
    public function getPickingInstructions()
    {
        return $this->container['picking_instructions'];
    }

    /**
     * Sets picking_instructions
     *
     * @param string|null $picking_instructions picking_instructions
     *
     * @return self
     */
    public function setPickingInstructions($picking_instructions)
    {
        if (is_null($picking_instructions)) {
            throw new \InvalidArgumentException('non-nullable picking_instructions cannot be null');
        }
        if ((mb_strlen($picking_instructions) > 255)) {
            throw new \InvalidArgumentException('invalid length for $picking_instructions when calling ProductionOrder., must be smaller than or equal to 255.');
        }

        $this->container['picking_instructions'] = $picking_instructions;

        return $this;
    }

    /**
     * Gets picks_complete
     *
     * @return bool|null
     */
    public function getPicksComplete()
    {
        return $this->container['picks_complete'];
    }

    /**
     * Sets picks_complete
     *
     * @param bool|null $picks_complete picks_complete
     *
     * @return self
     */
    public function setPicksComplete($picks_complete)
    {
        if (is_null($picks_complete)) {
            throw new \InvalidArgumentException('non-nullable picks_complete cannot be null');
        }
        $this->container['picks_complete'] = $picks_complete;

        return $this;
    }

    /**
     * Gets production_order_items
     *
     * @return \kruegge82\weclapp\Model\ProductionOrderItem[]|null
     */
    public function getProductionOrderItems()
    {
        return $this->container['production_order_items'];
    }

    /**
     * Sets production_order_items
     *
     * @param \kruegge82\weclapp\Model\ProductionOrderItem[]|null $production_order_items production_order_items
     *
     * @return self
     */
    public function setProductionOrderItems($production_order_items)
    {
        if (is_null($production_order_items)) {
            throw new \InvalidArgumentException('non-nullable production_order_items cannot be null');
        }
        $this->container['production_order_items'] = $production_order_items;

        return $this;
    }

    /**
     * Gets production_order_number
     *
     * @return string|null
     */
    public function getProductionOrderNumber()
    {
        return $this->container['production_order_number'];
    }

    /**
     * Sets production_order_number
     *
     * @param string|null $production_order_number production_order_number
     *
     * @return self
     */
    public function setProductionOrderNumber($production_order_number)
    {
        if (is_null($production_order_number)) {
            throw new \InvalidArgumentException('non-nullable production_order_number cannot be null');
        }
        if ((mb_strlen($production_order_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $production_order_number when calling ProductionOrder., must be smaller than or equal to 30.');
        }

        $this->container['production_order_number'] = $production_order_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\ProductionOrderStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\ProductionOrderStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\ProductionOrderStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\ProductionOrderStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets target_end_date
     *
     * @return int|null
     */
    public function getTargetEndDate()
    {
        return $this->container['target_end_date'];
    }

    /**
     * Sets target_end_date
     *
     * @param int|null $target_end_date target_end_date
     *
     * @return self
     */
    public function setTargetEndDate($target_end_date)
    {
        if (is_null($target_end_date)) {
            throw new \InvalidArgumentException('non-nullable target_end_date cannot be null');
        }
        $this->container['target_end_date'] = $target_end_date;

        return $this;
    }

    /**
     * Gets target_quantity
     *
     * @return float|null
     */
    public function getTargetQuantity()
    {
        return $this->container['target_quantity'];
    }

    /**
     * Sets target_quantity
     *
     * @param float|null $target_quantity target_quantity
     *
     * @return self
     */
    public function setTargetQuantity($target_quantity)
    {
        if (is_null($target_quantity)) {
            throw new \InvalidArgumentException('non-nullable target_quantity cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($target_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$target_quantity when calling ProductionOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['target_quantity'] = $target_quantity;

        return $this;
    }

    /**
     * Gets target_start_date
     *
     * @return int|null
     */
    public function getTargetStartDate()
    {
        return $this->container['target_start_date'];
    }

    /**
     * Sets target_start_date
     *
     * @param int|null $target_start_date target_start_date
     *
     * @return self
     */
    public function setTargetStartDate($target_start_date)
    {
        if (is_null($target_start_date)) {
            throw new \InvalidArgumentException('non-nullable target_start_date cannot be null');
        }
        $this->container['target_start_date'] = $target_start_date;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets work_items
     *
     * @return \kruegge82\weclapp\Model\ProductionOrderWorkItem[]|null
     */
    public function getWorkItems()
    {
        return $this->container['work_items'];
    }

    /**
     * Sets work_items
     *
     * @param \kruegge82\weclapp\Model\ProductionOrderWorkItem[]|null $work_items work_items
     *
     * @return self
     */
    public function setWorkItems($work_items)
    {
        if (is_null($work_items)) {
            throw new \InvalidArgumentException('non-nullable work_items cannot be null');
        }
        $this->container['work_items'] = $work_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


