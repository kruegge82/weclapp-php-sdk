<?php
/**
 * Contract
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Contract Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Contract implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'contract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'commercial_language' => 'string',
        'creator_id' => 'string',
        'description' => 'string',
        'disable_record_emailing_rule' => 'bool',
        'record_comment' => 'string',
        'record_free_text' => 'string',
        'record_opening' => 'string',
        'sent_to_recipient' => 'bool',
        'tags' => 'string[]',
        'additional_addresses' => '\kruegge82\weclapp\Model\ContractAdditionalAddress[]',
        'authorization_unit_id' => 'string',
        'automatic_extension' => 'bool',
        'bill_until' => '\kruegge82\weclapp\Model\BillUntil',
        'billing_day' => 'int',
        'billing_target_invoice_status' => '\kruegge82\weclapp\Model\DesiredInvoiceStatusType',
        'billing_type' => '\kruegge82\weclapp\Model\ContractBillingType',
        'cancellation_date' => 'int',
        'cancellation_period_quantity' => 'int',
        'cancellation_period_softframe' => '\kruegge82\weclapp\Model\ContractSoftframe',
        'cancellation_period_unit' => '\kruegge82\weclapp\Model\ContractUnitType',
        'commission' => 'string',
        'commission_sales_partners' => '\kruegge82\weclapp\Model\CommissionSalesPartner[]',
        'contract_cost_items' => '\kruegge82\weclapp\Model\ContractCostItem[]',
        'contract_date' => 'int',
        'contract_items' => '\kruegge82\weclapp\Model\ContractItem[]',
        'contract_number' => 'string',
        'contract_number_at_party' => 'string',
        'contract_status' => '\kruegge82\weclapp\Model\ContractStatus',
        'correspondence_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'delivery_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'delivery_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'differing_correspondence_address' => 'bool',
        'differing_delivery_address' => 'bool',
        'differing_invoice_address' => 'bool',
        'end_date' => 'int',
        'extension_quantity' => 'int',
        'extension_unit' => '\kruegge82\weclapp\Model\ContractUnitType',
        'factoring' => 'bool',
        'invoice_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'invoice_recipient_id' => 'string',
        'latest_cancellation_warning_quantity' => 'int',
        'latest_cancellation_warning_unit' => '\kruegge82\weclapp\Model\ContractUnitType',
        'latest_possible_termination_date' => 'int',
        'name' => 'string',
        'next_contract_billing_date' => 'int',
        'non_standard_input_tax_id' => 'string',
        'order_number_at_customer' => 'string',
        'party_id' => 'string',
        'payment_method_id' => 'string',
        'pricing_date' => 'int',
        'purchase_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'record_currency_id' => 'string',
        'record_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'reminder_date' => 'int',
        'reminder_send_type' => '\kruegge82\weclapp\Model\ReminderSendType',
        'reminder_type' => '\kruegge82\weclapp\Model\ContractReminderType',
        'responsible_user_id' => 'string',
        'sales_channel' => '\kruegge82\weclapp\Model\DistributionChannel',
        'sales_invoice_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'sales_order_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'start_date' => 'int',
        'template' => 'bool',
        'term_of_payment_id' => 'string',
        'termination_reason_id' => 'string',
        'ticket_service_level_agreement_id' => 'string',
        'types' => '\kruegge82\weclapp\Model\OnlyId[]',
        'unlimited' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'commercial_language' => null,
        'creator_id' => null,
        'description' => 'html',
        'disable_record_emailing_rule' => null,
        'record_comment' => 'html',
        'record_free_text' => 'html',
        'record_opening' => 'html',
        'sent_to_recipient' => null,
        'tags' => null,
        'additional_addresses' => null,
        'authorization_unit_id' => null,
        'automatic_extension' => null,
        'bill_until' => null,
        'billing_day' => 'int32',
        'billing_target_invoice_status' => null,
        'billing_type' => null,
        'cancellation_date' => 'timestamp',
        'cancellation_period_quantity' => 'int32',
        'cancellation_period_softframe' => null,
        'cancellation_period_unit' => null,
        'commission' => null,
        'commission_sales_partners' => null,
        'contract_cost_items' => null,
        'contract_date' => 'timestamp',
        'contract_items' => null,
        'contract_number' => null,
        'contract_number_at_party' => null,
        'contract_status' => null,
        'correspondence_address' => null,
        'delivery_address' => null,
        'delivery_email_addresses' => null,
        'differing_correspondence_address' => null,
        'differing_delivery_address' => null,
        'differing_invoice_address' => null,
        'end_date' => 'timestamp',
        'extension_quantity' => 'int32',
        'extension_unit' => null,
        'factoring' => null,
        'invoice_address' => null,
        'invoice_recipient_id' => null,
        'latest_cancellation_warning_quantity' => 'int32',
        'latest_cancellation_warning_unit' => null,
        'latest_possible_termination_date' => 'timestamp',
        'name' => null,
        'next_contract_billing_date' => 'timestamp',
        'non_standard_input_tax_id' => null,
        'order_number_at_customer' => null,
        'party_id' => null,
        'payment_method_id' => null,
        'pricing_date' => 'timestamp',
        'purchase_email_addresses' => null,
        'record_currency_id' => null,
        'record_email_addresses' => null,
        'reminder_date' => 'timestamp',
        'reminder_send_type' => null,
        'reminder_type' => null,
        'responsible_user_id' => null,
        'sales_channel' => null,
        'sales_invoice_email_addresses' => null,
        'sales_order_email_addresses' => null,
        'start_date' => 'timestamp',
        'template' => null,
        'term_of_payment_id' => null,
        'termination_reason_id' => null,
        'ticket_service_level_agreement_id' => null,
        'types' => null,
        'unlimited' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'commercial_language' => false,
        'creator_id' => false,
        'description' => false,
        'disable_record_emailing_rule' => false,
        'record_comment' => false,
        'record_free_text' => false,
        'record_opening' => false,
        'sent_to_recipient' => false,
        'tags' => false,
        'additional_addresses' => false,
        'authorization_unit_id' => false,
        'automatic_extension' => false,
        'bill_until' => false,
        'billing_day' => false,
        'billing_target_invoice_status' => false,
        'billing_type' => false,
        'cancellation_date' => false,
        'cancellation_period_quantity' => false,
        'cancellation_period_softframe' => false,
        'cancellation_period_unit' => false,
        'commission' => false,
        'commission_sales_partners' => false,
        'contract_cost_items' => false,
        'contract_date' => false,
        'contract_items' => false,
        'contract_number' => false,
        'contract_number_at_party' => false,
        'contract_status' => false,
        'correspondence_address' => false,
        'delivery_address' => false,
        'delivery_email_addresses' => false,
        'differing_correspondence_address' => false,
        'differing_delivery_address' => false,
        'differing_invoice_address' => false,
        'end_date' => false,
        'extension_quantity' => false,
        'extension_unit' => false,
        'factoring' => false,
        'invoice_address' => false,
        'invoice_recipient_id' => false,
        'latest_cancellation_warning_quantity' => false,
        'latest_cancellation_warning_unit' => false,
        'latest_possible_termination_date' => false,
        'name' => false,
        'next_contract_billing_date' => false,
        'non_standard_input_tax_id' => false,
        'order_number_at_customer' => false,
        'party_id' => false,
        'payment_method_id' => false,
        'pricing_date' => false,
        'purchase_email_addresses' => false,
        'record_currency_id' => false,
        'record_email_addresses' => false,
        'reminder_date' => false,
        'reminder_send_type' => false,
        'reminder_type' => false,
        'responsible_user_id' => false,
        'sales_channel' => false,
        'sales_invoice_email_addresses' => false,
        'sales_order_email_addresses' => false,
        'start_date' => false,
        'template' => false,
        'term_of_payment_id' => false,
        'termination_reason_id' => false,
        'ticket_service_level_agreement_id' => false,
        'types' => false,
        'unlimited' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'commercial_language' => 'commercialLanguage',
        'creator_id' => 'creatorId',
        'description' => 'description',
        'disable_record_emailing_rule' => 'disableRecordEmailingRule',
        'record_comment' => 'recordComment',
        'record_free_text' => 'recordFreeText',
        'record_opening' => 'recordOpening',
        'sent_to_recipient' => 'sentToRecipient',
        'tags' => 'tags',
        'additional_addresses' => 'additionalAddresses',
        'authorization_unit_id' => 'authorizationUnitId',
        'automatic_extension' => 'automaticExtension',
        'bill_until' => 'billUntil',
        'billing_day' => 'billingDay',
        'billing_target_invoice_status' => 'billingTargetInvoiceStatus',
        'billing_type' => 'billingType',
        'cancellation_date' => 'cancellationDate',
        'cancellation_period_quantity' => 'cancellationPeriodQuantity',
        'cancellation_period_softframe' => 'cancellationPeriodSoftframe',
        'cancellation_period_unit' => 'cancellationPeriodUnit',
        'commission' => 'commission',
        'commission_sales_partners' => 'commissionSalesPartners',
        'contract_cost_items' => 'contractCostItems',
        'contract_date' => 'contractDate',
        'contract_items' => 'contractItems',
        'contract_number' => 'contractNumber',
        'contract_number_at_party' => 'contractNumberAtParty',
        'contract_status' => 'contractStatus',
        'correspondence_address' => 'correspondenceAddress',
        'delivery_address' => 'deliveryAddress',
        'delivery_email_addresses' => 'deliveryEmailAddresses',
        'differing_correspondence_address' => 'differingCorrespondenceAddress',
        'differing_delivery_address' => 'differingDeliveryAddress',
        'differing_invoice_address' => 'differingInvoiceAddress',
        'end_date' => 'endDate',
        'extension_quantity' => 'extensionQuantity',
        'extension_unit' => 'extensionUnit',
        'factoring' => 'factoring',
        'invoice_address' => 'invoiceAddress',
        'invoice_recipient_id' => 'invoiceRecipientId',
        'latest_cancellation_warning_quantity' => 'latestCancellationWarningQuantity',
        'latest_cancellation_warning_unit' => 'latestCancellationWarningUnit',
        'latest_possible_termination_date' => 'latestPossibleTerminationDate',
        'name' => 'name',
        'next_contract_billing_date' => 'nextContractBillingDate',
        'non_standard_input_tax_id' => 'nonStandardInputTaxId',
        'order_number_at_customer' => 'orderNumberAtCustomer',
        'party_id' => 'partyId',
        'payment_method_id' => 'paymentMethodId',
        'pricing_date' => 'pricingDate',
        'purchase_email_addresses' => 'purchaseEmailAddresses',
        'record_currency_id' => 'recordCurrencyId',
        'record_email_addresses' => 'recordEmailAddresses',
        'reminder_date' => 'reminderDate',
        'reminder_send_type' => 'reminderSendType',
        'reminder_type' => 'reminderType',
        'responsible_user_id' => 'responsibleUserId',
        'sales_channel' => 'salesChannel',
        'sales_invoice_email_addresses' => 'salesInvoiceEmailAddresses',
        'sales_order_email_addresses' => 'salesOrderEmailAddresses',
        'start_date' => 'startDate',
        'template' => 'template',
        'term_of_payment_id' => 'termOfPaymentId',
        'termination_reason_id' => 'terminationReasonId',
        'ticket_service_level_agreement_id' => 'ticketServiceLevelAgreementId',
        'types' => 'types',
        'unlimited' => 'unlimited'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'commercial_language' => 'setCommercialLanguage',
        'creator_id' => 'setCreatorId',
        'description' => 'setDescription',
        'disable_record_emailing_rule' => 'setDisableRecordEmailingRule',
        'record_comment' => 'setRecordComment',
        'record_free_text' => 'setRecordFreeText',
        'record_opening' => 'setRecordOpening',
        'sent_to_recipient' => 'setSentToRecipient',
        'tags' => 'setTags',
        'additional_addresses' => 'setAdditionalAddresses',
        'authorization_unit_id' => 'setAuthorizationUnitId',
        'automatic_extension' => 'setAutomaticExtension',
        'bill_until' => 'setBillUntil',
        'billing_day' => 'setBillingDay',
        'billing_target_invoice_status' => 'setBillingTargetInvoiceStatus',
        'billing_type' => 'setBillingType',
        'cancellation_date' => 'setCancellationDate',
        'cancellation_period_quantity' => 'setCancellationPeriodQuantity',
        'cancellation_period_softframe' => 'setCancellationPeriodSoftframe',
        'cancellation_period_unit' => 'setCancellationPeriodUnit',
        'commission' => 'setCommission',
        'commission_sales_partners' => 'setCommissionSalesPartners',
        'contract_cost_items' => 'setContractCostItems',
        'contract_date' => 'setContractDate',
        'contract_items' => 'setContractItems',
        'contract_number' => 'setContractNumber',
        'contract_number_at_party' => 'setContractNumberAtParty',
        'contract_status' => 'setContractStatus',
        'correspondence_address' => 'setCorrespondenceAddress',
        'delivery_address' => 'setDeliveryAddress',
        'delivery_email_addresses' => 'setDeliveryEmailAddresses',
        'differing_correspondence_address' => 'setDifferingCorrespondenceAddress',
        'differing_delivery_address' => 'setDifferingDeliveryAddress',
        'differing_invoice_address' => 'setDifferingInvoiceAddress',
        'end_date' => 'setEndDate',
        'extension_quantity' => 'setExtensionQuantity',
        'extension_unit' => 'setExtensionUnit',
        'factoring' => 'setFactoring',
        'invoice_address' => 'setInvoiceAddress',
        'invoice_recipient_id' => 'setInvoiceRecipientId',
        'latest_cancellation_warning_quantity' => 'setLatestCancellationWarningQuantity',
        'latest_cancellation_warning_unit' => 'setLatestCancellationWarningUnit',
        'latest_possible_termination_date' => 'setLatestPossibleTerminationDate',
        'name' => 'setName',
        'next_contract_billing_date' => 'setNextContractBillingDate',
        'non_standard_input_tax_id' => 'setNonStandardInputTaxId',
        'order_number_at_customer' => 'setOrderNumberAtCustomer',
        'party_id' => 'setPartyId',
        'payment_method_id' => 'setPaymentMethodId',
        'pricing_date' => 'setPricingDate',
        'purchase_email_addresses' => 'setPurchaseEmailAddresses',
        'record_currency_id' => 'setRecordCurrencyId',
        'record_email_addresses' => 'setRecordEmailAddresses',
        'reminder_date' => 'setReminderDate',
        'reminder_send_type' => 'setReminderSendType',
        'reminder_type' => 'setReminderType',
        'responsible_user_id' => 'setResponsibleUserId',
        'sales_channel' => 'setSalesChannel',
        'sales_invoice_email_addresses' => 'setSalesInvoiceEmailAddresses',
        'sales_order_email_addresses' => 'setSalesOrderEmailAddresses',
        'start_date' => 'setStartDate',
        'template' => 'setTemplate',
        'term_of_payment_id' => 'setTermOfPaymentId',
        'termination_reason_id' => 'setTerminationReasonId',
        'ticket_service_level_agreement_id' => 'setTicketServiceLevelAgreementId',
        'types' => 'setTypes',
        'unlimited' => 'setUnlimited'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'commercial_language' => 'getCommercialLanguage',
        'creator_id' => 'getCreatorId',
        'description' => 'getDescription',
        'disable_record_emailing_rule' => 'getDisableRecordEmailingRule',
        'record_comment' => 'getRecordComment',
        'record_free_text' => 'getRecordFreeText',
        'record_opening' => 'getRecordOpening',
        'sent_to_recipient' => 'getSentToRecipient',
        'tags' => 'getTags',
        'additional_addresses' => 'getAdditionalAddresses',
        'authorization_unit_id' => 'getAuthorizationUnitId',
        'automatic_extension' => 'getAutomaticExtension',
        'bill_until' => 'getBillUntil',
        'billing_day' => 'getBillingDay',
        'billing_target_invoice_status' => 'getBillingTargetInvoiceStatus',
        'billing_type' => 'getBillingType',
        'cancellation_date' => 'getCancellationDate',
        'cancellation_period_quantity' => 'getCancellationPeriodQuantity',
        'cancellation_period_softframe' => 'getCancellationPeriodSoftframe',
        'cancellation_period_unit' => 'getCancellationPeriodUnit',
        'commission' => 'getCommission',
        'commission_sales_partners' => 'getCommissionSalesPartners',
        'contract_cost_items' => 'getContractCostItems',
        'contract_date' => 'getContractDate',
        'contract_items' => 'getContractItems',
        'contract_number' => 'getContractNumber',
        'contract_number_at_party' => 'getContractNumberAtParty',
        'contract_status' => 'getContractStatus',
        'correspondence_address' => 'getCorrespondenceAddress',
        'delivery_address' => 'getDeliveryAddress',
        'delivery_email_addresses' => 'getDeliveryEmailAddresses',
        'differing_correspondence_address' => 'getDifferingCorrespondenceAddress',
        'differing_delivery_address' => 'getDifferingDeliveryAddress',
        'differing_invoice_address' => 'getDifferingInvoiceAddress',
        'end_date' => 'getEndDate',
        'extension_quantity' => 'getExtensionQuantity',
        'extension_unit' => 'getExtensionUnit',
        'factoring' => 'getFactoring',
        'invoice_address' => 'getInvoiceAddress',
        'invoice_recipient_id' => 'getInvoiceRecipientId',
        'latest_cancellation_warning_quantity' => 'getLatestCancellationWarningQuantity',
        'latest_cancellation_warning_unit' => 'getLatestCancellationWarningUnit',
        'latest_possible_termination_date' => 'getLatestPossibleTerminationDate',
        'name' => 'getName',
        'next_contract_billing_date' => 'getNextContractBillingDate',
        'non_standard_input_tax_id' => 'getNonStandardInputTaxId',
        'order_number_at_customer' => 'getOrderNumberAtCustomer',
        'party_id' => 'getPartyId',
        'payment_method_id' => 'getPaymentMethodId',
        'pricing_date' => 'getPricingDate',
        'purchase_email_addresses' => 'getPurchaseEmailAddresses',
        'record_currency_id' => 'getRecordCurrencyId',
        'record_email_addresses' => 'getRecordEmailAddresses',
        'reminder_date' => 'getReminderDate',
        'reminder_send_type' => 'getReminderSendType',
        'reminder_type' => 'getReminderType',
        'responsible_user_id' => 'getResponsibleUserId',
        'sales_channel' => 'getSalesChannel',
        'sales_invoice_email_addresses' => 'getSalesInvoiceEmailAddresses',
        'sales_order_email_addresses' => 'getSalesOrderEmailAddresses',
        'start_date' => 'getStartDate',
        'template' => 'getTemplate',
        'term_of_payment_id' => 'getTermOfPaymentId',
        'termination_reason_id' => 'getTerminationReasonId',
        'ticket_service_level_agreement_id' => 'getTicketServiceLevelAgreementId',
        'types' => 'getTypes',
        'unlimited' => 'getUnlimited'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('disable_record_emailing_rule', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('additional_addresses', $data ?? [], null);
        $this->setIfExists('authorization_unit_id', $data ?? [], null);
        $this->setIfExists('automatic_extension', $data ?? [], null);
        $this->setIfExists('bill_until', $data ?? [], null);
        $this->setIfExists('billing_day', $data ?? [], null);
        $this->setIfExists('billing_target_invoice_status', $data ?? [], null);
        $this->setIfExists('billing_type', $data ?? [], null);
        $this->setIfExists('cancellation_date', $data ?? [], null);
        $this->setIfExists('cancellation_period_quantity', $data ?? [], null);
        $this->setIfExists('cancellation_period_softframe', $data ?? [], null);
        $this->setIfExists('cancellation_period_unit', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('commission_sales_partners', $data ?? [], null);
        $this->setIfExists('contract_cost_items', $data ?? [], null);
        $this->setIfExists('contract_date', $data ?? [], null);
        $this->setIfExists('contract_items', $data ?? [], null);
        $this->setIfExists('contract_number', $data ?? [], null);
        $this->setIfExists('contract_number_at_party', $data ?? [], null);
        $this->setIfExists('contract_status', $data ?? [], null);
        $this->setIfExists('correspondence_address', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('delivery_email_addresses', $data ?? [], null);
        $this->setIfExists('differing_correspondence_address', $data ?? [], null);
        $this->setIfExists('differing_delivery_address', $data ?? [], null);
        $this->setIfExists('differing_invoice_address', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('extension_quantity', $data ?? [], null);
        $this->setIfExists('extension_unit', $data ?? [], null);
        $this->setIfExists('factoring', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('invoice_recipient_id', $data ?? [], null);
        $this->setIfExists('latest_cancellation_warning_quantity', $data ?? [], null);
        $this->setIfExists('latest_cancellation_warning_unit', $data ?? [], null);
        $this->setIfExists('latest_possible_termination_date', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('next_contract_billing_date', $data ?? [], null);
        $this->setIfExists('non_standard_input_tax_id', $data ?? [], null);
        $this->setIfExists('order_number_at_customer', $data ?? [], null);
        $this->setIfExists('party_id', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('pricing_date', $data ?? [], null);
        $this->setIfExists('purchase_email_addresses', $data ?? [], null);
        $this->setIfExists('record_currency_id', $data ?? [], null);
        $this->setIfExists('record_email_addresses', $data ?? [], null);
        $this->setIfExists('reminder_date', $data ?? [], null);
        $this->setIfExists('reminder_send_type', $data ?? [], null);
        $this->setIfExists('reminder_type', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
        $this->setIfExists('sales_invoice_email_addresses', $data ?? [], null);
        $this->setIfExists('sales_order_email_addresses', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('term_of_payment_id', $data ?? [], null);
        $this->setIfExists('termination_reason_id', $data ?? [], null);
        $this->setIfExists('ticket_service_level_agreement_id', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('unlimited', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['commercial_language']) && (mb_strlen($this->container['commercial_language']) > 255)) {
            $invalidProperties[] = "invalid value for 'commercial_language', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_comment']) && (mb_strlen($this->container['record_comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_free_text']) && (mb_strlen($this->container['record_free_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_free_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_opening']) && (mb_strlen($this->container['record_opening']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_opening', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['commission']) && (mb_strlen($this->container['commission']) > 255)) {
            $invalidProperties[] = "invalid value for 'commission', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contract_number']) && (mb_strlen($this->container['contract_number']) > 64)) {
            $invalidProperties[] = "invalid value for 'contract_number', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['contract_number_at_party']) && (mb_strlen($this->container['contract_number_at_party']) > 30)) {
            $invalidProperties[] = "invalid value for 'contract_number_at_party', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 2048)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['order_number_at_customer']) && (mb_strlen($this->container['order_number_at_customer']) > 64)) {
            $invalidProperties[] = "invalid value for 'order_number_at_customer', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        if ((mb_strlen($commercial_language) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commercial_language when calling Contract., must be smaller than or equal to 255.');
        }

        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Contract., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disable_record_emailing_rule
     *
     * @return bool|null
     */
    public function getDisableRecordEmailingRule()
    {
        return $this->container['disable_record_emailing_rule'];
    }

    /**
     * Sets disable_record_emailing_rule
     *
     * @param bool|null $disable_record_emailing_rule disable_record_emailing_rule
     *
     * @return self
     */
    public function setDisableRecordEmailingRule($disable_record_emailing_rule)
    {
        if (is_null($disable_record_emailing_rule)) {
            throw new \InvalidArgumentException('non-nullable disable_record_emailing_rule cannot be null');
        }
        $this->container['disable_record_emailing_rule'] = $disable_record_emailing_rule;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        if ((mb_strlen($record_comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_comment when calling Contract., must be smaller than or equal to 255.');
        }

        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        if ((mb_strlen($record_free_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_free_text when calling Contract., must be smaller than or equal to 255.');
        }

        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        if ((mb_strlen($record_opening) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_opening when calling Contract., must be smaller than or equal to 255.');
        }

        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets additional_addresses
     *
     * @return \kruegge82\weclapp\Model\ContractAdditionalAddress[]|null
     */
    public function getAdditionalAddresses()
    {
        return $this->container['additional_addresses'];
    }

    /**
     * Sets additional_addresses
     *
     * @param \kruegge82\weclapp\Model\ContractAdditionalAddress[]|null $additional_addresses additional_addresses
     *
     * @return self
     */
    public function setAdditionalAddresses($additional_addresses)
    {
        if (is_null($additional_addresses)) {
            throw new \InvalidArgumentException('non-nullable additional_addresses cannot be null');
        }
        $this->container['additional_addresses'] = $additional_addresses;

        return $this;
    }

    /**
     * Gets authorization_unit_id
     *
     * @return string|null
     */
    public function getAuthorizationUnitId()
    {
        return $this->container['authorization_unit_id'];
    }

    /**
     * Sets authorization_unit_id
     *
     * @param string|null $authorization_unit_id authorization_unit_id
     *
     * @return self
     */
    public function setAuthorizationUnitId($authorization_unit_id)
    {
        if (is_null($authorization_unit_id)) {
            throw new \InvalidArgumentException('non-nullable authorization_unit_id cannot be null');
        }
        $this->container['authorization_unit_id'] = $authorization_unit_id;

        return $this;
    }

    /**
     * Gets automatic_extension
     *
     * @return bool|null
     */
    public function getAutomaticExtension()
    {
        return $this->container['automatic_extension'];
    }

    /**
     * Sets automatic_extension
     *
     * @param bool|null $automatic_extension automatic_extension
     *
     * @return self
     */
    public function setAutomaticExtension($automatic_extension)
    {
        if (is_null($automatic_extension)) {
            throw new \InvalidArgumentException('non-nullable automatic_extension cannot be null');
        }
        $this->container['automatic_extension'] = $automatic_extension;

        return $this;
    }

    /**
     * Gets bill_until
     *
     * @return \kruegge82\weclapp\Model\BillUntil|null
     */
    public function getBillUntil()
    {
        return $this->container['bill_until'];
    }

    /**
     * Sets bill_until
     *
     * @param \kruegge82\weclapp\Model\BillUntil|null $bill_until bill_until
     *
     * @return self
     */
    public function setBillUntil($bill_until)
    {
        if (is_null($bill_until)) {
            throw new \InvalidArgumentException('non-nullable bill_until cannot be null');
        }
        $this->container['bill_until'] = $bill_until;

        return $this;
    }

    /**
     * Gets billing_day
     *
     * @return int|null
     */
    public function getBillingDay()
    {
        return $this->container['billing_day'];
    }

    /**
     * Sets billing_day
     *
     * @param int|null $billing_day billing_day
     *
     * @return self
     */
    public function setBillingDay($billing_day)
    {
        if (is_null($billing_day)) {
            throw new \InvalidArgumentException('non-nullable billing_day cannot be null');
        }
        $this->container['billing_day'] = $billing_day;

        return $this;
    }

    /**
     * Gets billing_target_invoice_status
     *
     * @return \kruegge82\weclapp\Model\DesiredInvoiceStatusType|null
     */
    public function getBillingTargetInvoiceStatus()
    {
        return $this->container['billing_target_invoice_status'];
    }

    /**
     * Sets billing_target_invoice_status
     *
     * @param \kruegge82\weclapp\Model\DesiredInvoiceStatusType|null $billing_target_invoice_status billing_target_invoice_status
     *
     * @return self
     */
    public function setBillingTargetInvoiceStatus($billing_target_invoice_status)
    {
        if (is_null($billing_target_invoice_status)) {
            throw new \InvalidArgumentException('non-nullable billing_target_invoice_status cannot be null');
        }
        $this->container['billing_target_invoice_status'] = $billing_target_invoice_status;

        return $this;
    }

    /**
     * Gets billing_type
     *
     * @return \kruegge82\weclapp\Model\ContractBillingType|null
     */
    public function getBillingType()
    {
        return $this->container['billing_type'];
    }

    /**
     * Sets billing_type
     *
     * @param \kruegge82\weclapp\Model\ContractBillingType|null $billing_type billing_type
     *
     * @return self
     */
    public function setBillingType($billing_type)
    {
        if (is_null($billing_type)) {
            throw new \InvalidArgumentException('non-nullable billing_type cannot be null');
        }
        $this->container['billing_type'] = $billing_type;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return int|null
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param int|null $cancellation_date cancellation_date
     *
     * @return self
     */
    public function setCancellationDate($cancellation_date)
    {
        if (is_null($cancellation_date)) {
            throw new \InvalidArgumentException('non-nullable cancellation_date cannot be null');
        }
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets cancellation_period_quantity
     *
     * @return int|null
     */
    public function getCancellationPeriodQuantity()
    {
        return $this->container['cancellation_period_quantity'];
    }

    /**
     * Sets cancellation_period_quantity
     *
     * @param int|null $cancellation_period_quantity cancellation_period_quantity
     *
     * @return self
     */
    public function setCancellationPeriodQuantity($cancellation_period_quantity)
    {
        if (is_null($cancellation_period_quantity)) {
            throw new \InvalidArgumentException('non-nullable cancellation_period_quantity cannot be null');
        }
        $this->container['cancellation_period_quantity'] = $cancellation_period_quantity;

        return $this;
    }

    /**
     * Gets cancellation_period_softframe
     *
     * @return \kruegge82\weclapp\Model\ContractSoftframe|null
     */
    public function getCancellationPeriodSoftframe()
    {
        return $this->container['cancellation_period_softframe'];
    }

    /**
     * Sets cancellation_period_softframe
     *
     * @param \kruegge82\weclapp\Model\ContractSoftframe|null $cancellation_period_softframe cancellation_period_softframe
     *
     * @return self
     */
    public function setCancellationPeriodSoftframe($cancellation_period_softframe)
    {
        if (is_null($cancellation_period_softframe)) {
            throw new \InvalidArgumentException('non-nullable cancellation_period_softframe cannot be null');
        }
        $this->container['cancellation_period_softframe'] = $cancellation_period_softframe;

        return $this;
    }

    /**
     * Gets cancellation_period_unit
     *
     * @return \kruegge82\weclapp\Model\ContractUnitType|null
     */
    public function getCancellationPeriodUnit()
    {
        return $this->container['cancellation_period_unit'];
    }

    /**
     * Sets cancellation_period_unit
     *
     * @param \kruegge82\weclapp\Model\ContractUnitType|null $cancellation_period_unit cancellation_period_unit
     *
     * @return self
     */
    public function setCancellationPeriodUnit($cancellation_period_unit)
    {
        if (is_null($cancellation_period_unit)) {
            throw new \InvalidArgumentException('non-nullable cancellation_period_unit cannot be null');
        }
        $this->container['cancellation_period_unit'] = $cancellation_period_unit;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return string|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param string|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        if ((mb_strlen($commission) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commission when calling Contract., must be smaller than or equal to 255.');
        }

        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets commission_sales_partners
     *
     * @return \kruegge82\weclapp\Model\CommissionSalesPartner[]|null
     */
    public function getCommissionSalesPartners()
    {
        return $this->container['commission_sales_partners'];
    }

    /**
     * Sets commission_sales_partners
     *
     * @param \kruegge82\weclapp\Model\CommissionSalesPartner[]|null $commission_sales_partners commission_sales_partners
     *
     * @return self
     */
    public function setCommissionSalesPartners($commission_sales_partners)
    {
        if (is_null($commission_sales_partners)) {
            throw new \InvalidArgumentException('non-nullable commission_sales_partners cannot be null');
        }
        $this->container['commission_sales_partners'] = $commission_sales_partners;

        return $this;
    }

    /**
     * Gets contract_cost_items
     *
     * @return \kruegge82\weclapp\Model\ContractCostItem[]|null
     */
    public function getContractCostItems()
    {
        return $this->container['contract_cost_items'];
    }

    /**
     * Sets contract_cost_items
     *
     * @param \kruegge82\weclapp\Model\ContractCostItem[]|null $contract_cost_items contract_cost_items
     *
     * @return self
     */
    public function setContractCostItems($contract_cost_items)
    {
        if (is_null($contract_cost_items)) {
            throw new \InvalidArgumentException('non-nullable contract_cost_items cannot be null');
        }
        $this->container['contract_cost_items'] = $contract_cost_items;

        return $this;
    }

    /**
     * Gets contract_date
     *
     * @return int|null
     */
    public function getContractDate()
    {
        return $this->container['contract_date'];
    }

    /**
     * Sets contract_date
     *
     * @param int|null $contract_date contract_date
     *
     * @return self
     */
    public function setContractDate($contract_date)
    {
        if (is_null($contract_date)) {
            throw new \InvalidArgumentException('non-nullable contract_date cannot be null');
        }
        $this->container['contract_date'] = $contract_date;

        return $this;
    }

    /**
     * Gets contract_items
     *
     * @return \kruegge82\weclapp\Model\ContractItem[]|null
     */
    public function getContractItems()
    {
        return $this->container['contract_items'];
    }

    /**
     * Sets contract_items
     *
     * @param \kruegge82\weclapp\Model\ContractItem[]|null $contract_items contract_items
     *
     * @return self
     */
    public function setContractItems($contract_items)
    {
        if (is_null($contract_items)) {
            throw new \InvalidArgumentException('non-nullable contract_items cannot be null');
        }
        $this->container['contract_items'] = $contract_items;

        return $this;
    }

    /**
     * Gets contract_number
     *
     * @return string|null
     */
    public function getContractNumber()
    {
        return $this->container['contract_number'];
    }

    /**
     * Sets contract_number
     *
     * @param string|null $contract_number contract_number
     *
     * @return self
     */
    public function setContractNumber($contract_number)
    {
        if (is_null($contract_number)) {
            throw new \InvalidArgumentException('non-nullable contract_number cannot be null');
        }
        if ((mb_strlen($contract_number) > 64)) {
            throw new \InvalidArgumentException('invalid length for $contract_number when calling Contract., must be smaller than or equal to 64.');
        }

        $this->container['contract_number'] = $contract_number;

        return $this;
    }

    /**
     * Gets contract_number_at_party
     *
     * @return string|null
     */
    public function getContractNumberAtParty()
    {
        return $this->container['contract_number_at_party'];
    }

    /**
     * Sets contract_number_at_party
     *
     * @param string|null $contract_number_at_party contract_number_at_party
     *
     * @return self
     */
    public function setContractNumberAtParty($contract_number_at_party)
    {
        if (is_null($contract_number_at_party)) {
            throw new \InvalidArgumentException('non-nullable contract_number_at_party cannot be null');
        }
        if ((mb_strlen($contract_number_at_party) > 30)) {
            throw new \InvalidArgumentException('invalid length for $contract_number_at_party when calling Contract., must be smaller than or equal to 30.');
        }

        $this->container['contract_number_at_party'] = $contract_number_at_party;

        return $this;
    }

    /**
     * Gets contract_status
     *
     * @return \kruegge82\weclapp\Model\ContractStatus|null
     */
    public function getContractStatus()
    {
        return $this->container['contract_status'];
    }

    /**
     * Sets contract_status
     *
     * @param \kruegge82\weclapp\Model\ContractStatus|null $contract_status contract_status
     *
     * @return self
     */
    public function setContractStatus($contract_status)
    {
        if (is_null($contract_status)) {
            throw new \InvalidArgumentException('non-nullable contract_status cannot be null');
        }
        $this->container['contract_status'] = $contract_status;

        return $this;
    }

    /**
     * Gets correspondence_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getCorrespondenceAddress()
    {
        return $this->container['correspondence_address'];
    }

    /**
     * Sets correspondence_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $correspondence_address correspondence_address
     *
     * @return self
     */
    public function setCorrespondenceAddress($correspondence_address)
    {
        if (is_null($correspondence_address)) {
            throw new \InvalidArgumentException('non-nullable correspondence_address cannot be null');
        }
        $this->container['correspondence_address'] = $correspondence_address;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets delivery_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getDeliveryEmailAddresses()
    {
        return $this->container['delivery_email_addresses'];
    }

    /**
     * Sets delivery_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $delivery_email_addresses delivery_email_addresses
     *
     * @return self
     */
    public function setDeliveryEmailAddresses($delivery_email_addresses)
    {
        if (is_null($delivery_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable delivery_email_addresses cannot be null');
        }
        $this->container['delivery_email_addresses'] = $delivery_email_addresses;

        return $this;
    }

    /**
     * Gets differing_correspondence_address
     *
     * @return bool|null
     */
    public function getDifferingCorrespondenceAddress()
    {
        return $this->container['differing_correspondence_address'];
    }

    /**
     * Sets differing_correspondence_address
     *
     * @param bool|null $differing_correspondence_address differing_correspondence_address
     *
     * @return self
     */
    public function setDifferingCorrespondenceAddress($differing_correspondence_address)
    {
        if (is_null($differing_correspondence_address)) {
            throw new \InvalidArgumentException('non-nullable differing_correspondence_address cannot be null');
        }
        $this->container['differing_correspondence_address'] = $differing_correspondence_address;

        return $this;
    }

    /**
     * Gets differing_delivery_address
     *
     * @return bool|null
     */
    public function getDifferingDeliveryAddress()
    {
        return $this->container['differing_delivery_address'];
    }

    /**
     * Sets differing_delivery_address
     *
     * @param bool|null $differing_delivery_address differing_delivery_address
     *
     * @return self
     */
    public function setDifferingDeliveryAddress($differing_delivery_address)
    {
        if (is_null($differing_delivery_address)) {
            throw new \InvalidArgumentException('non-nullable differing_delivery_address cannot be null');
        }
        $this->container['differing_delivery_address'] = $differing_delivery_address;

        return $this;
    }

    /**
     * Gets differing_invoice_address
     *
     * @return bool|null
     */
    public function getDifferingInvoiceAddress()
    {
        return $this->container['differing_invoice_address'];
    }

    /**
     * Sets differing_invoice_address
     *
     * @param bool|null $differing_invoice_address differing_invoice_address
     *
     * @return self
     */
    public function setDifferingInvoiceAddress($differing_invoice_address)
    {
        if (is_null($differing_invoice_address)) {
            throw new \InvalidArgumentException('non-nullable differing_invoice_address cannot be null');
        }
        $this->container['differing_invoice_address'] = $differing_invoice_address;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return int|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param int|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets extension_quantity
     *
     * @return int|null
     */
    public function getExtensionQuantity()
    {
        return $this->container['extension_quantity'];
    }

    /**
     * Sets extension_quantity
     *
     * @param int|null $extension_quantity extension_quantity
     *
     * @return self
     */
    public function setExtensionQuantity($extension_quantity)
    {
        if (is_null($extension_quantity)) {
            throw new \InvalidArgumentException('non-nullable extension_quantity cannot be null');
        }
        $this->container['extension_quantity'] = $extension_quantity;

        return $this;
    }

    /**
     * Gets extension_unit
     *
     * @return \kruegge82\weclapp\Model\ContractUnitType|null
     */
    public function getExtensionUnit()
    {
        return $this->container['extension_unit'];
    }

    /**
     * Sets extension_unit
     *
     * @param \kruegge82\weclapp\Model\ContractUnitType|null $extension_unit extension_unit
     *
     * @return self
     */
    public function setExtensionUnit($extension_unit)
    {
        if (is_null($extension_unit)) {
            throw new \InvalidArgumentException('non-nullable extension_unit cannot be null');
        }
        $this->container['extension_unit'] = $extension_unit;

        return $this;
    }

    /**
     * Gets factoring
     *
     * @return bool|null
     */
    public function getFactoring()
    {
        return $this->container['factoring'];
    }

    /**
     * Sets factoring
     *
     * @param bool|null $factoring factoring
     *
     * @return self
     */
    public function setFactoring($factoring)
    {
        if (is_null($factoring)) {
            throw new \InvalidArgumentException('non-nullable factoring cannot be null');
        }
        $this->container['factoring'] = $factoring;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets invoice_recipient_id
     *
     * @return string|null
     */
    public function getInvoiceRecipientId()
    {
        return $this->container['invoice_recipient_id'];
    }

    /**
     * Sets invoice_recipient_id
     *
     * @param string|null $invoice_recipient_id invoice_recipient_id
     *
     * @return self
     */
    public function setInvoiceRecipientId($invoice_recipient_id)
    {
        if (is_null($invoice_recipient_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_recipient_id cannot be null');
        }
        $this->container['invoice_recipient_id'] = $invoice_recipient_id;

        return $this;
    }

    /**
     * Gets latest_cancellation_warning_quantity
     *
     * @return int|null
     */
    public function getLatestCancellationWarningQuantity()
    {
        return $this->container['latest_cancellation_warning_quantity'];
    }

    /**
     * Sets latest_cancellation_warning_quantity
     *
     * @param int|null $latest_cancellation_warning_quantity latest_cancellation_warning_quantity
     *
     * @return self
     */
    public function setLatestCancellationWarningQuantity($latest_cancellation_warning_quantity)
    {
        if (is_null($latest_cancellation_warning_quantity)) {
            throw new \InvalidArgumentException('non-nullable latest_cancellation_warning_quantity cannot be null');
        }
        $this->container['latest_cancellation_warning_quantity'] = $latest_cancellation_warning_quantity;

        return $this;
    }

    /**
     * Gets latest_cancellation_warning_unit
     *
     * @return \kruegge82\weclapp\Model\ContractUnitType|null
     */
    public function getLatestCancellationWarningUnit()
    {
        return $this->container['latest_cancellation_warning_unit'];
    }

    /**
     * Sets latest_cancellation_warning_unit
     *
     * @param \kruegge82\weclapp\Model\ContractUnitType|null $latest_cancellation_warning_unit latest_cancellation_warning_unit
     *
     * @return self
     */
    public function setLatestCancellationWarningUnit($latest_cancellation_warning_unit)
    {
        if (is_null($latest_cancellation_warning_unit)) {
            throw new \InvalidArgumentException('non-nullable latest_cancellation_warning_unit cannot be null');
        }
        $this->container['latest_cancellation_warning_unit'] = $latest_cancellation_warning_unit;

        return $this;
    }

    /**
     * Gets latest_possible_termination_date
     *
     * @return int|null
     */
    public function getLatestPossibleTerminationDate()
    {
        return $this->container['latest_possible_termination_date'];
    }

    /**
     * Sets latest_possible_termination_date
     *
     * @param int|null $latest_possible_termination_date latest_possible_termination_date
     *
     * @return self
     */
    public function setLatestPossibleTerminationDate($latest_possible_termination_date)
    {
        if (is_null($latest_possible_termination_date)) {
            throw new \InvalidArgumentException('non-nullable latest_possible_termination_date cannot be null');
        }
        $this->container['latest_possible_termination_date'] = $latest_possible_termination_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Contract., must be smaller than or equal to 2048.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets next_contract_billing_date
     *
     * @return int|null
     */
    public function getNextContractBillingDate()
    {
        return $this->container['next_contract_billing_date'];
    }

    /**
     * Sets next_contract_billing_date
     *
     * @param int|null $next_contract_billing_date next_contract_billing_date
     *
     * @return self
     */
    public function setNextContractBillingDate($next_contract_billing_date)
    {
        if (is_null($next_contract_billing_date)) {
            throw new \InvalidArgumentException('non-nullable next_contract_billing_date cannot be null');
        }
        $this->container['next_contract_billing_date'] = $next_contract_billing_date;

        return $this;
    }

    /**
     * Gets non_standard_input_tax_id
     *
     * @return string|null
     */
    public function getNonStandardInputTaxId()
    {
        return $this->container['non_standard_input_tax_id'];
    }

    /**
     * Sets non_standard_input_tax_id
     *
     * @param string|null $non_standard_input_tax_id non_standard_input_tax_id
     *
     * @return self
     */
    public function setNonStandardInputTaxId($non_standard_input_tax_id)
    {
        if (is_null($non_standard_input_tax_id)) {
            throw new \InvalidArgumentException('non-nullable non_standard_input_tax_id cannot be null');
        }
        $this->container['non_standard_input_tax_id'] = $non_standard_input_tax_id;

        return $this;
    }

    /**
     * Gets order_number_at_customer
     *
     * @return string|null
     */
    public function getOrderNumberAtCustomer()
    {
        return $this->container['order_number_at_customer'];
    }

    /**
     * Sets order_number_at_customer
     *
     * @param string|null $order_number_at_customer order_number_at_customer
     *
     * @return self
     */
    public function setOrderNumberAtCustomer($order_number_at_customer)
    {
        if (is_null($order_number_at_customer)) {
            throw new \InvalidArgumentException('non-nullable order_number_at_customer cannot be null');
        }
        if ((mb_strlen($order_number_at_customer) > 64)) {
            throw new \InvalidArgumentException('invalid length for $order_number_at_customer when calling Contract., must be smaller than or equal to 64.');
        }

        $this->container['order_number_at_customer'] = $order_number_at_customer;

        return $this;
    }

    /**
     * Gets party_id
     *
     * @return string|null
     */
    public function getPartyId()
    {
        return $this->container['party_id'];
    }

    /**
     * Sets party_id
     *
     * @param string|null $party_id party_id
     *
     * @return self
     */
    public function setPartyId($party_id)
    {
        if (is_null($party_id)) {
            throw new \InvalidArgumentException('non-nullable party_id cannot be null');
        }
        $this->container['party_id'] = $party_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets pricing_date
     *
     * @return int|null
     */
    public function getPricingDate()
    {
        return $this->container['pricing_date'];
    }

    /**
     * Sets pricing_date
     *
     * @param int|null $pricing_date pricing_date
     *
     * @return self
     */
    public function setPricingDate($pricing_date)
    {
        if (is_null($pricing_date)) {
            throw new \InvalidArgumentException('non-nullable pricing_date cannot be null');
        }
        $this->container['pricing_date'] = $pricing_date;

        return $this;
    }

    /**
     * Gets purchase_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getPurchaseEmailAddresses()
    {
        return $this->container['purchase_email_addresses'];
    }

    /**
     * Sets purchase_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $purchase_email_addresses purchase_email_addresses
     *
     * @return self
     */
    public function setPurchaseEmailAddresses($purchase_email_addresses)
    {
        if (is_null($purchase_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable purchase_email_addresses cannot be null');
        }
        $this->container['purchase_email_addresses'] = $purchase_email_addresses;

        return $this;
    }

    /**
     * Gets record_currency_id
     *
     * @return string|null
     */
    public function getRecordCurrencyId()
    {
        return $this->container['record_currency_id'];
    }

    /**
     * Sets record_currency_id
     *
     * @param string|null $record_currency_id record_currency_id
     *
     * @return self
     */
    public function setRecordCurrencyId($record_currency_id)
    {
        if (is_null($record_currency_id)) {
            throw new \InvalidArgumentException('non-nullable record_currency_id cannot be null');
        }
        $this->container['record_currency_id'] = $record_currency_id;

        return $this;
    }

    /**
     * Gets record_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getRecordEmailAddresses()
    {
        return $this->container['record_email_addresses'];
    }

    /**
     * Sets record_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $record_email_addresses record_email_addresses
     *
     * @return self
     */
    public function setRecordEmailAddresses($record_email_addresses)
    {
        if (is_null($record_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable record_email_addresses cannot be null');
        }
        $this->container['record_email_addresses'] = $record_email_addresses;

        return $this;
    }

    /**
     * Gets reminder_date
     *
     * @return int|null
     */
    public function getReminderDate()
    {
        return $this->container['reminder_date'];
    }

    /**
     * Sets reminder_date
     *
     * @param int|null $reminder_date reminder_date
     *
     * @return self
     */
    public function setReminderDate($reminder_date)
    {
        if (is_null($reminder_date)) {
            throw new \InvalidArgumentException('non-nullable reminder_date cannot be null');
        }
        $this->container['reminder_date'] = $reminder_date;

        return $this;
    }

    /**
     * Gets reminder_send_type
     *
     * @return \kruegge82\weclapp\Model\ReminderSendType|null
     */
    public function getReminderSendType()
    {
        return $this->container['reminder_send_type'];
    }

    /**
     * Sets reminder_send_type
     *
     * @param \kruegge82\weclapp\Model\ReminderSendType|null $reminder_send_type reminder_send_type
     *
     * @return self
     */
    public function setReminderSendType($reminder_send_type)
    {
        if (is_null($reminder_send_type)) {
            throw new \InvalidArgumentException('non-nullable reminder_send_type cannot be null');
        }
        $this->container['reminder_send_type'] = $reminder_send_type;

        return $this;
    }

    /**
     * Gets reminder_type
     *
     * @return \kruegge82\weclapp\Model\ContractReminderType|null
     */
    public function getReminderType()
    {
        return $this->container['reminder_type'];
    }

    /**
     * Sets reminder_type
     *
     * @param \kruegge82\weclapp\Model\ContractReminderType|null $reminder_type reminder_type
     *
     * @return self
     */
    public function setReminderType($reminder_type)
    {
        if (is_null($reminder_type)) {
            throw new \InvalidArgumentException('non-nullable reminder_type cannot be null');
        }
        $this->container['reminder_type'] = $reminder_type;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets sales_invoice_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getSalesInvoiceEmailAddresses()
    {
        return $this->container['sales_invoice_email_addresses'];
    }

    /**
     * Sets sales_invoice_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $sales_invoice_email_addresses sales_invoice_email_addresses
     *
     * @return self
     */
    public function setSalesInvoiceEmailAddresses($sales_invoice_email_addresses)
    {
        if (is_null($sales_invoice_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_email_addresses cannot be null');
        }
        $this->container['sales_invoice_email_addresses'] = $sales_invoice_email_addresses;

        return $this;
    }

    /**
     * Gets sales_order_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getSalesOrderEmailAddresses()
    {
        return $this->container['sales_order_email_addresses'];
    }

    /**
     * Sets sales_order_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $sales_order_email_addresses sales_order_email_addresses
     *
     * @return self
     */
    public function setSalesOrderEmailAddresses($sales_order_email_addresses)
    {
        if (is_null($sales_order_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable sales_order_email_addresses cannot be null');
        }
        $this->container['sales_order_email_addresses'] = $sales_order_email_addresses;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets term_of_payment_id
     *
     * @return string|null
     */
    public function getTermOfPaymentId()
    {
        return $this->container['term_of_payment_id'];
    }

    /**
     * Sets term_of_payment_id
     *
     * @param string|null $term_of_payment_id term_of_payment_id
     *
     * @return self
     */
    public function setTermOfPaymentId($term_of_payment_id)
    {
        if (is_null($term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_id cannot be null');
        }
        $this->container['term_of_payment_id'] = $term_of_payment_id;

        return $this;
    }

    /**
     * Gets termination_reason_id
     *
     * @return string|null
     */
    public function getTerminationReasonId()
    {
        return $this->container['termination_reason_id'];
    }

    /**
     * Sets termination_reason_id
     *
     * @param string|null $termination_reason_id termination_reason_id
     *
     * @return self
     */
    public function setTerminationReasonId($termination_reason_id)
    {
        if (is_null($termination_reason_id)) {
            throw new \InvalidArgumentException('non-nullable termination_reason_id cannot be null');
        }
        $this->container['termination_reason_id'] = $termination_reason_id;

        return $this;
    }

    /**
     * Gets ticket_service_level_agreement_id
     *
     * @return string|null
     */
    public function getTicketServiceLevelAgreementId()
    {
        return $this->container['ticket_service_level_agreement_id'];
    }

    /**
     * Sets ticket_service_level_agreement_id
     *
     * @param string|null $ticket_service_level_agreement_id ticket_service_level_agreement_id
     *
     * @return self
     */
    public function setTicketServiceLevelAgreementId($ticket_service_level_agreement_id)
    {
        if (is_null($ticket_service_level_agreement_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_service_level_agreement_id cannot be null');
        }
        $this->container['ticket_service_level_agreement_id'] = $ticket_service_level_agreement_id;

        return $this;
    }

    /**
     * Gets types
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $types types
     *
     * @return self
     */
    public function setTypes($types)
    {
        if (is_null($types)) {
            throw new \InvalidArgumentException('non-nullable types cannot be null');
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets unlimited
     *
     * @return bool|null
     */
    public function getUnlimited()
    {
        return $this->container['unlimited'];
    }

    /**
     * Sets unlimited
     *
     * @param bool|null $unlimited unlimited
     *
     * @return self
     */
    public function setUnlimited($unlimited)
    {
        if (is_null($unlimited)) {
            throw new \InvalidArgumentException('non-nullable unlimited cannot be null');
        }
        $this->container['unlimited'] = $unlimited;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


