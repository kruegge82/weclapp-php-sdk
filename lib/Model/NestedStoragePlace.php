<?php
/**
 * NestedStoragePlace
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * NestedStoragePlace Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NestedStoragePlace implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'nestedStoragePlace';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'name' => 'string',
        'active' => 'bool',
        'barcode' => 'string',
        'blocked_for_resupply' => 'bool',
        'blocked_for_resupply_reason_id' => 'string',
        'customer_id' => 'string',
        'field_number' => 'int',
        'level_number' => 'int',
        'storage_place_size_id' => 'string',
        'storage_place_type' => '\kruegge82\weclapp\Model\StoragePlaceType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'name' => null,
        'active' => null,
        'barcode' => null,
        'blocked_for_resupply' => null,
        'blocked_for_resupply_reason_id' => null,
        'customer_id' => null,
        'field_number' => 'int32',
        'level_number' => 'int32',
        'storage_place_size_id' => null,
        'storage_place_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'name' => false,
        'active' => false,
        'barcode' => false,
        'blocked_for_resupply' => false,
        'blocked_for_resupply_reason_id' => false,
        'customer_id' => false,
        'field_number' => false,
        'level_number' => false,
        'storage_place_size_id' => false,
        'storage_place_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'name' => 'name',
        'active' => 'active',
        'barcode' => 'barcode',
        'blocked_for_resupply' => 'blockedForResupply',
        'blocked_for_resupply_reason_id' => 'blockedForResupplyReasonId',
        'customer_id' => 'customerId',
        'field_number' => 'fieldNumber',
        'level_number' => 'levelNumber',
        'storage_place_size_id' => 'storagePlaceSizeId',
        'storage_place_type' => 'storagePlaceType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'name' => 'setName',
        'active' => 'setActive',
        'barcode' => 'setBarcode',
        'blocked_for_resupply' => 'setBlockedForResupply',
        'blocked_for_resupply_reason_id' => 'setBlockedForResupplyReasonId',
        'customer_id' => 'setCustomerId',
        'field_number' => 'setFieldNumber',
        'level_number' => 'setLevelNumber',
        'storage_place_size_id' => 'setStoragePlaceSizeId',
        'storage_place_type' => 'setStoragePlaceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'name' => 'getName',
        'active' => 'getActive',
        'barcode' => 'getBarcode',
        'blocked_for_resupply' => 'getBlockedForResupply',
        'blocked_for_resupply_reason_id' => 'getBlockedForResupplyReasonId',
        'customer_id' => 'getCustomerId',
        'field_number' => 'getFieldNumber',
        'level_number' => 'getLevelNumber',
        'storage_place_size_id' => 'getStoragePlaceSizeId',
        'storage_place_type' => 'getStoragePlaceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('blocked_for_resupply', $data ?? [], null);
        $this->setIfExists('blocked_for_resupply_reason_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('field_number', $data ?? [], null);
        $this->setIfExists('level_number', $data ?? [], null);
        $this->setIfExists('storage_place_size_id', $data ?? [], null);
        $this->setIfExists('storage_place_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['barcode']) && (mb_strlen($this->container['barcode']) > 4000)) {
            $invalidProperties[] = "invalid value for 'barcode', the character length must be smaller than or equal to 4000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling NestedStoragePlace., must be smaller than or equal to 256.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        if ((mb_strlen($barcode) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $barcode when calling NestedStoragePlace., must be smaller than or equal to 4000.');
        }

        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets blocked_for_resupply
     *
     * @return bool|null
     */
    public function getBlockedForResupply()
    {
        return $this->container['blocked_for_resupply'];
    }

    /**
     * Sets blocked_for_resupply
     *
     * @param bool|null $blocked_for_resupply blocked_for_resupply
     *
     * @return self
     */
    public function setBlockedForResupply($blocked_for_resupply)
    {
        if (is_null($blocked_for_resupply)) {
            throw new \InvalidArgumentException('non-nullable blocked_for_resupply cannot be null');
        }
        $this->container['blocked_for_resupply'] = $blocked_for_resupply;

        return $this;
    }

    /**
     * Gets blocked_for_resupply_reason_id
     *
     * @return string|null
     */
    public function getBlockedForResupplyReasonId()
    {
        return $this->container['blocked_for_resupply_reason_id'];
    }

    /**
     * Sets blocked_for_resupply_reason_id
     *
     * @param string|null $blocked_for_resupply_reason_id blocked_for_resupply_reason_id
     *
     * @return self
     */
    public function setBlockedForResupplyReasonId($blocked_for_resupply_reason_id)
    {
        if (is_null($blocked_for_resupply_reason_id)) {
            throw new \InvalidArgumentException('non-nullable blocked_for_resupply_reason_id cannot be null');
        }
        $this->container['blocked_for_resupply_reason_id'] = $blocked_for_resupply_reason_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets field_number
     *
     * @return int|null
     */
    public function getFieldNumber()
    {
        return $this->container['field_number'];
    }

    /**
     * Sets field_number
     *
     * @param int|null $field_number field_number
     *
     * @return self
     */
    public function setFieldNumber($field_number)
    {
        if (is_null($field_number)) {
            throw new \InvalidArgumentException('non-nullable field_number cannot be null');
        }
        $this->container['field_number'] = $field_number;

        return $this;
    }

    /**
     * Gets level_number
     *
     * @return int|null
     */
    public function getLevelNumber()
    {
        return $this->container['level_number'];
    }

    /**
     * Sets level_number
     *
     * @param int|null $level_number level_number
     *
     * @return self
     */
    public function setLevelNumber($level_number)
    {
        if (is_null($level_number)) {
            throw new \InvalidArgumentException('non-nullable level_number cannot be null');
        }
        $this->container['level_number'] = $level_number;

        return $this;
    }

    /**
     * Gets storage_place_size_id
     *
     * @return string|null
     */
    public function getStoragePlaceSizeId()
    {
        return $this->container['storage_place_size_id'];
    }

    /**
     * Sets storage_place_size_id
     *
     * @param string|null $storage_place_size_id storage_place_size_id
     *
     * @return self
     */
    public function setStoragePlaceSizeId($storage_place_size_id)
    {
        if (is_null($storage_place_size_id)) {
            throw new \InvalidArgumentException('non-nullable storage_place_size_id cannot be null');
        }
        $this->container['storage_place_size_id'] = $storage_place_size_id;

        return $this;
    }

    /**
     * Gets storage_place_type
     *
     * @return \kruegge82\weclapp\Model\StoragePlaceType|null
     */
    public function getStoragePlaceType()
    {
        return $this->container['storage_place_type'];
    }

    /**
     * Sets storage_place_type
     *
     * @param \kruegge82\weclapp\Model\StoragePlaceType|null $storage_place_type storage_place_type
     *
     * @return self
     */
    public function setStoragePlaceType($storage_place_type)
    {
        if (is_null($storage_place_type)) {
            throw new \InvalidArgumentException('non-nullable storage_place_type cannot be null');
        }
        $this->container['storage_place_type'] = $storage_place_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


