<?php
/**
 * InventoryItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * InventoryItem Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InventoryItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inventoryItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'article_id' => 'string',
        'batch_number' => 'string',
        'comment' => 'string',
        'counted_quantity' => 'float',
        'created_date' => 'int',
        'expected_quantity' => 'float',
        'expiration_date' => 'int',
        'inbound_date' => 'int',
        'inventory_id' => 'string',
        'inventory_serial_numbers' => '\kruegge82\weclapp\Model\InventorySerialNumber[]',
        'inventory_transport_reference_id' => 'string',
        'last_modified_date' => 'int',
        'manual_position' => 'bool',
        'order_item_id' => 'string',
        'position_number' => 'string',
        'replacement_value' => 'float',
        'storage_place_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'article_id' => null,
        'batch_number' => null,
        'comment' => null,
        'counted_quantity' => 'number',
        'created_date' => 'timestamp',
        'expected_quantity' => 'number',
        'expiration_date' => 'timestamp',
        'inbound_date' => 'timestamp',
        'inventory_id' => null,
        'inventory_serial_numbers' => null,
        'inventory_transport_reference_id' => null,
        'last_modified_date' => 'timestamp',
        'manual_position' => null,
        'order_item_id' => null,
        'position_number' => null,
        'replacement_value' => 'number',
        'storage_place_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'article_id' => false,
        'batch_number' => false,
        'comment' => false,
        'counted_quantity' => false,
        'created_date' => false,
        'expected_quantity' => false,
        'expiration_date' => false,
        'inbound_date' => false,
        'inventory_id' => false,
        'inventory_serial_numbers' => false,
        'inventory_transport_reference_id' => false,
        'last_modified_date' => false,
        'manual_position' => false,
        'order_item_id' => false,
        'position_number' => false,
        'replacement_value' => false,
        'storage_place_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'article_id' => 'articleId',
        'batch_number' => 'batchNumber',
        'comment' => 'comment',
        'counted_quantity' => 'countedQuantity',
        'created_date' => 'createdDate',
        'expected_quantity' => 'expectedQuantity',
        'expiration_date' => 'expirationDate',
        'inbound_date' => 'inboundDate',
        'inventory_id' => 'inventoryId',
        'inventory_serial_numbers' => 'inventorySerialNumbers',
        'inventory_transport_reference_id' => 'inventoryTransportReferenceId',
        'last_modified_date' => 'lastModifiedDate',
        'manual_position' => 'manualPosition',
        'order_item_id' => 'orderItemId',
        'position_number' => 'positionNumber',
        'replacement_value' => 'replacementValue',
        'storage_place_id' => 'storagePlaceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'article_id' => 'setArticleId',
        'batch_number' => 'setBatchNumber',
        'comment' => 'setComment',
        'counted_quantity' => 'setCountedQuantity',
        'created_date' => 'setCreatedDate',
        'expected_quantity' => 'setExpectedQuantity',
        'expiration_date' => 'setExpirationDate',
        'inbound_date' => 'setInboundDate',
        'inventory_id' => 'setInventoryId',
        'inventory_serial_numbers' => 'setInventorySerialNumbers',
        'inventory_transport_reference_id' => 'setInventoryTransportReferenceId',
        'last_modified_date' => 'setLastModifiedDate',
        'manual_position' => 'setManualPosition',
        'order_item_id' => 'setOrderItemId',
        'position_number' => 'setPositionNumber',
        'replacement_value' => 'setReplacementValue',
        'storage_place_id' => 'setStoragePlaceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'article_id' => 'getArticleId',
        'batch_number' => 'getBatchNumber',
        'comment' => 'getComment',
        'counted_quantity' => 'getCountedQuantity',
        'created_date' => 'getCreatedDate',
        'expected_quantity' => 'getExpectedQuantity',
        'expiration_date' => 'getExpirationDate',
        'inbound_date' => 'getInboundDate',
        'inventory_id' => 'getInventoryId',
        'inventory_serial_numbers' => 'getInventorySerialNumbers',
        'inventory_transport_reference_id' => 'getInventoryTransportReferenceId',
        'last_modified_date' => 'getLastModifiedDate',
        'manual_position' => 'getManualPosition',
        'order_item_id' => 'getOrderItemId',
        'position_number' => 'getPositionNumber',
        'replacement_value' => 'getReplacementValue',
        'storage_place_id' => 'getStoragePlaceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('batch_number', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('counted_quantity', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('expected_quantity', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('inbound_date', $data ?? [], null);
        $this->setIfExists('inventory_id', $data ?? [], null);
        $this->setIfExists('inventory_serial_numbers', $data ?? [], null);
        $this->setIfExists('inventory_transport_reference_id', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('manual_position', $data ?? [], null);
        $this->setIfExists('order_item_id', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('replacement_value', $data ?? [], null);
        $this->setIfExists('storage_place_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inventory_id'] === null) {
            $invalidProperties[] = "'inventory_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return string|null
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string|null $batch_number batch_number
     *
     * @return self
     */
    public function setBatchNumber($batch_number)
    {
        if (is_null($batch_number)) {
            throw new \InvalidArgumentException('non-nullable batch_number cannot be null');
        }
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets counted_quantity
     *
     * @return float|null
     */
    public function getCountedQuantity()
    {
        return $this->container['counted_quantity'];
    }

    /**
     * Sets counted_quantity
     *
     * @param float|null $counted_quantity counted_quantity
     *
     * @return self
     */
    public function setCountedQuantity($counted_quantity)
    {
        if (is_null($counted_quantity)) {
            throw new \InvalidArgumentException('non-nullable counted_quantity cannot be null');
        }
        $this->container['counted_quantity'] = $counted_quantity;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets expected_quantity
     *
     * @return float|null
     */
    public function getExpectedQuantity()
    {
        return $this->container['expected_quantity'];
    }

    /**
     * Sets expected_quantity
     *
     * @param float|null $expected_quantity expected_quantity
     *
     * @return self
     */
    public function setExpectedQuantity($expected_quantity)
    {
        if (is_null($expected_quantity)) {
            throw new \InvalidArgumentException('non-nullable expected_quantity cannot be null');
        }
        $this->container['expected_quantity'] = $expected_quantity;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return int|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param int|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets inbound_date
     *
     * @return int|null
     */
    public function getInboundDate()
    {
        return $this->container['inbound_date'];
    }

    /**
     * Sets inbound_date
     *
     * @param int|null $inbound_date inbound_date
     *
     * @return self
     */
    public function setInboundDate($inbound_date)
    {
        if (is_null($inbound_date)) {
            throw new \InvalidArgumentException('non-nullable inbound_date cannot be null');
        }
        $this->container['inbound_date'] = $inbound_date;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return self
     */
    public function setInventoryId($inventory_id)
    {
        if (is_null($inventory_id)) {
            throw new \InvalidArgumentException('non-nullable inventory_id cannot be null');
        }
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets inventory_serial_numbers
     *
     * @return \kruegge82\weclapp\Model\InventorySerialNumber[]|null
     */
    public function getInventorySerialNumbers()
    {
        return $this->container['inventory_serial_numbers'];
    }

    /**
     * Sets inventory_serial_numbers
     *
     * @param \kruegge82\weclapp\Model\InventorySerialNumber[]|null $inventory_serial_numbers inventory_serial_numbers
     *
     * @return self
     */
    public function setInventorySerialNumbers($inventory_serial_numbers)
    {
        if (is_null($inventory_serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable inventory_serial_numbers cannot be null');
        }
        $this->container['inventory_serial_numbers'] = $inventory_serial_numbers;

        return $this;
    }

    /**
     * Gets inventory_transport_reference_id
     *
     * @return string|null
     */
    public function getInventoryTransportReferenceId()
    {
        return $this->container['inventory_transport_reference_id'];
    }

    /**
     * Sets inventory_transport_reference_id
     *
     * @param string|null $inventory_transport_reference_id inventory_transport_reference_id
     *
     * @return self
     */
    public function setInventoryTransportReferenceId($inventory_transport_reference_id)
    {
        if (is_null($inventory_transport_reference_id)) {
            throw new \InvalidArgumentException('non-nullable inventory_transport_reference_id cannot be null');
        }
        $this->container['inventory_transport_reference_id'] = $inventory_transport_reference_id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets manual_position
     *
     * @return bool|null
     */
    public function getManualPosition()
    {
        return $this->container['manual_position'];
    }

    /**
     * Sets manual_position
     *
     * @param bool|null $manual_position manual_position
     *
     * @return self
     */
    public function setManualPosition($manual_position)
    {
        if (is_null($manual_position)) {
            throw new \InvalidArgumentException('non-nullable manual_position cannot be null');
        }
        $this->container['manual_position'] = $manual_position;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return string|null
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param string|null $order_item_id order_item_id
     *
     * @return self
     */
    public function setOrderItemId($order_item_id)
    {
        if (is_null($order_item_id)) {
            throw new \InvalidArgumentException('non-nullable order_item_id cannot be null');
        }
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return string|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param string|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets replacement_value
     *
     * @return float|null
     */
    public function getReplacementValue()
    {
        return $this->container['replacement_value'];
    }

    /**
     * Sets replacement_value
     *
     * @param float|null $replacement_value replacement_value
     *
     * @return self
     */
    public function setReplacementValue($replacement_value)
    {
        if (is_null($replacement_value)) {
            throw new \InvalidArgumentException('non-nullable replacement_value cannot be null');
        }
        $this->container['replacement_value'] = $replacement_value;

        return $this;
    }

    /**
     * Gets storage_place_id
     *
     * @return string|null
     */
    public function getStoragePlaceId()
    {
        return $this->container['storage_place_id'];
    }

    /**
     * Sets storage_place_id
     *
     * @param string|null $storage_place_id storage_place_id
     *
     * @return self
     */
    public function setStoragePlaceId($storage_place_id)
    {
        if (is_null($storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable storage_place_id cannot be null');
        }
        $this->container['storage_place_id'] = $storage_place_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


