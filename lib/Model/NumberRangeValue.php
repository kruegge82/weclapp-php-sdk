<?php
/**
 * NumberRangeValue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * NumberRangeValue Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NumberRangeValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'numberRangeValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'article_categories' => '\kruegge82\weclapp\Model\OnlyId[]',
        'credit_note_invoice_types' => '\kruegge82\weclapp\Model\SalesInvoiceType[]',
        'interval' => 'int',
        'last_value' => 'int',
        'length' => 'int',
        'number_range_id' => 'string',
        'prefix' => 'string',
        'sales_channels' => '\kruegge82\weclapp\Model\DistributionChannel[]',
        'sales_invoice_types' => '\kruegge82\weclapp\Model\SalesInvoiceType[]',
        'suffix' => 'string',
        'valid_from_date' => 'int',
        'valid_to_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'article_categories' => null,
        'credit_note_invoice_types' => null,
        'interval' => 'int32',
        'last_value' => 'int64',
        'length' => 'int32',
        'number_range_id' => null,
        'prefix' => null,
        'sales_channels' => null,
        'sales_invoice_types' => null,
        'suffix' => null,
        'valid_from_date' => 'timestamp',
        'valid_to_date' => 'timestamp'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'article_categories' => false,
        'credit_note_invoice_types' => false,
        'interval' => false,
        'last_value' => false,
        'length' => false,
        'number_range_id' => false,
        'prefix' => false,
        'sales_channels' => false,
        'sales_invoice_types' => false,
        'suffix' => false,
        'valid_from_date' => false,
        'valid_to_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'article_categories' => 'articleCategories',
        'credit_note_invoice_types' => 'creditNoteInvoiceTypes',
        'interval' => 'interval',
        'last_value' => 'lastValue',
        'length' => 'length',
        'number_range_id' => 'numberRangeId',
        'prefix' => 'prefix',
        'sales_channels' => 'salesChannels',
        'sales_invoice_types' => 'salesInvoiceTypes',
        'suffix' => 'suffix',
        'valid_from_date' => 'validFromDate',
        'valid_to_date' => 'validToDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'article_categories' => 'setArticleCategories',
        'credit_note_invoice_types' => 'setCreditNoteInvoiceTypes',
        'interval' => 'setInterval',
        'last_value' => 'setLastValue',
        'length' => 'setLength',
        'number_range_id' => 'setNumberRangeId',
        'prefix' => 'setPrefix',
        'sales_channels' => 'setSalesChannels',
        'sales_invoice_types' => 'setSalesInvoiceTypes',
        'suffix' => 'setSuffix',
        'valid_from_date' => 'setValidFromDate',
        'valid_to_date' => 'setValidToDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'article_categories' => 'getArticleCategories',
        'credit_note_invoice_types' => 'getCreditNoteInvoiceTypes',
        'interval' => 'getInterval',
        'last_value' => 'getLastValue',
        'length' => 'getLength',
        'number_range_id' => 'getNumberRangeId',
        'prefix' => 'getPrefix',
        'sales_channels' => 'getSalesChannels',
        'sales_invoice_types' => 'getSalesInvoiceTypes',
        'suffix' => 'getSuffix',
        'valid_from_date' => 'getValidFromDate',
        'valid_to_date' => 'getValidToDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('article_categories', $data ?? [], null);
        $this->setIfExists('credit_note_invoice_types', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('last_value', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('number_range_id', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('sales_channels', $data ?? [], null);
        $this->setIfExists('sales_invoice_types', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('valid_from_date', $data ?? [], null);
        $this->setIfExists('valid_to_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['prefix']) && (mb_strlen($this->container['prefix']) > 255)) {
            $invalidProperties[] = "invalid value for 'prefix', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['suffix']) && (mb_strlen($this->container['suffix']) > 255)) {
            $invalidProperties[] = "invalid value for 'suffix', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets article_categories
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getArticleCategories()
    {
        return $this->container['article_categories'];
    }

    /**
     * Sets article_categories
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $article_categories article_categories
     *
     * @return self
     */
    public function setArticleCategories($article_categories)
    {
        if (is_null($article_categories)) {
            throw new \InvalidArgumentException('non-nullable article_categories cannot be null');
        }
        $this->container['article_categories'] = $article_categories;

        return $this;
    }

    /**
     * Gets credit_note_invoice_types
     *
     * @return \kruegge82\weclapp\Model\SalesInvoiceType[]|null
     */
    public function getCreditNoteInvoiceTypes()
    {
        return $this->container['credit_note_invoice_types'];
    }

    /**
     * Sets credit_note_invoice_types
     *
     * @param \kruegge82\weclapp\Model\SalesInvoiceType[]|null $credit_note_invoice_types credit_note_invoice_types
     *
     * @return self
     */
    public function setCreditNoteInvoiceTypes($credit_note_invoice_types)
    {
        if (is_null($credit_note_invoice_types)) {
            throw new \InvalidArgumentException('non-nullable credit_note_invoice_types cannot be null');
        }
        $this->container['credit_note_invoice_types'] = $credit_note_invoice_types;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int|null $interval interval
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets last_value
     *
     * @return int|null
     */
    public function getLastValue()
    {
        return $this->container['last_value'];
    }

    /**
     * Sets last_value
     *
     * @param int|null $last_value last_value
     *
     * @return self
     */
    public function setLastValue($last_value)
    {
        if (is_null($last_value)) {
            throw new \InvalidArgumentException('non-nullable last_value cannot be null');
        }
        $this->container['last_value'] = $last_value;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets number_range_id
     *
     * @return string|null
     */
    public function getNumberRangeId()
    {
        return $this->container['number_range_id'];
    }

    /**
     * Sets number_range_id
     *
     * @param string|null $number_range_id number_range_id
     *
     * @return self
     */
    public function setNumberRangeId($number_range_id)
    {
        if (is_null($number_range_id)) {
            throw new \InvalidArgumentException('non-nullable number_range_id cannot be null');
        }
        $this->container['number_range_id'] = $number_range_id;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }
        if ((mb_strlen($prefix) > 255)) {
            throw new \InvalidArgumentException('invalid length for $prefix when calling NumberRangeValue., must be smaller than or equal to 255.');
        }

        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets sales_channels
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel[]|null
     */
    public function getSalesChannels()
    {
        return $this->container['sales_channels'];
    }

    /**
     * Sets sales_channels
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel[]|null $sales_channels sales_channels
     *
     * @return self
     */
    public function setSalesChannels($sales_channels)
    {
        if (is_null($sales_channels)) {
            throw new \InvalidArgumentException('non-nullable sales_channels cannot be null');
        }
        $this->container['sales_channels'] = $sales_channels;

        return $this;
    }

    /**
     * Gets sales_invoice_types
     *
     * @return \kruegge82\weclapp\Model\SalesInvoiceType[]|null
     */
    public function getSalesInvoiceTypes()
    {
        return $this->container['sales_invoice_types'];
    }

    /**
     * Sets sales_invoice_types
     *
     * @param \kruegge82\weclapp\Model\SalesInvoiceType[]|null $sales_invoice_types sales_invoice_types
     *
     * @return self
     */
    public function setSalesInvoiceTypes($sales_invoice_types)
    {
        if (is_null($sales_invoice_types)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_types cannot be null');
        }
        $this->container['sales_invoice_types'] = $sales_invoice_types;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            throw new \InvalidArgumentException('non-nullable suffix cannot be null');
        }
        if ((mb_strlen($suffix) > 255)) {
            throw new \InvalidArgumentException('invalid length for $suffix when calling NumberRangeValue., must be smaller than or equal to 255.');
        }

        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets valid_from_date
     *
     * @return int|null
     */
    public function getValidFromDate()
    {
        return $this->container['valid_from_date'];
    }

    /**
     * Sets valid_from_date
     *
     * @param int|null $valid_from_date valid_from_date
     *
     * @return self
     */
    public function setValidFromDate($valid_from_date)
    {
        if (is_null($valid_from_date)) {
            throw new \InvalidArgumentException('non-nullable valid_from_date cannot be null');
        }
        $this->container['valid_from_date'] = $valid_from_date;

        return $this;
    }

    /**
     * Gets valid_to_date
     *
     * @return int|null
     */
    public function getValidToDate()
    {
        return $this->container['valid_to_date'];
    }

    /**
     * Sets valid_to_date
     *
     * @param int|null $valid_to_date valid_to_date
     *
     * @return self
     */
    public function setValidToDate($valid_to_date)
    {
        if (is_null($valid_to_date)) {
            throw new \InvalidArgumentException('non-nullable valid_to_date cannot be null');
        }
        $this->container['valid_to_date'] = $valid_to_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


