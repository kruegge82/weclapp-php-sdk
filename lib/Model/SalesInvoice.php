<?php
/**
 * SalesInvoice
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * SalesInvoice Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SalesInvoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'salesInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'booking_date' => 'int',
        'booking_text' => 'string',
        'cancellation_date' => 'int',
        'cancellation_number' => 'string',
        'cancellation_slip_commission_block' => 'bool',
        'cancellation_slip_commission_settlement_done' => 'bool',
        'collective_invoice_position_print_type' => 'string',
        'commercial_language' => 'string',
        'commission' => 'string',
        'commission_block' => 'bool',
        'commission_sales_partners' => '\kruegge82\weclapp\Model\CommissionSalesPartner[]',
        'commission_settlement_done' => 'bool',
        'cost_center_id' => 'string',
        'cost_type_id' => 'string',
        'created_date' => 'int',
        'creator_id' => 'string',
        'credit_resets_order_state' => 'bool',
        'currency_conversion_date' => 'int',
        'currency_conversion_locked' => 'bool',
        'currency_conversion_rate' => 'float',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'customer_habitual_exporter_letter_of_intent_id' => 'string',
        'customer_id' => 'string',
        'delivery_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'delivery_date' => 'int',
        'description' => 'string',
        'direct_debit_file_created' => 'bool',
        'direct_debit_file_latest_date' => 'int',
        'disable_record_emailing_rule' => 'bool',
        'dispatch_country_code' => 'string',
        'due_date' => 'int',
        'dunning_block_date_until_date' => 'int',
        'dunning_block_note' => 'string',
        'dunning_block_state' => 'string',
        'factoring' => 'bool',
        'gross_amount' => 'float',
        'gross_amount_in_company_currency' => 'float',
        'header_discount' => 'float',
        'header_surcharge' => 'float',
        'invoice_date' => 'int',
        'invoice_number' => 'string',
        'last_modified_date' => 'int',
        'net_amount' => 'float',
        'net_amount_in_company_currency' => 'float',
        'non_standard_tax_id' => 'string',
        'order_number_at_customer' => 'string',
        'paid' => 'bool',
        'payment_method_id' => 'string',
        'payment_status' => 'string',
        'preceding_sales_invoice_id' => 'string',
        'pricing_date' => 'int',
        'record_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'record_comment' => 'string',
        'record_comment_inheritance' => 'bool',
        'record_currency_id' => 'string',
        'record_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'record_free_text' => 'string',
        'record_free_text_inheritance' => 'bool',
        'record_opening' => 'string',
        'record_opening_inheritance' => 'bool',
        'responsible_user_id' => 'string',
        'sales_channel' => 'string',
        'sales_invoice_items' => '\kruegge82\weclapp\Model\SalesInvoiceItem[]',
        'sales_invoice_type' => 'string',
        'sales_order_id' => 'string',
        'sales_orders' => '\kruegge82\weclapp\Model\OnlyId[]',
        'sent_to_recipient' => 'bool',
        'sepa_direct_debit_mandate_id' => 'string',
        'service_period_from' => 'int',
        'service_period_to' => 'int',
        'shipment_method_id' => 'string',
        'shipping_cost_items' => '\kruegge82\weclapp\Model\SalesInvoiceShippingCostItem[]',
        'shipping_date' => 'int',
        'status' => 'string',
        'status_history' => '\kruegge82\weclapp\Model\SalesInvoiceStatusHistory[]',
        'tags' => 'string[]',
        'term_of_payment_id' => 'string',
        'vat_registration_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'booking_date' => 'timestamp',
        'booking_text' => null,
        'cancellation_date' => 'timestamp',
        'cancellation_number' => null,
        'cancellation_slip_commission_block' => null,
        'cancellation_slip_commission_settlement_done' => null,
        'collective_invoice_position_print_type' => null,
        'commercial_language' => null,
        'commission' => null,
        'commission_block' => null,
        'commission_sales_partners' => null,
        'commission_settlement_done' => null,
        'cost_center_id' => null,
        'cost_type_id' => null,
        'created_date' => 'timestamp',
        'creator_id' => null,
        'credit_resets_order_state' => null,
        'currency_conversion_date' => 'timestamp',
        'currency_conversion_locked' => null,
        'currency_conversion_rate' => 'number',
        'custom_attributes' => null,
        'customer_habitual_exporter_letter_of_intent_id' => null,
        'customer_id' => null,
        'delivery_address' => null,
        'delivery_date' => 'timestamp',
        'description' => null,
        'direct_debit_file_created' => null,
        'direct_debit_file_latest_date' => 'timestamp',
        'disable_record_emailing_rule' => null,
        'dispatch_country_code' => null,
        'due_date' => 'timestamp',
        'dunning_block_date_until_date' => 'timestamp',
        'dunning_block_note' => null,
        'dunning_block_state' => null,
        'factoring' => null,
        'gross_amount' => 'number',
        'gross_amount_in_company_currency' => 'number',
        'header_discount' => 'number',
        'header_surcharge' => 'number',
        'invoice_date' => 'timestamp',
        'invoice_number' => null,
        'last_modified_date' => 'timestamp',
        'net_amount' => 'number',
        'net_amount_in_company_currency' => 'number',
        'non_standard_tax_id' => null,
        'order_number_at_customer' => null,
        'paid' => null,
        'payment_method_id' => null,
        'payment_status' => null,
        'preceding_sales_invoice_id' => null,
        'pricing_date' => 'timestamp',
        'record_address' => null,
        'record_comment' => null,
        'record_comment_inheritance' => null,
        'record_currency_id' => null,
        'record_email_addresses' => null,
        'record_free_text' => null,
        'record_free_text_inheritance' => null,
        'record_opening' => null,
        'record_opening_inheritance' => null,
        'responsible_user_id' => null,
        'sales_channel' => null,
        'sales_invoice_items' => null,
        'sales_invoice_type' => null,
        'sales_order_id' => null,
        'sales_orders' => null,
        'sent_to_recipient' => null,
        'sepa_direct_debit_mandate_id' => null,
        'service_period_from' => 'timestamp',
        'service_period_to' => 'timestamp',
        'shipment_method_id' => null,
        'shipping_cost_items' => null,
        'shipping_date' => 'timestamp',
        'status' => null,
        'status_history' => null,
        'tags' => null,
        'term_of_payment_id' => null,
        'vat_registration_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'booking_date' => false,
        'booking_text' => false,
        'cancellation_date' => false,
        'cancellation_number' => false,
        'cancellation_slip_commission_block' => false,
        'cancellation_slip_commission_settlement_done' => false,
        'collective_invoice_position_print_type' => false,
        'commercial_language' => false,
        'commission' => false,
        'commission_block' => false,
        'commission_sales_partners' => false,
        'commission_settlement_done' => false,
        'cost_center_id' => false,
        'cost_type_id' => false,
        'created_date' => false,
        'creator_id' => false,
        'credit_resets_order_state' => false,
        'currency_conversion_date' => false,
        'currency_conversion_locked' => false,
        'currency_conversion_rate' => false,
        'custom_attributes' => false,
        'customer_habitual_exporter_letter_of_intent_id' => false,
        'customer_id' => false,
        'delivery_address' => false,
        'delivery_date' => false,
        'description' => false,
        'direct_debit_file_created' => false,
        'direct_debit_file_latest_date' => false,
        'disable_record_emailing_rule' => false,
        'dispatch_country_code' => false,
        'due_date' => false,
        'dunning_block_date_until_date' => false,
        'dunning_block_note' => false,
        'dunning_block_state' => false,
        'factoring' => false,
        'gross_amount' => false,
        'gross_amount_in_company_currency' => false,
        'header_discount' => false,
        'header_surcharge' => false,
        'invoice_date' => false,
        'invoice_number' => false,
        'last_modified_date' => false,
        'net_amount' => false,
        'net_amount_in_company_currency' => false,
        'non_standard_tax_id' => false,
        'order_number_at_customer' => false,
        'paid' => false,
        'payment_method_id' => false,
        'payment_status' => false,
        'preceding_sales_invoice_id' => false,
        'pricing_date' => false,
        'record_address' => false,
        'record_comment' => false,
        'record_comment_inheritance' => false,
        'record_currency_id' => false,
        'record_email_addresses' => false,
        'record_free_text' => false,
        'record_free_text_inheritance' => false,
        'record_opening' => false,
        'record_opening_inheritance' => false,
        'responsible_user_id' => false,
        'sales_channel' => false,
        'sales_invoice_items' => false,
        'sales_invoice_type' => false,
        'sales_order_id' => false,
        'sales_orders' => false,
        'sent_to_recipient' => false,
        'sepa_direct_debit_mandate_id' => false,
        'service_period_from' => false,
        'service_period_to' => false,
        'shipment_method_id' => false,
        'shipping_cost_items' => false,
        'shipping_date' => false,
        'status' => false,
        'status_history' => false,
        'tags' => false,
        'term_of_payment_id' => false,
        'vat_registration_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'booking_date' => 'bookingDate',
        'booking_text' => 'bookingText',
        'cancellation_date' => 'cancellationDate',
        'cancellation_number' => 'cancellationNumber',
        'cancellation_slip_commission_block' => 'cancellationSlipCommissionBlock',
        'cancellation_slip_commission_settlement_done' => 'cancellationSlipCommissionSettlementDone',
        'collective_invoice_position_print_type' => 'collectiveInvoicePositionPrintType',
        'commercial_language' => 'commercialLanguage',
        'commission' => 'commission',
        'commission_block' => 'commissionBlock',
        'commission_sales_partners' => 'commissionSalesPartners',
        'commission_settlement_done' => 'commissionSettlementDone',
        'cost_center_id' => 'costCenterId',
        'cost_type_id' => 'costTypeId',
        'created_date' => 'createdDate',
        'creator_id' => 'creatorId',
        'credit_resets_order_state' => 'creditResetsOrderState',
        'currency_conversion_date' => 'currencyConversionDate',
        'currency_conversion_locked' => 'currencyConversionLocked',
        'currency_conversion_rate' => 'currencyConversionRate',
        'custom_attributes' => 'customAttributes',
        'customer_habitual_exporter_letter_of_intent_id' => 'customerHabitualExporterLetterOfIntentId',
        'customer_id' => 'customerId',
        'delivery_address' => 'deliveryAddress',
        'delivery_date' => 'deliveryDate',
        'description' => 'description',
        'direct_debit_file_created' => 'directDebitFileCreated',
        'direct_debit_file_latest_date' => 'directDebitFileLatestDate',
        'disable_record_emailing_rule' => 'disableRecordEmailingRule',
        'dispatch_country_code' => 'dispatchCountryCode',
        'due_date' => 'dueDate',
        'dunning_block_date_until_date' => 'dunningBlockDateUntilDate',
        'dunning_block_note' => 'dunningBlockNote',
        'dunning_block_state' => 'dunningBlockState',
        'factoring' => 'factoring',
        'gross_amount' => 'grossAmount',
        'gross_amount_in_company_currency' => 'grossAmountInCompanyCurrency',
        'header_discount' => 'headerDiscount',
        'header_surcharge' => 'headerSurcharge',
        'invoice_date' => 'invoiceDate',
        'invoice_number' => 'invoiceNumber',
        'last_modified_date' => 'lastModifiedDate',
        'net_amount' => 'netAmount',
        'net_amount_in_company_currency' => 'netAmountInCompanyCurrency',
        'non_standard_tax_id' => 'nonStandardTaxId',
        'order_number_at_customer' => 'orderNumberAtCustomer',
        'paid' => 'paid',
        'payment_method_id' => 'paymentMethodId',
        'payment_status' => 'paymentStatus',
        'preceding_sales_invoice_id' => 'precedingSalesInvoiceId',
        'pricing_date' => 'pricingDate',
        'record_address' => 'recordAddress',
        'record_comment' => 'recordComment',
        'record_comment_inheritance' => 'recordCommentInheritance',
        'record_currency_id' => 'recordCurrencyId',
        'record_email_addresses' => 'recordEmailAddresses',
        'record_free_text' => 'recordFreeText',
        'record_free_text_inheritance' => 'recordFreeTextInheritance',
        'record_opening' => 'recordOpening',
        'record_opening_inheritance' => 'recordOpeningInheritance',
        'responsible_user_id' => 'responsibleUserId',
        'sales_channel' => 'salesChannel',
        'sales_invoice_items' => 'salesInvoiceItems',
        'sales_invoice_type' => 'salesInvoiceType',
        'sales_order_id' => 'salesOrderId',
        'sales_orders' => 'salesOrders',
        'sent_to_recipient' => 'sentToRecipient',
        'sepa_direct_debit_mandate_id' => 'sepaDirectDebitMandateId',
        'service_period_from' => 'servicePeriodFrom',
        'service_period_to' => 'servicePeriodTo',
        'shipment_method_id' => 'shipmentMethodId',
        'shipping_cost_items' => 'shippingCostItems',
        'shipping_date' => 'shippingDate',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'tags' => 'tags',
        'term_of_payment_id' => 'termOfPaymentId',
        'vat_registration_number' => 'vatRegistrationNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'booking_date' => 'setBookingDate',
        'booking_text' => 'setBookingText',
        'cancellation_date' => 'setCancellationDate',
        'cancellation_number' => 'setCancellationNumber',
        'cancellation_slip_commission_block' => 'setCancellationSlipCommissionBlock',
        'cancellation_slip_commission_settlement_done' => 'setCancellationSlipCommissionSettlementDone',
        'collective_invoice_position_print_type' => 'setCollectiveInvoicePositionPrintType',
        'commercial_language' => 'setCommercialLanguage',
        'commission' => 'setCommission',
        'commission_block' => 'setCommissionBlock',
        'commission_sales_partners' => 'setCommissionSalesPartners',
        'commission_settlement_done' => 'setCommissionSettlementDone',
        'cost_center_id' => 'setCostCenterId',
        'cost_type_id' => 'setCostTypeId',
        'created_date' => 'setCreatedDate',
        'creator_id' => 'setCreatorId',
        'credit_resets_order_state' => 'setCreditResetsOrderState',
        'currency_conversion_date' => 'setCurrencyConversionDate',
        'currency_conversion_locked' => 'setCurrencyConversionLocked',
        'currency_conversion_rate' => 'setCurrencyConversionRate',
        'custom_attributes' => 'setCustomAttributes',
        'customer_habitual_exporter_letter_of_intent_id' => 'setCustomerHabitualExporterLetterOfIntentId',
        'customer_id' => 'setCustomerId',
        'delivery_address' => 'setDeliveryAddress',
        'delivery_date' => 'setDeliveryDate',
        'description' => 'setDescription',
        'direct_debit_file_created' => 'setDirectDebitFileCreated',
        'direct_debit_file_latest_date' => 'setDirectDebitFileLatestDate',
        'disable_record_emailing_rule' => 'setDisableRecordEmailingRule',
        'dispatch_country_code' => 'setDispatchCountryCode',
        'due_date' => 'setDueDate',
        'dunning_block_date_until_date' => 'setDunningBlockDateUntilDate',
        'dunning_block_note' => 'setDunningBlockNote',
        'dunning_block_state' => 'setDunningBlockState',
        'factoring' => 'setFactoring',
        'gross_amount' => 'setGrossAmount',
        'gross_amount_in_company_currency' => 'setGrossAmountInCompanyCurrency',
        'header_discount' => 'setHeaderDiscount',
        'header_surcharge' => 'setHeaderSurcharge',
        'invoice_date' => 'setInvoiceDate',
        'invoice_number' => 'setInvoiceNumber',
        'last_modified_date' => 'setLastModifiedDate',
        'net_amount' => 'setNetAmount',
        'net_amount_in_company_currency' => 'setNetAmountInCompanyCurrency',
        'non_standard_tax_id' => 'setNonStandardTaxId',
        'order_number_at_customer' => 'setOrderNumberAtCustomer',
        'paid' => 'setPaid',
        'payment_method_id' => 'setPaymentMethodId',
        'payment_status' => 'setPaymentStatus',
        'preceding_sales_invoice_id' => 'setPrecedingSalesInvoiceId',
        'pricing_date' => 'setPricingDate',
        'record_address' => 'setRecordAddress',
        'record_comment' => 'setRecordComment',
        'record_comment_inheritance' => 'setRecordCommentInheritance',
        'record_currency_id' => 'setRecordCurrencyId',
        'record_email_addresses' => 'setRecordEmailAddresses',
        'record_free_text' => 'setRecordFreeText',
        'record_free_text_inheritance' => 'setRecordFreeTextInheritance',
        'record_opening' => 'setRecordOpening',
        'record_opening_inheritance' => 'setRecordOpeningInheritance',
        'responsible_user_id' => 'setResponsibleUserId',
        'sales_channel' => 'setSalesChannel',
        'sales_invoice_items' => 'setSalesInvoiceItems',
        'sales_invoice_type' => 'setSalesInvoiceType',
        'sales_order_id' => 'setSalesOrderId',
        'sales_orders' => 'setSalesOrders',
        'sent_to_recipient' => 'setSentToRecipient',
        'sepa_direct_debit_mandate_id' => 'setSepaDirectDebitMandateId',
        'service_period_from' => 'setServicePeriodFrom',
        'service_period_to' => 'setServicePeriodTo',
        'shipment_method_id' => 'setShipmentMethodId',
        'shipping_cost_items' => 'setShippingCostItems',
        'shipping_date' => 'setShippingDate',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'tags' => 'setTags',
        'term_of_payment_id' => 'setTermOfPaymentId',
        'vat_registration_number' => 'setVatRegistrationNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'booking_date' => 'getBookingDate',
        'booking_text' => 'getBookingText',
        'cancellation_date' => 'getCancellationDate',
        'cancellation_number' => 'getCancellationNumber',
        'cancellation_slip_commission_block' => 'getCancellationSlipCommissionBlock',
        'cancellation_slip_commission_settlement_done' => 'getCancellationSlipCommissionSettlementDone',
        'collective_invoice_position_print_type' => 'getCollectiveInvoicePositionPrintType',
        'commercial_language' => 'getCommercialLanguage',
        'commission' => 'getCommission',
        'commission_block' => 'getCommissionBlock',
        'commission_sales_partners' => 'getCommissionSalesPartners',
        'commission_settlement_done' => 'getCommissionSettlementDone',
        'cost_center_id' => 'getCostCenterId',
        'cost_type_id' => 'getCostTypeId',
        'created_date' => 'getCreatedDate',
        'creator_id' => 'getCreatorId',
        'credit_resets_order_state' => 'getCreditResetsOrderState',
        'currency_conversion_date' => 'getCurrencyConversionDate',
        'currency_conversion_locked' => 'getCurrencyConversionLocked',
        'currency_conversion_rate' => 'getCurrencyConversionRate',
        'custom_attributes' => 'getCustomAttributes',
        'customer_habitual_exporter_letter_of_intent_id' => 'getCustomerHabitualExporterLetterOfIntentId',
        'customer_id' => 'getCustomerId',
        'delivery_address' => 'getDeliveryAddress',
        'delivery_date' => 'getDeliveryDate',
        'description' => 'getDescription',
        'direct_debit_file_created' => 'getDirectDebitFileCreated',
        'direct_debit_file_latest_date' => 'getDirectDebitFileLatestDate',
        'disable_record_emailing_rule' => 'getDisableRecordEmailingRule',
        'dispatch_country_code' => 'getDispatchCountryCode',
        'due_date' => 'getDueDate',
        'dunning_block_date_until_date' => 'getDunningBlockDateUntilDate',
        'dunning_block_note' => 'getDunningBlockNote',
        'dunning_block_state' => 'getDunningBlockState',
        'factoring' => 'getFactoring',
        'gross_amount' => 'getGrossAmount',
        'gross_amount_in_company_currency' => 'getGrossAmountInCompanyCurrency',
        'header_discount' => 'getHeaderDiscount',
        'header_surcharge' => 'getHeaderSurcharge',
        'invoice_date' => 'getInvoiceDate',
        'invoice_number' => 'getInvoiceNumber',
        'last_modified_date' => 'getLastModifiedDate',
        'net_amount' => 'getNetAmount',
        'net_amount_in_company_currency' => 'getNetAmountInCompanyCurrency',
        'non_standard_tax_id' => 'getNonStandardTaxId',
        'order_number_at_customer' => 'getOrderNumberAtCustomer',
        'paid' => 'getPaid',
        'payment_method_id' => 'getPaymentMethodId',
        'payment_status' => 'getPaymentStatus',
        'preceding_sales_invoice_id' => 'getPrecedingSalesInvoiceId',
        'pricing_date' => 'getPricingDate',
        'record_address' => 'getRecordAddress',
        'record_comment' => 'getRecordComment',
        'record_comment_inheritance' => 'getRecordCommentInheritance',
        'record_currency_id' => 'getRecordCurrencyId',
        'record_email_addresses' => 'getRecordEmailAddresses',
        'record_free_text' => 'getRecordFreeText',
        'record_free_text_inheritance' => 'getRecordFreeTextInheritance',
        'record_opening' => 'getRecordOpening',
        'record_opening_inheritance' => 'getRecordOpeningInheritance',
        'responsible_user_id' => 'getResponsibleUserId',
        'sales_channel' => 'getSalesChannel',
        'sales_invoice_items' => 'getSalesInvoiceItems',
        'sales_invoice_type' => 'getSalesInvoiceType',
        'sales_order_id' => 'getSalesOrderId',
        'sales_orders' => 'getSalesOrders',
        'sent_to_recipient' => 'getSentToRecipient',
        'sepa_direct_debit_mandate_id' => 'getSepaDirectDebitMandateId',
        'service_period_from' => 'getServicePeriodFrom',
        'service_period_to' => 'getServicePeriodTo',
        'shipment_method_id' => 'getShipmentMethodId',
        'shipping_cost_items' => 'getShippingCostItems',
        'shipping_date' => 'getShippingDate',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'tags' => 'getTags',
        'term_of_payment_id' => 'getTermOfPaymentId',
        'vat_registration_number' => 'getVatRegistrationNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COLLECTIVE_INVOICE_POSITION_PRINT_TYPE_ORDER_POSITION_GROUP = 'ORDER_POSITION_GROUP';
    public const COLLECTIVE_INVOICE_POSITION_PRINT_TYPE_PERFORMANCE_RECORD_POSITION_GROUP = 'PERFORMANCE_RECORD_POSITION_GROUP';
    public const COLLECTIVE_INVOICE_POSITION_PRINT_TYPE_SHIPMENT_POSITION_GROUP = 'SHIPMENT_POSITION_GROUP';
    public const DUNNING_BLOCK_STATE_BLOCKED = 'BLOCKED';
    public const DUNNING_BLOCK_STATE_TEMPORAL_BLOCKED = 'TEMPORAL_BLOCKED';
    public const DUNNING_BLOCK_STATE_UNBLOCKED = 'UNBLOCKED';
    public const PAYMENT_STATUS_CLEARED_WITH_CREDIT_NOTE = 'CLEARED_WITH_CREDIT_NOTE';
    public const PAYMENT_STATUS_CREDIT_NOTE_CLEARED = 'CREDIT_NOTE_CLEARED';
    public const PAYMENT_STATUS_NO_OPEN_ITEM = 'NO_OPEN_ITEM';
    public const PAYMENT_STATUS_OPEN = 'OPEN';
    public const PAYMENT_STATUS_PAID = 'PAID';
    public const PAYMENT_STATUS_UNKNOWN = 'UNKNOWN';
    public const SALES_INVOICE_TYPE_ADVANCE_PAYMENT_INVOICE = 'ADVANCE_PAYMENT_INVOICE';
    public const SALES_INVOICE_TYPE_CREDIT_NOTE = 'CREDIT_NOTE';
    public const SALES_INVOICE_TYPE_FINAL_INVOICE = 'FINAL_INVOICE';
    public const SALES_INVOICE_TYPE_PART_PAYMENT_INVOICE = 'PART_PAYMENT_INVOICE';
    public const SALES_INVOICE_TYPE_PREPAYMENT_INVOICE = 'PREPAYMENT_INVOICE';
    public const SALES_INVOICE_TYPE_RETAIL_INVOICE = 'RETAIL_INVOICE';
    public const SALES_INVOICE_TYPE_STANDARD_INVOICE = 'STANDARD_INVOICE';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_DOCUMENT_CREATED = 'DOCUMENT_CREATED';
    public const STATUS_ENTRY_COMPLETED = 'ENTRY_COMPLETED';
    public const STATUS__NEW = 'NEW';
    public const STATUS_OPEN_ITEM_CREATED = 'OPEN_ITEM_CREATED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCollectiveInvoicePositionPrintTypeAllowableValues()
    {
        return [
            self::COLLECTIVE_INVOICE_POSITION_PRINT_TYPE_ORDER_POSITION_GROUP,
            self::COLLECTIVE_INVOICE_POSITION_PRINT_TYPE_PERFORMANCE_RECORD_POSITION_GROUP,
            self::COLLECTIVE_INVOICE_POSITION_PRINT_TYPE_SHIPMENT_POSITION_GROUP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDunningBlockStateAllowableValues()
    {
        return [
            self::DUNNING_BLOCK_STATE_BLOCKED,
            self::DUNNING_BLOCK_STATE_TEMPORAL_BLOCKED,
            self::DUNNING_BLOCK_STATE_UNBLOCKED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_CLEARED_WITH_CREDIT_NOTE,
            self::PAYMENT_STATUS_CREDIT_NOTE_CLEARED,
            self::PAYMENT_STATUS_NO_OPEN_ITEM,
            self::PAYMENT_STATUS_OPEN,
            self::PAYMENT_STATUS_PAID,
            self::PAYMENT_STATUS_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalesInvoiceTypeAllowableValues()
    {
        return [
            self::SALES_INVOICE_TYPE_ADVANCE_PAYMENT_INVOICE,
            self::SALES_INVOICE_TYPE_CREDIT_NOTE,
            self::SALES_INVOICE_TYPE_FINAL_INVOICE,
            self::SALES_INVOICE_TYPE_PART_PAYMENT_INVOICE,
            self::SALES_INVOICE_TYPE_PREPAYMENT_INVOICE,
            self::SALES_INVOICE_TYPE_RETAIL_INVOICE,
            self::SALES_INVOICE_TYPE_STANDARD_INVOICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CANCELLED,
            self::STATUS_DOCUMENT_CREATED,
            self::STATUS_ENTRY_COMPLETED,
            self::STATUS__NEW,
            self::STATUS_OPEN_ITEM_CREATED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('booking_date', $data ?? [], null);
        $this->setIfExists('booking_text', $data ?? [], null);
        $this->setIfExists('cancellation_date', $data ?? [], null);
        $this->setIfExists('cancellation_number', $data ?? [], null);
        $this->setIfExists('cancellation_slip_commission_block', $data ?? [], null);
        $this->setIfExists('cancellation_slip_commission_settlement_done', $data ?? [], null);
        $this->setIfExists('collective_invoice_position_print_type', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('commission_block', $data ?? [], null);
        $this->setIfExists('commission_sales_partners', $data ?? [], null);
        $this->setIfExists('commission_settlement_done', $data ?? [], null);
        $this->setIfExists('cost_center_id', $data ?? [], null);
        $this->setIfExists('cost_type_id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('credit_resets_order_state', $data ?? [], null);
        $this->setIfExists('currency_conversion_date', $data ?? [], null);
        $this->setIfExists('currency_conversion_locked', $data ?? [], null);
        $this->setIfExists('currency_conversion_rate', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('customer_habitual_exporter_letter_of_intent_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('direct_debit_file_created', $data ?? [], null);
        $this->setIfExists('direct_debit_file_latest_date', $data ?? [], null);
        $this->setIfExists('disable_record_emailing_rule', $data ?? [], null);
        $this->setIfExists('dispatch_country_code', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('dunning_block_date_until_date', $data ?? [], null);
        $this->setIfExists('dunning_block_note', $data ?? [], null);
        $this->setIfExists('dunning_block_state', $data ?? [], null);
        $this->setIfExists('factoring', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('gross_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('header_discount', $data ?? [], null);
        $this->setIfExists('header_surcharge', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('net_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('non_standard_tax_id', $data ?? [], null);
        $this->setIfExists('order_number_at_customer', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('preceding_sales_invoice_id', $data ?? [], null);
        $this->setIfExists('pricing_date', $data ?? [], null);
        $this->setIfExists('record_address', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_comment_inheritance', $data ?? [], null);
        $this->setIfExists('record_currency_id', $data ?? [], null);
        $this->setIfExists('record_email_addresses', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_free_text_inheritance', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('record_opening_inheritance', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
        $this->setIfExists('sales_invoice_items', $data ?? [], null);
        $this->setIfExists('sales_invoice_type', $data ?? [], null);
        $this->setIfExists('sales_order_id', $data ?? [], null);
        $this->setIfExists('sales_orders', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('sepa_direct_debit_mandate_id', $data ?? [], null);
        $this->setIfExists('service_period_from', $data ?? [], null);
        $this->setIfExists('service_period_to', $data ?? [], null);
        $this->setIfExists('shipment_method_id', $data ?? [], null);
        $this->setIfExists('shipping_cost_items', $data ?? [], null);
        $this->setIfExists('shipping_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('term_of_payment_id', $data ?? [], null);
        $this->setIfExists('vat_registration_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCollectiveInvoicePositionPrintTypeAllowableValues();
        if (!is_null($this->container['collective_invoice_position_print_type']) && !in_array($this->container['collective_invoice_position_print_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'collective_invoice_position_print_type', must be one of '%s'",
                $this->container['collective_invoice_position_print_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        $allowedValues = $this->getDunningBlockStateAllowableValues();
        if (!is_null($this->container['dunning_block_state']) && !in_array($this->container['dunning_block_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dunning_block_state', must be one of '%s'",
                $this->container['dunning_block_state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['record_currency_id'] === null) {
            $invalidProperties[] = "'record_currency_id' can't be null";
        }
        $allowedValues = $this->getSalesInvoiceTypeAllowableValues();
        if (!is_null($this->container['sales_invoice_type']) && !in_array($this->container['sales_invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sales_invoice_type', must be one of '%s'",
                $this->container['sales_invoice_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets booking_date
     *
     * @return int|null
     */
    public function getBookingDate()
    {
        return $this->container['booking_date'];
    }

    /**
     * Sets booking_date
     *
     * @param int|null $booking_date booking_date
     *
     * @return self
     */
    public function setBookingDate($booking_date)
    {
        if (is_null($booking_date)) {
            throw new \InvalidArgumentException('non-nullable booking_date cannot be null');
        }
        $this->container['booking_date'] = $booking_date;

        return $this;
    }

    /**
     * Gets booking_text
     *
     * @return string|null
     */
    public function getBookingText()
    {
        return $this->container['booking_text'];
    }

    /**
     * Sets booking_text
     *
     * @param string|null $booking_text booking_text
     *
     * @return self
     */
    public function setBookingText($booking_text)
    {
        if (is_null($booking_text)) {
            throw new \InvalidArgumentException('non-nullable booking_text cannot be null');
        }
        $this->container['booking_text'] = $booking_text;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return int|null
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param int|null $cancellation_date cancellation_date
     *
     * @return self
     */
    public function setCancellationDate($cancellation_date)
    {
        if (is_null($cancellation_date)) {
            throw new \InvalidArgumentException('non-nullable cancellation_date cannot be null');
        }
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets cancellation_number
     *
     * @return string|null
     */
    public function getCancellationNumber()
    {
        return $this->container['cancellation_number'];
    }

    /**
     * Sets cancellation_number
     *
     * @param string|null $cancellation_number cancellation_number
     *
     * @return self
     */
    public function setCancellationNumber($cancellation_number)
    {
        if (is_null($cancellation_number)) {
            throw new \InvalidArgumentException('non-nullable cancellation_number cannot be null');
        }
        $this->container['cancellation_number'] = $cancellation_number;

        return $this;
    }

    /**
     * Gets cancellation_slip_commission_block
     *
     * @return bool|null
     */
    public function getCancellationSlipCommissionBlock()
    {
        return $this->container['cancellation_slip_commission_block'];
    }

    /**
     * Sets cancellation_slip_commission_block
     *
     * @param bool|null $cancellation_slip_commission_block cancellation_slip_commission_block
     *
     * @return self
     */
    public function setCancellationSlipCommissionBlock($cancellation_slip_commission_block)
    {
        if (is_null($cancellation_slip_commission_block)) {
            throw new \InvalidArgumentException('non-nullable cancellation_slip_commission_block cannot be null');
        }
        $this->container['cancellation_slip_commission_block'] = $cancellation_slip_commission_block;

        return $this;
    }

    /**
     * Gets cancellation_slip_commission_settlement_done
     *
     * @return bool|null
     */
    public function getCancellationSlipCommissionSettlementDone()
    {
        return $this->container['cancellation_slip_commission_settlement_done'];
    }

    /**
     * Sets cancellation_slip_commission_settlement_done
     *
     * @param bool|null $cancellation_slip_commission_settlement_done cancellation_slip_commission_settlement_done
     *
     * @return self
     */
    public function setCancellationSlipCommissionSettlementDone($cancellation_slip_commission_settlement_done)
    {
        if (is_null($cancellation_slip_commission_settlement_done)) {
            throw new \InvalidArgumentException('non-nullable cancellation_slip_commission_settlement_done cannot be null');
        }
        $this->container['cancellation_slip_commission_settlement_done'] = $cancellation_slip_commission_settlement_done;

        return $this;
    }

    /**
     * Gets collective_invoice_position_print_type
     *
     * @return string|null
     */
    public function getCollectiveInvoicePositionPrintType()
    {
        return $this->container['collective_invoice_position_print_type'];
    }

    /**
     * Sets collective_invoice_position_print_type
     *
     * @param string|null $collective_invoice_position_print_type collective_invoice_position_print_type
     *
     * @return self
     */
    public function setCollectiveInvoicePositionPrintType($collective_invoice_position_print_type)
    {
        if (is_null($collective_invoice_position_print_type)) {
            throw new \InvalidArgumentException('non-nullable collective_invoice_position_print_type cannot be null');
        }
        $allowedValues = $this->getCollectiveInvoicePositionPrintTypeAllowableValues();
        if (!in_array($collective_invoice_position_print_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'collective_invoice_position_print_type', must be one of '%s'",
                    $collective_invoice_position_print_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['collective_invoice_position_print_type'] = $collective_invoice_position_print_type;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return string|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param string|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets commission_block
     *
     * @return bool|null
     */
    public function getCommissionBlock()
    {
        return $this->container['commission_block'];
    }

    /**
     * Sets commission_block
     *
     * @param bool|null $commission_block commission_block
     *
     * @return self
     */
    public function setCommissionBlock($commission_block)
    {
        if (is_null($commission_block)) {
            throw new \InvalidArgumentException('non-nullable commission_block cannot be null');
        }
        $this->container['commission_block'] = $commission_block;

        return $this;
    }

    /**
     * Gets commission_sales_partners
     *
     * @return \kruegge82\weclapp\Model\CommissionSalesPartner[]|null
     */
    public function getCommissionSalesPartners()
    {
        return $this->container['commission_sales_partners'];
    }

    /**
     * Sets commission_sales_partners
     *
     * @param \kruegge82\weclapp\Model\CommissionSalesPartner[]|null $commission_sales_partners commission_sales_partners
     *
     * @return self
     */
    public function setCommissionSalesPartners($commission_sales_partners)
    {
        if (is_null($commission_sales_partners)) {
            throw new \InvalidArgumentException('non-nullable commission_sales_partners cannot be null');
        }
        $this->container['commission_sales_partners'] = $commission_sales_partners;

        return $this;
    }

    /**
     * Gets commission_settlement_done
     *
     * @return bool|null
     */
    public function getCommissionSettlementDone()
    {
        return $this->container['commission_settlement_done'];
    }

    /**
     * Sets commission_settlement_done
     *
     * @param bool|null $commission_settlement_done commission_settlement_done
     *
     * @return self
     */
    public function setCommissionSettlementDone($commission_settlement_done)
    {
        if (is_null($commission_settlement_done)) {
            throw new \InvalidArgumentException('non-nullable commission_settlement_done cannot be null');
        }
        $this->container['commission_settlement_done'] = $commission_settlement_done;

        return $this;
    }

    /**
     * Gets cost_center_id
     *
     * @return string|null
     */
    public function getCostCenterId()
    {
        return $this->container['cost_center_id'];
    }

    /**
     * Sets cost_center_id
     *
     * @param string|null $cost_center_id cost_center_id
     *
     * @return self
     */
    public function setCostCenterId($cost_center_id)
    {
        if (is_null($cost_center_id)) {
            throw new \InvalidArgumentException('non-nullable cost_center_id cannot be null');
        }
        $this->container['cost_center_id'] = $cost_center_id;

        return $this;
    }

    /**
     * Gets cost_type_id
     *
     * @return string|null
     */
    public function getCostTypeId()
    {
        return $this->container['cost_type_id'];
    }

    /**
     * Sets cost_type_id
     *
     * @param string|null $cost_type_id cost_type_id
     *
     * @return self
     */
    public function setCostTypeId($cost_type_id)
    {
        if (is_null($cost_type_id)) {
            throw new \InvalidArgumentException('non-nullable cost_type_id cannot be null');
        }
        $this->container['cost_type_id'] = $cost_type_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets credit_resets_order_state
     *
     * @return bool|null
     */
    public function getCreditResetsOrderState()
    {
        return $this->container['credit_resets_order_state'];
    }

    /**
     * Sets credit_resets_order_state
     *
     * @param bool|null $credit_resets_order_state credit_resets_order_state
     *
     * @return self
     */
    public function setCreditResetsOrderState($credit_resets_order_state)
    {
        if (is_null($credit_resets_order_state)) {
            throw new \InvalidArgumentException('non-nullable credit_resets_order_state cannot be null');
        }
        $this->container['credit_resets_order_state'] = $credit_resets_order_state;

        return $this;
    }

    /**
     * Gets currency_conversion_date
     *
     * @return int|null
     */
    public function getCurrencyConversionDate()
    {
        return $this->container['currency_conversion_date'];
    }

    /**
     * Sets currency_conversion_date
     *
     * @param int|null $currency_conversion_date currency_conversion_date
     *
     * @return self
     */
    public function setCurrencyConversionDate($currency_conversion_date)
    {
        if (is_null($currency_conversion_date)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_date cannot be null');
        }
        $this->container['currency_conversion_date'] = $currency_conversion_date;

        return $this;
    }

    /**
     * Gets currency_conversion_locked
     *
     * @return bool|null
     */
    public function getCurrencyConversionLocked()
    {
        return $this->container['currency_conversion_locked'];
    }

    /**
     * Sets currency_conversion_locked
     *
     * @param bool|null $currency_conversion_locked currency_conversion_locked
     *
     * @return self
     */
    public function setCurrencyConversionLocked($currency_conversion_locked)
    {
        if (is_null($currency_conversion_locked)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_locked cannot be null');
        }
        $this->container['currency_conversion_locked'] = $currency_conversion_locked;

        return $this;
    }

    /**
     * Gets currency_conversion_rate
     *
     * @return float|null
     */
    public function getCurrencyConversionRate()
    {
        return $this->container['currency_conversion_rate'];
    }

    /**
     * Sets currency_conversion_rate
     *
     * @param float|null $currency_conversion_rate currency_conversion_rate
     *
     * @return self
     */
    public function setCurrencyConversionRate($currency_conversion_rate)
    {
        if (is_null($currency_conversion_rate)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_rate cannot be null');
        }
        $this->container['currency_conversion_rate'] = $currency_conversion_rate;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets customer_habitual_exporter_letter_of_intent_id
     *
     * @return string|null
     */
    public function getCustomerHabitualExporterLetterOfIntentId()
    {
        return $this->container['customer_habitual_exporter_letter_of_intent_id'];
    }

    /**
     * Sets customer_habitual_exporter_letter_of_intent_id
     *
     * @param string|null $customer_habitual_exporter_letter_of_intent_id customer_habitual_exporter_letter_of_intent_id
     *
     * @return self
     */
    public function setCustomerHabitualExporterLetterOfIntentId($customer_habitual_exporter_letter_of_intent_id)
    {
        if (is_null($customer_habitual_exporter_letter_of_intent_id)) {
            throw new \InvalidArgumentException('non-nullable customer_habitual_exporter_letter_of_intent_id cannot be null');
        }
        $this->container['customer_habitual_exporter_letter_of_intent_id'] = $customer_habitual_exporter_letter_of_intent_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return int|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param int|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direct_debit_file_created
     *
     * @return bool|null
     */
    public function getDirectDebitFileCreated()
    {
        return $this->container['direct_debit_file_created'];
    }

    /**
     * Sets direct_debit_file_created
     *
     * @param bool|null $direct_debit_file_created direct_debit_file_created
     *
     * @return self
     */
    public function setDirectDebitFileCreated($direct_debit_file_created)
    {
        if (is_null($direct_debit_file_created)) {
            throw new \InvalidArgumentException('non-nullable direct_debit_file_created cannot be null');
        }
        $this->container['direct_debit_file_created'] = $direct_debit_file_created;

        return $this;
    }

    /**
     * Gets direct_debit_file_latest_date
     *
     * @return int|null
     */
    public function getDirectDebitFileLatestDate()
    {
        return $this->container['direct_debit_file_latest_date'];
    }

    /**
     * Sets direct_debit_file_latest_date
     *
     * @param int|null $direct_debit_file_latest_date direct_debit_file_latest_date
     *
     * @return self
     */
    public function setDirectDebitFileLatestDate($direct_debit_file_latest_date)
    {
        if (is_null($direct_debit_file_latest_date)) {
            throw new \InvalidArgumentException('non-nullable direct_debit_file_latest_date cannot be null');
        }
        $this->container['direct_debit_file_latest_date'] = $direct_debit_file_latest_date;

        return $this;
    }

    /**
     * Gets disable_record_emailing_rule
     *
     * @return bool|null
     */
    public function getDisableRecordEmailingRule()
    {
        return $this->container['disable_record_emailing_rule'];
    }

    /**
     * Sets disable_record_emailing_rule
     *
     * @param bool|null $disable_record_emailing_rule disable_record_emailing_rule
     *
     * @return self
     */
    public function setDisableRecordEmailingRule($disable_record_emailing_rule)
    {
        if (is_null($disable_record_emailing_rule)) {
            throw new \InvalidArgumentException('non-nullable disable_record_emailing_rule cannot be null');
        }
        $this->container['disable_record_emailing_rule'] = $disable_record_emailing_rule;

        return $this;
    }

    /**
     * Gets dispatch_country_code
     *
     * @return string|null
     */
    public function getDispatchCountryCode()
    {
        return $this->container['dispatch_country_code'];
    }

    /**
     * Sets dispatch_country_code
     *
     * @param string|null $dispatch_country_code dispatch_country_code
     *
     * @return self
     */
    public function setDispatchCountryCode($dispatch_country_code)
    {
        if (is_null($dispatch_country_code)) {
            throw new \InvalidArgumentException('non-nullable dispatch_country_code cannot be null');
        }
        $this->container['dispatch_country_code'] = $dispatch_country_code;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return int|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param int|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets dunning_block_date_until_date
     *
     * @return int|null
     */
    public function getDunningBlockDateUntilDate()
    {
        return $this->container['dunning_block_date_until_date'];
    }

    /**
     * Sets dunning_block_date_until_date
     *
     * @param int|null $dunning_block_date_until_date dunning_block_date_until_date
     *
     * @return self
     */
    public function setDunningBlockDateUntilDate($dunning_block_date_until_date)
    {
        if (is_null($dunning_block_date_until_date)) {
            throw new \InvalidArgumentException('non-nullable dunning_block_date_until_date cannot be null');
        }
        $this->container['dunning_block_date_until_date'] = $dunning_block_date_until_date;

        return $this;
    }

    /**
     * Gets dunning_block_note
     *
     * @return string|null
     */
    public function getDunningBlockNote()
    {
        return $this->container['dunning_block_note'];
    }

    /**
     * Sets dunning_block_note
     *
     * @param string|null $dunning_block_note dunning_block_note
     *
     * @return self
     */
    public function setDunningBlockNote($dunning_block_note)
    {
        if (is_null($dunning_block_note)) {
            throw new \InvalidArgumentException('non-nullable dunning_block_note cannot be null');
        }
        $this->container['dunning_block_note'] = $dunning_block_note;

        return $this;
    }

    /**
     * Gets dunning_block_state
     *
     * @return string|null
     */
    public function getDunningBlockState()
    {
        return $this->container['dunning_block_state'];
    }

    /**
     * Sets dunning_block_state
     *
     * @param string|null $dunning_block_state dunning_block_state
     *
     * @return self
     */
    public function setDunningBlockState($dunning_block_state)
    {
        if (is_null($dunning_block_state)) {
            throw new \InvalidArgumentException('non-nullable dunning_block_state cannot be null');
        }
        $allowedValues = $this->getDunningBlockStateAllowableValues();
        if (!in_array($dunning_block_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dunning_block_state', must be one of '%s'",
                    $dunning_block_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dunning_block_state'] = $dunning_block_state;

        return $this;
    }

    /**
     * Gets factoring
     *
     * @return bool|null
     */
    public function getFactoring()
    {
        return $this->container['factoring'];
    }

    /**
     * Sets factoring
     *
     * @param bool|null $factoring factoring
     *
     * @return self
     */
    public function setFactoring($factoring)
    {
        if (is_null($factoring)) {
            throw new \InvalidArgumentException('non-nullable factoring cannot be null');
        }
        $this->container['factoring'] = $factoring;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets gross_amount_in_company_currency
     *
     * @return float|null
     */
    public function getGrossAmountInCompanyCurrency()
    {
        return $this->container['gross_amount_in_company_currency'];
    }

    /**
     * Sets gross_amount_in_company_currency
     *
     * @param float|null $gross_amount_in_company_currency gross_amount_in_company_currency
     *
     * @return self
     */
    public function setGrossAmountInCompanyCurrency($gross_amount_in_company_currency)
    {
        if (is_null($gross_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable gross_amount_in_company_currency cannot be null');
        }
        $this->container['gross_amount_in_company_currency'] = $gross_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets header_discount
     *
     * @return float|null
     */
    public function getHeaderDiscount()
    {
        return $this->container['header_discount'];
    }

    /**
     * Sets header_discount
     *
     * @param float|null $header_discount header_discount
     *
     * @return self
     */
    public function setHeaderDiscount($header_discount)
    {
        if (is_null($header_discount)) {
            throw new \InvalidArgumentException('non-nullable header_discount cannot be null');
        }
        $this->container['header_discount'] = $header_discount;

        return $this;
    }

    /**
     * Gets header_surcharge
     *
     * @return float|null
     */
    public function getHeaderSurcharge()
    {
        return $this->container['header_surcharge'];
    }

    /**
     * Sets header_surcharge
     *
     * @param float|null $header_surcharge header_surcharge
     *
     * @return self
     */
    public function setHeaderSurcharge($header_surcharge)
    {
        if (is_null($header_surcharge)) {
            throw new \InvalidArgumentException('non-nullable header_surcharge cannot be null');
        }
        $this->container['header_surcharge'] = $header_surcharge;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return int|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param int|null $invoice_date invoice_date
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number invoice_number
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets net_amount_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountInCompanyCurrency()
    {
        return $this->container['net_amount_in_company_currency'];
    }

    /**
     * Sets net_amount_in_company_currency
     *
     * @param float|null $net_amount_in_company_currency net_amount_in_company_currency
     *
     * @return self
     */
    public function setNetAmountInCompanyCurrency($net_amount_in_company_currency)
    {
        if (is_null($net_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_in_company_currency cannot be null');
        }
        $this->container['net_amount_in_company_currency'] = $net_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets non_standard_tax_id
     *
     * @return string|null
     */
    public function getNonStandardTaxId()
    {
        return $this->container['non_standard_tax_id'];
    }

    /**
     * Sets non_standard_tax_id
     *
     * @param string|null $non_standard_tax_id non_standard_tax_id
     *
     * @return self
     */
    public function setNonStandardTaxId($non_standard_tax_id)
    {
        if (is_null($non_standard_tax_id)) {
            throw new \InvalidArgumentException('non-nullable non_standard_tax_id cannot be null');
        }
        $this->container['non_standard_tax_id'] = $non_standard_tax_id;

        return $this;
    }

    /**
     * Gets order_number_at_customer
     *
     * @return string|null
     */
    public function getOrderNumberAtCustomer()
    {
        return $this->container['order_number_at_customer'];
    }

    /**
     * Sets order_number_at_customer
     *
     * @param string|null $order_number_at_customer order_number_at_customer
     *
     * @return self
     */
    public function setOrderNumberAtCustomer($order_number_at_customer)
    {
        if (is_null($order_number_at_customer)) {
            throw new \InvalidArgumentException('non-nullable order_number_at_customer cannot be null');
        }
        $this->container['order_number_at_customer'] = $order_number_at_customer;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool|null $paid paid
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status payment_status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets preceding_sales_invoice_id
     *
     * @return string|null
     */
    public function getPrecedingSalesInvoiceId()
    {
        return $this->container['preceding_sales_invoice_id'];
    }

    /**
     * Sets preceding_sales_invoice_id
     *
     * @param string|null $preceding_sales_invoice_id preceding_sales_invoice_id
     *
     * @return self
     */
    public function setPrecedingSalesInvoiceId($preceding_sales_invoice_id)
    {
        if (is_null($preceding_sales_invoice_id)) {
            throw new \InvalidArgumentException('non-nullable preceding_sales_invoice_id cannot be null');
        }
        $this->container['preceding_sales_invoice_id'] = $preceding_sales_invoice_id;

        return $this;
    }

    /**
     * Gets pricing_date
     *
     * @return int|null
     */
    public function getPricingDate()
    {
        return $this->container['pricing_date'];
    }

    /**
     * Sets pricing_date
     *
     * @param int|null $pricing_date pricing_date
     *
     * @return self
     */
    public function setPricingDate($pricing_date)
    {
        if (is_null($pricing_date)) {
            throw new \InvalidArgumentException('non-nullable pricing_date cannot be null');
        }
        $this->container['pricing_date'] = $pricing_date;

        return $this;
    }

    /**
     * Gets record_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getRecordAddress()
    {
        return $this->container['record_address'];
    }

    /**
     * Sets record_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $record_address record_address
     *
     * @return self
     */
    public function setRecordAddress($record_address)
    {
        if (is_null($record_address)) {
            throw new \InvalidArgumentException('non-nullable record_address cannot be null');
        }
        $this->container['record_address'] = $record_address;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_comment_inheritance
     *
     * @return bool|null
     */
    public function getRecordCommentInheritance()
    {
        return $this->container['record_comment_inheritance'];
    }

    /**
     * Sets record_comment_inheritance
     *
     * @param bool|null $record_comment_inheritance record_comment_inheritance
     *
     * @return self
     */
    public function setRecordCommentInheritance($record_comment_inheritance)
    {
        if (is_null($record_comment_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_comment_inheritance cannot be null');
        }
        $this->container['record_comment_inheritance'] = $record_comment_inheritance;

        return $this;
    }

    /**
     * Gets record_currency_id
     *
     * @return string
     */
    public function getRecordCurrencyId()
    {
        return $this->container['record_currency_id'];
    }

    /**
     * Sets record_currency_id
     *
     * @param string $record_currency_id record_currency_id
     *
     * @return self
     */
    public function setRecordCurrencyId($record_currency_id)
    {
        if (is_null($record_currency_id)) {
            throw new \InvalidArgumentException('non-nullable record_currency_id cannot be null');
        }
        $this->container['record_currency_id'] = $record_currency_id;

        return $this;
    }

    /**
     * Gets record_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getRecordEmailAddresses()
    {
        return $this->container['record_email_addresses'];
    }

    /**
     * Sets record_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $record_email_addresses record_email_addresses
     *
     * @return self
     */
    public function setRecordEmailAddresses($record_email_addresses)
    {
        if (is_null($record_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable record_email_addresses cannot be null');
        }
        $this->container['record_email_addresses'] = $record_email_addresses;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_free_text_inheritance
     *
     * @return bool|null
     */
    public function getRecordFreeTextInheritance()
    {
        return $this->container['record_free_text_inheritance'];
    }

    /**
     * Sets record_free_text_inheritance
     *
     * @param bool|null $record_free_text_inheritance record_free_text_inheritance
     *
     * @return self
     */
    public function setRecordFreeTextInheritance($record_free_text_inheritance)
    {
        if (is_null($record_free_text_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_free_text_inheritance cannot be null');
        }
        $this->container['record_free_text_inheritance'] = $record_free_text_inheritance;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets record_opening_inheritance
     *
     * @return bool|null
     */
    public function getRecordOpeningInheritance()
    {
        return $this->container['record_opening_inheritance'];
    }

    /**
     * Sets record_opening_inheritance
     *
     * @param bool|null $record_opening_inheritance record_opening_inheritance
     *
     * @return self
     */
    public function setRecordOpeningInheritance($record_opening_inheritance)
    {
        if (is_null($record_opening_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_opening_inheritance cannot be null');
        }
        $this->container['record_opening_inheritance'] = $record_opening_inheritance;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return string|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param string|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets sales_invoice_items
     *
     * @return \kruegge82\weclapp\Model\SalesInvoiceItem[]|null
     */
    public function getSalesInvoiceItems()
    {
        return $this->container['sales_invoice_items'];
    }

    /**
     * Sets sales_invoice_items
     *
     * @param \kruegge82\weclapp\Model\SalesInvoiceItem[]|null $sales_invoice_items sales_invoice_items
     *
     * @return self
     */
    public function setSalesInvoiceItems($sales_invoice_items)
    {
        if (is_null($sales_invoice_items)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_items cannot be null');
        }
        $this->container['sales_invoice_items'] = $sales_invoice_items;

        return $this;
    }

    /**
     * Gets sales_invoice_type
     *
     * @return string|null
     */
    public function getSalesInvoiceType()
    {
        return $this->container['sales_invoice_type'];
    }

    /**
     * Sets sales_invoice_type
     *
     * @param string|null $sales_invoice_type sales_invoice_type
     *
     * @return self
     */
    public function setSalesInvoiceType($sales_invoice_type)
    {
        if (is_null($sales_invoice_type)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_type cannot be null');
        }
        $allowedValues = $this->getSalesInvoiceTypeAllowableValues();
        if (!in_array($sales_invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sales_invoice_type', must be one of '%s'",
                    $sales_invoice_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sales_invoice_type'] = $sales_invoice_type;

        return $this;
    }

    /**
     * Gets sales_order_id
     *
     * @return string|null
     */
    public function getSalesOrderId()
    {
        return $this->container['sales_order_id'];
    }

    /**
     * Sets sales_order_id
     *
     * @param string|null $sales_order_id sales_order_id
     *
     * @return self
     */
    public function setSalesOrderId($sales_order_id)
    {
        if (is_null($sales_order_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_id cannot be null');
        }
        $this->container['sales_order_id'] = $sales_order_id;

        return $this;
    }

    /**
     * Gets sales_orders
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getSalesOrders()
    {
        return $this->container['sales_orders'];
    }

    /**
     * Sets sales_orders
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $sales_orders sales_orders
     *
     * @return self
     */
    public function setSalesOrders($sales_orders)
    {
        if (is_null($sales_orders)) {
            throw new \InvalidArgumentException('non-nullable sales_orders cannot be null');
        }
        $this->container['sales_orders'] = $sales_orders;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets sepa_direct_debit_mandate_id
     *
     * @return string|null
     */
    public function getSepaDirectDebitMandateId()
    {
        return $this->container['sepa_direct_debit_mandate_id'];
    }

    /**
     * Sets sepa_direct_debit_mandate_id
     *
     * @param string|null $sepa_direct_debit_mandate_id sepa_direct_debit_mandate_id
     *
     * @return self
     */
    public function setSepaDirectDebitMandateId($sepa_direct_debit_mandate_id)
    {
        if (is_null($sepa_direct_debit_mandate_id)) {
            throw new \InvalidArgumentException('non-nullable sepa_direct_debit_mandate_id cannot be null');
        }
        $this->container['sepa_direct_debit_mandate_id'] = $sepa_direct_debit_mandate_id;

        return $this;
    }

    /**
     * Gets service_period_from
     *
     * @return int|null
     */
    public function getServicePeriodFrom()
    {
        return $this->container['service_period_from'];
    }

    /**
     * Sets service_period_from
     *
     * @param int|null $service_period_from service_period_from
     *
     * @return self
     */
    public function setServicePeriodFrom($service_period_from)
    {
        if (is_null($service_period_from)) {
            throw new \InvalidArgumentException('non-nullable service_period_from cannot be null');
        }
        $this->container['service_period_from'] = $service_period_from;

        return $this;
    }

    /**
     * Gets service_period_to
     *
     * @return int|null
     */
    public function getServicePeriodTo()
    {
        return $this->container['service_period_to'];
    }

    /**
     * Sets service_period_to
     *
     * @param int|null $service_period_to service_period_to
     *
     * @return self
     */
    public function setServicePeriodTo($service_period_to)
    {
        if (is_null($service_period_to)) {
            throw new \InvalidArgumentException('non-nullable service_period_to cannot be null');
        }
        $this->container['service_period_to'] = $service_period_to;

        return $this;
    }

    /**
     * Gets shipment_method_id
     *
     * @return string|null
     */
    public function getShipmentMethodId()
    {
        return $this->container['shipment_method_id'];
    }

    /**
     * Sets shipment_method_id
     *
     * @param string|null $shipment_method_id shipment_method_id
     *
     * @return self
     */
    public function setShipmentMethodId($shipment_method_id)
    {
        if (is_null($shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_id cannot be null');
        }
        $this->container['shipment_method_id'] = $shipment_method_id;

        return $this;
    }

    /**
     * Gets shipping_cost_items
     *
     * @return \kruegge82\weclapp\Model\SalesInvoiceShippingCostItem[]|null
     */
    public function getShippingCostItems()
    {
        return $this->container['shipping_cost_items'];
    }

    /**
     * Sets shipping_cost_items
     *
     * @param \kruegge82\weclapp\Model\SalesInvoiceShippingCostItem[]|null $shipping_cost_items shipping_cost_items
     *
     * @return self
     */
    public function setShippingCostItems($shipping_cost_items)
    {
        if (is_null($shipping_cost_items)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost_items cannot be null');
        }
        $this->container['shipping_cost_items'] = $shipping_cost_items;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return int|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param int|null $shipping_date shipping_date
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        if (is_null($shipping_date)) {
            throw new \InvalidArgumentException('non-nullable shipping_date cannot be null');
        }
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\SalesInvoiceStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\SalesInvoiceStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets term_of_payment_id
     *
     * @return string|null
     */
    public function getTermOfPaymentId()
    {
        return $this->container['term_of_payment_id'];
    }

    /**
     * Sets term_of_payment_id
     *
     * @param string|null $term_of_payment_id term_of_payment_id
     *
     * @return self
     */
    public function setTermOfPaymentId($term_of_payment_id)
    {
        if (is_null($term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_id cannot be null');
        }
        $this->container['term_of_payment_id'] = $term_of_payment_id;

        return $this;
    }

    /**
     * Gets vat_registration_number
     *
     * @return string|null
     */
    public function getVatRegistrationNumber()
    {
        return $this->container['vat_registration_number'];
    }

    /**
     * Sets vat_registration_number
     *
     * @param string|null $vat_registration_number vat_registration_number
     *
     * @return self
     */
    public function setVatRegistrationNumber($vat_registration_number)
    {
        if (is_null($vat_registration_number)) {
            throw new \InvalidArgumentException('non-nullable vat_registration_number cannot be null');
        }
        $this->container['vat_registration_number'] = $vat_registration_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


