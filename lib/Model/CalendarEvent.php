<?php
/**
 * CalendarEvent
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * CalendarEvent Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CalendarEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'calendarEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'all_day_event' => 'bool',
        'attendees' => '\kruegge82\weclapp\Model\CalendarEventAttendee[]',
        'calendar_id' => 'string',
        'concerning_id' => 'string',
        'contact_id' => 'string',
        'deleted' => 'bool',
        'description' => 'string',
        'end_date' => 'int',
        'location' => 'string',
        'private_event' => 'bool',
        'recurring_event' => '\kruegge82\weclapp\Model\RecurringEvent',
        'references' => '\kruegge82\weclapp\Model\EntityReference[]',
        'reminder_send_type' => '\kruegge82\weclapp\Model\ReminderSendType',
        'reminder_time' => 'int',
        'show_as' => '\kruegge82\weclapp\Model\FollowupBusyState',
        'start_date' => 'int',
        'subject' => 'string',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'all_day_event' => null,
        'attendees' => null,
        'calendar_id' => null,
        'concerning_id' => null,
        'contact_id' => null,
        'deleted' => null,
        'description' => null,
        'end_date' => 'timestamp',
        'location' => null,
        'private_event' => null,
        'recurring_event' => null,
        'references' => null,
        'reminder_send_type' => null,
        'reminder_time' => 'int32',
        'show_as' => null,
        'start_date' => 'timestamp',
        'subject' => null,
        'user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'all_day_event' => false,
        'attendees' => false,
        'calendar_id' => false,
        'concerning_id' => false,
        'contact_id' => false,
        'deleted' => false,
        'description' => false,
        'end_date' => false,
        'location' => false,
        'private_event' => false,
        'recurring_event' => false,
        'references' => false,
        'reminder_send_type' => false,
        'reminder_time' => false,
        'show_as' => false,
        'start_date' => false,
        'subject' => false,
        'user_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'all_day_event' => 'allDayEvent',
        'attendees' => 'attendees',
        'calendar_id' => 'calendarId',
        'concerning_id' => 'concerningId',
        'contact_id' => 'contactId',
        'deleted' => 'deleted',
        'description' => 'description',
        'end_date' => 'endDate',
        'location' => 'location',
        'private_event' => 'privateEvent',
        'recurring_event' => 'recurringEvent',
        'references' => 'references',
        'reminder_send_type' => 'reminderSendType',
        'reminder_time' => 'reminderTime',
        'show_as' => 'showAs',
        'start_date' => 'startDate',
        'subject' => 'subject',
        'user_id' => 'userId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'all_day_event' => 'setAllDayEvent',
        'attendees' => 'setAttendees',
        'calendar_id' => 'setCalendarId',
        'concerning_id' => 'setConcerningId',
        'contact_id' => 'setContactId',
        'deleted' => 'setDeleted',
        'description' => 'setDescription',
        'end_date' => 'setEndDate',
        'location' => 'setLocation',
        'private_event' => 'setPrivateEvent',
        'recurring_event' => 'setRecurringEvent',
        'references' => 'setReferences',
        'reminder_send_type' => 'setReminderSendType',
        'reminder_time' => 'setReminderTime',
        'show_as' => 'setShowAs',
        'start_date' => 'setStartDate',
        'subject' => 'setSubject',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'all_day_event' => 'getAllDayEvent',
        'attendees' => 'getAttendees',
        'calendar_id' => 'getCalendarId',
        'concerning_id' => 'getConcerningId',
        'contact_id' => 'getContactId',
        'deleted' => 'getDeleted',
        'description' => 'getDescription',
        'end_date' => 'getEndDate',
        'location' => 'getLocation',
        'private_event' => 'getPrivateEvent',
        'recurring_event' => 'getRecurringEvent',
        'references' => 'getReferences',
        'reminder_send_type' => 'getReminderSendType',
        'reminder_time' => 'getReminderTime',
        'show_as' => 'getShowAs',
        'start_date' => 'getStartDate',
        'subject' => 'getSubject',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('all_day_event', $data ?? [], null);
        $this->setIfExists('attendees', $data ?? [], null);
        $this->setIfExists('calendar_id', $data ?? [], null);
        $this->setIfExists('concerning_id', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('private_event', $data ?? [], null);
        $this->setIfExists('recurring_event', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('reminder_send_type', $data ?? [], null);
        $this->setIfExists('reminder_time', $data ?? [], null);
        $this->setIfExists('show_as', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 200)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 255)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets all_day_event
     *
     * @return bool|null
     */
    public function getAllDayEvent()
    {
        return $this->container['all_day_event'];
    }

    /**
     * Sets all_day_event
     *
     * @param bool|null $all_day_event all_day_event
     *
     * @return self
     */
    public function setAllDayEvent($all_day_event)
    {
        if (is_null($all_day_event)) {
            throw new \InvalidArgumentException('non-nullable all_day_event cannot be null');
        }
        $this->container['all_day_event'] = $all_day_event;

        return $this;
    }

    /**
     * Gets attendees
     *
     * @return \kruegge82\weclapp\Model\CalendarEventAttendee[]|null
     */
    public function getAttendees()
    {
        return $this->container['attendees'];
    }

    /**
     * Sets attendees
     *
     * @param \kruegge82\weclapp\Model\CalendarEventAttendee[]|null $attendees attendees
     *
     * @return self
     */
    public function setAttendees($attendees)
    {
        if (is_null($attendees)) {
            throw new \InvalidArgumentException('non-nullable attendees cannot be null');
        }
        $this->container['attendees'] = $attendees;

        return $this;
    }

    /**
     * Gets calendar_id
     *
     * @return string|null
     */
    public function getCalendarId()
    {
        return $this->container['calendar_id'];
    }

    /**
     * Sets calendar_id
     *
     * @param string|null $calendar_id calendar_id
     *
     * @return self
     */
    public function setCalendarId($calendar_id)
    {
        if (is_null($calendar_id)) {
            throw new \InvalidArgumentException('non-nullable calendar_id cannot be null');
        }
        $this->container['calendar_id'] = $calendar_id;

        return $this;
    }

    /**
     * Gets concerning_id
     *
     * @return string|null
     */
    public function getConcerningId()
    {
        return $this->container['concerning_id'];
    }

    /**
     * Sets concerning_id
     *
     * @param string|null $concerning_id concerning_id
     *
     * @return self
     */
    public function setConcerningId($concerning_id)
    {
        if (is_null($concerning_id)) {
            throw new \InvalidArgumentException('non-nullable concerning_id cannot be null');
        }
        $this->container['concerning_id'] = $concerning_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        if (is_null($contact_id)) {
            throw new \InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CalendarEvent., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return int|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param int|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        if ((mb_strlen($location) > 200)) {
            throw new \InvalidArgumentException('invalid length for $location when calling CalendarEvent., must be smaller than or equal to 200.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets private_event
     *
     * @return bool|null
     */
    public function getPrivateEvent()
    {
        return $this->container['private_event'];
    }

    /**
     * Sets private_event
     *
     * @param bool|null $private_event private_event
     *
     * @return self
     */
    public function setPrivateEvent($private_event)
    {
        if (is_null($private_event)) {
            throw new \InvalidArgumentException('non-nullable private_event cannot be null');
        }
        $this->container['private_event'] = $private_event;

        return $this;
    }

    /**
     * Gets recurring_event
     *
     * @return \kruegge82\weclapp\Model\RecurringEvent|null
     */
    public function getRecurringEvent()
    {
        return $this->container['recurring_event'];
    }

    /**
     * Sets recurring_event
     *
     * @param \kruegge82\weclapp\Model\RecurringEvent|null $recurring_event recurring_event
     *
     * @return self
     */
    public function setRecurringEvent($recurring_event)
    {
        if (is_null($recurring_event)) {
            throw new \InvalidArgumentException('non-nullable recurring_event cannot be null');
        }
        $this->container['recurring_event'] = $recurring_event;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \kruegge82\weclapp\Model\EntityReference[]|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \kruegge82\weclapp\Model\EntityReference[]|null $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets reminder_send_type
     *
     * @return \kruegge82\weclapp\Model\ReminderSendType|null
     */
    public function getReminderSendType()
    {
        return $this->container['reminder_send_type'];
    }

    /**
     * Sets reminder_send_type
     *
     * @param \kruegge82\weclapp\Model\ReminderSendType|null $reminder_send_type reminder_send_type
     *
     * @return self
     */
    public function setReminderSendType($reminder_send_type)
    {
        if (is_null($reminder_send_type)) {
            throw new \InvalidArgumentException('non-nullable reminder_send_type cannot be null');
        }
        $this->container['reminder_send_type'] = $reminder_send_type;

        return $this;
    }

    /**
     * Gets reminder_time
     *
     * @return int|null
     */
    public function getReminderTime()
    {
        return $this->container['reminder_time'];
    }

    /**
     * Sets reminder_time
     *
     * @param int|null $reminder_time reminder_time
     *
     * @return self
     */
    public function setReminderTime($reminder_time)
    {
        if (is_null($reminder_time)) {
            throw new \InvalidArgumentException('non-nullable reminder_time cannot be null');
        }
        $this->container['reminder_time'] = $reminder_time;

        return $this;
    }

    /**
     * Gets show_as
     *
     * @return \kruegge82\weclapp\Model\FollowupBusyState|null
     */
    public function getShowAs()
    {
        return $this->container['show_as'];
    }

    /**
     * Sets show_as
     *
     * @param \kruegge82\weclapp\Model\FollowupBusyState|null $show_as show_as
     *
     * @return self
     */
    public function setShowAs($show_as)
    {
        if (is_null($show_as)) {
            throw new \InvalidArgumentException('non-nullable show_as cannot be null');
        }
        $this->container['show_as'] = $show_as;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        if ((mb_strlen($subject) > 255)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling CalendarEvent., must be smaller than or equal to 255.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


