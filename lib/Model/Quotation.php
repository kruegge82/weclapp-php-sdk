<?php
/**
 * Quotation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Quotation Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Quotation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'quotation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'commercial_language' => 'string',
        'creator_id' => 'string',
        'description' => 'string',
        'disable_record_emailing_rule' => 'bool',
        'record_comment' => 'string',
        'record_free_text' => 'string',
        'record_opening' => 'string',
        'sent_to_recipient' => 'bool',
        'tags' => 'string[]',
        'currency_conversion_date' => 'int',
        'currency_conversion_locked' => 'bool',
        'currency_conversion_rate' => 'float',
        'gross_amount' => 'float',
        'gross_amount_in_company_currency' => 'float',
        'header_discount' => 'float',
        'header_surcharge' => 'float',
        'net_amount' => 'float',
        'net_amount_in_company_currency' => 'float',
        'non_standard_tax_id' => 'string',
        'payment_method_id' => 'string',
        'record_currency_id' => 'string',
        'term_of_payment_id' => 'string',
        'commission' => 'string',
        'commission_sales_partners' => '\kruegge82\weclapp\Model\CommissionSalesPartner[]',
        'customer_id' => 'string',
        'dispatch_country_code' => 'string',
        'factoring' => 'bool',
        'pricing_date' => 'int',
        'responsible_user_id' => 'string',
        'sales_channel' => '\kruegge82\weclapp\Model\DistributionChannel',
        'service_period_from' => 'int',
        'service_period_to' => 'int',
        'shipment_method_id' => 'string',
        'default_shipping_carrier_id' => 'string',
        'delivery_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'delivery_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'invoice_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'planned_delivery_date' => 'int',
        'planned_shipping_date' => 'int',
        'record_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'sales_invoice_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'active_version' => 'bool',
        'expected_signature_date' => 'int',
        'invoice_recipient_id' => 'string',
        'merged_to_quotation_id' => 'string',
        'opportunity_id' => 'string',
        'public_link' => 'string',
        'quotation_date' => 'int',
        'quotation_items' => '\kruegge82\weclapp\Model\QuotationItem[]',
        'quotation_number' => 'string',
        'quotation_type' => '\kruegge82\weclapp\Model\OfferOutType',
        'quotation_version' => 'int',
        'record_comment_inheritance' => 'bool',
        'record_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'record_free_text_inheritance' => 'bool',
        'record_opening_inheritance' => 'bool',
        'rejection_reason' => 'string',
        'request_date' => 'int',
        'sales_order_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'sales_probability' => 'int',
        'sales_stage_history' => '\kruegge82\weclapp\Model\SalesStageHistory[]',
        'sales_stage_id' => 'string',
        'shipping_cost_items' => '\kruegge82\weclapp\Model\QuotationShippingCostItem[]',
        'status' => '\kruegge82\weclapp\Model\OfferStatusType',
        'status_history' => '\kruegge82\weclapp\Model\QuotationStatusHistory[]',
        'template' => 'bool',
        'valid_from' => 'int',
        'valid_to' => 'int',
        'warehouse_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'commercial_language' => null,
        'creator_id' => null,
        'description' => 'html',
        'disable_record_emailing_rule' => null,
        'record_comment' => 'html',
        'record_free_text' => 'html',
        'record_opening' => 'html',
        'sent_to_recipient' => null,
        'tags' => null,
        'currency_conversion_date' => 'timestamp',
        'currency_conversion_locked' => null,
        'currency_conversion_rate' => 'decimal',
        'gross_amount' => 'decimal',
        'gross_amount_in_company_currency' => 'decimal',
        'header_discount' => 'decimal',
        'header_surcharge' => 'decimal',
        'net_amount' => 'decimal',
        'net_amount_in_company_currency' => 'decimal',
        'non_standard_tax_id' => null,
        'payment_method_id' => null,
        'record_currency_id' => null,
        'term_of_payment_id' => null,
        'commission' => null,
        'commission_sales_partners' => null,
        'customer_id' => null,
        'dispatch_country_code' => null,
        'factoring' => null,
        'pricing_date' => 'timestamp',
        'responsible_user_id' => null,
        'sales_channel' => null,
        'service_period_from' => 'timestamp',
        'service_period_to' => 'timestamp',
        'shipment_method_id' => null,
        'default_shipping_carrier_id' => null,
        'delivery_address' => null,
        'delivery_email_addresses' => null,
        'invoice_address' => null,
        'planned_delivery_date' => 'timestamp',
        'planned_shipping_date' => 'timestamp',
        'record_address' => null,
        'sales_invoice_email_addresses' => null,
        'active_version' => null,
        'expected_signature_date' => 'timestamp',
        'invoice_recipient_id' => null,
        'merged_to_quotation_id' => null,
        'opportunity_id' => null,
        'public_link' => null,
        'quotation_date' => 'timestamp',
        'quotation_items' => null,
        'quotation_number' => null,
        'quotation_type' => null,
        'quotation_version' => 'int32',
        'record_comment_inheritance' => null,
        'record_email_addresses' => null,
        'record_free_text_inheritance' => null,
        'record_opening_inheritance' => null,
        'rejection_reason' => null,
        'request_date' => 'timestamp',
        'sales_order_email_addresses' => null,
        'sales_probability' => 'int32',
        'sales_stage_history' => null,
        'sales_stage_id' => null,
        'shipping_cost_items' => null,
        'status' => null,
        'status_history' => null,
        'template' => null,
        'valid_from' => 'timestamp',
        'valid_to' => 'timestamp',
        'warehouse_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'commercial_language' => false,
        'creator_id' => false,
        'description' => false,
        'disable_record_emailing_rule' => false,
        'record_comment' => false,
        'record_free_text' => false,
        'record_opening' => false,
        'sent_to_recipient' => false,
        'tags' => false,
        'currency_conversion_date' => false,
        'currency_conversion_locked' => false,
        'currency_conversion_rate' => false,
        'gross_amount' => false,
        'gross_amount_in_company_currency' => false,
        'header_discount' => false,
        'header_surcharge' => false,
        'net_amount' => false,
        'net_amount_in_company_currency' => false,
        'non_standard_tax_id' => false,
        'payment_method_id' => false,
        'record_currency_id' => false,
        'term_of_payment_id' => false,
        'commission' => false,
        'commission_sales_partners' => false,
        'customer_id' => false,
        'dispatch_country_code' => false,
        'factoring' => false,
        'pricing_date' => false,
        'responsible_user_id' => false,
        'sales_channel' => false,
        'service_period_from' => false,
        'service_period_to' => false,
        'shipment_method_id' => false,
        'default_shipping_carrier_id' => false,
        'delivery_address' => false,
        'delivery_email_addresses' => false,
        'invoice_address' => false,
        'planned_delivery_date' => false,
        'planned_shipping_date' => false,
        'record_address' => false,
        'sales_invoice_email_addresses' => false,
        'active_version' => false,
        'expected_signature_date' => false,
        'invoice_recipient_id' => false,
        'merged_to_quotation_id' => false,
        'opportunity_id' => false,
        'public_link' => false,
        'quotation_date' => false,
        'quotation_items' => false,
        'quotation_number' => false,
        'quotation_type' => false,
        'quotation_version' => false,
        'record_comment_inheritance' => false,
        'record_email_addresses' => false,
        'record_free_text_inheritance' => false,
        'record_opening_inheritance' => false,
        'rejection_reason' => false,
        'request_date' => false,
        'sales_order_email_addresses' => false,
        'sales_probability' => false,
        'sales_stage_history' => false,
        'sales_stage_id' => false,
        'shipping_cost_items' => false,
        'status' => false,
        'status_history' => false,
        'template' => false,
        'valid_from' => false,
        'valid_to' => false,
        'warehouse_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'commercial_language' => 'commercialLanguage',
        'creator_id' => 'creatorId',
        'description' => 'description',
        'disable_record_emailing_rule' => 'disableRecordEmailingRule',
        'record_comment' => 'recordComment',
        'record_free_text' => 'recordFreeText',
        'record_opening' => 'recordOpening',
        'sent_to_recipient' => 'sentToRecipient',
        'tags' => 'tags',
        'currency_conversion_date' => 'currencyConversionDate',
        'currency_conversion_locked' => 'currencyConversionLocked',
        'currency_conversion_rate' => 'currencyConversionRate',
        'gross_amount' => 'grossAmount',
        'gross_amount_in_company_currency' => 'grossAmountInCompanyCurrency',
        'header_discount' => 'headerDiscount',
        'header_surcharge' => 'headerSurcharge',
        'net_amount' => 'netAmount',
        'net_amount_in_company_currency' => 'netAmountInCompanyCurrency',
        'non_standard_tax_id' => 'nonStandardTaxId',
        'payment_method_id' => 'paymentMethodId',
        'record_currency_id' => 'recordCurrencyId',
        'term_of_payment_id' => 'termOfPaymentId',
        'commission' => 'commission',
        'commission_sales_partners' => 'commissionSalesPartners',
        'customer_id' => 'customerId',
        'dispatch_country_code' => 'dispatchCountryCode',
        'factoring' => 'factoring',
        'pricing_date' => 'pricingDate',
        'responsible_user_id' => 'responsibleUserId',
        'sales_channel' => 'salesChannel',
        'service_period_from' => 'servicePeriodFrom',
        'service_period_to' => 'servicePeriodTo',
        'shipment_method_id' => 'shipmentMethodId',
        'default_shipping_carrier_id' => 'defaultShippingCarrierId',
        'delivery_address' => 'deliveryAddress',
        'delivery_email_addresses' => 'deliveryEmailAddresses',
        'invoice_address' => 'invoiceAddress',
        'planned_delivery_date' => 'plannedDeliveryDate',
        'planned_shipping_date' => 'plannedShippingDate',
        'record_address' => 'recordAddress',
        'sales_invoice_email_addresses' => 'salesInvoiceEmailAddresses',
        'active_version' => 'activeVersion',
        'expected_signature_date' => 'expectedSignatureDate',
        'invoice_recipient_id' => 'invoiceRecipientId',
        'merged_to_quotation_id' => 'mergedToQuotationId',
        'opportunity_id' => 'opportunityId',
        'public_link' => 'publicLink',
        'quotation_date' => 'quotationDate',
        'quotation_items' => 'quotationItems',
        'quotation_number' => 'quotationNumber',
        'quotation_type' => 'quotationType',
        'quotation_version' => 'quotationVersion',
        'record_comment_inheritance' => 'recordCommentInheritance',
        'record_email_addresses' => 'recordEmailAddresses',
        'record_free_text_inheritance' => 'recordFreeTextInheritance',
        'record_opening_inheritance' => 'recordOpeningInheritance',
        'rejection_reason' => 'rejectionReason',
        'request_date' => 'requestDate',
        'sales_order_email_addresses' => 'salesOrderEmailAddresses',
        'sales_probability' => 'salesProbability',
        'sales_stage_history' => 'salesStageHistory',
        'sales_stage_id' => 'salesStageId',
        'shipping_cost_items' => 'shippingCostItems',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'template' => 'template',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo',
        'warehouse_id' => 'warehouseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'commercial_language' => 'setCommercialLanguage',
        'creator_id' => 'setCreatorId',
        'description' => 'setDescription',
        'disable_record_emailing_rule' => 'setDisableRecordEmailingRule',
        'record_comment' => 'setRecordComment',
        'record_free_text' => 'setRecordFreeText',
        'record_opening' => 'setRecordOpening',
        'sent_to_recipient' => 'setSentToRecipient',
        'tags' => 'setTags',
        'currency_conversion_date' => 'setCurrencyConversionDate',
        'currency_conversion_locked' => 'setCurrencyConversionLocked',
        'currency_conversion_rate' => 'setCurrencyConversionRate',
        'gross_amount' => 'setGrossAmount',
        'gross_amount_in_company_currency' => 'setGrossAmountInCompanyCurrency',
        'header_discount' => 'setHeaderDiscount',
        'header_surcharge' => 'setHeaderSurcharge',
        'net_amount' => 'setNetAmount',
        'net_amount_in_company_currency' => 'setNetAmountInCompanyCurrency',
        'non_standard_tax_id' => 'setNonStandardTaxId',
        'payment_method_id' => 'setPaymentMethodId',
        'record_currency_id' => 'setRecordCurrencyId',
        'term_of_payment_id' => 'setTermOfPaymentId',
        'commission' => 'setCommission',
        'commission_sales_partners' => 'setCommissionSalesPartners',
        'customer_id' => 'setCustomerId',
        'dispatch_country_code' => 'setDispatchCountryCode',
        'factoring' => 'setFactoring',
        'pricing_date' => 'setPricingDate',
        'responsible_user_id' => 'setResponsibleUserId',
        'sales_channel' => 'setSalesChannel',
        'service_period_from' => 'setServicePeriodFrom',
        'service_period_to' => 'setServicePeriodTo',
        'shipment_method_id' => 'setShipmentMethodId',
        'default_shipping_carrier_id' => 'setDefaultShippingCarrierId',
        'delivery_address' => 'setDeliveryAddress',
        'delivery_email_addresses' => 'setDeliveryEmailAddresses',
        'invoice_address' => 'setInvoiceAddress',
        'planned_delivery_date' => 'setPlannedDeliveryDate',
        'planned_shipping_date' => 'setPlannedShippingDate',
        'record_address' => 'setRecordAddress',
        'sales_invoice_email_addresses' => 'setSalesInvoiceEmailAddresses',
        'active_version' => 'setActiveVersion',
        'expected_signature_date' => 'setExpectedSignatureDate',
        'invoice_recipient_id' => 'setInvoiceRecipientId',
        'merged_to_quotation_id' => 'setMergedToQuotationId',
        'opportunity_id' => 'setOpportunityId',
        'public_link' => 'setPublicLink',
        'quotation_date' => 'setQuotationDate',
        'quotation_items' => 'setQuotationItems',
        'quotation_number' => 'setQuotationNumber',
        'quotation_type' => 'setQuotationType',
        'quotation_version' => 'setQuotationVersion',
        'record_comment_inheritance' => 'setRecordCommentInheritance',
        'record_email_addresses' => 'setRecordEmailAddresses',
        'record_free_text_inheritance' => 'setRecordFreeTextInheritance',
        'record_opening_inheritance' => 'setRecordOpeningInheritance',
        'rejection_reason' => 'setRejectionReason',
        'request_date' => 'setRequestDate',
        'sales_order_email_addresses' => 'setSalesOrderEmailAddresses',
        'sales_probability' => 'setSalesProbability',
        'sales_stage_history' => 'setSalesStageHistory',
        'sales_stage_id' => 'setSalesStageId',
        'shipping_cost_items' => 'setShippingCostItems',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'template' => 'setTemplate',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'warehouse_id' => 'setWarehouseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'commercial_language' => 'getCommercialLanguage',
        'creator_id' => 'getCreatorId',
        'description' => 'getDescription',
        'disable_record_emailing_rule' => 'getDisableRecordEmailingRule',
        'record_comment' => 'getRecordComment',
        'record_free_text' => 'getRecordFreeText',
        'record_opening' => 'getRecordOpening',
        'sent_to_recipient' => 'getSentToRecipient',
        'tags' => 'getTags',
        'currency_conversion_date' => 'getCurrencyConversionDate',
        'currency_conversion_locked' => 'getCurrencyConversionLocked',
        'currency_conversion_rate' => 'getCurrencyConversionRate',
        'gross_amount' => 'getGrossAmount',
        'gross_amount_in_company_currency' => 'getGrossAmountInCompanyCurrency',
        'header_discount' => 'getHeaderDiscount',
        'header_surcharge' => 'getHeaderSurcharge',
        'net_amount' => 'getNetAmount',
        'net_amount_in_company_currency' => 'getNetAmountInCompanyCurrency',
        'non_standard_tax_id' => 'getNonStandardTaxId',
        'payment_method_id' => 'getPaymentMethodId',
        'record_currency_id' => 'getRecordCurrencyId',
        'term_of_payment_id' => 'getTermOfPaymentId',
        'commission' => 'getCommission',
        'commission_sales_partners' => 'getCommissionSalesPartners',
        'customer_id' => 'getCustomerId',
        'dispatch_country_code' => 'getDispatchCountryCode',
        'factoring' => 'getFactoring',
        'pricing_date' => 'getPricingDate',
        'responsible_user_id' => 'getResponsibleUserId',
        'sales_channel' => 'getSalesChannel',
        'service_period_from' => 'getServicePeriodFrom',
        'service_period_to' => 'getServicePeriodTo',
        'shipment_method_id' => 'getShipmentMethodId',
        'default_shipping_carrier_id' => 'getDefaultShippingCarrierId',
        'delivery_address' => 'getDeliveryAddress',
        'delivery_email_addresses' => 'getDeliveryEmailAddresses',
        'invoice_address' => 'getInvoiceAddress',
        'planned_delivery_date' => 'getPlannedDeliveryDate',
        'planned_shipping_date' => 'getPlannedShippingDate',
        'record_address' => 'getRecordAddress',
        'sales_invoice_email_addresses' => 'getSalesInvoiceEmailAddresses',
        'active_version' => 'getActiveVersion',
        'expected_signature_date' => 'getExpectedSignatureDate',
        'invoice_recipient_id' => 'getInvoiceRecipientId',
        'merged_to_quotation_id' => 'getMergedToQuotationId',
        'opportunity_id' => 'getOpportunityId',
        'public_link' => 'getPublicLink',
        'quotation_date' => 'getQuotationDate',
        'quotation_items' => 'getQuotationItems',
        'quotation_number' => 'getQuotationNumber',
        'quotation_type' => 'getQuotationType',
        'quotation_version' => 'getQuotationVersion',
        'record_comment_inheritance' => 'getRecordCommentInheritance',
        'record_email_addresses' => 'getRecordEmailAddresses',
        'record_free_text_inheritance' => 'getRecordFreeTextInheritance',
        'record_opening_inheritance' => 'getRecordOpeningInheritance',
        'rejection_reason' => 'getRejectionReason',
        'request_date' => 'getRequestDate',
        'sales_order_email_addresses' => 'getSalesOrderEmailAddresses',
        'sales_probability' => 'getSalesProbability',
        'sales_stage_history' => 'getSalesStageHistory',
        'sales_stage_id' => 'getSalesStageId',
        'shipping_cost_items' => 'getShippingCostItems',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'template' => 'getTemplate',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'warehouse_id' => 'getWarehouseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('disable_record_emailing_rule', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('currency_conversion_date', $data ?? [], null);
        $this->setIfExists('currency_conversion_locked', $data ?? [], null);
        $this->setIfExists('currency_conversion_rate', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('gross_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('header_discount', $data ?? [], null);
        $this->setIfExists('header_surcharge', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('net_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('non_standard_tax_id', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('record_currency_id', $data ?? [], null);
        $this->setIfExists('term_of_payment_id', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('commission_sales_partners', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('dispatch_country_code', $data ?? [], null);
        $this->setIfExists('factoring', $data ?? [], null);
        $this->setIfExists('pricing_date', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
        $this->setIfExists('service_period_from', $data ?? [], null);
        $this->setIfExists('service_period_to', $data ?? [], null);
        $this->setIfExists('shipment_method_id', $data ?? [], null);
        $this->setIfExists('default_shipping_carrier_id', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('delivery_email_addresses', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('planned_delivery_date', $data ?? [], null);
        $this->setIfExists('planned_shipping_date', $data ?? [], null);
        $this->setIfExists('record_address', $data ?? [], null);
        $this->setIfExists('sales_invoice_email_addresses', $data ?? [], null);
        $this->setIfExists('active_version', $data ?? [], null);
        $this->setIfExists('expected_signature_date', $data ?? [], null);
        $this->setIfExists('invoice_recipient_id', $data ?? [], null);
        $this->setIfExists('merged_to_quotation_id', $data ?? [], null);
        $this->setIfExists('opportunity_id', $data ?? [], null);
        $this->setIfExists('public_link', $data ?? [], null);
        $this->setIfExists('quotation_date', $data ?? [], null);
        $this->setIfExists('quotation_items', $data ?? [], null);
        $this->setIfExists('quotation_number', $data ?? [], null);
        $this->setIfExists('quotation_type', $data ?? [], null);
        $this->setIfExists('quotation_version', $data ?? [], null);
        $this->setIfExists('record_comment_inheritance', $data ?? [], null);
        $this->setIfExists('record_email_addresses', $data ?? [], null);
        $this->setIfExists('record_free_text_inheritance', $data ?? [], null);
        $this->setIfExists('record_opening_inheritance', $data ?? [], null);
        $this->setIfExists('rejection_reason', $data ?? [], null);
        $this->setIfExists('request_date', $data ?? [], null);
        $this->setIfExists('sales_order_email_addresses', $data ?? [], null);
        $this->setIfExists('sales_probability', $data ?? [], null);
        $this->setIfExists('sales_stage_history', $data ?? [], null);
        $this->setIfExists('sales_stage_id', $data ?? [], null);
        $this->setIfExists('shipping_cost_items', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['commercial_language']) && (mb_strlen($this->container['commercial_language']) > 255)) {
            $invalidProperties[] = "invalid value for 'commercial_language', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_comment']) && (mb_strlen($this->container['record_comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_free_text']) && (mb_strlen($this->container['record_free_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_free_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_opening']) && (mb_strlen($this->container['record_opening']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_opening', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['currency_conversion_rate']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['currency_conversion_rate'])) {
            $invalidProperties[] = "invalid value for 'currency_conversion_rate', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount'])) {
            $invalidProperties[] = "invalid value for 'gross_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'gross_amount_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['header_discount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['header_discount'])) {
            $invalidProperties[] = "invalid value for 'header_discount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['header_surcharge']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['header_surcharge'])) {
            $invalidProperties[] = "invalid value for 'header_surcharge', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount'])) {
            $invalidProperties[] = "invalid value for 'net_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'net_amount_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['commission']) && (mb_strlen($this->container['commission']) > 255)) {
            $invalidProperties[] = "invalid value for 'commission', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['dispatch_country_code']) && (mb_strlen($this->container['dispatch_country_code']) > 5)) {
            $invalidProperties[] = "invalid value for 'dispatch_country_code', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['quotation_number']) && (mb_strlen($this->container['quotation_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'quotation_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['rejection_reason']) && (mb_strlen($this->container['rejection_reason']) > 255)) {
            $invalidProperties[] = "invalid value for 'rejection_reason', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        if ((mb_strlen($commercial_language) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commercial_language when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disable_record_emailing_rule
     *
     * @return bool|null
     */
    public function getDisableRecordEmailingRule()
    {
        return $this->container['disable_record_emailing_rule'];
    }

    /**
     * Sets disable_record_emailing_rule
     *
     * @param bool|null $disable_record_emailing_rule disable_record_emailing_rule
     *
     * @return self
     */
    public function setDisableRecordEmailingRule($disable_record_emailing_rule)
    {
        if (is_null($disable_record_emailing_rule)) {
            throw new \InvalidArgumentException('non-nullable disable_record_emailing_rule cannot be null');
        }
        $this->container['disable_record_emailing_rule'] = $disable_record_emailing_rule;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        if ((mb_strlen($record_comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_comment when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        if ((mb_strlen($record_free_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_free_text when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        if ((mb_strlen($record_opening) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_opening when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets currency_conversion_date
     *
     * @return int|null
     */
    public function getCurrencyConversionDate()
    {
        return $this->container['currency_conversion_date'];
    }

    /**
     * Sets currency_conversion_date
     *
     * @param int|null $currency_conversion_date currency_conversion_date
     *
     * @return self
     */
    public function setCurrencyConversionDate($currency_conversion_date)
    {
        if (is_null($currency_conversion_date)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_date cannot be null');
        }
        $this->container['currency_conversion_date'] = $currency_conversion_date;

        return $this;
    }

    /**
     * Gets currency_conversion_locked
     *
     * @return bool|null
     */
    public function getCurrencyConversionLocked()
    {
        return $this->container['currency_conversion_locked'];
    }

    /**
     * Sets currency_conversion_locked
     *
     * @param bool|null $currency_conversion_locked currency_conversion_locked
     *
     * @return self
     */
    public function setCurrencyConversionLocked($currency_conversion_locked)
    {
        if (is_null($currency_conversion_locked)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_locked cannot be null');
        }
        $this->container['currency_conversion_locked'] = $currency_conversion_locked;

        return $this;
    }

    /**
     * Gets currency_conversion_rate
     *
     * @return float|null
     */
    public function getCurrencyConversionRate()
    {
        return $this->container['currency_conversion_rate'];
    }

    /**
     * Sets currency_conversion_rate
     *
     * @param float|null $currency_conversion_rate currency_conversion_rate
     *
     * @return self
     */
    public function setCurrencyConversionRate($currency_conversion_rate)
    {
        if (is_null($currency_conversion_rate)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_rate cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($currency_conversion_rate)))) {
            throw new \InvalidArgumentException("invalid value for \$currency_conversion_rate when calling Quotation., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['currency_conversion_rate'] = $currency_conversion_rate;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount when calling Quotation., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets gross_amount_in_company_currency
     *
     * @return float|null
     */
    public function getGrossAmountInCompanyCurrency()
    {
        return $this->container['gross_amount_in_company_currency'];
    }

    /**
     * Sets gross_amount_in_company_currency
     *
     * @param float|null $gross_amount_in_company_currency gross_amount_in_company_currency
     *
     * @return self
     */
    public function setGrossAmountInCompanyCurrency($gross_amount_in_company_currency)
    {
        if (is_null($gross_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable gross_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount_in_company_currency when calling Quotation., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount_in_company_currency'] = $gross_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets header_discount
     *
     * @return float|null
     */
    public function getHeaderDiscount()
    {
        return $this->container['header_discount'];
    }

    /**
     * Sets header_discount
     *
     * @param float|null $header_discount header_discount
     *
     * @return self
     */
    public function setHeaderDiscount($header_discount)
    {
        if (is_null($header_discount)) {
            throw new \InvalidArgumentException('non-nullable header_discount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($header_discount)))) {
            throw new \InvalidArgumentException("invalid value for \$header_discount when calling Quotation., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['header_discount'] = $header_discount;

        return $this;
    }

    /**
     * Gets header_surcharge
     *
     * @return float|null
     */
    public function getHeaderSurcharge()
    {
        return $this->container['header_surcharge'];
    }

    /**
     * Sets header_surcharge
     *
     * @param float|null $header_surcharge header_surcharge
     *
     * @return self
     */
    public function setHeaderSurcharge($header_surcharge)
    {
        if (is_null($header_surcharge)) {
            throw new \InvalidArgumentException('non-nullable header_surcharge cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($header_surcharge)))) {
            throw new \InvalidArgumentException("invalid value for \$header_surcharge when calling Quotation., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['header_surcharge'] = $header_surcharge;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount when calling Quotation., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets net_amount_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountInCompanyCurrency()
    {
        return $this->container['net_amount_in_company_currency'];
    }

    /**
     * Sets net_amount_in_company_currency
     *
     * @param float|null $net_amount_in_company_currency net_amount_in_company_currency
     *
     * @return self
     */
    public function setNetAmountInCompanyCurrency($net_amount_in_company_currency)
    {
        if (is_null($net_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_in_company_currency when calling Quotation., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_in_company_currency'] = $net_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets non_standard_tax_id
     *
     * @return string|null
     */
    public function getNonStandardTaxId()
    {
        return $this->container['non_standard_tax_id'];
    }

    /**
     * Sets non_standard_tax_id
     *
     * @param string|null $non_standard_tax_id non_standard_tax_id
     *
     * @return self
     */
    public function setNonStandardTaxId($non_standard_tax_id)
    {
        if (is_null($non_standard_tax_id)) {
            throw new \InvalidArgumentException('non-nullable non_standard_tax_id cannot be null');
        }
        $this->container['non_standard_tax_id'] = $non_standard_tax_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets record_currency_id
     *
     * @return string|null
     */
    public function getRecordCurrencyId()
    {
        return $this->container['record_currency_id'];
    }

    /**
     * Sets record_currency_id
     *
     * @param string|null $record_currency_id record_currency_id
     *
     * @return self
     */
    public function setRecordCurrencyId($record_currency_id)
    {
        if (is_null($record_currency_id)) {
            throw new \InvalidArgumentException('non-nullable record_currency_id cannot be null');
        }
        $this->container['record_currency_id'] = $record_currency_id;

        return $this;
    }

    /**
     * Gets term_of_payment_id
     *
     * @return string|null
     */
    public function getTermOfPaymentId()
    {
        return $this->container['term_of_payment_id'];
    }

    /**
     * Sets term_of_payment_id
     *
     * @param string|null $term_of_payment_id term_of_payment_id
     *
     * @return self
     */
    public function setTermOfPaymentId($term_of_payment_id)
    {
        if (is_null($term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_id cannot be null');
        }
        $this->container['term_of_payment_id'] = $term_of_payment_id;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return string|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param string|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        if ((mb_strlen($commission) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commission when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets commission_sales_partners
     *
     * @return \kruegge82\weclapp\Model\CommissionSalesPartner[]|null
     */
    public function getCommissionSalesPartners()
    {
        return $this->container['commission_sales_partners'];
    }

    /**
     * Sets commission_sales_partners
     *
     * @param \kruegge82\weclapp\Model\CommissionSalesPartner[]|null $commission_sales_partners commission_sales_partners
     *
     * @return self
     */
    public function setCommissionSalesPartners($commission_sales_partners)
    {
        if (is_null($commission_sales_partners)) {
            throw new \InvalidArgumentException('non-nullable commission_sales_partners cannot be null');
        }
        $this->container['commission_sales_partners'] = $commission_sales_partners;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets dispatch_country_code
     *
     * @return string|null
     */
    public function getDispatchCountryCode()
    {
        return $this->container['dispatch_country_code'];
    }

    /**
     * Sets dispatch_country_code
     *
     * @param string|null $dispatch_country_code dispatch_country_code
     *
     * @return self
     */
    public function setDispatchCountryCode($dispatch_country_code)
    {
        if (is_null($dispatch_country_code)) {
            throw new \InvalidArgumentException('non-nullable dispatch_country_code cannot be null');
        }
        if ((mb_strlen($dispatch_country_code) > 5)) {
            throw new \InvalidArgumentException('invalid length for $dispatch_country_code when calling Quotation., must be smaller than or equal to 5.');
        }

        $this->container['dispatch_country_code'] = $dispatch_country_code;

        return $this;
    }

    /**
     * Gets factoring
     *
     * @return bool|null
     */
    public function getFactoring()
    {
        return $this->container['factoring'];
    }

    /**
     * Sets factoring
     *
     * @param bool|null $factoring factoring
     *
     * @return self
     */
    public function setFactoring($factoring)
    {
        if (is_null($factoring)) {
            throw new \InvalidArgumentException('non-nullable factoring cannot be null');
        }
        $this->container['factoring'] = $factoring;

        return $this;
    }

    /**
     * Gets pricing_date
     *
     * @return int|null
     */
    public function getPricingDate()
    {
        return $this->container['pricing_date'];
    }

    /**
     * Sets pricing_date
     *
     * @param int|null $pricing_date pricing_date
     *
     * @return self
     */
    public function setPricingDate($pricing_date)
    {
        if (is_null($pricing_date)) {
            throw new \InvalidArgumentException('non-nullable pricing_date cannot be null');
        }
        $this->container['pricing_date'] = $pricing_date;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets service_period_from
     *
     * @return int|null
     */
    public function getServicePeriodFrom()
    {
        return $this->container['service_period_from'];
    }

    /**
     * Sets service_period_from
     *
     * @param int|null $service_period_from service_period_from
     *
     * @return self
     */
    public function setServicePeriodFrom($service_period_from)
    {
        if (is_null($service_period_from)) {
            throw new \InvalidArgumentException('non-nullable service_period_from cannot be null');
        }
        $this->container['service_period_from'] = $service_period_from;

        return $this;
    }

    /**
     * Gets service_period_to
     *
     * @return int|null
     */
    public function getServicePeriodTo()
    {
        return $this->container['service_period_to'];
    }

    /**
     * Sets service_period_to
     *
     * @param int|null $service_period_to service_period_to
     *
     * @return self
     */
    public function setServicePeriodTo($service_period_to)
    {
        if (is_null($service_period_to)) {
            throw new \InvalidArgumentException('non-nullable service_period_to cannot be null');
        }
        $this->container['service_period_to'] = $service_period_to;

        return $this;
    }

    /**
     * Gets shipment_method_id
     *
     * @return string|null
     */
    public function getShipmentMethodId()
    {
        return $this->container['shipment_method_id'];
    }

    /**
     * Sets shipment_method_id
     *
     * @param string|null $shipment_method_id shipment_method_id
     *
     * @return self
     */
    public function setShipmentMethodId($shipment_method_id)
    {
        if (is_null($shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_id cannot be null');
        }
        $this->container['shipment_method_id'] = $shipment_method_id;

        return $this;
    }

    /**
     * Gets default_shipping_carrier_id
     *
     * @return string|null
     */
    public function getDefaultShippingCarrierId()
    {
        return $this->container['default_shipping_carrier_id'];
    }

    /**
     * Sets default_shipping_carrier_id
     *
     * @param string|null $default_shipping_carrier_id default_shipping_carrier_id
     *
     * @return self
     */
    public function setDefaultShippingCarrierId($default_shipping_carrier_id)
    {
        if (is_null($default_shipping_carrier_id)) {
            throw new \InvalidArgumentException('non-nullable default_shipping_carrier_id cannot be null');
        }
        $this->container['default_shipping_carrier_id'] = $default_shipping_carrier_id;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets delivery_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getDeliveryEmailAddresses()
    {
        return $this->container['delivery_email_addresses'];
    }

    /**
     * Sets delivery_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $delivery_email_addresses delivery_email_addresses
     *
     * @return self
     */
    public function setDeliveryEmailAddresses($delivery_email_addresses)
    {
        if (is_null($delivery_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable delivery_email_addresses cannot be null');
        }
        $this->container['delivery_email_addresses'] = $delivery_email_addresses;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets planned_delivery_date
     *
     * @return int|null
     */
    public function getPlannedDeliveryDate()
    {
        return $this->container['planned_delivery_date'];
    }

    /**
     * Sets planned_delivery_date
     *
     * @param int|null $planned_delivery_date planned_delivery_date
     *
     * @return self
     */
    public function setPlannedDeliveryDate($planned_delivery_date)
    {
        if (is_null($planned_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable planned_delivery_date cannot be null');
        }
        $this->container['planned_delivery_date'] = $planned_delivery_date;

        return $this;
    }

    /**
     * Gets planned_shipping_date
     *
     * @return int|null
     */
    public function getPlannedShippingDate()
    {
        return $this->container['planned_shipping_date'];
    }

    /**
     * Sets planned_shipping_date
     *
     * @param int|null $planned_shipping_date planned_shipping_date
     *
     * @return self
     */
    public function setPlannedShippingDate($planned_shipping_date)
    {
        if (is_null($planned_shipping_date)) {
            throw new \InvalidArgumentException('non-nullable planned_shipping_date cannot be null');
        }
        $this->container['planned_shipping_date'] = $planned_shipping_date;

        return $this;
    }

    /**
     * Gets record_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getRecordAddress()
    {
        return $this->container['record_address'];
    }

    /**
     * Sets record_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $record_address record_address
     *
     * @return self
     */
    public function setRecordAddress($record_address)
    {
        if (is_null($record_address)) {
            throw new \InvalidArgumentException('non-nullable record_address cannot be null');
        }
        $this->container['record_address'] = $record_address;

        return $this;
    }

    /**
     * Gets sales_invoice_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getSalesInvoiceEmailAddresses()
    {
        return $this->container['sales_invoice_email_addresses'];
    }

    /**
     * Sets sales_invoice_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $sales_invoice_email_addresses sales_invoice_email_addresses
     *
     * @return self
     */
    public function setSalesInvoiceEmailAddresses($sales_invoice_email_addresses)
    {
        if (is_null($sales_invoice_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_email_addresses cannot be null');
        }
        $this->container['sales_invoice_email_addresses'] = $sales_invoice_email_addresses;

        return $this;
    }

    /**
     * Gets active_version
     *
     * @return bool|null
     */
    public function getActiveVersion()
    {
        return $this->container['active_version'];
    }

    /**
     * Sets active_version
     *
     * @param bool|null $active_version active_version
     *
     * @return self
     */
    public function setActiveVersion($active_version)
    {
        if (is_null($active_version)) {
            throw new \InvalidArgumentException('non-nullable active_version cannot be null');
        }
        $this->container['active_version'] = $active_version;

        return $this;
    }

    /**
     * Gets expected_signature_date
     *
     * @return int|null
     */
    public function getExpectedSignatureDate()
    {
        return $this->container['expected_signature_date'];
    }

    /**
     * Sets expected_signature_date
     *
     * @param int|null $expected_signature_date expected_signature_date
     *
     * @return self
     */
    public function setExpectedSignatureDate($expected_signature_date)
    {
        if (is_null($expected_signature_date)) {
            throw new \InvalidArgumentException('non-nullable expected_signature_date cannot be null');
        }
        $this->container['expected_signature_date'] = $expected_signature_date;

        return $this;
    }

    /**
     * Gets invoice_recipient_id
     *
     * @return string|null
     */
    public function getInvoiceRecipientId()
    {
        return $this->container['invoice_recipient_id'];
    }

    /**
     * Sets invoice_recipient_id
     *
     * @param string|null $invoice_recipient_id invoice_recipient_id
     *
     * @return self
     */
    public function setInvoiceRecipientId($invoice_recipient_id)
    {
        if (is_null($invoice_recipient_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_recipient_id cannot be null');
        }
        $this->container['invoice_recipient_id'] = $invoice_recipient_id;

        return $this;
    }

    /**
     * Gets merged_to_quotation_id
     *
     * @return string|null
     */
    public function getMergedToQuotationId()
    {
        return $this->container['merged_to_quotation_id'];
    }

    /**
     * Sets merged_to_quotation_id
     *
     * @param string|null $merged_to_quotation_id merged_to_quotation_id
     *
     * @return self
     */
    public function setMergedToQuotationId($merged_to_quotation_id)
    {
        if (is_null($merged_to_quotation_id)) {
            throw new \InvalidArgumentException('non-nullable merged_to_quotation_id cannot be null');
        }
        $this->container['merged_to_quotation_id'] = $merged_to_quotation_id;

        return $this;
    }

    /**
     * Gets opportunity_id
     *
     * @return string|null
     */
    public function getOpportunityId()
    {
        return $this->container['opportunity_id'];
    }

    /**
     * Sets opportunity_id
     *
     * @param string|null $opportunity_id opportunity_id
     *
     * @return self
     */
    public function setOpportunityId($opportunity_id)
    {
        if (is_null($opportunity_id)) {
            throw new \InvalidArgumentException('non-nullable opportunity_id cannot be null');
        }
        $this->container['opportunity_id'] = $opportunity_id;

        return $this;
    }

    /**
     * Gets public_link
     *
     * @return string|null
     */
    public function getPublicLink()
    {
        return $this->container['public_link'];
    }

    /**
     * Sets public_link
     *
     * @param string|null $public_link public_link
     *
     * @return self
     */
    public function setPublicLink($public_link)
    {
        if (is_null($public_link)) {
            throw new \InvalidArgumentException('non-nullable public_link cannot be null');
        }
        $this->container['public_link'] = $public_link;

        return $this;
    }

    /**
     * Gets quotation_date
     *
     * @return int|null
     */
    public function getQuotationDate()
    {
        return $this->container['quotation_date'];
    }

    /**
     * Sets quotation_date
     *
     * @param int|null $quotation_date quotation_date
     *
     * @return self
     */
    public function setQuotationDate($quotation_date)
    {
        if (is_null($quotation_date)) {
            throw new \InvalidArgumentException('non-nullable quotation_date cannot be null');
        }
        $this->container['quotation_date'] = $quotation_date;

        return $this;
    }

    /**
     * Gets quotation_items
     *
     * @return \kruegge82\weclapp\Model\QuotationItem[]|null
     */
    public function getQuotationItems()
    {
        return $this->container['quotation_items'];
    }

    /**
     * Sets quotation_items
     *
     * @param \kruegge82\weclapp\Model\QuotationItem[]|null $quotation_items quotation_items
     *
     * @return self
     */
    public function setQuotationItems($quotation_items)
    {
        if (is_null($quotation_items)) {
            throw new \InvalidArgumentException('non-nullable quotation_items cannot be null');
        }
        $this->container['quotation_items'] = $quotation_items;

        return $this;
    }

    /**
     * Gets quotation_number
     *
     * @return string|null
     */
    public function getQuotationNumber()
    {
        return $this->container['quotation_number'];
    }

    /**
     * Sets quotation_number
     *
     * @param string|null $quotation_number quotation_number
     *
     * @return self
     */
    public function setQuotationNumber($quotation_number)
    {
        if (is_null($quotation_number)) {
            throw new \InvalidArgumentException('non-nullable quotation_number cannot be null');
        }
        if ((mb_strlen($quotation_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $quotation_number when calling Quotation., must be smaller than or equal to 30.');
        }

        $this->container['quotation_number'] = $quotation_number;

        return $this;
    }

    /**
     * Gets quotation_type
     *
     * @return \kruegge82\weclapp\Model\OfferOutType|null
     */
    public function getQuotationType()
    {
        return $this->container['quotation_type'];
    }

    /**
     * Sets quotation_type
     *
     * @param \kruegge82\weclapp\Model\OfferOutType|null $quotation_type quotation_type
     *
     * @return self
     */
    public function setQuotationType($quotation_type)
    {
        if (is_null($quotation_type)) {
            throw new \InvalidArgumentException('non-nullable quotation_type cannot be null');
        }
        $this->container['quotation_type'] = $quotation_type;

        return $this;
    }

    /**
     * Gets quotation_version
     *
     * @return int|null
     */
    public function getQuotationVersion()
    {
        return $this->container['quotation_version'];
    }

    /**
     * Sets quotation_version
     *
     * @param int|null $quotation_version quotation_version
     *
     * @return self
     */
    public function setQuotationVersion($quotation_version)
    {
        if (is_null($quotation_version)) {
            throw new \InvalidArgumentException('non-nullable quotation_version cannot be null');
        }
        $this->container['quotation_version'] = $quotation_version;

        return $this;
    }

    /**
     * Gets record_comment_inheritance
     *
     * @return bool|null
     */
    public function getRecordCommentInheritance()
    {
        return $this->container['record_comment_inheritance'];
    }

    /**
     * Sets record_comment_inheritance
     *
     * @param bool|null $record_comment_inheritance record_comment_inheritance
     *
     * @return self
     */
    public function setRecordCommentInheritance($record_comment_inheritance)
    {
        if (is_null($record_comment_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_comment_inheritance cannot be null');
        }
        $this->container['record_comment_inheritance'] = $record_comment_inheritance;

        return $this;
    }

    /**
     * Gets record_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getRecordEmailAddresses()
    {
        return $this->container['record_email_addresses'];
    }

    /**
     * Sets record_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $record_email_addresses record_email_addresses
     *
     * @return self
     */
    public function setRecordEmailAddresses($record_email_addresses)
    {
        if (is_null($record_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable record_email_addresses cannot be null');
        }
        $this->container['record_email_addresses'] = $record_email_addresses;

        return $this;
    }

    /**
     * Gets record_free_text_inheritance
     *
     * @return bool|null
     */
    public function getRecordFreeTextInheritance()
    {
        return $this->container['record_free_text_inheritance'];
    }

    /**
     * Sets record_free_text_inheritance
     *
     * @param bool|null $record_free_text_inheritance record_free_text_inheritance
     *
     * @return self
     */
    public function setRecordFreeTextInheritance($record_free_text_inheritance)
    {
        if (is_null($record_free_text_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_free_text_inheritance cannot be null');
        }
        $this->container['record_free_text_inheritance'] = $record_free_text_inheritance;

        return $this;
    }

    /**
     * Gets record_opening_inheritance
     *
     * @return bool|null
     */
    public function getRecordOpeningInheritance()
    {
        return $this->container['record_opening_inheritance'];
    }

    /**
     * Sets record_opening_inheritance
     *
     * @param bool|null $record_opening_inheritance record_opening_inheritance
     *
     * @return self
     */
    public function setRecordOpeningInheritance($record_opening_inheritance)
    {
        if (is_null($record_opening_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_opening_inheritance cannot be null');
        }
        $this->container['record_opening_inheritance'] = $record_opening_inheritance;

        return $this;
    }

    /**
     * Gets rejection_reason
     *
     * @return string|null
     */
    public function getRejectionReason()
    {
        return $this->container['rejection_reason'];
    }

    /**
     * Sets rejection_reason
     *
     * @param string|null $rejection_reason rejection_reason
     *
     * @return self
     */
    public function setRejectionReason($rejection_reason)
    {
        if (is_null($rejection_reason)) {
            throw new \InvalidArgumentException('non-nullable rejection_reason cannot be null');
        }
        if ((mb_strlen($rejection_reason) > 255)) {
            throw new \InvalidArgumentException('invalid length for $rejection_reason when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['rejection_reason'] = $rejection_reason;

        return $this;
    }

    /**
     * Gets request_date
     *
     * @return int|null
     */
    public function getRequestDate()
    {
        return $this->container['request_date'];
    }

    /**
     * Sets request_date
     *
     * @param int|null $request_date request_date
     *
     * @return self
     */
    public function setRequestDate($request_date)
    {
        if (is_null($request_date)) {
            throw new \InvalidArgumentException('non-nullable request_date cannot be null');
        }
        $this->container['request_date'] = $request_date;

        return $this;
    }

    /**
     * Gets sales_order_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getSalesOrderEmailAddresses()
    {
        return $this->container['sales_order_email_addresses'];
    }

    /**
     * Sets sales_order_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $sales_order_email_addresses sales_order_email_addresses
     *
     * @return self
     */
    public function setSalesOrderEmailAddresses($sales_order_email_addresses)
    {
        if (is_null($sales_order_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable sales_order_email_addresses cannot be null');
        }
        $this->container['sales_order_email_addresses'] = $sales_order_email_addresses;

        return $this;
    }

    /**
     * Gets sales_probability
     *
     * @return int|null
     */
    public function getSalesProbability()
    {
        return $this->container['sales_probability'];
    }

    /**
     * Sets sales_probability
     *
     * @param int|null $sales_probability sales_probability
     *
     * @return self
     */
    public function setSalesProbability($sales_probability)
    {
        if (is_null($sales_probability)) {
            throw new \InvalidArgumentException('non-nullable sales_probability cannot be null');
        }
        $this->container['sales_probability'] = $sales_probability;

        return $this;
    }

    /**
     * Gets sales_stage_history
     *
     * @return \kruegge82\weclapp\Model\SalesStageHistory[]|null
     */
    public function getSalesStageHistory()
    {
        return $this->container['sales_stage_history'];
    }

    /**
     * Sets sales_stage_history
     *
     * @param \kruegge82\weclapp\Model\SalesStageHistory[]|null $sales_stage_history sales_stage_history
     *
     * @return self
     */
    public function setSalesStageHistory($sales_stage_history)
    {
        if (is_null($sales_stage_history)) {
            throw new \InvalidArgumentException('non-nullable sales_stage_history cannot be null');
        }
        $this->container['sales_stage_history'] = $sales_stage_history;

        return $this;
    }

    /**
     * Gets sales_stage_id
     *
     * @return string|null
     */
    public function getSalesStageId()
    {
        return $this->container['sales_stage_id'];
    }

    /**
     * Sets sales_stage_id
     *
     * @param string|null $sales_stage_id sales_stage_id
     *
     * @return self
     */
    public function setSalesStageId($sales_stage_id)
    {
        if (is_null($sales_stage_id)) {
            throw new \InvalidArgumentException('non-nullable sales_stage_id cannot be null');
        }
        $this->container['sales_stage_id'] = $sales_stage_id;

        return $this;
    }

    /**
     * Gets shipping_cost_items
     *
     * @return \kruegge82\weclapp\Model\QuotationShippingCostItem[]|null
     */
    public function getShippingCostItems()
    {
        return $this->container['shipping_cost_items'];
    }

    /**
     * Sets shipping_cost_items
     *
     * @param \kruegge82\weclapp\Model\QuotationShippingCostItem[]|null $shipping_cost_items shipping_cost_items
     *
     * @return self
     */
    public function setShippingCostItems($shipping_cost_items)
    {
        if (is_null($shipping_cost_items)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost_items cannot be null');
        }
        $this->container['shipping_cost_items'] = $shipping_cost_items;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\OfferStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\OfferStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\QuotationStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\QuotationStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return int|null
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param int|null $valid_from valid_from
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            throw new \InvalidArgumentException('non-nullable valid_from cannot be null');
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return int|null
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param int|null $valid_to valid_to
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            throw new \InvalidArgumentException('non-nullable valid_to cannot be null');
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


