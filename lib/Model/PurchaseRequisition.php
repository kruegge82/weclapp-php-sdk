<?php
/**
 * PurchaseRequisition
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * PurchaseRequisition Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PurchaseRequisition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'purchaseRequisition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'article_id' => 'string',
        'created_date' => 'int',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'earliest_required_date' => 'int',
        'internal_shipment_id' => 'string',
        'last_modified_date' => 'int',
        'latest_required_date' => 'int',
        'packaging_unit_to_order_id' => 'string',
        'production_order_id' => 'string',
        'production_order_item_id' => 'string',
        'proposed_date' => 'int',
        'proposed_quantity' => 'float',
        'purchase_order_id' => 'string',
        'requirement_quantity' => 'float',
        'requisition_number' => 'string',
        'sales_order_item_id' => 'string',
        'status' => 'string',
        'status_history' => '\kruegge82\weclapp\Model\PurchaseRequisitionStatusHistory[]',
        'supplier_id' => 'string',
        'warehouse_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'article_id' => null,
        'created_date' => 'timestamp',
        'custom_attributes' => null,
        'earliest_required_date' => 'timestamp',
        'internal_shipment_id' => null,
        'last_modified_date' => 'timestamp',
        'latest_required_date' => 'timestamp',
        'packaging_unit_to_order_id' => null,
        'production_order_id' => null,
        'production_order_item_id' => null,
        'proposed_date' => 'timestamp',
        'proposed_quantity' => 'number',
        'purchase_order_id' => null,
        'requirement_quantity' => 'number',
        'requisition_number' => null,
        'sales_order_item_id' => null,
        'status' => null,
        'status_history' => null,
        'supplier_id' => null,
        'warehouse_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'article_id' => false,
        'created_date' => false,
        'custom_attributes' => false,
        'earliest_required_date' => false,
        'internal_shipment_id' => false,
        'last_modified_date' => false,
        'latest_required_date' => false,
        'packaging_unit_to_order_id' => false,
        'production_order_id' => false,
        'production_order_item_id' => false,
        'proposed_date' => false,
        'proposed_quantity' => false,
        'purchase_order_id' => false,
        'requirement_quantity' => false,
        'requisition_number' => false,
        'sales_order_item_id' => false,
        'status' => false,
        'status_history' => false,
        'supplier_id' => false,
        'warehouse_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'article_id' => 'articleId',
        'created_date' => 'createdDate',
        'custom_attributes' => 'customAttributes',
        'earliest_required_date' => 'earliestRequiredDate',
        'internal_shipment_id' => 'internalShipmentId',
        'last_modified_date' => 'lastModifiedDate',
        'latest_required_date' => 'latestRequiredDate',
        'packaging_unit_to_order_id' => 'packagingUnitToOrderId',
        'production_order_id' => 'productionOrderId',
        'production_order_item_id' => 'productionOrderItemId',
        'proposed_date' => 'proposedDate',
        'proposed_quantity' => 'proposedQuantity',
        'purchase_order_id' => 'purchaseOrderId',
        'requirement_quantity' => 'requirementQuantity',
        'requisition_number' => 'requisitionNumber',
        'sales_order_item_id' => 'salesOrderItemId',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'supplier_id' => 'supplierId',
        'warehouse_id' => 'warehouseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'article_id' => 'setArticleId',
        'created_date' => 'setCreatedDate',
        'custom_attributes' => 'setCustomAttributes',
        'earliest_required_date' => 'setEarliestRequiredDate',
        'internal_shipment_id' => 'setInternalShipmentId',
        'last_modified_date' => 'setLastModifiedDate',
        'latest_required_date' => 'setLatestRequiredDate',
        'packaging_unit_to_order_id' => 'setPackagingUnitToOrderId',
        'production_order_id' => 'setProductionOrderId',
        'production_order_item_id' => 'setProductionOrderItemId',
        'proposed_date' => 'setProposedDate',
        'proposed_quantity' => 'setProposedQuantity',
        'purchase_order_id' => 'setPurchaseOrderId',
        'requirement_quantity' => 'setRequirementQuantity',
        'requisition_number' => 'setRequisitionNumber',
        'sales_order_item_id' => 'setSalesOrderItemId',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'supplier_id' => 'setSupplierId',
        'warehouse_id' => 'setWarehouseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'article_id' => 'getArticleId',
        'created_date' => 'getCreatedDate',
        'custom_attributes' => 'getCustomAttributes',
        'earliest_required_date' => 'getEarliestRequiredDate',
        'internal_shipment_id' => 'getInternalShipmentId',
        'last_modified_date' => 'getLastModifiedDate',
        'latest_required_date' => 'getLatestRequiredDate',
        'packaging_unit_to_order_id' => 'getPackagingUnitToOrderId',
        'production_order_id' => 'getProductionOrderId',
        'production_order_item_id' => 'getProductionOrderItemId',
        'proposed_date' => 'getProposedDate',
        'proposed_quantity' => 'getProposedQuantity',
        'purchase_order_id' => 'getPurchaseOrderId',
        'requirement_quantity' => 'getRequirementQuantity',
        'requisition_number' => 'getRequisitionNumber',
        'sales_order_item_id' => 'getSalesOrderItemId',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'supplier_id' => 'getSupplierId',
        'warehouse_id' => 'getWarehouseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_APPROVED = 'APPROVED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_CLOSED = 'CLOSED';
    public const STATUS__NEW = 'NEW';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_APPROVED,
            self::STATUS_CANCELLED,
            self::STATUS_CLOSED,
            self::STATUS__NEW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('earliest_required_date', $data ?? [], null);
        $this->setIfExists('internal_shipment_id', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('latest_required_date', $data ?? [], null);
        $this->setIfExists('packaging_unit_to_order_id', $data ?? [], null);
        $this->setIfExists('production_order_id', $data ?? [], null);
        $this->setIfExists('production_order_item_id', $data ?? [], null);
        $this->setIfExists('proposed_date', $data ?? [], null);
        $this->setIfExists('proposed_quantity', $data ?? [], null);
        $this->setIfExists('purchase_order_id', $data ?? [], null);
        $this->setIfExists('requirement_quantity', $data ?? [], null);
        $this->setIfExists('requisition_number', $data ?? [], null);
        $this->setIfExists('sales_order_item_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('supplier_id', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['packaging_unit_to_order_id'] === null) {
            $invalidProperties[] = "'packaging_unit_to_order_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets earliest_required_date
     *
     * @return int|null
     */
    public function getEarliestRequiredDate()
    {
        return $this->container['earliest_required_date'];
    }

    /**
     * Sets earliest_required_date
     *
     * @param int|null $earliest_required_date earliest_required_date
     *
     * @return self
     */
    public function setEarliestRequiredDate($earliest_required_date)
    {
        if (is_null($earliest_required_date)) {
            throw new \InvalidArgumentException('non-nullable earliest_required_date cannot be null');
        }
        $this->container['earliest_required_date'] = $earliest_required_date;

        return $this;
    }

    /**
     * Gets internal_shipment_id
     *
     * @return string|null
     */
    public function getInternalShipmentId()
    {
        return $this->container['internal_shipment_id'];
    }

    /**
     * Sets internal_shipment_id
     *
     * @param string|null $internal_shipment_id internal_shipment_id
     *
     * @return self
     */
    public function setInternalShipmentId($internal_shipment_id)
    {
        if (is_null($internal_shipment_id)) {
            throw new \InvalidArgumentException('non-nullable internal_shipment_id cannot be null');
        }
        $this->container['internal_shipment_id'] = $internal_shipment_id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets latest_required_date
     *
     * @return int|null
     */
    public function getLatestRequiredDate()
    {
        return $this->container['latest_required_date'];
    }

    /**
     * Sets latest_required_date
     *
     * @param int|null $latest_required_date latest_required_date
     *
     * @return self
     */
    public function setLatestRequiredDate($latest_required_date)
    {
        if (is_null($latest_required_date)) {
            throw new \InvalidArgumentException('non-nullable latest_required_date cannot be null');
        }
        $this->container['latest_required_date'] = $latest_required_date;

        return $this;
    }

    /**
     * Gets packaging_unit_to_order_id
     *
     * @return string
     */
    public function getPackagingUnitToOrderId()
    {
        return $this->container['packaging_unit_to_order_id'];
    }

    /**
     * Sets packaging_unit_to_order_id
     *
     * @param string $packaging_unit_to_order_id packaging_unit_to_order_id
     *
     * @return self
     */
    public function setPackagingUnitToOrderId($packaging_unit_to_order_id)
    {
        if (is_null($packaging_unit_to_order_id)) {
            throw new \InvalidArgumentException('non-nullable packaging_unit_to_order_id cannot be null');
        }
        $this->container['packaging_unit_to_order_id'] = $packaging_unit_to_order_id;

        return $this;
    }

    /**
     * Gets production_order_id
     *
     * @return string|null
     */
    public function getProductionOrderId()
    {
        return $this->container['production_order_id'];
    }

    /**
     * Sets production_order_id
     *
     * @param string|null $production_order_id production_order_id
     *
     * @return self
     */
    public function setProductionOrderId($production_order_id)
    {
        if (is_null($production_order_id)) {
            throw new \InvalidArgumentException('non-nullable production_order_id cannot be null');
        }
        $this->container['production_order_id'] = $production_order_id;

        return $this;
    }

    /**
     * Gets production_order_item_id
     *
     * @return string|null
     */
    public function getProductionOrderItemId()
    {
        return $this->container['production_order_item_id'];
    }

    /**
     * Sets production_order_item_id
     *
     * @param string|null $production_order_item_id production_order_item_id
     *
     * @return self
     */
    public function setProductionOrderItemId($production_order_item_id)
    {
        if (is_null($production_order_item_id)) {
            throw new \InvalidArgumentException('non-nullable production_order_item_id cannot be null');
        }
        $this->container['production_order_item_id'] = $production_order_item_id;

        return $this;
    }

    /**
     * Gets proposed_date
     *
     * @return int|null
     */
    public function getProposedDate()
    {
        return $this->container['proposed_date'];
    }

    /**
     * Sets proposed_date
     *
     * @param int|null $proposed_date proposed_date
     *
     * @return self
     */
    public function setProposedDate($proposed_date)
    {
        if (is_null($proposed_date)) {
            throw new \InvalidArgumentException('non-nullable proposed_date cannot be null');
        }
        $this->container['proposed_date'] = $proposed_date;

        return $this;
    }

    /**
     * Gets proposed_quantity
     *
     * @return float|null
     */
    public function getProposedQuantity()
    {
        return $this->container['proposed_quantity'];
    }

    /**
     * Sets proposed_quantity
     *
     * @param float|null $proposed_quantity proposed_quantity
     *
     * @return self
     */
    public function setProposedQuantity($proposed_quantity)
    {
        if (is_null($proposed_quantity)) {
            throw new \InvalidArgumentException('non-nullable proposed_quantity cannot be null');
        }
        $this->container['proposed_quantity'] = $proposed_quantity;

        return $this;
    }

    /**
     * Gets purchase_order_id
     *
     * @return string|null
     */
    public function getPurchaseOrderId()
    {
        return $this->container['purchase_order_id'];
    }

    /**
     * Sets purchase_order_id
     *
     * @param string|null $purchase_order_id purchase_order_id
     *
     * @return self
     */
    public function setPurchaseOrderId($purchase_order_id)
    {
        if (is_null($purchase_order_id)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_id cannot be null');
        }
        $this->container['purchase_order_id'] = $purchase_order_id;

        return $this;
    }

    /**
     * Gets requirement_quantity
     *
     * @return float|null
     */
    public function getRequirementQuantity()
    {
        return $this->container['requirement_quantity'];
    }

    /**
     * Sets requirement_quantity
     *
     * @param float|null $requirement_quantity requirement_quantity
     *
     * @return self
     */
    public function setRequirementQuantity($requirement_quantity)
    {
        if (is_null($requirement_quantity)) {
            throw new \InvalidArgumentException('non-nullable requirement_quantity cannot be null');
        }
        $this->container['requirement_quantity'] = $requirement_quantity;

        return $this;
    }

    /**
     * Gets requisition_number
     *
     * @return string|null
     */
    public function getRequisitionNumber()
    {
        return $this->container['requisition_number'];
    }

    /**
     * Sets requisition_number
     *
     * @param string|null $requisition_number requisition_number
     *
     * @return self
     */
    public function setRequisitionNumber($requisition_number)
    {
        if (is_null($requisition_number)) {
            throw new \InvalidArgumentException('non-nullable requisition_number cannot be null');
        }
        $this->container['requisition_number'] = $requisition_number;

        return $this;
    }

    /**
     * Gets sales_order_item_id
     *
     * @return string|null
     */
    public function getSalesOrderItemId()
    {
        return $this->container['sales_order_item_id'];
    }

    /**
     * Sets sales_order_item_id
     *
     * @param string|null $sales_order_item_id sales_order_item_id
     *
     * @return self
     */
    public function setSalesOrderItemId($sales_order_item_id)
    {
        if (is_null($sales_order_item_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_item_id cannot be null');
        }
        $this->container['sales_order_item_id'] = $sales_order_item_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\PurchaseRequisitionStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\PurchaseRequisitionStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string|null $supplier_id supplier_id
     *
     * @return self
     */
    public function setSupplierId($supplier_id)
    {
        if (is_null($supplier_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_id cannot be null');
        }
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


