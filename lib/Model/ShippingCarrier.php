<?php
/**
 * ShippingCarrier
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * ShippingCarrier Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShippingCarrier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shippingCarrier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'active' => 'bool',
        'created_date' => 'int',
        'ecommerce_shipping_carrier' => 'string',
        'internal_shipping_carrier' => 'string',
        'last_modified_date' => 'int',
        'name' => 'string',
        'position_number' => 'int',
        'shipping_service_provider_type' => 'string',
        'tracking_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'active' => null,
        'created_date' => 'timestamp',
        'ecommerce_shipping_carrier' => null,
        'internal_shipping_carrier' => null,
        'last_modified_date' => 'timestamp',
        'name' => null,
        'position_number' => 'int32',
        'shipping_service_provider_type' => null,
        'tracking_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'active' => false,
        'created_date' => false,
        'ecommerce_shipping_carrier' => false,
        'internal_shipping_carrier' => false,
        'last_modified_date' => false,
        'name' => false,
        'position_number' => false,
        'shipping_service_provider_type' => false,
        'tracking_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'active' => 'active',
        'created_date' => 'createdDate',
        'ecommerce_shipping_carrier' => 'ecommerceShippingCarrier',
        'internal_shipping_carrier' => 'internalShippingCarrier',
        'last_modified_date' => 'lastModifiedDate',
        'name' => 'name',
        'position_number' => 'positionNumber',
        'shipping_service_provider_type' => 'shippingServiceProviderType',
        'tracking_url' => 'trackingUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'active' => 'setActive',
        'created_date' => 'setCreatedDate',
        'ecommerce_shipping_carrier' => 'setEcommerceShippingCarrier',
        'internal_shipping_carrier' => 'setInternalShippingCarrier',
        'last_modified_date' => 'setLastModifiedDate',
        'name' => 'setName',
        'position_number' => 'setPositionNumber',
        'shipping_service_provider_type' => 'setShippingServiceProviderType',
        'tracking_url' => 'setTrackingUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'active' => 'getActive',
        'created_date' => 'getCreatedDate',
        'ecommerce_shipping_carrier' => 'getEcommerceShippingCarrier',
        'internal_shipping_carrier' => 'getInternalShippingCarrier',
        'last_modified_date' => 'getLastModifiedDate',
        'name' => 'getName',
        'position_number' => 'getPositionNumber',
        'shipping_service_provider_type' => 'getShippingServiceProviderType',
        'tracking_url' => 'getTrackingUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ECOMMERCE_SHIPPING_CARRIER_AUSTRIAN_POST = 'AUSTRIAN_POST';
    public const ECOMMERCE_SHIPPING_CARRIER_CARGO_INTERNATIONAL = 'CARGO_INTERNATIONAL';
    public const ECOMMERCE_SHIPPING_CARRIER_DACHSER = 'DACHSER';
    public const ECOMMERCE_SHIPPING_CARRIER_DB_SCHENKER = 'DB_SCHENKER';
    public const ECOMMERCE_SHIPPING_CARRIER_DEUTSCHE_POST = 'DEUTSCHE_POST';
    public const ECOMMERCE_SHIPPING_CARRIER_DHL = 'DHL';
    public const ECOMMERCE_SHIPPING_CARRIER_DHL_EXPRESS = 'DHL_EXPRESS';
    public const ECOMMERCE_SHIPPING_CARRIER_DPD = 'DPD';
    public const ECOMMERCE_SHIPPING_CARRIER_FEDEX = 'FEDEX';
    public const ECOMMERCE_SHIPPING_CARRIER_GLS = 'GLS';
    public const ECOMMERCE_SHIPPING_CARRIER_GO = 'GO';
    public const ECOMMERCE_SHIPPING_CARRIER_HERMES = 'HERMES';
    public const ECOMMERCE_SHIPPING_CARRIER_ILOXX = 'ILOXX';
    public const ECOMMERCE_SHIPPING_CARRIER_KUEHNE_NAGEL = 'KUEHNE_NAGEL';
    public const ECOMMERCE_SHIPPING_CARRIER_OTHER = 'OTHER';
    public const ECOMMERCE_SHIPPING_CARRIER_PARCEL_ONE = 'PARCEL_ONE';
    public const ECOMMERCE_SHIPPING_CARRIER_TNT = 'TNT';
    public const ECOMMERCE_SHIPPING_CARRIER_UPS = 'UPS';
    public const INTERNAL_SHIPPING_CARRIER_ANGEL_DE = 'ANGEL_DE';
    public const INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_EMS = 'AUSTRIAN_POST_EMS';
    public const INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_PLUS_INTERNATIONAL = 'AUSTRIAN_POST_PLUS_INTERNATIONAL';
    public const INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_PREMIUM = 'AUSTRIAN_POST_PREMIUM';
    public const INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_PREMIUM_SELECT = 'AUSTRIAN_POST_PREMIUM_SELECT';
    public const INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_RETURNS = 'AUSTRIAN_POST_RETURNS';
    public const INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_STANDARD = 'AUSTRIAN_POST_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_CARGO_INTERNATIONAL_EXPRESS = 'CARGO_INTERNATIONAL_EXPRESS';
    public const INTERNAL_SHIPPING_CARRIER_CARGO_INTERNATIONAL_STANDARD = 'CARGO_INTERNATIONAL_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_DEUTSCHE_POST_STANDARD = 'DEUTSCHE_POST_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_DHL_EUROPAKET = 'DHL_EUROPAKET';
    public const INTERNAL_SHIPPING_CARRIER_DHL_EUROPAKET_EV = 'DHL_EUROPAKET_EV';
    public const INTERNAL_SHIPPING_CARRIER_DHL_EXPRESS_ECONOMY_SELECT = 'DHL_EXPRESS_ECONOMY_SELECT';
    public const INTERNAL_SHIPPING_CARRIER_DHL_EXPRESS_ONE_DAY = 'DHL_EXPRESS_ONE_DAY';
    public const INTERNAL_SHIPPING_CARRIER_DHL_EXPRESS_ONE_DAY_EARLY = 'DHL_EXPRESS_ONE_DAY_EARLY';
    public const INTERNAL_SHIPPING_CARRIER_DHL_KLEINPAKET_EV = 'DHL_KLEINPAKET_EV';
    public const INTERNAL_SHIPPING_CARRIER_DHL_PAKET_EV = 'DHL_PAKET_EV';
    public const INTERNAL_SHIPPING_CARRIER_DHL_PAKET_INTERNATIONAL_EV = 'DHL_PAKET_INTERNATIONAL_EV';
    public const INTERNAL_SHIPPING_CARRIER_DHL_RETURNS = 'DHL_RETURNS';
    public const INTERNAL_SHIPPING_CARRIER_DHL_RETURNS_EV = 'DHL_RETURNS_EV';
    public const INTERNAL_SHIPPING_CARRIER_DHL_STANDARD = 'DHL_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_DHL_WARENPOST = 'DHL_WARENPOST';
    public const INTERNAL_SHIPPING_CARRIER_DHL_WARENPOST_INTERNATIONAL_EV = 'DHL_WARENPOST_INTERNATIONAL_EV';
    public const INTERNAL_SHIPPING_CARRIER_DPD_EXPRESS_ONE_DAY = 'DPD_EXPRESS_ONE_DAY';
    public const INTERNAL_SHIPPING_CARRIER_DPD_EXPRESS_ONE_DAY_EARLY = 'DPD_EXPRESS_ONE_DAY_EARLY';
    public const INTERNAL_SHIPPING_CARRIER_DPD_RETURNS = 'DPD_RETURNS';
    public const INTERNAL_SHIPPING_CARRIER_DPD_STANDARD = 'DPD_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_FEDEX_EXPRESS_ONE_DAY_EARLY = 'FEDEX_EXPRESS_ONE_DAY_EARLY';
    public const INTERNAL_SHIPPING_CARRIER_FEDEX_INTERNATIONAL_ECONOMY = 'FEDEX_INTERNATIONAL_ECONOMY';
    public const INTERNAL_SHIPPING_CARRIER_FEDEX_INTERNATIONAL_PRIORITY = 'FEDEX_INTERNATIONAL_PRIORITY';
    public const INTERNAL_SHIPPING_CARRIER_FEDEX_STANDARD = 'FEDEX_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_GLS_EXPRESS_ONE_DAY = 'GLS_EXPRESS_ONE_DAY';
    public const INTERNAL_SHIPPING_CARRIER_GLS_PICK_AND_SHIP = 'GLS_PICK_AND_SHIP';
    public const INTERNAL_SHIPPING_CARRIER_GLS_RETURNS = 'GLS_RETURNS';
    public const INTERNAL_SHIPPING_CARRIER_GLS_STANDARD = 'GLS_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_GO_ONE_DAY = 'GO_ONE_DAY';
    public const INTERNAL_SHIPPING_CARRIER_HERMES_RETURNS = 'HERMES_RETURNS';
    public const INTERNAL_SHIPPING_CARRIER_HERMES_STANDARD = 'HERMES_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_ILOXX_STANDARD = 'ILOXX_STANDARD';
    public const INTERNAL_SHIPPING_CARRIER_PARCEL_ONE = 'PARCEL_ONE';
    public const INTERNAL_SHIPPING_CARRIER_TNT_ONE_DAY = 'TNT_ONE_DAY';
    public const INTERNAL_SHIPPING_CARRIER_TNT_ONE_DAY_EARLY = 'TNT_ONE_DAY_EARLY';
    public const INTERNAL_SHIPPING_CARRIER_UPS_EXPEDITED = 'UPS_EXPEDITED';
    public const INTERNAL_SHIPPING_CARRIER_UPS_EXPRESS_1200 = 'UPS_EXPRESS_1200';
    public const INTERNAL_SHIPPING_CARRIER_UPS_EXPRESS_ONE_DAY = 'UPS_EXPRESS_ONE_DAY';
    public const INTERNAL_SHIPPING_CARRIER_UPS_EXPRESS_ONE_DAY_EARLY = 'UPS_EXPRESS_ONE_DAY_EARLY';
    public const INTERNAL_SHIPPING_CARRIER_UPS_RETURNS = 'UPS_RETURNS';
    public const INTERNAL_SHIPPING_CARRIER_UPS_STANDARD = 'UPS_STANDARD';
    public const SHIPPING_SERVICE_PROVIDER_TYPE_DHL = 'DHL';
    public const SHIPPING_SERVICE_PROVIDER_TYPE_SENDCLOUD = 'SENDCLOUD';
    public const SHIPPING_SERVICE_PROVIDER_TYPE_SHIPCLOUD = 'SHIPCLOUD';
    public const SHIPPING_SERVICE_PROVIDER_TYPE_STANDARD = 'STANDARD';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEcommerceShippingCarrierAllowableValues()
    {
        return [
            self::ECOMMERCE_SHIPPING_CARRIER_AUSTRIAN_POST,
            self::ECOMMERCE_SHIPPING_CARRIER_CARGO_INTERNATIONAL,
            self::ECOMMERCE_SHIPPING_CARRIER_DACHSER,
            self::ECOMMERCE_SHIPPING_CARRIER_DB_SCHENKER,
            self::ECOMMERCE_SHIPPING_CARRIER_DEUTSCHE_POST,
            self::ECOMMERCE_SHIPPING_CARRIER_DHL,
            self::ECOMMERCE_SHIPPING_CARRIER_DHL_EXPRESS,
            self::ECOMMERCE_SHIPPING_CARRIER_DPD,
            self::ECOMMERCE_SHIPPING_CARRIER_FEDEX,
            self::ECOMMERCE_SHIPPING_CARRIER_GLS,
            self::ECOMMERCE_SHIPPING_CARRIER_GO,
            self::ECOMMERCE_SHIPPING_CARRIER_HERMES,
            self::ECOMMERCE_SHIPPING_CARRIER_ILOXX,
            self::ECOMMERCE_SHIPPING_CARRIER_KUEHNE_NAGEL,
            self::ECOMMERCE_SHIPPING_CARRIER_OTHER,
            self::ECOMMERCE_SHIPPING_CARRIER_PARCEL_ONE,
            self::ECOMMERCE_SHIPPING_CARRIER_TNT,
            self::ECOMMERCE_SHIPPING_CARRIER_UPS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInternalShippingCarrierAllowableValues()
    {
        return [
            self::INTERNAL_SHIPPING_CARRIER_ANGEL_DE,
            self::INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_EMS,
            self::INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_PLUS_INTERNATIONAL,
            self::INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_PREMIUM,
            self::INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_PREMIUM_SELECT,
            self::INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_RETURNS,
            self::INTERNAL_SHIPPING_CARRIER_AUSTRIAN_POST_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_CARGO_INTERNATIONAL_EXPRESS,
            self::INTERNAL_SHIPPING_CARRIER_CARGO_INTERNATIONAL_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_DEUTSCHE_POST_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_DHL_EUROPAKET,
            self::INTERNAL_SHIPPING_CARRIER_DHL_EUROPAKET_EV,
            self::INTERNAL_SHIPPING_CARRIER_DHL_EXPRESS_ECONOMY_SELECT,
            self::INTERNAL_SHIPPING_CARRIER_DHL_EXPRESS_ONE_DAY,
            self::INTERNAL_SHIPPING_CARRIER_DHL_EXPRESS_ONE_DAY_EARLY,
            self::INTERNAL_SHIPPING_CARRIER_DHL_KLEINPAKET_EV,
            self::INTERNAL_SHIPPING_CARRIER_DHL_PAKET_EV,
            self::INTERNAL_SHIPPING_CARRIER_DHL_PAKET_INTERNATIONAL_EV,
            self::INTERNAL_SHIPPING_CARRIER_DHL_RETURNS,
            self::INTERNAL_SHIPPING_CARRIER_DHL_RETURNS_EV,
            self::INTERNAL_SHIPPING_CARRIER_DHL_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_DHL_WARENPOST,
            self::INTERNAL_SHIPPING_CARRIER_DHL_WARENPOST_INTERNATIONAL_EV,
            self::INTERNAL_SHIPPING_CARRIER_DPD_EXPRESS_ONE_DAY,
            self::INTERNAL_SHIPPING_CARRIER_DPD_EXPRESS_ONE_DAY_EARLY,
            self::INTERNAL_SHIPPING_CARRIER_DPD_RETURNS,
            self::INTERNAL_SHIPPING_CARRIER_DPD_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_FEDEX_EXPRESS_ONE_DAY_EARLY,
            self::INTERNAL_SHIPPING_CARRIER_FEDEX_INTERNATIONAL_ECONOMY,
            self::INTERNAL_SHIPPING_CARRIER_FEDEX_INTERNATIONAL_PRIORITY,
            self::INTERNAL_SHIPPING_CARRIER_FEDEX_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_GLS_EXPRESS_ONE_DAY,
            self::INTERNAL_SHIPPING_CARRIER_GLS_PICK_AND_SHIP,
            self::INTERNAL_SHIPPING_CARRIER_GLS_RETURNS,
            self::INTERNAL_SHIPPING_CARRIER_GLS_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_GO_ONE_DAY,
            self::INTERNAL_SHIPPING_CARRIER_HERMES_RETURNS,
            self::INTERNAL_SHIPPING_CARRIER_HERMES_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_ILOXX_STANDARD,
            self::INTERNAL_SHIPPING_CARRIER_PARCEL_ONE,
            self::INTERNAL_SHIPPING_CARRIER_TNT_ONE_DAY,
            self::INTERNAL_SHIPPING_CARRIER_TNT_ONE_DAY_EARLY,
            self::INTERNAL_SHIPPING_CARRIER_UPS_EXPEDITED,
            self::INTERNAL_SHIPPING_CARRIER_UPS_EXPRESS_1200,
            self::INTERNAL_SHIPPING_CARRIER_UPS_EXPRESS_ONE_DAY,
            self::INTERNAL_SHIPPING_CARRIER_UPS_EXPRESS_ONE_DAY_EARLY,
            self::INTERNAL_SHIPPING_CARRIER_UPS_RETURNS,
            self::INTERNAL_SHIPPING_CARRIER_UPS_STANDARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingServiceProviderTypeAllowableValues()
    {
        return [
            self::SHIPPING_SERVICE_PROVIDER_TYPE_DHL,
            self::SHIPPING_SERVICE_PROVIDER_TYPE_SENDCLOUD,
            self::SHIPPING_SERVICE_PROVIDER_TYPE_SHIPCLOUD,
            self::SHIPPING_SERVICE_PROVIDER_TYPE_STANDARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('ecommerce_shipping_carrier', $data ?? [], null);
        $this->setIfExists('internal_shipping_carrier', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('shipping_service_provider_type', $data ?? [], null);
        $this->setIfExists('tracking_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEcommerceShippingCarrierAllowableValues();
        if (!is_null($this->container['ecommerce_shipping_carrier']) && !in_array($this->container['ecommerce_shipping_carrier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ecommerce_shipping_carrier', must be one of '%s'",
                $this->container['ecommerce_shipping_carrier'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInternalShippingCarrierAllowableValues();
        if (!is_null($this->container['internal_shipping_carrier']) && !in_array($this->container['internal_shipping_carrier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'internal_shipping_carrier', must be one of '%s'",
                $this->container['internal_shipping_carrier'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['shipping_service_provider_type'] === null) {
            $invalidProperties[] = "'shipping_service_provider_type' can't be null";
        }
        $allowedValues = $this->getShippingServiceProviderTypeAllowableValues();
        if (!is_null($this->container['shipping_service_provider_type']) && !in_array($this->container['shipping_service_provider_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipping_service_provider_type', must be one of '%s'",
                $this->container['shipping_service_provider_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets ecommerce_shipping_carrier
     *
     * @return string|null
     */
    public function getEcommerceShippingCarrier()
    {
        return $this->container['ecommerce_shipping_carrier'];
    }

    /**
     * Sets ecommerce_shipping_carrier
     *
     * @param string|null $ecommerce_shipping_carrier ecommerce_shipping_carrier
     *
     * @return self
     */
    public function setEcommerceShippingCarrier($ecommerce_shipping_carrier)
    {
        if (is_null($ecommerce_shipping_carrier)) {
            throw new \InvalidArgumentException('non-nullable ecommerce_shipping_carrier cannot be null');
        }
        $allowedValues = $this->getEcommerceShippingCarrierAllowableValues();
        if (!in_array($ecommerce_shipping_carrier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ecommerce_shipping_carrier', must be one of '%s'",
                    $ecommerce_shipping_carrier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ecommerce_shipping_carrier'] = $ecommerce_shipping_carrier;

        return $this;
    }

    /**
     * Gets internal_shipping_carrier
     *
     * @return string|null
     */
    public function getInternalShippingCarrier()
    {
        return $this->container['internal_shipping_carrier'];
    }

    /**
     * Sets internal_shipping_carrier
     *
     * @param string|null $internal_shipping_carrier internal_shipping_carrier
     *
     * @return self
     */
    public function setInternalShippingCarrier($internal_shipping_carrier)
    {
        if (is_null($internal_shipping_carrier)) {
            throw new \InvalidArgumentException('non-nullable internal_shipping_carrier cannot be null');
        }
        $allowedValues = $this->getInternalShippingCarrierAllowableValues();
        if (!in_array($internal_shipping_carrier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'internal_shipping_carrier', must be one of '%s'",
                    $internal_shipping_carrier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['internal_shipping_carrier'] = $internal_shipping_carrier;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets shipping_service_provider_type
     *
     * @return string
     */
    public function getShippingServiceProviderType()
    {
        return $this->container['shipping_service_provider_type'];
    }

    /**
     * Sets shipping_service_provider_type
     *
     * @param string $shipping_service_provider_type shipping_service_provider_type
     *
     * @return self
     */
    public function setShippingServiceProviderType($shipping_service_provider_type)
    {
        if (is_null($shipping_service_provider_type)) {
            throw new \InvalidArgumentException('non-nullable shipping_service_provider_type cannot be null');
        }
        $allowedValues = $this->getShippingServiceProviderTypeAllowableValues();
        if (!in_array($shipping_service_provider_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipping_service_provider_type', must be one of '%s'",
                    $shipping_service_provider_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_service_provider_type'] = $shipping_service_provider_type;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string|null $tracking_url tracking_url
     *
     * @return self
     */
    public function setTrackingUrl($tracking_url)
    {
        if (is_null($tracking_url)) {
            throw new \InvalidArgumentException('non-nullable tracking_url cannot be null');
        }
        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


