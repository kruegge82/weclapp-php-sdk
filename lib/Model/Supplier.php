<?php
/**
 * Supplier
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Supplier Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Supplier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supplier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'addresses' => '\kruegge82\weclapp\Model\Address[]',
        'bank_accounts' => '\kruegge82\weclapp\Model\PartyBankAccount[]',
        'birth_date' => 'int',
        'commercial_language_id' => 'string',
        'company' => 'string',
        'company2' => 'string',
        'contacts' => '\kruegge82\weclapp\Model\Contact[]',
        'created_date' => 'int',
        'currency_id' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'customer_number_at_supplier' => 'string',
        'delivery_address_id' => 'string',
        'description' => 'string',
        'email' => 'string',
        'fax' => 'string',
        'first_name' => 'string',
        'invoice_address_id' => 'string',
        'last_modified_date' => 'int',
        'last_name' => 'string',
        'middle_name' => 'string',
        'mobile_phone1' => 'string',
        'non_standard_tax_id' => 'string',
        'online_accounts' => '\kruegge82\weclapp\Model\OnlineAccount[]',
        'order_block' => 'bool',
        'party_type' => 'string',
        'payment_method_id' => 'string',
        'person_company' => 'string',
        'person_department_id' => 'string',
        'person_role_id' => 'string',
        'phone' => 'string',
        'primary_address_id' => 'string',
        'primary_contact_id' => 'string',
        'reference_number' => 'string',
        'salutation' => 'string',
        'sector_id' => 'string',
        'shipment_method_id' => 'string',
        'supplier_number' => 'string',
        'supplier_rating_id' => 'string',
        'tags' => 'string[]',
        'term_of_payment_id' => 'string',
        'title_id' => 'string',
        'vat_registration_number' => 'string',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'addresses' => null,
        'bank_accounts' => null,
        'birth_date' => 'timestamp',
        'commercial_language_id' => null,
        'company' => null,
        'company2' => null,
        'contacts' => null,
        'created_date' => 'timestamp',
        'currency_id' => null,
        'custom_attributes' => null,
        'customer_number_at_supplier' => null,
        'delivery_address_id' => null,
        'description' => null,
        'email' => null,
        'fax' => null,
        'first_name' => null,
        'invoice_address_id' => null,
        'last_modified_date' => 'timestamp',
        'last_name' => null,
        'middle_name' => null,
        'mobile_phone1' => null,
        'non_standard_tax_id' => null,
        'online_accounts' => null,
        'order_block' => null,
        'party_type' => null,
        'payment_method_id' => null,
        'person_company' => null,
        'person_department_id' => null,
        'person_role_id' => null,
        'phone' => null,
        'primary_address_id' => null,
        'primary_contact_id' => null,
        'reference_number' => null,
        'salutation' => null,
        'sector_id' => null,
        'shipment_method_id' => null,
        'supplier_number' => null,
        'supplier_rating_id' => null,
        'tags' => null,
        'term_of_payment_id' => null,
        'title_id' => null,
        'vat_registration_number' => null,
        'website' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'addresses' => false,
        'bank_accounts' => false,
        'birth_date' => false,
        'commercial_language_id' => false,
        'company' => false,
        'company2' => false,
        'contacts' => false,
        'created_date' => false,
        'currency_id' => false,
        'custom_attributes' => false,
        'customer_number_at_supplier' => false,
        'delivery_address_id' => false,
        'description' => false,
        'email' => false,
        'fax' => false,
        'first_name' => false,
        'invoice_address_id' => false,
        'last_modified_date' => false,
        'last_name' => false,
        'middle_name' => false,
        'mobile_phone1' => false,
        'non_standard_tax_id' => false,
        'online_accounts' => false,
        'order_block' => false,
        'party_type' => false,
        'payment_method_id' => false,
        'person_company' => false,
        'person_department_id' => false,
        'person_role_id' => false,
        'phone' => false,
        'primary_address_id' => false,
        'primary_contact_id' => false,
        'reference_number' => false,
        'salutation' => false,
        'sector_id' => false,
        'shipment_method_id' => false,
        'supplier_number' => false,
        'supplier_rating_id' => false,
        'tags' => false,
        'term_of_payment_id' => false,
        'title_id' => false,
        'vat_registration_number' => false,
        'website' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'addresses' => 'addresses',
        'bank_accounts' => 'bankAccounts',
        'birth_date' => 'birthDate',
        'commercial_language_id' => 'commercialLanguageId',
        'company' => 'company',
        'company2' => 'company2',
        'contacts' => 'contacts',
        'created_date' => 'createdDate',
        'currency_id' => 'currencyId',
        'custom_attributes' => 'customAttributes',
        'customer_number_at_supplier' => 'customerNumberAtSupplier',
        'delivery_address_id' => 'deliveryAddressId',
        'description' => 'description',
        'email' => 'email',
        'fax' => 'fax',
        'first_name' => 'firstName',
        'invoice_address_id' => 'invoiceAddressId',
        'last_modified_date' => 'lastModifiedDate',
        'last_name' => 'lastName',
        'middle_name' => 'middleName',
        'mobile_phone1' => 'mobilePhone1',
        'non_standard_tax_id' => 'nonStandardTaxId',
        'online_accounts' => 'onlineAccounts',
        'order_block' => 'orderBlock',
        'party_type' => 'partyType',
        'payment_method_id' => 'paymentMethodId',
        'person_company' => 'personCompany',
        'person_department_id' => 'personDepartmentId',
        'person_role_id' => 'personRoleId',
        'phone' => 'phone',
        'primary_address_id' => 'primaryAddressId',
        'primary_contact_id' => 'primaryContactId',
        'reference_number' => 'referenceNumber',
        'salutation' => 'salutation',
        'sector_id' => 'sectorId',
        'shipment_method_id' => 'shipmentMethodId',
        'supplier_number' => 'supplierNumber',
        'supplier_rating_id' => 'supplierRatingId',
        'tags' => 'tags',
        'term_of_payment_id' => 'termOfPaymentId',
        'title_id' => 'titleId',
        'vat_registration_number' => 'vatRegistrationNumber',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'addresses' => 'setAddresses',
        'bank_accounts' => 'setBankAccounts',
        'birth_date' => 'setBirthDate',
        'commercial_language_id' => 'setCommercialLanguageId',
        'company' => 'setCompany',
        'company2' => 'setCompany2',
        'contacts' => 'setContacts',
        'created_date' => 'setCreatedDate',
        'currency_id' => 'setCurrencyId',
        'custom_attributes' => 'setCustomAttributes',
        'customer_number_at_supplier' => 'setCustomerNumberAtSupplier',
        'delivery_address_id' => 'setDeliveryAddressId',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'fax' => 'setFax',
        'first_name' => 'setFirstName',
        'invoice_address_id' => 'setInvoiceAddressId',
        'last_modified_date' => 'setLastModifiedDate',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'mobile_phone1' => 'setMobilePhone1',
        'non_standard_tax_id' => 'setNonStandardTaxId',
        'online_accounts' => 'setOnlineAccounts',
        'order_block' => 'setOrderBlock',
        'party_type' => 'setPartyType',
        'payment_method_id' => 'setPaymentMethodId',
        'person_company' => 'setPersonCompany',
        'person_department_id' => 'setPersonDepartmentId',
        'person_role_id' => 'setPersonRoleId',
        'phone' => 'setPhone',
        'primary_address_id' => 'setPrimaryAddressId',
        'primary_contact_id' => 'setPrimaryContactId',
        'reference_number' => 'setReferenceNumber',
        'salutation' => 'setSalutation',
        'sector_id' => 'setSectorId',
        'shipment_method_id' => 'setShipmentMethodId',
        'supplier_number' => 'setSupplierNumber',
        'supplier_rating_id' => 'setSupplierRatingId',
        'tags' => 'setTags',
        'term_of_payment_id' => 'setTermOfPaymentId',
        'title_id' => 'setTitleId',
        'vat_registration_number' => 'setVatRegistrationNumber',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'addresses' => 'getAddresses',
        'bank_accounts' => 'getBankAccounts',
        'birth_date' => 'getBirthDate',
        'commercial_language_id' => 'getCommercialLanguageId',
        'company' => 'getCompany',
        'company2' => 'getCompany2',
        'contacts' => 'getContacts',
        'created_date' => 'getCreatedDate',
        'currency_id' => 'getCurrencyId',
        'custom_attributes' => 'getCustomAttributes',
        'customer_number_at_supplier' => 'getCustomerNumberAtSupplier',
        'delivery_address_id' => 'getDeliveryAddressId',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'fax' => 'getFax',
        'first_name' => 'getFirstName',
        'invoice_address_id' => 'getInvoiceAddressId',
        'last_modified_date' => 'getLastModifiedDate',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'mobile_phone1' => 'getMobilePhone1',
        'non_standard_tax_id' => 'getNonStandardTaxId',
        'online_accounts' => 'getOnlineAccounts',
        'order_block' => 'getOrderBlock',
        'party_type' => 'getPartyType',
        'payment_method_id' => 'getPaymentMethodId',
        'person_company' => 'getPersonCompany',
        'person_department_id' => 'getPersonDepartmentId',
        'person_role_id' => 'getPersonRoleId',
        'phone' => 'getPhone',
        'primary_address_id' => 'getPrimaryAddressId',
        'primary_contact_id' => 'getPrimaryContactId',
        'reference_number' => 'getReferenceNumber',
        'salutation' => 'getSalutation',
        'sector_id' => 'getSectorId',
        'shipment_method_id' => 'getShipmentMethodId',
        'supplier_number' => 'getSupplierNumber',
        'supplier_rating_id' => 'getSupplierRatingId',
        'tags' => 'getTags',
        'term_of_payment_id' => 'getTermOfPaymentId',
        'title_id' => 'getTitleId',
        'vat_registration_number' => 'getVatRegistrationNumber',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PARTY_TYPE_ORGANIZATION = 'ORGANIZATION';
    public const PARTY_TYPE_PERSON = 'PERSON';
    public const SALUTATION_COMPANY = 'COMPANY';
    public const SALUTATION_FAMILY = 'FAMILY';
    public const SALUTATION_MR = 'MR';
    public const SALUTATION_MRS = 'MRS';
    public const SALUTATION_NO_SALUTATION = 'NO_SALUTATION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartyTypeAllowableValues()
    {
        return [
            self::PARTY_TYPE_ORGANIZATION,
            self::PARTY_TYPE_PERSON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalutationAllowableValues()
    {
        return [
            self::SALUTATION_COMPANY,
            self::SALUTATION_FAMILY,
            self::SALUTATION_MR,
            self::SALUTATION_MRS,
            self::SALUTATION_NO_SALUTATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('bank_accounts', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('commercial_language_id', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('company2', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('customer_number_at_supplier', $data ?? [], null);
        $this->setIfExists('delivery_address_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('invoice_address_id', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('mobile_phone1', $data ?? [], null);
        $this->setIfExists('non_standard_tax_id', $data ?? [], null);
        $this->setIfExists('online_accounts', $data ?? [], null);
        $this->setIfExists('order_block', $data ?? [], null);
        $this->setIfExists('party_type', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('person_company', $data ?? [], null);
        $this->setIfExists('person_department_id', $data ?? [], null);
        $this->setIfExists('person_role_id', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('primary_address_id', $data ?? [], null);
        $this->setIfExists('primary_contact_id', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('sector_id', $data ?? [], null);
        $this->setIfExists('shipment_method_id', $data ?? [], null);
        $this->setIfExists('supplier_number', $data ?? [], null);
        $this->setIfExists('supplier_rating_id', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('term_of_payment_id', $data ?? [], null);
        $this->setIfExists('title_id', $data ?? [], null);
        $this->setIfExists('vat_registration_number', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['party_type'] === null) {
            $invalidProperties[] = "'party_type' can't be null";
        }
        $allowedValues = $this->getPartyTypeAllowableValues();
        if (!is_null($this->container['party_type']) && !in_array($this->container['party_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'party_type', must be one of '%s'",
                $this->container['party_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSalutationAllowableValues();
        if (!is_null($this->container['salutation']) && !in_array($this->container['salutation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'salutation', must be one of '%s'",
                $this->container['salutation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \kruegge82\weclapp\Model\Address[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \kruegge82\weclapp\Model\Address[]|null $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets bank_accounts
     *
     * @return \kruegge82\weclapp\Model\PartyBankAccount[]|null
     */
    public function getBankAccounts()
    {
        return $this->container['bank_accounts'];
    }

    /**
     * Sets bank_accounts
     *
     * @param \kruegge82\weclapp\Model\PartyBankAccount[]|null $bank_accounts bank_accounts
     *
     * @return self
     */
    public function setBankAccounts($bank_accounts)
    {
        if (is_null($bank_accounts)) {
            throw new \InvalidArgumentException('non-nullable bank_accounts cannot be null');
        }
        $this->container['bank_accounts'] = $bank_accounts;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return int|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param int|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets commercial_language_id
     *
     * @return string|null
     */
    public function getCommercialLanguageId()
    {
        return $this->container['commercial_language_id'];
    }

    /**
     * Sets commercial_language_id
     *
     * @param string|null $commercial_language_id commercial_language_id
     *
     * @return self
     */
    public function setCommercialLanguageId($commercial_language_id)
    {
        if (is_null($commercial_language_id)) {
            throw new \InvalidArgumentException('non-nullable commercial_language_id cannot be null');
        }
        $this->container['commercial_language_id'] = $commercial_language_id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets company2
     *
     * @return string|null
     */
    public function getCompany2()
    {
        return $this->container['company2'];
    }

    /**
     * Sets company2
     *
     * @param string|null $company2 company2
     *
     * @return self
     */
    public function setCompany2($company2)
    {
        if (is_null($company2)) {
            throw new \InvalidArgumentException('non-nullable company2 cannot be null');
        }
        $this->container['company2'] = $company2;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \kruegge82\weclapp\Model\Contact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \kruegge82\weclapp\Model\Contact[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            throw new \InvalidArgumentException('non-nullable currency_id cannot be null');
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets customer_number_at_supplier
     *
     * @return string|null
     */
    public function getCustomerNumberAtSupplier()
    {
        return $this->container['customer_number_at_supplier'];
    }

    /**
     * Sets customer_number_at_supplier
     *
     * @param string|null $customer_number_at_supplier customer_number_at_supplier
     *
     * @return self
     */
    public function setCustomerNumberAtSupplier($customer_number_at_supplier)
    {
        if (is_null($customer_number_at_supplier)) {
            throw new \InvalidArgumentException('non-nullable customer_number_at_supplier cannot be null');
        }
        $this->container['customer_number_at_supplier'] = $customer_number_at_supplier;

        return $this;
    }

    /**
     * Gets delivery_address_id
     *
     * @return string|null
     */
    public function getDeliveryAddressId()
    {
        return $this->container['delivery_address_id'];
    }

    /**
     * Sets delivery_address_id
     *
     * @param string|null $delivery_address_id delivery_address_id
     *
     * @return self
     */
    public function setDeliveryAddressId($delivery_address_id)
    {
        if (is_null($delivery_address_id)) {
            throw new \InvalidArgumentException('non-nullable delivery_address_id cannot be null');
        }
        $this->container['delivery_address_id'] = $delivery_address_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets invoice_address_id
     *
     * @return string|null
     */
    public function getInvoiceAddressId()
    {
        return $this->container['invoice_address_id'];
    }

    /**
     * Sets invoice_address_id
     *
     * @param string|null $invoice_address_id invoice_address_id
     *
     * @return self
     */
    public function setInvoiceAddressId($invoice_address_id)
    {
        if (is_null($invoice_address_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_address_id cannot be null');
        }
        $this->container['invoice_address_id'] = $invoice_address_id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets mobile_phone1
     *
     * @return string|null
     */
    public function getMobilePhone1()
    {
        return $this->container['mobile_phone1'];
    }

    /**
     * Sets mobile_phone1
     *
     * @param string|null $mobile_phone1 mobile_phone1
     *
     * @return self
     */
    public function setMobilePhone1($mobile_phone1)
    {
        if (is_null($mobile_phone1)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone1 cannot be null');
        }
        $this->container['mobile_phone1'] = $mobile_phone1;

        return $this;
    }

    /**
     * Gets non_standard_tax_id
     *
     * @return string|null
     */
    public function getNonStandardTaxId()
    {
        return $this->container['non_standard_tax_id'];
    }

    /**
     * Sets non_standard_tax_id
     *
     * @param string|null $non_standard_tax_id non_standard_tax_id
     *
     * @return self
     */
    public function setNonStandardTaxId($non_standard_tax_id)
    {
        if (is_null($non_standard_tax_id)) {
            throw new \InvalidArgumentException('non-nullable non_standard_tax_id cannot be null');
        }
        $this->container['non_standard_tax_id'] = $non_standard_tax_id;

        return $this;
    }

    /**
     * Gets online_accounts
     *
     * @return \kruegge82\weclapp\Model\OnlineAccount[]|null
     */
    public function getOnlineAccounts()
    {
        return $this->container['online_accounts'];
    }

    /**
     * Sets online_accounts
     *
     * @param \kruegge82\weclapp\Model\OnlineAccount[]|null $online_accounts online_accounts
     *
     * @return self
     */
    public function setOnlineAccounts($online_accounts)
    {
        if (is_null($online_accounts)) {
            throw new \InvalidArgumentException('non-nullable online_accounts cannot be null');
        }
        $this->container['online_accounts'] = $online_accounts;

        return $this;
    }

    /**
     * Gets order_block
     *
     * @return bool|null
     */
    public function getOrderBlock()
    {
        return $this->container['order_block'];
    }

    /**
     * Sets order_block
     *
     * @param bool|null $order_block order_block
     *
     * @return self
     */
    public function setOrderBlock($order_block)
    {
        if (is_null($order_block)) {
            throw new \InvalidArgumentException('non-nullable order_block cannot be null');
        }
        $this->container['order_block'] = $order_block;

        return $this;
    }

    /**
     * Gets party_type
     *
     * @return string
     */
    public function getPartyType()
    {
        return $this->container['party_type'];
    }

    /**
     * Sets party_type
     *
     * @param string $party_type party_type
     *
     * @return self
     */
    public function setPartyType($party_type)
    {
        if (is_null($party_type)) {
            throw new \InvalidArgumentException('non-nullable party_type cannot be null');
        }
        $allowedValues = $this->getPartyTypeAllowableValues();
        if (!in_array($party_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'party_type', must be one of '%s'",
                    $party_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['party_type'] = $party_type;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets person_company
     *
     * @return string|null
     */
    public function getPersonCompany()
    {
        return $this->container['person_company'];
    }

    /**
     * Sets person_company
     *
     * @param string|null $person_company person_company
     *
     * @return self
     */
    public function setPersonCompany($person_company)
    {
        if (is_null($person_company)) {
            throw new \InvalidArgumentException('non-nullable person_company cannot be null');
        }
        $this->container['person_company'] = $person_company;

        return $this;
    }

    /**
     * Gets person_department_id
     *
     * @return string|null
     */
    public function getPersonDepartmentId()
    {
        return $this->container['person_department_id'];
    }

    /**
     * Sets person_department_id
     *
     * @param string|null $person_department_id person_department_id
     *
     * @return self
     */
    public function setPersonDepartmentId($person_department_id)
    {
        if (is_null($person_department_id)) {
            throw new \InvalidArgumentException('non-nullable person_department_id cannot be null');
        }
        $this->container['person_department_id'] = $person_department_id;

        return $this;
    }

    /**
     * Gets person_role_id
     *
     * @return string|null
     */
    public function getPersonRoleId()
    {
        return $this->container['person_role_id'];
    }

    /**
     * Sets person_role_id
     *
     * @param string|null $person_role_id person_role_id
     *
     * @return self
     */
    public function setPersonRoleId($person_role_id)
    {
        if (is_null($person_role_id)) {
            throw new \InvalidArgumentException('non-nullable person_role_id cannot be null');
        }
        $this->container['person_role_id'] = $person_role_id;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets primary_address_id
     *
     * @return string|null
     */
    public function getPrimaryAddressId()
    {
        return $this->container['primary_address_id'];
    }

    /**
     * Sets primary_address_id
     *
     * @param string|null $primary_address_id primary_address_id
     *
     * @return self
     */
    public function setPrimaryAddressId($primary_address_id)
    {
        if (is_null($primary_address_id)) {
            throw new \InvalidArgumentException('non-nullable primary_address_id cannot be null');
        }
        $this->container['primary_address_id'] = $primary_address_id;

        return $this;
    }

    /**
     * Gets primary_contact_id
     *
     * @return string|null
     */
    public function getPrimaryContactId()
    {
        return $this->container['primary_contact_id'];
    }

    /**
     * Sets primary_contact_id
     *
     * @param string|null $primary_contact_id primary_contact_id
     *
     * @return self
     */
    public function setPrimaryContactId($primary_contact_id)
    {
        if (is_null($primary_contact_id)) {
            throw new \InvalidArgumentException('non-nullable primary_contact_id cannot be null');
        }
        $this->container['primary_contact_id'] = $primary_contact_id;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number reference_number
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        if (is_null($reference_number)) {
            throw new \InvalidArgumentException('non-nullable reference_number cannot be null');
        }
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation salutation
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            throw new \InvalidArgumentException('non-nullable salutation cannot be null');
        }
        $allowedValues = $this->getSalutationAllowableValues();
        if (!in_array($salutation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'salutation', must be one of '%s'",
                    $salutation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets sector_id
     *
     * @return string|null
     */
    public function getSectorId()
    {
        return $this->container['sector_id'];
    }

    /**
     * Sets sector_id
     *
     * @param string|null $sector_id sector_id
     *
     * @return self
     */
    public function setSectorId($sector_id)
    {
        if (is_null($sector_id)) {
            throw new \InvalidArgumentException('non-nullable sector_id cannot be null');
        }
        $this->container['sector_id'] = $sector_id;

        return $this;
    }

    /**
     * Gets shipment_method_id
     *
     * @return string|null
     */
    public function getShipmentMethodId()
    {
        return $this->container['shipment_method_id'];
    }

    /**
     * Sets shipment_method_id
     *
     * @param string|null $shipment_method_id shipment_method_id
     *
     * @return self
     */
    public function setShipmentMethodId($shipment_method_id)
    {
        if (is_null($shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_id cannot be null');
        }
        $this->container['shipment_method_id'] = $shipment_method_id;

        return $this;
    }

    /**
     * Gets supplier_number
     *
     * @return string|null
     */
    public function getSupplierNumber()
    {
        return $this->container['supplier_number'];
    }

    /**
     * Sets supplier_number
     *
     * @param string|null $supplier_number supplier_number
     *
     * @return self
     */
    public function setSupplierNumber($supplier_number)
    {
        if (is_null($supplier_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_number cannot be null');
        }
        $this->container['supplier_number'] = $supplier_number;

        return $this;
    }

    /**
     * Gets supplier_rating_id
     *
     * @return string|null
     */
    public function getSupplierRatingId()
    {
        return $this->container['supplier_rating_id'];
    }

    /**
     * Sets supplier_rating_id
     *
     * @param string|null $supplier_rating_id supplier_rating_id
     *
     * @return self
     */
    public function setSupplierRatingId($supplier_rating_id)
    {
        if (is_null($supplier_rating_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_rating_id cannot be null');
        }
        $this->container['supplier_rating_id'] = $supplier_rating_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets term_of_payment_id
     *
     * @return string|null
     */
    public function getTermOfPaymentId()
    {
        return $this->container['term_of_payment_id'];
    }

    /**
     * Sets term_of_payment_id
     *
     * @param string|null $term_of_payment_id term_of_payment_id
     *
     * @return self
     */
    public function setTermOfPaymentId($term_of_payment_id)
    {
        if (is_null($term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_id cannot be null');
        }
        $this->container['term_of_payment_id'] = $term_of_payment_id;

        return $this;
    }

    /**
     * Gets title_id
     *
     * @return string|null
     */
    public function getTitleId()
    {
        return $this->container['title_id'];
    }

    /**
     * Sets title_id
     *
     * @param string|null $title_id title_id
     *
     * @return self
     */
    public function setTitleId($title_id)
    {
        if (is_null($title_id)) {
            throw new \InvalidArgumentException('non-nullable title_id cannot be null');
        }
        $this->container['title_id'] = $title_id;

        return $this;
    }

    /**
     * Gets vat_registration_number
     *
     * @return string|null
     */
    public function getVatRegistrationNumber()
    {
        return $this->container['vat_registration_number'];
    }

    /**
     * Sets vat_registration_number
     *
     * @param string|null $vat_registration_number vat_registration_number
     *
     * @return self
     */
    public function setVatRegistrationNumber($vat_registration_number)
    {
        if (is_null($vat_registration_number)) {
            throw new \InvalidArgumentException('non-nullable vat_registration_number cannot be null');
        }
        $this->container['vat_registration_number'] = $vat_registration_number;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


