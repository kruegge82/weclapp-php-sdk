<?php
/**
 * WarehouseStockMovementBookDirectStockTransferPostRequestCustomAttributesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * WarehouseStockMovementBookDirectStockTransferPostRequestCustomAttributesInner Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WarehouseStockMovementBookDirectStockTransferPostRequestCustomAttributesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_warehouseStockMovement_bookDirectStockTransfer_post_request_customAttributes_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attribute_definition_id' => 'string',
        'boolean_value' => 'bool',
        'date_value' => 'int',
        'entity_id' => 'string',
        'entity_references' => '\kruegge82\weclapp\Model\EntityReference[]',
        'number_value' => 'float',
        'selected_value_id' => 'string',
        'selected_values' => '\kruegge82\weclapp\Model\OnlyId[]',
        'string_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attribute_definition_id' => null,
        'boolean_value' => null,
        'date_value' => 'timestamp',
        'entity_id' => null,
        'entity_references' => null,
        'number_value' => 'decimal',
        'selected_value_id' => null,
        'selected_values' => null,
        'string_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attribute_definition_id' => false,
        'boolean_value' => false,
        'date_value' => false,
        'entity_id' => false,
        'entity_references' => false,
        'number_value' => false,
        'selected_value_id' => false,
        'selected_values' => false,
        'string_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_definition_id' => 'attributeDefinitionId',
        'boolean_value' => 'booleanValue',
        'date_value' => 'dateValue',
        'entity_id' => 'entityId',
        'entity_references' => 'entityReferences',
        'number_value' => 'numberValue',
        'selected_value_id' => 'selectedValueId',
        'selected_values' => 'selectedValues',
        'string_value' => 'stringValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute_definition_id' => 'setAttributeDefinitionId',
        'boolean_value' => 'setBooleanValue',
        'date_value' => 'setDateValue',
        'entity_id' => 'setEntityId',
        'entity_references' => 'setEntityReferences',
        'number_value' => 'setNumberValue',
        'selected_value_id' => 'setSelectedValueId',
        'selected_values' => 'setSelectedValues',
        'string_value' => 'setStringValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute_definition_id' => 'getAttributeDefinitionId',
        'boolean_value' => 'getBooleanValue',
        'date_value' => 'getDateValue',
        'entity_id' => 'getEntityId',
        'entity_references' => 'getEntityReferences',
        'number_value' => 'getNumberValue',
        'selected_value_id' => 'getSelectedValueId',
        'selected_values' => 'getSelectedValues',
        'string_value' => 'getStringValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('attribute_definition_id', $data ?? [], null);
        $this->setIfExists('boolean_value', $data ?? [], null);
        $this->setIfExists('date_value', $data ?? [], null);
        $this->setIfExists('entity_id', $data ?? [], null);
        $this->setIfExists('entity_references', $data ?? [], null);
        $this->setIfExists('number_value', $data ?? [], null);
        $this->setIfExists('selected_value_id', $data ?? [], null);
        $this->setIfExists('selected_values', $data ?? [], null);
        $this->setIfExists('string_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attribute_definition_id
     *
     * @return string|null
     */
    public function getAttributeDefinitionId()
    {
        return $this->container['attribute_definition_id'];
    }

    /**
     * Sets attribute_definition_id
     *
     * @param string|null $attribute_definition_id attribute_definition_id
     *
     * @return self
     */
    public function setAttributeDefinitionId($attribute_definition_id)
    {
        if (is_null($attribute_definition_id)) {
            throw new \InvalidArgumentException('non-nullable attribute_definition_id cannot be null');
        }
        $this->container['attribute_definition_id'] = $attribute_definition_id;

        return $this;
    }

    /**
     * Gets boolean_value
     *
     * @return bool|null
     */
    public function getBooleanValue()
    {
        return $this->container['boolean_value'];
    }

    /**
     * Sets boolean_value
     *
     * @param bool|null $boolean_value boolean_value
     *
     * @return self
     */
    public function setBooleanValue($boolean_value)
    {
        if (is_null($boolean_value)) {
            throw new \InvalidArgumentException('non-nullable boolean_value cannot be null');
        }
        $this->container['boolean_value'] = $boolean_value;

        return $this;
    }

    /**
     * Gets date_value
     *
     * @return int|null
     */
    public function getDateValue()
    {
        return $this->container['date_value'];
    }

    /**
     * Sets date_value
     *
     * @param int|null $date_value date_value
     *
     * @return self
     */
    public function setDateValue($date_value)
    {
        if (is_null($date_value)) {
            throw new \InvalidArgumentException('non-nullable date_value cannot be null');
        }
        $this->container['date_value'] = $date_value;

        return $this;
    }

    /**
     * Gets entity_id
     *
     * @return string|null
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string|null $entity_id entity_id
     *
     * @return self
     */
    public function setEntityId($entity_id)
    {
        if (is_null($entity_id)) {
            throw new \InvalidArgumentException('non-nullable entity_id cannot be null');
        }
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets entity_references
     *
     * @return \kruegge82\weclapp\Model\EntityReference[]|null
     */
    public function getEntityReferences()
    {
        return $this->container['entity_references'];
    }

    /**
     * Sets entity_references
     *
     * @param \kruegge82\weclapp\Model\EntityReference[]|null $entity_references entity_references
     *
     * @return self
     */
    public function setEntityReferences($entity_references)
    {
        if (is_null($entity_references)) {
            throw new \InvalidArgumentException('non-nullable entity_references cannot be null');
        }
        $this->container['entity_references'] = $entity_references;

        return $this;
    }

    /**
     * Gets number_value
     *
     * @return float|null
     */
    public function getNumberValue()
    {
        return $this->container['number_value'];
    }

    /**
     * Sets number_value
     *
     * @param float|null $number_value number_value
     *
     * @return self
     */
    public function setNumberValue($number_value)
    {
        if (is_null($number_value)) {
            throw new \InvalidArgumentException('non-nullable number_value cannot be null');
        }
        $this->container['number_value'] = $number_value;

        return $this;
    }

    /**
     * Gets selected_value_id
     *
     * @return string|null
     */
    public function getSelectedValueId()
    {
        return $this->container['selected_value_id'];
    }

    /**
     * Sets selected_value_id
     *
     * @param string|null $selected_value_id selected_value_id
     *
     * @return self
     */
    public function setSelectedValueId($selected_value_id)
    {
        if (is_null($selected_value_id)) {
            throw new \InvalidArgumentException('non-nullable selected_value_id cannot be null');
        }
        $this->container['selected_value_id'] = $selected_value_id;

        return $this;
    }

    /**
     * Gets selected_values
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getSelectedValues()
    {
        return $this->container['selected_values'];
    }

    /**
     * Sets selected_values
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $selected_values selected_values
     *
     * @return self
     */
    public function setSelectedValues($selected_values)
    {
        if (is_null($selected_values)) {
            throw new \InvalidArgumentException('non-nullable selected_values cannot be null');
        }
        $this->container['selected_values'] = $selected_values;

        return $this;
    }

    /**
     * Gets string_value
     *
     * @return string|null
     */
    public function getStringValue()
    {
        return $this->container['string_value'];
    }

    /**
     * Sets string_value
     *
     * @param string|null $string_value string_value
     *
     * @return self
     */
    public function setStringValue($string_value)
    {
        if (is_null($string_value)) {
            throw new \InvalidArgumentException('non-nullable string_value cannot be null');
        }
        $this->container['string_value'] = $string_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


