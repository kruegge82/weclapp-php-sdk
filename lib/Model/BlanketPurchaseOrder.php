<?php
/**
 * BlanketPurchaseOrder
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * BlanketPurchaseOrder Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BlanketPurchaseOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'blanketPurchaseOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'article_id' => 'string',
        'blanket_purchase_order_number' => 'string',
        'calculation_mode' => '\kruegge82\weclapp\Model\SpecialCalculationMode',
        'comment' => 'string',
        'commercial_language' => 'string',
        'confirmation_number' => 'string',
        'creator_id' => 'string',
        'delivery_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'description' => 'string',
        'discount_percentage' => 'float',
        'end_date' => 'int',
        'form_settings_from_distribution_channel' => '\kruegge82\weclapp\Model\DistributionChannel',
        'header_discount' => 'float',
        'header_surcharge' => 'float',
        'invoice_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'non_standard_tax_id' => 'string',
        'order_date' => 'int',
        'order_quantity' => 'float',
        'payment_method_id' => 'string',
        'recipient_country_code' => 'string',
        'record_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'record_comment' => 'string',
        'record_currency_id' => 'string',
        'record_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'record_free_text' => 'string',
        'record_opening' => 'string',
        'reduction_addition_items' => '\kruegge82\weclapp\Model\ReductionAdditionItem[]',
        'releases' => '\kruegge82\weclapp\Model\Releases[]',
        'residual_quantity' => 'float',
        'responsible_user_id' => 'string',
        'sender_country_code' => 'string',
        'sent_to_recipient' => 'bool',
        'shipment_method_id' => 'string',
        'start_date' => 'int',
        'status' => '\kruegge82\weclapp\Model\BlanketPurchaseOrderStatusType',
        'status_history' => '\kruegge82\weclapp\Model\BlanketPurchaseOrderStatusHistory[]',
        'supplier_blanket_purchase_order_number' => 'string',
        'supplier_id' => 'string',
        'supplier_quotation_number' => 'string',
        'tags' => 'string[]',
        'tax_id' => 'string',
        'term_of_payment_id' => 'string',
        'unit_price' => 'float',
        'use_manual_unit_price' => 'bool',
        'warehouse_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'article_id' => null,
        'blanket_purchase_order_number' => null,
        'calculation_mode' => null,
        'comment' => null,
        'commercial_language' => null,
        'confirmation_number' => null,
        'creator_id' => null,
        'delivery_address' => null,
        'description' => 'html',
        'discount_percentage' => 'decimal',
        'end_date' => 'timestamp',
        'form_settings_from_distribution_channel' => null,
        'header_discount' => 'decimal',
        'header_surcharge' => 'decimal',
        'invoice_address' => null,
        'non_standard_tax_id' => null,
        'order_date' => 'timestamp',
        'order_quantity' => 'decimal',
        'payment_method_id' => null,
        'recipient_country_code' => null,
        'record_address' => null,
        'record_comment' => 'html',
        'record_currency_id' => null,
        'record_email_addresses' => null,
        'record_free_text' => 'html',
        'record_opening' => 'html',
        'reduction_addition_items' => null,
        'releases' => null,
        'residual_quantity' => 'decimal',
        'responsible_user_id' => null,
        'sender_country_code' => null,
        'sent_to_recipient' => null,
        'shipment_method_id' => null,
        'start_date' => 'timestamp',
        'status' => null,
        'status_history' => null,
        'supplier_blanket_purchase_order_number' => null,
        'supplier_id' => null,
        'supplier_quotation_number' => null,
        'tags' => null,
        'tax_id' => null,
        'term_of_payment_id' => null,
        'unit_price' => 'decimal',
        'use_manual_unit_price' => null,
        'warehouse_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'article_id' => false,
        'blanket_purchase_order_number' => false,
        'calculation_mode' => false,
        'comment' => false,
        'commercial_language' => false,
        'confirmation_number' => false,
        'creator_id' => false,
        'delivery_address' => false,
        'description' => false,
        'discount_percentage' => false,
        'end_date' => false,
        'form_settings_from_distribution_channel' => false,
        'header_discount' => false,
        'header_surcharge' => false,
        'invoice_address' => false,
        'non_standard_tax_id' => false,
        'order_date' => false,
        'order_quantity' => false,
        'payment_method_id' => false,
        'recipient_country_code' => false,
        'record_address' => false,
        'record_comment' => false,
        'record_currency_id' => false,
        'record_email_addresses' => false,
        'record_free_text' => false,
        'record_opening' => false,
        'reduction_addition_items' => false,
        'releases' => false,
        'residual_quantity' => false,
        'responsible_user_id' => false,
        'sender_country_code' => false,
        'sent_to_recipient' => false,
        'shipment_method_id' => false,
        'start_date' => false,
        'status' => false,
        'status_history' => false,
        'supplier_blanket_purchase_order_number' => false,
        'supplier_id' => false,
        'supplier_quotation_number' => false,
        'tags' => false,
        'tax_id' => false,
        'term_of_payment_id' => false,
        'unit_price' => false,
        'use_manual_unit_price' => false,
        'warehouse_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'article_id' => 'articleId',
        'blanket_purchase_order_number' => 'blanketPurchaseOrderNumber',
        'calculation_mode' => 'calculationMode',
        'comment' => 'comment',
        'commercial_language' => 'commercialLanguage',
        'confirmation_number' => 'confirmationNumber',
        'creator_id' => 'creatorId',
        'delivery_address' => 'deliveryAddress',
        'description' => 'description',
        'discount_percentage' => 'discountPercentage',
        'end_date' => 'endDate',
        'form_settings_from_distribution_channel' => 'formSettingsFromDistributionChannel',
        'header_discount' => 'headerDiscount',
        'header_surcharge' => 'headerSurcharge',
        'invoice_address' => 'invoiceAddress',
        'non_standard_tax_id' => 'nonStandardTaxId',
        'order_date' => 'orderDate',
        'order_quantity' => 'orderQuantity',
        'payment_method_id' => 'paymentMethodId',
        'recipient_country_code' => 'recipientCountryCode',
        'record_address' => 'recordAddress',
        'record_comment' => 'recordComment',
        'record_currency_id' => 'recordCurrencyId',
        'record_email_addresses' => 'recordEmailAddresses',
        'record_free_text' => 'recordFreeText',
        'record_opening' => 'recordOpening',
        'reduction_addition_items' => 'reductionAdditionItems',
        'releases' => 'releases',
        'residual_quantity' => 'residualQuantity',
        'responsible_user_id' => 'responsibleUserId',
        'sender_country_code' => 'senderCountryCode',
        'sent_to_recipient' => 'sentToRecipient',
        'shipment_method_id' => 'shipmentMethodId',
        'start_date' => 'startDate',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'supplier_blanket_purchase_order_number' => 'supplierBlanketPurchaseOrderNumber',
        'supplier_id' => 'supplierId',
        'supplier_quotation_number' => 'supplierQuotationNumber',
        'tags' => 'tags',
        'tax_id' => 'taxId',
        'term_of_payment_id' => 'termOfPaymentId',
        'unit_price' => 'unitPrice',
        'use_manual_unit_price' => 'useManualUnitPrice',
        'warehouse_id' => 'warehouseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'article_id' => 'setArticleId',
        'blanket_purchase_order_number' => 'setBlanketPurchaseOrderNumber',
        'calculation_mode' => 'setCalculationMode',
        'comment' => 'setComment',
        'commercial_language' => 'setCommercialLanguage',
        'confirmation_number' => 'setConfirmationNumber',
        'creator_id' => 'setCreatorId',
        'delivery_address' => 'setDeliveryAddress',
        'description' => 'setDescription',
        'discount_percentage' => 'setDiscountPercentage',
        'end_date' => 'setEndDate',
        'form_settings_from_distribution_channel' => 'setFormSettingsFromDistributionChannel',
        'header_discount' => 'setHeaderDiscount',
        'header_surcharge' => 'setHeaderSurcharge',
        'invoice_address' => 'setInvoiceAddress',
        'non_standard_tax_id' => 'setNonStandardTaxId',
        'order_date' => 'setOrderDate',
        'order_quantity' => 'setOrderQuantity',
        'payment_method_id' => 'setPaymentMethodId',
        'recipient_country_code' => 'setRecipientCountryCode',
        'record_address' => 'setRecordAddress',
        'record_comment' => 'setRecordComment',
        'record_currency_id' => 'setRecordCurrencyId',
        'record_email_addresses' => 'setRecordEmailAddresses',
        'record_free_text' => 'setRecordFreeText',
        'record_opening' => 'setRecordOpening',
        'reduction_addition_items' => 'setReductionAdditionItems',
        'releases' => 'setReleases',
        'residual_quantity' => 'setResidualQuantity',
        'responsible_user_id' => 'setResponsibleUserId',
        'sender_country_code' => 'setSenderCountryCode',
        'sent_to_recipient' => 'setSentToRecipient',
        'shipment_method_id' => 'setShipmentMethodId',
        'start_date' => 'setStartDate',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'supplier_blanket_purchase_order_number' => 'setSupplierBlanketPurchaseOrderNumber',
        'supplier_id' => 'setSupplierId',
        'supplier_quotation_number' => 'setSupplierQuotationNumber',
        'tags' => 'setTags',
        'tax_id' => 'setTaxId',
        'term_of_payment_id' => 'setTermOfPaymentId',
        'unit_price' => 'setUnitPrice',
        'use_manual_unit_price' => 'setUseManualUnitPrice',
        'warehouse_id' => 'setWarehouseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'article_id' => 'getArticleId',
        'blanket_purchase_order_number' => 'getBlanketPurchaseOrderNumber',
        'calculation_mode' => 'getCalculationMode',
        'comment' => 'getComment',
        'commercial_language' => 'getCommercialLanguage',
        'confirmation_number' => 'getConfirmationNumber',
        'creator_id' => 'getCreatorId',
        'delivery_address' => 'getDeliveryAddress',
        'description' => 'getDescription',
        'discount_percentage' => 'getDiscountPercentage',
        'end_date' => 'getEndDate',
        'form_settings_from_distribution_channel' => 'getFormSettingsFromDistributionChannel',
        'header_discount' => 'getHeaderDiscount',
        'header_surcharge' => 'getHeaderSurcharge',
        'invoice_address' => 'getInvoiceAddress',
        'non_standard_tax_id' => 'getNonStandardTaxId',
        'order_date' => 'getOrderDate',
        'order_quantity' => 'getOrderQuantity',
        'payment_method_id' => 'getPaymentMethodId',
        'recipient_country_code' => 'getRecipientCountryCode',
        'record_address' => 'getRecordAddress',
        'record_comment' => 'getRecordComment',
        'record_currency_id' => 'getRecordCurrencyId',
        'record_email_addresses' => 'getRecordEmailAddresses',
        'record_free_text' => 'getRecordFreeText',
        'record_opening' => 'getRecordOpening',
        'reduction_addition_items' => 'getReductionAdditionItems',
        'releases' => 'getReleases',
        'residual_quantity' => 'getResidualQuantity',
        'responsible_user_id' => 'getResponsibleUserId',
        'sender_country_code' => 'getSenderCountryCode',
        'sent_to_recipient' => 'getSentToRecipient',
        'shipment_method_id' => 'getShipmentMethodId',
        'start_date' => 'getStartDate',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'supplier_blanket_purchase_order_number' => 'getSupplierBlanketPurchaseOrderNumber',
        'supplier_id' => 'getSupplierId',
        'supplier_quotation_number' => 'getSupplierQuotationNumber',
        'tags' => 'getTags',
        'tax_id' => 'getTaxId',
        'term_of_payment_id' => 'getTermOfPaymentId',
        'unit_price' => 'getUnitPrice',
        'use_manual_unit_price' => 'getUseManualUnitPrice',
        'warehouse_id' => 'getWarehouseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('blanket_purchase_order_number', $data ?? [], null);
        $this->setIfExists('calculation_mode', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('confirmation_number', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('discount_percentage', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('form_settings_from_distribution_channel', $data ?? [], null);
        $this->setIfExists('header_discount', $data ?? [], null);
        $this->setIfExists('header_surcharge', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('non_standard_tax_id', $data ?? [], null);
        $this->setIfExists('order_date', $data ?? [], null);
        $this->setIfExists('order_quantity', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('recipient_country_code', $data ?? [], null);
        $this->setIfExists('record_address', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_currency_id', $data ?? [], null);
        $this->setIfExists('record_email_addresses', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('reduction_addition_items', $data ?? [], null);
        $this->setIfExists('releases', $data ?? [], null);
        $this->setIfExists('residual_quantity', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('sender_country_code', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('shipment_method_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('supplier_blanket_purchase_order_number', $data ?? [], null);
        $this->setIfExists('supplier_id', $data ?? [], null);
        $this->setIfExists('supplier_quotation_number', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('term_of_payment_id', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('use_manual_unit_price', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['blanket_purchase_order_number']) && (mb_strlen($this->container['blanket_purchase_order_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'blanket_purchase_order_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 512)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['commercial_language']) && (mb_strlen($this->container['commercial_language']) > 255)) {
            $invalidProperties[] = "invalid value for 'commercial_language', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['confirmation_number']) && (mb_strlen($this->container['confirmation_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'confirmation_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['discount_percentage']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['discount_percentage'])) {
            $invalidProperties[] = "invalid value for 'discount_percentage', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['header_discount']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['header_discount'])) {
            $invalidProperties[] = "invalid value for 'header_discount', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['header_surcharge']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['header_surcharge'])) {
            $invalidProperties[] = "invalid value for 'header_surcharge', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['order_quantity']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['order_quantity'])) {
            $invalidProperties[] = "invalid value for 'order_quantity', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['record_comment']) && (mb_strlen($this->container['record_comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_free_text']) && (mb_strlen($this->container['record_free_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_free_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_opening']) && (mb_strlen($this->container['record_opening']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_opening', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['supplier_blanket_purchase_order_number']) && (mb_strlen($this->container['supplier_blanket_purchase_order_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'supplier_blanket_purchase_order_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['supplier_quotation_number']) && (mb_strlen($this->container['supplier_quotation_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'supplier_quotation_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['unit_price']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['unit_price'])) {
            $invalidProperties[] = "invalid value for 'unit_price', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets blanket_purchase_order_number
     *
     * @return string|null
     */
    public function getBlanketPurchaseOrderNumber()
    {
        return $this->container['blanket_purchase_order_number'];
    }

    /**
     * Sets blanket_purchase_order_number
     *
     * @param string|null $blanket_purchase_order_number blanket_purchase_order_number
     *
     * @return self
     */
    public function setBlanketPurchaseOrderNumber($blanket_purchase_order_number)
    {
        if (is_null($blanket_purchase_order_number)) {
            throw new \InvalidArgumentException('non-nullable blanket_purchase_order_number cannot be null');
        }
        if ((mb_strlen($blanket_purchase_order_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $blanket_purchase_order_number when calling BlanketPurchaseOrder., must be smaller than or equal to 30.');
        }

        $this->container['blanket_purchase_order_number'] = $blanket_purchase_order_number;

        return $this;
    }

    /**
     * Gets calculation_mode
     *
     * @return \kruegge82\weclapp\Model\SpecialCalculationMode|null
     */
    public function getCalculationMode()
    {
        return $this->container['calculation_mode'];
    }

    /**
     * Sets calculation_mode
     *
     * @param \kruegge82\weclapp\Model\SpecialCalculationMode|null $calculation_mode calculation_mode
     *
     * @return self
     */
    public function setCalculationMode($calculation_mode)
    {
        if (is_null($calculation_mode)) {
            throw new \InvalidArgumentException('non-nullable calculation_mode cannot be null');
        }
        $this->container['calculation_mode'] = $calculation_mode;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     * @deprecated
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     * @deprecated
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        if ((mb_strlen($comment) > 512)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling BlanketPurchaseOrder., must be smaller than or equal to 512.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        if ((mb_strlen($commercial_language) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commercial_language when calling BlanketPurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets confirmation_number
     *
     * @return string|null
     */
    public function getConfirmationNumber()
    {
        return $this->container['confirmation_number'];
    }

    /**
     * Sets confirmation_number
     *
     * @param string|null $confirmation_number confirmation_number
     *
     * @return self
     */
    public function setConfirmationNumber($confirmation_number)
    {
        if (is_null($confirmation_number)) {
            throw new \InvalidArgumentException('non-nullable confirmation_number cannot be null');
        }
        if ((mb_strlen($confirmation_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $confirmation_number when calling BlanketPurchaseOrder., must be smaller than or equal to 30.');
        }

        $this->container['confirmation_number'] = $confirmation_number;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling BlanketPurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param float|null $discount_percentage discount_percentage
     *
     * @return self
     */
    public function setDiscountPercentage($discount_percentage)
    {
        if (is_null($discount_percentage)) {
            throw new \InvalidArgumentException('non-nullable discount_percentage cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($discount_percentage)))) {
            throw new \InvalidArgumentException("invalid value for \$discount_percentage when calling BlanketPurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return int|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param int|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets form_settings_from_distribution_channel
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel|null
     */
    public function getFormSettingsFromDistributionChannel()
    {
        return $this->container['form_settings_from_distribution_channel'];
    }

    /**
     * Sets form_settings_from_distribution_channel
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel|null $form_settings_from_distribution_channel form_settings_from_distribution_channel
     *
     * @return self
     */
    public function setFormSettingsFromDistributionChannel($form_settings_from_distribution_channel)
    {
        if (is_null($form_settings_from_distribution_channel)) {
            throw new \InvalidArgumentException('non-nullable form_settings_from_distribution_channel cannot be null');
        }
        $this->container['form_settings_from_distribution_channel'] = $form_settings_from_distribution_channel;

        return $this;
    }

    /**
     * Gets header_discount
     *
     * @return float|null
     */
    public function getHeaderDiscount()
    {
        return $this->container['header_discount'];
    }

    /**
     * Sets header_discount
     *
     * @param float|null $header_discount header_discount
     *
     * @return self
     */
    public function setHeaderDiscount($header_discount)
    {
        if (is_null($header_discount)) {
            throw new \InvalidArgumentException('non-nullable header_discount cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($header_discount)))) {
            throw new \InvalidArgumentException("invalid value for \$header_discount when calling BlanketPurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['header_discount'] = $header_discount;

        return $this;
    }

    /**
     * Gets header_surcharge
     *
     * @return float|null
     */
    public function getHeaderSurcharge()
    {
        return $this->container['header_surcharge'];
    }

    /**
     * Sets header_surcharge
     *
     * @param float|null $header_surcharge header_surcharge
     *
     * @return self
     */
    public function setHeaderSurcharge($header_surcharge)
    {
        if (is_null($header_surcharge)) {
            throw new \InvalidArgumentException('non-nullable header_surcharge cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($header_surcharge)))) {
            throw new \InvalidArgumentException("invalid value for \$header_surcharge when calling BlanketPurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['header_surcharge'] = $header_surcharge;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets non_standard_tax_id
     *
     * @return string|null
     */
    public function getNonStandardTaxId()
    {
        return $this->container['non_standard_tax_id'];
    }

    /**
     * Sets non_standard_tax_id
     *
     * @param string|null $non_standard_tax_id non_standard_tax_id
     *
     * @return self
     */
    public function setNonStandardTaxId($non_standard_tax_id)
    {
        if (is_null($non_standard_tax_id)) {
            throw new \InvalidArgumentException('non-nullable non_standard_tax_id cannot be null');
        }
        $this->container['non_standard_tax_id'] = $non_standard_tax_id;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return int|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param int|null $order_date order_date
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        if (is_null($order_date)) {
            throw new \InvalidArgumentException('non-nullable order_date cannot be null');
        }
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return float|null
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param float|null $order_quantity order_quantity
     *
     * @return self
     */
    public function setOrderQuantity($order_quantity)
    {
        if (is_null($order_quantity)) {
            throw new \InvalidArgumentException('non-nullable order_quantity cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($order_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$order_quantity when calling BlanketPurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets recipient_country_code
     *
     * @return string|null
     */
    public function getRecipientCountryCode()
    {
        return $this->container['recipient_country_code'];
    }

    /**
     * Sets recipient_country_code
     *
     * @param string|null $recipient_country_code recipient_country_code
     *
     * @return self
     */
    public function setRecipientCountryCode($recipient_country_code)
    {
        if (is_null($recipient_country_code)) {
            throw new \InvalidArgumentException('non-nullable recipient_country_code cannot be null');
        }
        $this->container['recipient_country_code'] = $recipient_country_code;

        return $this;
    }

    /**
     * Gets record_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getRecordAddress()
    {
        return $this->container['record_address'];
    }

    /**
     * Sets record_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $record_address record_address
     *
     * @return self
     */
    public function setRecordAddress($record_address)
    {
        if (is_null($record_address)) {
            throw new \InvalidArgumentException('non-nullable record_address cannot be null');
        }
        $this->container['record_address'] = $record_address;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        if ((mb_strlen($record_comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_comment when calling BlanketPurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_currency_id
     *
     * @return string|null
     */
    public function getRecordCurrencyId()
    {
        return $this->container['record_currency_id'];
    }

    /**
     * Sets record_currency_id
     *
     * @param string|null $record_currency_id record_currency_id
     *
     * @return self
     */
    public function setRecordCurrencyId($record_currency_id)
    {
        if (is_null($record_currency_id)) {
            throw new \InvalidArgumentException('non-nullable record_currency_id cannot be null');
        }
        $this->container['record_currency_id'] = $record_currency_id;

        return $this;
    }

    /**
     * Gets record_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getRecordEmailAddresses()
    {
        return $this->container['record_email_addresses'];
    }

    /**
     * Sets record_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $record_email_addresses record_email_addresses
     *
     * @return self
     */
    public function setRecordEmailAddresses($record_email_addresses)
    {
        if (is_null($record_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable record_email_addresses cannot be null');
        }
        $this->container['record_email_addresses'] = $record_email_addresses;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        if ((mb_strlen($record_free_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_free_text when calling BlanketPurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        if ((mb_strlen($record_opening) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_opening when calling BlanketPurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets reduction_addition_items
     *
     * @return \kruegge82\weclapp\Model\ReductionAdditionItem[]|null
     */
    public function getReductionAdditionItems()
    {
        return $this->container['reduction_addition_items'];
    }

    /**
     * Sets reduction_addition_items
     *
     * @param \kruegge82\weclapp\Model\ReductionAdditionItem[]|null $reduction_addition_items reduction_addition_items
     *
     * @return self
     */
    public function setReductionAdditionItems($reduction_addition_items)
    {
        if (is_null($reduction_addition_items)) {
            throw new \InvalidArgumentException('non-nullable reduction_addition_items cannot be null');
        }
        $this->container['reduction_addition_items'] = $reduction_addition_items;

        return $this;
    }

    /**
     * Gets releases
     *
     * @return \kruegge82\weclapp\Model\Releases[]|null
     */
    public function getReleases()
    {
        return $this->container['releases'];
    }

    /**
     * Sets releases
     *
     * @param \kruegge82\weclapp\Model\Releases[]|null $releases releases
     *
     * @return self
     */
    public function setReleases($releases)
    {
        if (is_null($releases)) {
            throw new \InvalidArgumentException('non-nullable releases cannot be null');
        }
        $this->container['releases'] = $releases;

        return $this;
    }

    /**
     * Gets residual_quantity
     *
     * @return float|null
     */
    public function getResidualQuantity()
    {
        return $this->container['residual_quantity'];
    }

    /**
     * Sets residual_quantity
     *
     * @param float|null $residual_quantity residual_quantity
     *
     * @return self
     */
    public function setResidualQuantity($residual_quantity)
    {
        if (is_null($residual_quantity)) {
            throw new \InvalidArgumentException('non-nullable residual_quantity cannot be null');
        }
        $this->container['residual_quantity'] = $residual_quantity;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets sender_country_code
     *
     * @return string|null
     */
    public function getSenderCountryCode()
    {
        return $this->container['sender_country_code'];
    }

    /**
     * Sets sender_country_code
     *
     * @param string|null $sender_country_code sender_country_code
     *
     * @return self
     */
    public function setSenderCountryCode($sender_country_code)
    {
        if (is_null($sender_country_code)) {
            throw new \InvalidArgumentException('non-nullable sender_country_code cannot be null');
        }
        $this->container['sender_country_code'] = $sender_country_code;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets shipment_method_id
     *
     * @return string|null
     */
    public function getShipmentMethodId()
    {
        return $this->container['shipment_method_id'];
    }

    /**
     * Sets shipment_method_id
     *
     * @param string|null $shipment_method_id shipment_method_id
     *
     * @return self
     */
    public function setShipmentMethodId($shipment_method_id)
    {
        if (is_null($shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_id cannot be null');
        }
        $this->container['shipment_method_id'] = $shipment_method_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\BlanketPurchaseOrderStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\BlanketPurchaseOrderStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\BlanketPurchaseOrderStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\BlanketPurchaseOrderStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets supplier_blanket_purchase_order_number
     *
     * @return string|null
     */
    public function getSupplierBlanketPurchaseOrderNumber()
    {
        return $this->container['supplier_blanket_purchase_order_number'];
    }

    /**
     * Sets supplier_blanket_purchase_order_number
     *
     * @param string|null $supplier_blanket_purchase_order_number supplier_blanket_purchase_order_number
     *
     * @return self
     */
    public function setSupplierBlanketPurchaseOrderNumber($supplier_blanket_purchase_order_number)
    {
        if (is_null($supplier_blanket_purchase_order_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_blanket_purchase_order_number cannot be null');
        }
        if ((mb_strlen($supplier_blanket_purchase_order_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $supplier_blanket_purchase_order_number when calling BlanketPurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['supplier_blanket_purchase_order_number'] = $supplier_blanket_purchase_order_number;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string|null $supplier_id supplier_id
     *
     * @return self
     */
    public function setSupplierId($supplier_id)
    {
        if (is_null($supplier_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_id cannot be null');
        }
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets supplier_quotation_number
     *
     * @return string|null
     */
    public function getSupplierQuotationNumber()
    {
        return $this->container['supplier_quotation_number'];
    }

    /**
     * Sets supplier_quotation_number
     *
     * @param string|null $supplier_quotation_number supplier_quotation_number
     *
     * @return self
     */
    public function setSupplierQuotationNumber($supplier_quotation_number)
    {
        if (is_null($supplier_quotation_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_quotation_number cannot be null');
        }
        if ((mb_strlen($supplier_quotation_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $supplier_quotation_number when calling BlanketPurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['supplier_quotation_number'] = $supplier_quotation_number;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets term_of_payment_id
     *
     * @return string|null
     */
    public function getTermOfPaymentId()
    {
        return $this->container['term_of_payment_id'];
    }

    /**
     * Sets term_of_payment_id
     *
     * @param string|null $term_of_payment_id term_of_payment_id
     *
     * @return self
     */
    public function setTermOfPaymentId($term_of_payment_id)
    {
        if (is_null($term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_id cannot be null');
        }
        $this->container['term_of_payment_id'] = $term_of_payment_id;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price unit_price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($unit_price)))) {
            throw new \InvalidArgumentException("invalid value for \$unit_price when calling BlanketPurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets use_manual_unit_price
     *
     * @return bool|null
     */
    public function getUseManualUnitPrice()
    {
        return $this->container['use_manual_unit_price'];
    }

    /**
     * Sets use_manual_unit_price
     *
     * @param bool|null $use_manual_unit_price use_manual_unit_price
     *
     * @return self
     */
    public function setUseManualUnitPrice($use_manual_unit_price)
    {
        if (is_null($use_manual_unit_price)) {
            throw new \InvalidArgumentException('non-nullable use_manual_unit_price cannot be null');
        }
        $this->container['use_manual_unit_price'] = $use_manual_unit_price;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


