<?php
/**
 * AccountingTransaction
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * AccountingTransaction Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountingTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'accountingTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'accounting_import_date' => 'int',
        'conversion_rate' => 'float',
        'conversion_rate_date' => 'int',
        'currency_id' => 'string',
        'currency_name' => 'string',
        'draft' => 'bool',
        'external_record_number' => 'string',
        'internal_record_number' => 'string',
        'reverse_transaction' => 'bool',
        'status' => '\kruegge82\weclapp\Model\AccountingTransactionStatus',
        'transaction_date' => 'int',
        'transaction_details' => '\kruegge82\weclapp\Model\AccountingTransactionDetail[]',
        'transaction_establish_date' => 'int',
        'transaction_number' => 'string',
        'type' => '\kruegge82\weclapp\Model\BookingType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'accounting_import_date' => 'timestamp',
        'conversion_rate' => 'decimal',
        'conversion_rate_date' => 'timestamp',
        'currency_id' => null,
        'currency_name' => null,
        'draft' => null,
        'external_record_number' => null,
        'internal_record_number' => null,
        'reverse_transaction' => null,
        'status' => null,
        'transaction_date' => 'timestamp',
        'transaction_details' => null,
        'transaction_establish_date' => 'timestamp',
        'transaction_number' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'accounting_import_date' => false,
        'conversion_rate' => false,
        'conversion_rate_date' => false,
        'currency_id' => false,
        'currency_name' => false,
        'draft' => false,
        'external_record_number' => false,
        'internal_record_number' => false,
        'reverse_transaction' => false,
        'status' => false,
        'transaction_date' => false,
        'transaction_details' => false,
        'transaction_establish_date' => false,
        'transaction_number' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'accounting_import_date' => 'accountingImportDate',
        'conversion_rate' => 'conversionRate',
        'conversion_rate_date' => 'conversionRateDate',
        'currency_id' => 'currencyId',
        'currency_name' => 'currencyName',
        'draft' => 'draft',
        'external_record_number' => 'externalRecordNumber',
        'internal_record_number' => 'internalRecordNumber',
        'reverse_transaction' => 'reverseTransaction',
        'status' => 'status',
        'transaction_date' => 'transactionDate',
        'transaction_details' => 'transactionDetails',
        'transaction_establish_date' => 'transactionEstablishDate',
        'transaction_number' => 'transactionNumber',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'accounting_import_date' => 'setAccountingImportDate',
        'conversion_rate' => 'setConversionRate',
        'conversion_rate_date' => 'setConversionRateDate',
        'currency_id' => 'setCurrencyId',
        'currency_name' => 'setCurrencyName',
        'draft' => 'setDraft',
        'external_record_number' => 'setExternalRecordNumber',
        'internal_record_number' => 'setInternalRecordNumber',
        'reverse_transaction' => 'setReverseTransaction',
        'status' => 'setStatus',
        'transaction_date' => 'setTransactionDate',
        'transaction_details' => 'setTransactionDetails',
        'transaction_establish_date' => 'setTransactionEstablishDate',
        'transaction_number' => 'setTransactionNumber',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'accounting_import_date' => 'getAccountingImportDate',
        'conversion_rate' => 'getConversionRate',
        'conversion_rate_date' => 'getConversionRateDate',
        'currency_id' => 'getCurrencyId',
        'currency_name' => 'getCurrencyName',
        'draft' => 'getDraft',
        'external_record_number' => 'getExternalRecordNumber',
        'internal_record_number' => 'getInternalRecordNumber',
        'reverse_transaction' => 'getReverseTransaction',
        'status' => 'getStatus',
        'transaction_date' => 'getTransactionDate',
        'transaction_details' => 'getTransactionDetails',
        'transaction_establish_date' => 'getTransactionEstablishDate',
        'transaction_number' => 'getTransactionNumber',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('accounting_import_date', $data ?? [], null);
        $this->setIfExists('conversion_rate', $data ?? [], null);
        $this->setIfExists('conversion_rate_date', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('currency_name', $data ?? [], null);
        $this->setIfExists('draft', $data ?? [], null);
        $this->setIfExists('external_record_number', $data ?? [], null);
        $this->setIfExists('internal_record_number', $data ?? [], null);
        $this->setIfExists('reverse_transaction', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('transaction_details', $data ?? [], null);
        $this->setIfExists('transaction_establish_date', $data ?? [], null);
        $this->setIfExists('transaction_number', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['conversion_rate']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['conversion_rate'])) {
            $invalidProperties[] = "invalid value for 'conversion_rate', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['external_record_number']) && (mb_strlen($this->container['external_record_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'external_record_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['internal_record_number']) && (mb_strlen($this->container['internal_record_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'internal_record_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['transaction_number']) && (mb_strlen($this->container['transaction_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'transaction_number', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets accounting_import_date
     *
     * @return int|null
     */
    public function getAccountingImportDate()
    {
        return $this->container['accounting_import_date'];
    }

    /**
     * Sets accounting_import_date
     *
     * @param int|null $accounting_import_date accounting_import_date
     *
     * @return self
     */
    public function setAccountingImportDate($accounting_import_date)
    {
        if (is_null($accounting_import_date)) {
            throw new \InvalidArgumentException('non-nullable accounting_import_date cannot be null');
        }
        $this->container['accounting_import_date'] = $accounting_import_date;

        return $this;
    }

    /**
     * Gets conversion_rate
     *
     * @return float|null
     */
    public function getConversionRate()
    {
        return $this->container['conversion_rate'];
    }

    /**
     * Sets conversion_rate
     *
     * @param float|null $conversion_rate conversion_rate
     *
     * @return self
     */
    public function setConversionRate($conversion_rate)
    {
        if (is_null($conversion_rate)) {
            throw new \InvalidArgumentException('non-nullable conversion_rate cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($conversion_rate)))) {
            throw new \InvalidArgumentException("invalid value for \$conversion_rate when calling AccountingTransaction., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['conversion_rate'] = $conversion_rate;

        return $this;
    }

    /**
     * Gets conversion_rate_date
     *
     * @return int|null
     */
    public function getConversionRateDate()
    {
        return $this->container['conversion_rate_date'];
    }

    /**
     * Sets conversion_rate_date
     *
     * @param int|null $conversion_rate_date conversion_rate_date
     *
     * @return self
     */
    public function setConversionRateDate($conversion_rate_date)
    {
        if (is_null($conversion_rate_date)) {
            throw new \InvalidArgumentException('non-nullable conversion_rate_date cannot be null');
        }
        $this->container['conversion_rate_date'] = $conversion_rate_date;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            throw new \InvalidArgumentException('non-nullable currency_id cannot be null');
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_name
     *
     * @return string|null
     * @deprecated
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     *
     * @param string|null $currency_name currency_name
     *
     * @return self
     * @deprecated
     */
    public function setCurrencyName($currency_name)
    {
        if (is_null($currency_name)) {
            throw new \InvalidArgumentException('non-nullable currency_name cannot be null');
        }
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return bool|null
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param bool|null $draft draft
     *
     * @return self
     */
    public function setDraft($draft)
    {
        if (is_null($draft)) {
            throw new \InvalidArgumentException('non-nullable draft cannot be null');
        }
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets external_record_number
     *
     * @return string|null
     */
    public function getExternalRecordNumber()
    {
        return $this->container['external_record_number'];
    }

    /**
     * Sets external_record_number
     *
     * @param string|null $external_record_number external_record_number
     *
     * @return self
     */
    public function setExternalRecordNumber($external_record_number)
    {
        if (is_null($external_record_number)) {
            throw new \InvalidArgumentException('non-nullable external_record_number cannot be null');
        }
        if ((mb_strlen($external_record_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $external_record_number when calling AccountingTransaction., must be smaller than or equal to 1000.');
        }

        $this->container['external_record_number'] = $external_record_number;

        return $this;
    }

    /**
     * Gets internal_record_number
     *
     * @return string|null
     */
    public function getInternalRecordNumber()
    {
        return $this->container['internal_record_number'];
    }

    /**
     * Sets internal_record_number
     *
     * @param string|null $internal_record_number internal_record_number
     *
     * @return self
     */
    public function setInternalRecordNumber($internal_record_number)
    {
        if (is_null($internal_record_number)) {
            throw new \InvalidArgumentException('non-nullable internal_record_number cannot be null');
        }
        if ((mb_strlen($internal_record_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $internal_record_number when calling AccountingTransaction., must be smaller than or equal to 1000.');
        }

        $this->container['internal_record_number'] = $internal_record_number;

        return $this;
    }

    /**
     * Gets reverse_transaction
     *
     * @return bool|null
     */
    public function getReverseTransaction()
    {
        return $this->container['reverse_transaction'];
    }

    /**
     * Sets reverse_transaction
     *
     * @param bool|null $reverse_transaction reverse_transaction
     *
     * @return self
     */
    public function setReverseTransaction($reverse_transaction)
    {
        if (is_null($reverse_transaction)) {
            throw new \InvalidArgumentException('non-nullable reverse_transaction cannot be null');
        }
        $this->container['reverse_transaction'] = $reverse_transaction;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\AccountingTransactionStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\AccountingTransactionStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return int|null
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param int|null $transaction_date transaction_date
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets transaction_details
     *
     * @return \kruegge82\weclapp\Model\AccountingTransactionDetail[]|null
     */
    public function getTransactionDetails()
    {
        return $this->container['transaction_details'];
    }

    /**
     * Sets transaction_details
     *
     * @param \kruegge82\weclapp\Model\AccountingTransactionDetail[]|null $transaction_details transaction_details
     *
     * @return self
     */
    public function setTransactionDetails($transaction_details)
    {
        if (is_null($transaction_details)) {
            throw new \InvalidArgumentException('non-nullable transaction_details cannot be null');
        }
        $this->container['transaction_details'] = $transaction_details;

        return $this;
    }

    /**
     * Gets transaction_establish_date
     *
     * @return int|null
     */
    public function getTransactionEstablishDate()
    {
        return $this->container['transaction_establish_date'];
    }

    /**
     * Sets transaction_establish_date
     *
     * @param int|null $transaction_establish_date transaction_establish_date
     *
     * @return self
     */
    public function setTransactionEstablishDate($transaction_establish_date)
    {
        if (is_null($transaction_establish_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_establish_date cannot be null');
        }
        $this->container['transaction_establish_date'] = $transaction_establish_date;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string|null
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string|null $transaction_number transaction_number
     *
     * @return self
     */
    public function setTransactionNumber($transaction_number)
    {
        if (is_null($transaction_number)) {
            throw new \InvalidArgumentException('non-nullable transaction_number cannot be null');
        }
        if ((mb_strlen($transaction_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $transaction_number when calling AccountingTransaction., must be smaller than or equal to 255.');
        }

        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \kruegge82\weclapp\Model\BookingType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \kruegge82\weclapp\Model\BookingType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


