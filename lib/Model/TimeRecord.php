<?php
/**
 * TimeRecord
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * TimeRecord Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'timeRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'article_id' => 'string',
        'billable' => 'bool',
        'billable_duration_seconds' => 'int',
        'billable_invoice_status' => '\kruegge82\weclapp\Model\BillableInvoiceStatus',
        'customer_id' => 'string',
        'description' => 'string',
        'duration_seconds' => 'int',
        'external_connection_source_id' => 'string',
        'hourly_rate' => 'float',
        'performance_recorded_status' => '\kruegge82\weclapp\Model\PerformanceRecordedStatus',
        'place_of_service_id' => 'string',
        'print_on_performance_record' => 'bool',
        'project_id' => 'string',
        'project_task_id' => 'string',
        'sales_invoice_id' => 'string',
        'sales_order_id' => 'string',
        'sales_order_ticket_id' => 'string',
        'service_quota_id' => 'string',
        'start_date' => 'int',
        'task_id' => 'string',
        'ticket_id' => 'string',
        'time_record_source' => '\kruegge82\weclapp\Model\TimeRecordSource',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'article_id' => null,
        'billable' => null,
        'billable_duration_seconds' => 'int64',
        'billable_invoice_status' => null,
        'customer_id' => null,
        'description' => null,
        'duration_seconds' => 'int64',
        'external_connection_source_id' => null,
        'hourly_rate' => 'decimal',
        'performance_recorded_status' => null,
        'place_of_service_id' => null,
        'print_on_performance_record' => null,
        'project_id' => null,
        'project_task_id' => null,
        'sales_invoice_id' => null,
        'sales_order_id' => null,
        'sales_order_ticket_id' => null,
        'service_quota_id' => null,
        'start_date' => 'timestamp',
        'task_id' => null,
        'ticket_id' => null,
        'time_record_source' => null,
        'user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'article_id' => false,
        'billable' => false,
        'billable_duration_seconds' => false,
        'billable_invoice_status' => false,
        'customer_id' => false,
        'description' => false,
        'duration_seconds' => false,
        'external_connection_source_id' => false,
        'hourly_rate' => false,
        'performance_recorded_status' => false,
        'place_of_service_id' => false,
        'print_on_performance_record' => false,
        'project_id' => false,
        'project_task_id' => false,
        'sales_invoice_id' => false,
        'sales_order_id' => false,
        'sales_order_ticket_id' => false,
        'service_quota_id' => false,
        'start_date' => false,
        'task_id' => false,
        'ticket_id' => false,
        'time_record_source' => false,
        'user_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'article_id' => 'articleId',
        'billable' => 'billable',
        'billable_duration_seconds' => 'billableDurationSeconds',
        'billable_invoice_status' => 'billableInvoiceStatus',
        'customer_id' => 'customerId',
        'description' => 'description',
        'duration_seconds' => 'durationSeconds',
        'external_connection_source_id' => 'externalConnectionSourceId',
        'hourly_rate' => 'hourlyRate',
        'performance_recorded_status' => 'performanceRecordedStatus',
        'place_of_service_id' => 'placeOfServiceId',
        'print_on_performance_record' => 'printOnPerformanceRecord',
        'project_id' => 'projectId',
        'project_task_id' => 'projectTaskId',
        'sales_invoice_id' => 'salesInvoiceId',
        'sales_order_id' => 'salesOrderId',
        'sales_order_ticket_id' => 'salesOrderTicketId',
        'service_quota_id' => 'serviceQuotaId',
        'start_date' => 'startDate',
        'task_id' => 'taskId',
        'ticket_id' => 'ticketId',
        'time_record_source' => 'timeRecordSource',
        'user_id' => 'userId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'article_id' => 'setArticleId',
        'billable' => 'setBillable',
        'billable_duration_seconds' => 'setBillableDurationSeconds',
        'billable_invoice_status' => 'setBillableInvoiceStatus',
        'customer_id' => 'setCustomerId',
        'description' => 'setDescription',
        'duration_seconds' => 'setDurationSeconds',
        'external_connection_source_id' => 'setExternalConnectionSourceId',
        'hourly_rate' => 'setHourlyRate',
        'performance_recorded_status' => 'setPerformanceRecordedStatus',
        'place_of_service_id' => 'setPlaceOfServiceId',
        'print_on_performance_record' => 'setPrintOnPerformanceRecord',
        'project_id' => 'setProjectId',
        'project_task_id' => 'setProjectTaskId',
        'sales_invoice_id' => 'setSalesInvoiceId',
        'sales_order_id' => 'setSalesOrderId',
        'sales_order_ticket_id' => 'setSalesOrderTicketId',
        'service_quota_id' => 'setServiceQuotaId',
        'start_date' => 'setStartDate',
        'task_id' => 'setTaskId',
        'ticket_id' => 'setTicketId',
        'time_record_source' => 'setTimeRecordSource',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'article_id' => 'getArticleId',
        'billable' => 'getBillable',
        'billable_duration_seconds' => 'getBillableDurationSeconds',
        'billable_invoice_status' => 'getBillableInvoiceStatus',
        'customer_id' => 'getCustomerId',
        'description' => 'getDescription',
        'duration_seconds' => 'getDurationSeconds',
        'external_connection_source_id' => 'getExternalConnectionSourceId',
        'hourly_rate' => 'getHourlyRate',
        'performance_recorded_status' => 'getPerformanceRecordedStatus',
        'place_of_service_id' => 'getPlaceOfServiceId',
        'print_on_performance_record' => 'getPrintOnPerformanceRecord',
        'project_id' => 'getProjectId',
        'project_task_id' => 'getProjectTaskId',
        'sales_invoice_id' => 'getSalesInvoiceId',
        'sales_order_id' => 'getSalesOrderId',
        'sales_order_ticket_id' => 'getSalesOrderTicketId',
        'service_quota_id' => 'getServiceQuotaId',
        'start_date' => 'getStartDate',
        'task_id' => 'getTaskId',
        'ticket_id' => 'getTicketId',
        'time_record_source' => 'getTimeRecordSource',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('billable', $data ?? [], null);
        $this->setIfExists('billable_duration_seconds', $data ?? [], null);
        $this->setIfExists('billable_invoice_status', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('duration_seconds', $data ?? [], null);
        $this->setIfExists('external_connection_source_id', $data ?? [], null);
        $this->setIfExists('hourly_rate', $data ?? [], null);
        $this->setIfExists('performance_recorded_status', $data ?? [], null);
        $this->setIfExists('place_of_service_id', $data ?? [], null);
        $this->setIfExists('print_on_performance_record', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('project_task_id', $data ?? [], null);
        $this->setIfExists('sales_invoice_id', $data ?? [], null);
        $this->setIfExists('sales_order_id', $data ?? [], null);
        $this->setIfExists('sales_order_ticket_id', $data ?? [], null);
        $this->setIfExists('service_quota_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('task_id', $data ?? [], null);
        $this->setIfExists('ticket_id', $data ?? [], null);
        $this->setIfExists('time_record_source', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['external_connection_source_id']) && (mb_strlen($this->container['external_connection_source_id']) > 1000)) {
            $invalidProperties[] = "invalid value for 'external_connection_source_id', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['hourly_rate']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['hourly_rate'])) {
            $invalidProperties[] = "invalid value for 'hourly_rate', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return bool|null
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param bool|null $billable billable
     *
     * @return self
     */
    public function setBillable($billable)
    {
        if (is_null($billable)) {
            throw new \InvalidArgumentException('non-nullable billable cannot be null');
        }
        $this->container['billable'] = $billable;

        return $this;
    }

    /**
     * Gets billable_duration_seconds
     *
     * @return int|null
     */
    public function getBillableDurationSeconds()
    {
        return $this->container['billable_duration_seconds'];
    }

    /**
     * Sets billable_duration_seconds
     *
     * @param int|null $billable_duration_seconds billable_duration_seconds
     *
     * @return self
     */
    public function setBillableDurationSeconds($billable_duration_seconds)
    {
        if (is_null($billable_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable billable_duration_seconds cannot be null');
        }
        $this->container['billable_duration_seconds'] = $billable_duration_seconds;

        return $this;
    }

    /**
     * Gets billable_invoice_status
     *
     * @return \kruegge82\weclapp\Model\BillableInvoiceStatus|null
     */
    public function getBillableInvoiceStatus()
    {
        return $this->container['billable_invoice_status'];
    }

    /**
     * Sets billable_invoice_status
     *
     * @param \kruegge82\weclapp\Model\BillableInvoiceStatus|null $billable_invoice_status billable_invoice_status
     *
     * @return self
     */
    public function setBillableInvoiceStatus($billable_invoice_status)
    {
        if (is_null($billable_invoice_status)) {
            throw new \InvalidArgumentException('non-nullable billable_invoice_status cannot be null');
        }
        $this->container['billable_invoice_status'] = $billable_invoice_status;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets duration_seconds
     *
     * @return int|null
     */
    public function getDurationSeconds()
    {
        return $this->container['duration_seconds'];
    }

    /**
     * Sets duration_seconds
     *
     * @param int|null $duration_seconds duration_seconds
     *
     * @return self
     */
    public function setDurationSeconds($duration_seconds)
    {
        if (is_null($duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable duration_seconds cannot be null');
        }
        $this->container['duration_seconds'] = $duration_seconds;

        return $this;
    }

    /**
     * Gets external_connection_source_id
     *
     * @return string|null
     */
    public function getExternalConnectionSourceId()
    {
        return $this->container['external_connection_source_id'];
    }

    /**
     * Sets external_connection_source_id
     *
     * @param string|null $external_connection_source_id external_connection_source_id
     *
     * @return self
     */
    public function setExternalConnectionSourceId($external_connection_source_id)
    {
        if (is_null($external_connection_source_id)) {
            throw new \InvalidArgumentException('non-nullable external_connection_source_id cannot be null');
        }
        if ((mb_strlen($external_connection_source_id) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $external_connection_source_id when calling TimeRecord., must be smaller than or equal to 1000.');
        }

        $this->container['external_connection_source_id'] = $external_connection_source_id;

        return $this;
    }

    /**
     * Gets hourly_rate
     *
     * @return float|null
     */
    public function getHourlyRate()
    {
        return $this->container['hourly_rate'];
    }

    /**
     * Sets hourly_rate
     *
     * @param float|null $hourly_rate hourly_rate
     *
     * @return self
     */
    public function setHourlyRate($hourly_rate)
    {
        if (is_null($hourly_rate)) {
            throw new \InvalidArgumentException('non-nullable hourly_rate cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($hourly_rate)))) {
            throw new \InvalidArgumentException("invalid value for \$hourly_rate when calling TimeRecord., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['hourly_rate'] = $hourly_rate;

        return $this;
    }

    /**
     * Gets performance_recorded_status
     *
     * @return \kruegge82\weclapp\Model\PerformanceRecordedStatus|null
     */
    public function getPerformanceRecordedStatus()
    {
        return $this->container['performance_recorded_status'];
    }

    /**
     * Sets performance_recorded_status
     *
     * @param \kruegge82\weclapp\Model\PerformanceRecordedStatus|null $performance_recorded_status performance_recorded_status
     *
     * @return self
     */
    public function setPerformanceRecordedStatus($performance_recorded_status)
    {
        if (is_null($performance_recorded_status)) {
            throw new \InvalidArgumentException('non-nullable performance_recorded_status cannot be null');
        }
        $this->container['performance_recorded_status'] = $performance_recorded_status;

        return $this;
    }

    /**
     * Gets place_of_service_id
     *
     * @return string|null
     */
    public function getPlaceOfServiceId()
    {
        return $this->container['place_of_service_id'];
    }

    /**
     * Sets place_of_service_id
     *
     * @param string|null $place_of_service_id place_of_service_id
     *
     * @return self
     */
    public function setPlaceOfServiceId($place_of_service_id)
    {
        if (is_null($place_of_service_id)) {
            throw new \InvalidArgumentException('non-nullable place_of_service_id cannot be null');
        }
        $this->container['place_of_service_id'] = $place_of_service_id;

        return $this;
    }

    /**
     * Gets print_on_performance_record
     *
     * @return bool|null
     */
    public function getPrintOnPerformanceRecord()
    {
        return $this->container['print_on_performance_record'];
    }

    /**
     * Sets print_on_performance_record
     *
     * @param bool|null $print_on_performance_record print_on_performance_record
     *
     * @return self
     */
    public function setPrintOnPerformanceRecord($print_on_performance_record)
    {
        if (is_null($print_on_performance_record)) {
            throw new \InvalidArgumentException('non-nullable print_on_performance_record cannot be null');
        }
        $this->container['print_on_performance_record'] = $print_on_performance_record;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_task_id
     *
     * @return string|null
     */
    public function getProjectTaskId()
    {
        return $this->container['project_task_id'];
    }

    /**
     * Sets project_task_id
     *
     * @param string|null $project_task_id project_task_id
     *
     * @return self
     */
    public function setProjectTaskId($project_task_id)
    {
        if (is_null($project_task_id)) {
            throw new \InvalidArgumentException('non-nullable project_task_id cannot be null');
        }
        $this->container['project_task_id'] = $project_task_id;

        return $this;
    }

    /**
     * Gets sales_invoice_id
     *
     * @return string|null
     */
    public function getSalesInvoiceId()
    {
        return $this->container['sales_invoice_id'];
    }

    /**
     * Sets sales_invoice_id
     *
     * @param string|null $sales_invoice_id sales_invoice_id
     *
     * @return self
     */
    public function setSalesInvoiceId($sales_invoice_id)
    {
        if (is_null($sales_invoice_id)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_id cannot be null');
        }
        $this->container['sales_invoice_id'] = $sales_invoice_id;

        return $this;
    }

    /**
     * Gets sales_order_id
     *
     * @return string|null
     */
    public function getSalesOrderId()
    {
        return $this->container['sales_order_id'];
    }

    /**
     * Sets sales_order_id
     *
     * @param string|null $sales_order_id sales_order_id
     *
     * @return self
     */
    public function setSalesOrderId($sales_order_id)
    {
        if (is_null($sales_order_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_id cannot be null');
        }
        $this->container['sales_order_id'] = $sales_order_id;

        return $this;
    }

    /**
     * Gets sales_order_ticket_id
     *
     * @return string|null
     */
    public function getSalesOrderTicketId()
    {
        return $this->container['sales_order_ticket_id'];
    }

    /**
     * Sets sales_order_ticket_id
     *
     * @param string|null $sales_order_ticket_id sales_order_ticket_id
     *
     * @return self
     */
    public function setSalesOrderTicketId($sales_order_ticket_id)
    {
        if (is_null($sales_order_ticket_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_ticket_id cannot be null');
        }
        $this->container['sales_order_ticket_id'] = $sales_order_ticket_id;

        return $this;
    }

    /**
     * Gets service_quota_id
     *
     * @return string|null
     */
    public function getServiceQuotaId()
    {
        return $this->container['service_quota_id'];
    }

    /**
     * Sets service_quota_id
     *
     * @param string|null $service_quota_id service_quota_id
     *
     * @return self
     */
    public function setServiceQuotaId($service_quota_id)
    {
        if (is_null($service_quota_id)) {
            throw new \InvalidArgumentException('non-nullable service_quota_id cannot be null');
        }
        $this->container['service_quota_id'] = $service_quota_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string|null
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string|null $task_id task_id
     *
     * @return self
     */
    public function setTaskId($task_id)
    {
        if (is_null($task_id)) {
            throw new \InvalidArgumentException('non-nullable task_id cannot be null');
        }
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets ticket_id
     *
     * @return string|null
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     *
     * @param string|null $ticket_id ticket_id
     *
     * @return self
     */
    public function setTicketId($ticket_id)
    {
        if (is_null($ticket_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_id cannot be null');
        }
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets time_record_source
     *
     * @return \kruegge82\weclapp\Model\TimeRecordSource|null
     */
    public function getTimeRecordSource()
    {
        return $this->container['time_record_source'];
    }

    /**
     * Sets time_record_source
     *
     * @param \kruegge82\weclapp\Model\TimeRecordSource|null $time_record_source time_record_source
     *
     * @return self
     */
    public function setTimeRecordSource($time_record_source)
    {
        if (is_null($time_record_source)) {
            throw new \InvalidArgumentException('non-nullable time_record_source cannot be null');
        }
        $this->container['time_record_source'] = $time_record_source;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


