<?php
/**
 * Parcel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Parcel Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Parcel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'parcel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'declared_value_amount' => 'float',
        'declared_value_currency_id' => 'string',
        'dhl_go_green_plus_service' => 'bool',
        'dhl_postal_delivered_duty_paid_service' => 'bool',
        'dhl_premium_international_service' => 'bool',
        'height' => 'int',
        'length' => 'int',
        'position_number' => 'int',
        'reference' => 'string',
        'saturday_delivery' => 'bool',
        'shipping_carrier_addition' => 'string',
        'shipping_carrier_id' => 'string',
        'shipping_labels_count' => 'int',
        'tracking_id' => 'string',
        'tracking_url' => 'string',
        'use_delivery_date_as_preferred_delivery_date' => 'bool',
        'weight' => 'float',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'declared_value_amount' => 'decimal',
        'declared_value_currency_id' => null,
        'dhl_go_green_plus_service' => null,
        'dhl_postal_delivered_duty_paid_service' => null,
        'dhl_premium_international_service' => null,
        'height' => 'int32',
        'length' => 'int32',
        'position_number' => 'int32',
        'reference' => null,
        'saturday_delivery' => null,
        'shipping_carrier_addition' => null,
        'shipping_carrier_id' => null,
        'shipping_labels_count' => 'int32',
        'tracking_id' => null,
        'tracking_url' => null,
        'use_delivery_date_as_preferred_delivery_date' => null,
        'weight' => 'decimal',
        'width' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'declared_value_amount' => false,
        'declared_value_currency_id' => false,
        'dhl_go_green_plus_service' => false,
        'dhl_postal_delivered_duty_paid_service' => false,
        'dhl_premium_international_service' => false,
        'height' => false,
        'length' => false,
        'position_number' => false,
        'reference' => false,
        'saturday_delivery' => false,
        'shipping_carrier_addition' => false,
        'shipping_carrier_id' => false,
        'shipping_labels_count' => false,
        'tracking_id' => false,
        'tracking_url' => false,
        'use_delivery_date_as_preferred_delivery_date' => false,
        'weight' => false,
        'width' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'declared_value_amount' => 'declaredValueAmount',
        'declared_value_currency_id' => 'declaredValueCurrencyId',
        'dhl_go_green_plus_service' => 'dhlGoGreenPlusService',
        'dhl_postal_delivered_duty_paid_service' => 'dhlPostalDeliveredDutyPaidService',
        'dhl_premium_international_service' => 'dhlPremiumInternationalService',
        'height' => 'height',
        'length' => 'length',
        'position_number' => 'positionNumber',
        'reference' => 'reference',
        'saturday_delivery' => 'saturdayDelivery',
        'shipping_carrier_addition' => 'shippingCarrierAddition',
        'shipping_carrier_id' => 'shippingCarrierId',
        'shipping_labels_count' => 'shippingLabelsCount',
        'tracking_id' => 'trackingId',
        'tracking_url' => 'trackingUrl',
        'use_delivery_date_as_preferred_delivery_date' => 'useDeliveryDateAsPreferredDeliveryDate',
        'weight' => 'weight',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'declared_value_amount' => 'setDeclaredValueAmount',
        'declared_value_currency_id' => 'setDeclaredValueCurrencyId',
        'dhl_go_green_plus_service' => 'setDhlGoGreenPlusService',
        'dhl_postal_delivered_duty_paid_service' => 'setDhlPostalDeliveredDutyPaidService',
        'dhl_premium_international_service' => 'setDhlPremiumInternationalService',
        'height' => 'setHeight',
        'length' => 'setLength',
        'position_number' => 'setPositionNumber',
        'reference' => 'setReference',
        'saturday_delivery' => 'setSaturdayDelivery',
        'shipping_carrier_addition' => 'setShippingCarrierAddition',
        'shipping_carrier_id' => 'setShippingCarrierId',
        'shipping_labels_count' => 'setShippingLabelsCount',
        'tracking_id' => 'setTrackingId',
        'tracking_url' => 'setTrackingUrl',
        'use_delivery_date_as_preferred_delivery_date' => 'setUseDeliveryDateAsPreferredDeliveryDate',
        'weight' => 'setWeight',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'declared_value_amount' => 'getDeclaredValueAmount',
        'declared_value_currency_id' => 'getDeclaredValueCurrencyId',
        'dhl_go_green_plus_service' => 'getDhlGoGreenPlusService',
        'dhl_postal_delivered_duty_paid_service' => 'getDhlPostalDeliveredDutyPaidService',
        'dhl_premium_international_service' => 'getDhlPremiumInternationalService',
        'height' => 'getHeight',
        'length' => 'getLength',
        'position_number' => 'getPositionNumber',
        'reference' => 'getReference',
        'saturday_delivery' => 'getSaturdayDelivery',
        'shipping_carrier_addition' => 'getShippingCarrierAddition',
        'shipping_carrier_id' => 'getShippingCarrierId',
        'shipping_labels_count' => 'getShippingLabelsCount',
        'tracking_id' => 'getTrackingId',
        'tracking_url' => 'getTrackingUrl',
        'use_delivery_date_as_preferred_delivery_date' => 'getUseDeliveryDateAsPreferredDeliveryDate',
        'weight' => 'getWeight',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('declared_value_amount', $data ?? [], null);
        $this->setIfExists('declared_value_currency_id', $data ?? [], null);
        $this->setIfExists('dhl_go_green_plus_service', $data ?? [], null);
        $this->setIfExists('dhl_postal_delivered_duty_paid_service', $data ?? [], null);
        $this->setIfExists('dhl_premium_international_service', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('saturday_delivery', $data ?? [], null);
        $this->setIfExists('shipping_carrier_addition', $data ?? [], null);
        $this->setIfExists('shipping_carrier_id', $data ?? [], null);
        $this->setIfExists('shipping_labels_count', $data ?? [], null);
        $this->setIfExists('tracking_id', $data ?? [], null);
        $this->setIfExists('tracking_url', $data ?? [], null);
        $this->setIfExists('use_delivery_date_as_preferred_delivery_date', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['declared_value_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['declared_value_amount'])) {
            $invalidProperties[] = "invalid value for 'declared_value_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['shipping_carrier_addition']) && (mb_strlen($this->container['shipping_carrier_addition']) > 255)) {
            $invalidProperties[] = "invalid value for 'shipping_carrier_addition', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tracking_id']) && (mb_strlen($this->container['tracking_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'tracking_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tracking_url']) && (mb_strlen($this->container['tracking_url']) > 1000)) {
            $invalidProperties[] = "invalid value for 'tracking_url', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['weight']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['weight'])) {
            $invalidProperties[] = "invalid value for 'weight', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets declared_value_amount
     *
     * @return float|null
     */
    public function getDeclaredValueAmount()
    {
        return $this->container['declared_value_amount'];
    }

    /**
     * Sets declared_value_amount
     *
     * @param float|null $declared_value_amount declared_value_amount
     *
     * @return self
     */
    public function setDeclaredValueAmount($declared_value_amount)
    {
        if (is_null($declared_value_amount)) {
            throw new \InvalidArgumentException('non-nullable declared_value_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($declared_value_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$declared_value_amount when calling Parcel., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['declared_value_amount'] = $declared_value_amount;

        return $this;
    }

    /**
     * Gets declared_value_currency_id
     *
     * @return string|null
     */
    public function getDeclaredValueCurrencyId()
    {
        return $this->container['declared_value_currency_id'];
    }

    /**
     * Sets declared_value_currency_id
     *
     * @param string|null $declared_value_currency_id declared_value_currency_id
     *
     * @return self
     */
    public function setDeclaredValueCurrencyId($declared_value_currency_id)
    {
        if (is_null($declared_value_currency_id)) {
            throw new \InvalidArgumentException('non-nullable declared_value_currency_id cannot be null');
        }
        $this->container['declared_value_currency_id'] = $declared_value_currency_id;

        return $this;
    }

    /**
     * Gets dhl_go_green_plus_service
     *
     * @return bool|null
     */
    public function getDhlGoGreenPlusService()
    {
        return $this->container['dhl_go_green_plus_service'];
    }

    /**
     * Sets dhl_go_green_plus_service
     *
     * @param bool|null $dhl_go_green_plus_service dhl_go_green_plus_service
     *
     * @return self
     */
    public function setDhlGoGreenPlusService($dhl_go_green_plus_service)
    {
        if (is_null($dhl_go_green_plus_service)) {
            throw new \InvalidArgumentException('non-nullable dhl_go_green_plus_service cannot be null');
        }
        $this->container['dhl_go_green_plus_service'] = $dhl_go_green_plus_service;

        return $this;
    }

    /**
     * Gets dhl_postal_delivered_duty_paid_service
     *
     * @return bool|null
     */
    public function getDhlPostalDeliveredDutyPaidService()
    {
        return $this->container['dhl_postal_delivered_duty_paid_service'];
    }

    /**
     * Sets dhl_postal_delivered_duty_paid_service
     *
     * @param bool|null $dhl_postal_delivered_duty_paid_service dhl_postal_delivered_duty_paid_service
     *
     * @return self
     */
    public function setDhlPostalDeliveredDutyPaidService($dhl_postal_delivered_duty_paid_service)
    {
        if (is_null($dhl_postal_delivered_duty_paid_service)) {
            throw new \InvalidArgumentException('non-nullable dhl_postal_delivered_duty_paid_service cannot be null');
        }
        $this->container['dhl_postal_delivered_duty_paid_service'] = $dhl_postal_delivered_duty_paid_service;

        return $this;
    }

    /**
     * Gets dhl_premium_international_service
     *
     * @return bool|null
     */
    public function getDhlPremiumInternationalService()
    {
        return $this->container['dhl_premium_international_service'];
    }

    /**
     * Sets dhl_premium_international_service
     *
     * @param bool|null $dhl_premium_international_service dhl_premium_international_service
     *
     * @return self
     */
    public function setDhlPremiumInternationalService($dhl_premium_international_service)
    {
        if (is_null($dhl_premium_international_service)) {
            throw new \InvalidArgumentException('non-nullable dhl_premium_international_service cannot be null');
        }
        $this->container['dhl_premium_international_service'] = $dhl_premium_international_service;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Parcel., must be smaller than or equal to 255.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool|null
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool|null $saturday_delivery saturday_delivery
     *
     * @return self
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        if (is_null($saturday_delivery)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery cannot be null');
        }
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets shipping_carrier_addition
     *
     * @return string|null
     */
    public function getShippingCarrierAddition()
    {
        return $this->container['shipping_carrier_addition'];
    }

    /**
     * Sets shipping_carrier_addition
     *
     * @param string|null $shipping_carrier_addition shipping_carrier_addition
     *
     * @return self
     */
    public function setShippingCarrierAddition($shipping_carrier_addition)
    {
        if (is_null($shipping_carrier_addition)) {
            throw new \InvalidArgumentException('non-nullable shipping_carrier_addition cannot be null');
        }
        if ((mb_strlen($shipping_carrier_addition) > 255)) {
            throw new \InvalidArgumentException('invalid length for $shipping_carrier_addition when calling Parcel., must be smaller than or equal to 255.');
        }

        $this->container['shipping_carrier_addition'] = $shipping_carrier_addition;

        return $this;
    }

    /**
     * Gets shipping_carrier_id
     *
     * @return string|null
     */
    public function getShippingCarrierId()
    {
        return $this->container['shipping_carrier_id'];
    }

    /**
     * Sets shipping_carrier_id
     *
     * @param string|null $shipping_carrier_id shipping_carrier_id
     *
     * @return self
     */
    public function setShippingCarrierId($shipping_carrier_id)
    {
        if (is_null($shipping_carrier_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_carrier_id cannot be null');
        }
        $this->container['shipping_carrier_id'] = $shipping_carrier_id;

        return $this;
    }

    /**
     * Gets shipping_labels_count
     *
     * @return int|null
     */
    public function getShippingLabelsCount()
    {
        return $this->container['shipping_labels_count'];
    }

    /**
     * Sets shipping_labels_count
     *
     * @param int|null $shipping_labels_count shipping_labels_count
     *
     * @return self
     */
    public function setShippingLabelsCount($shipping_labels_count)
    {
        if (is_null($shipping_labels_count)) {
            throw new \InvalidArgumentException('non-nullable shipping_labels_count cannot be null');
        }
        $this->container['shipping_labels_count'] = $shipping_labels_count;

        return $this;
    }

    /**
     * Gets tracking_id
     *
     * @return string|null
     */
    public function getTrackingId()
    {
        return $this->container['tracking_id'];
    }

    /**
     * Sets tracking_id
     *
     * @param string|null $tracking_id tracking_id
     *
     * @return self
     */
    public function setTrackingId($tracking_id)
    {
        if (is_null($tracking_id)) {
            throw new \InvalidArgumentException('non-nullable tracking_id cannot be null');
        }
        if ((mb_strlen($tracking_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tracking_id when calling Parcel., must be smaller than or equal to 255.');
        }

        $this->container['tracking_id'] = $tracking_id;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string|null $tracking_url tracking_url
     *
     * @return self
     */
    public function setTrackingUrl($tracking_url)
    {
        if (is_null($tracking_url)) {
            throw new \InvalidArgumentException('non-nullable tracking_url cannot be null');
        }
        if ((mb_strlen($tracking_url) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $tracking_url when calling Parcel., must be smaller than or equal to 1000.');
        }

        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets use_delivery_date_as_preferred_delivery_date
     *
     * @return bool|null
     */
    public function getUseDeliveryDateAsPreferredDeliveryDate()
    {
        return $this->container['use_delivery_date_as_preferred_delivery_date'];
    }

    /**
     * Sets use_delivery_date_as_preferred_delivery_date
     *
     * @param bool|null $use_delivery_date_as_preferred_delivery_date use_delivery_date_as_preferred_delivery_date
     *
     * @return self
     */
    public function setUseDeliveryDateAsPreferredDeliveryDate($use_delivery_date_as_preferred_delivery_date)
    {
        if (is_null($use_delivery_date_as_preferred_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable use_delivery_date_as_preferred_delivery_date cannot be null');
        }
        $this->container['use_delivery_date_as_preferred_delivery_date'] = $use_delivery_date_as_preferred_delivery_date;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($weight)))) {
            throw new \InvalidArgumentException("invalid value for \$weight when calling Parcel., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


