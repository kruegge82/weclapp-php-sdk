<?php
/**
 * ProductionWorkScheduleItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * ProductionWorkScheduleItem Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductionWorkScheduleItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'productionWorkScheduleItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'cost_center_id' => 'string',
        'description' => 'string',
        'multiple_human_operation' => 'int',
        'multiple_machine_operation' => 'int',
        'position_number' => 'int',
        'production_work_schedule_id' => 'string',
        'quantity_base' => 'int',
        'setup_time' => 'float',
        'short_description' => 'string',
        'time_type' => '\kruegge82\weclapp\Model\ProductionWorkScheduleItemTimeType',
        'time_unit' => '\kruegge82\weclapp\Model\TimeUnit',
        'unit_time' => 'float',
        'valid_from' => 'int',
        'valid_to' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'cost_center_id' => null,
        'description' => null,
        'multiple_human_operation' => 'int32',
        'multiple_machine_operation' => 'int32',
        'position_number' => 'int32',
        'production_work_schedule_id' => null,
        'quantity_base' => 'int32',
        'setup_time' => 'decimal',
        'short_description' => null,
        'time_type' => null,
        'time_unit' => null,
        'unit_time' => 'decimal',
        'valid_from' => 'timestamp',
        'valid_to' => 'timestamp'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'cost_center_id' => false,
        'description' => false,
        'multiple_human_operation' => false,
        'multiple_machine_operation' => false,
        'position_number' => false,
        'production_work_schedule_id' => false,
        'quantity_base' => false,
        'setup_time' => false,
        'short_description' => false,
        'time_type' => false,
        'time_unit' => false,
        'unit_time' => false,
        'valid_from' => false,
        'valid_to' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'cost_center_id' => 'costCenterId',
        'description' => 'description',
        'multiple_human_operation' => 'multipleHumanOperation',
        'multiple_machine_operation' => 'multipleMachineOperation',
        'position_number' => 'positionNumber',
        'production_work_schedule_id' => 'productionWorkScheduleId',
        'quantity_base' => 'quantityBase',
        'setup_time' => 'setupTime',
        'short_description' => 'shortDescription',
        'time_type' => 'timeType',
        'time_unit' => 'timeUnit',
        'unit_time' => 'unitTime',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'cost_center_id' => 'setCostCenterId',
        'description' => 'setDescription',
        'multiple_human_operation' => 'setMultipleHumanOperation',
        'multiple_machine_operation' => 'setMultipleMachineOperation',
        'position_number' => 'setPositionNumber',
        'production_work_schedule_id' => 'setProductionWorkScheduleId',
        'quantity_base' => 'setQuantityBase',
        'setup_time' => 'setSetupTime',
        'short_description' => 'setShortDescription',
        'time_type' => 'setTimeType',
        'time_unit' => 'setTimeUnit',
        'unit_time' => 'setUnitTime',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'cost_center_id' => 'getCostCenterId',
        'description' => 'getDescription',
        'multiple_human_operation' => 'getMultipleHumanOperation',
        'multiple_machine_operation' => 'getMultipleMachineOperation',
        'position_number' => 'getPositionNumber',
        'production_work_schedule_id' => 'getProductionWorkScheduleId',
        'quantity_base' => 'getQuantityBase',
        'setup_time' => 'getSetupTime',
        'short_description' => 'getShortDescription',
        'time_type' => 'getTimeType',
        'time_unit' => 'getTimeUnit',
        'unit_time' => 'getUnitTime',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('cost_center_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('multiple_human_operation', $data ?? [], null);
        $this->setIfExists('multiple_machine_operation', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('production_work_schedule_id', $data ?? [], null);
        $this->setIfExists('quantity_base', $data ?? [], null);
        $this->setIfExists('setup_time', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('time_type', $data ?? [], null);
        $this->setIfExists('time_unit', $data ?? [], null);
        $this->setIfExists('unit_time', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['setup_time']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['setup_time'])) {
            $invalidProperties[] = "invalid value for 'setup_time', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['short_description']) && (mb_strlen($this->container['short_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['unit_time']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['unit_time'])) {
            $invalidProperties[] = "invalid value for 'unit_time', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets cost_center_id
     *
     * @return string|null
     */
    public function getCostCenterId()
    {
        return $this->container['cost_center_id'];
    }

    /**
     * Sets cost_center_id
     *
     * @param string|null $cost_center_id cost_center_id
     *
     * @return self
     */
    public function setCostCenterId($cost_center_id)
    {
        if (is_null($cost_center_id)) {
            throw new \InvalidArgumentException('non-nullable cost_center_id cannot be null');
        }
        $this->container['cost_center_id'] = $cost_center_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ProductionWorkScheduleItem., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets multiple_human_operation
     *
     * @return int|null
     */
    public function getMultipleHumanOperation()
    {
        return $this->container['multiple_human_operation'];
    }

    /**
     * Sets multiple_human_operation
     *
     * @param int|null $multiple_human_operation multiple_human_operation
     *
     * @return self
     */
    public function setMultipleHumanOperation($multiple_human_operation)
    {
        if (is_null($multiple_human_operation)) {
            throw new \InvalidArgumentException('non-nullable multiple_human_operation cannot be null');
        }
        $this->container['multiple_human_operation'] = $multiple_human_operation;

        return $this;
    }

    /**
     * Gets multiple_machine_operation
     *
     * @return int|null
     */
    public function getMultipleMachineOperation()
    {
        return $this->container['multiple_machine_operation'];
    }

    /**
     * Sets multiple_machine_operation
     *
     * @param int|null $multiple_machine_operation multiple_machine_operation
     *
     * @return self
     */
    public function setMultipleMachineOperation($multiple_machine_operation)
    {
        if (is_null($multiple_machine_operation)) {
            throw new \InvalidArgumentException('non-nullable multiple_machine_operation cannot be null');
        }
        $this->container['multiple_machine_operation'] = $multiple_machine_operation;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets production_work_schedule_id
     *
     * @return string|null
     */
    public function getProductionWorkScheduleId()
    {
        return $this->container['production_work_schedule_id'];
    }

    /**
     * Sets production_work_schedule_id
     *
     * @param string|null $production_work_schedule_id production_work_schedule_id
     *
     * @return self
     */
    public function setProductionWorkScheduleId($production_work_schedule_id)
    {
        if (is_null($production_work_schedule_id)) {
            throw new \InvalidArgumentException('non-nullable production_work_schedule_id cannot be null');
        }
        $this->container['production_work_schedule_id'] = $production_work_schedule_id;

        return $this;
    }

    /**
     * Gets quantity_base
     *
     * @return int|null
     */
    public function getQuantityBase()
    {
        return $this->container['quantity_base'];
    }

    /**
     * Sets quantity_base
     *
     * @param int|null $quantity_base quantity_base
     *
     * @return self
     */
    public function setQuantityBase($quantity_base)
    {
        if (is_null($quantity_base)) {
            throw new \InvalidArgumentException('non-nullable quantity_base cannot be null');
        }
        $this->container['quantity_base'] = $quantity_base;

        return $this;
    }

    /**
     * Gets setup_time
     *
     * @return float|null
     */
    public function getSetupTime()
    {
        return $this->container['setup_time'];
    }

    /**
     * Sets setup_time
     *
     * @param float|null $setup_time setup_time
     *
     * @return self
     */
    public function setSetupTime($setup_time)
    {
        if (is_null($setup_time)) {
            throw new \InvalidArgumentException('non-nullable setup_time cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($setup_time)))) {
            throw new \InvalidArgumentException("invalid value for \$setup_time when calling ProductionWorkScheduleItem., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['setup_time'] = $setup_time;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description short_description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            throw new \InvalidArgumentException('non-nullable short_description cannot be null');
        }
        if ((mb_strlen($short_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $short_description when calling ProductionWorkScheduleItem., must be smaller than or equal to 255.');
        }

        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets time_type
     *
     * @return \kruegge82\weclapp\Model\ProductionWorkScheduleItemTimeType|null
     */
    public function getTimeType()
    {
        return $this->container['time_type'];
    }

    /**
     * Sets time_type
     *
     * @param \kruegge82\weclapp\Model\ProductionWorkScheduleItemTimeType|null $time_type time_type
     *
     * @return self
     */
    public function setTimeType($time_type)
    {
        if (is_null($time_type)) {
            throw new \InvalidArgumentException('non-nullable time_type cannot be null');
        }
        $this->container['time_type'] = $time_type;

        return $this;
    }

    /**
     * Gets time_unit
     *
     * @return \kruegge82\weclapp\Model\TimeUnit|null
     */
    public function getTimeUnit()
    {
        return $this->container['time_unit'];
    }

    /**
     * Sets time_unit
     *
     * @param \kruegge82\weclapp\Model\TimeUnit|null $time_unit time_unit
     *
     * @return self
     */
    public function setTimeUnit($time_unit)
    {
        if (is_null($time_unit)) {
            throw new \InvalidArgumentException('non-nullable time_unit cannot be null');
        }
        $this->container['time_unit'] = $time_unit;

        return $this;
    }

    /**
     * Gets unit_time
     *
     * @return float|null
     */
    public function getUnitTime()
    {
        return $this->container['unit_time'];
    }

    /**
     * Sets unit_time
     *
     * @param float|null $unit_time unit_time
     *
     * @return self
     */
    public function setUnitTime($unit_time)
    {
        if (is_null($unit_time)) {
            throw new \InvalidArgumentException('non-nullable unit_time cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($unit_time)))) {
            throw new \InvalidArgumentException("invalid value for \$unit_time when calling ProductionWorkScheduleItem., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['unit_time'] = $unit_time;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return int|null
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param int|null $valid_from valid_from
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            throw new \InvalidArgumentException('non-nullable valid_from cannot be null');
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return int|null
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param int|null $valid_to valid_to
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            throw new \InvalidArgumentException('non-nullable valid_to cannot be null');
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


