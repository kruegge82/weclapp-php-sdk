<?php
/**
 * Task
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Task Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Task implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'allow_over_booking' => 'bool',
        'allow_time_booking' => 'bool',
        'article_id' => 'string',
        'assignees' => '\kruegge82\weclapp\Model\TaskAssignee[]',
        'billable_status' => 'bool',
        'calendar_event_id' => 'string',
        'creator_user_id' => 'string',
        'customer_id' => 'string',
        'date_from' => 'int',
        'date_to' => 'int',
        'description' => 'string',
        'entity_references' => '\kruegge82\weclapp\Model\EntityReference[]',
        'identifier' => 'string',
        'invoicing_status' => '\kruegge82\weclapp\Model\BillableInvoiceStatus',
        'last_reminder_date_for_overdue' => 'int',
        'order_item_id' => 'string',
        'parent_task_id' => 'string',
        'performance_recorded_status' => '\kruegge82\weclapp\Model\PerformanceRecordedStatus',
        'planned_effort' => 'int',
        'position_number' => 'int',
        'previous_task_id' => 'string',
        'subject' => 'string',
        'task_lists' => '\kruegge82\weclapp\Model\OnlyId[]',
        'task_mail_account' => '\kruegge82\weclapp\Model\TaskMailAccount',
        'task_priority' => '\kruegge82\weclapp\Model\TaskPriority',
        'task_status' => '\kruegge82\weclapp\Model\TaskProgressStatus',
        'task_topics' => '\kruegge82\weclapp\Model\OnlyId[]',
        'task_types' => '\kruegge82\weclapp\Model\OnlyId[]',
        'task_visibility_type' => '\kruegge82\weclapp\Model\TaskVisibilityType',
        'ticket_id' => 'string',
        'user_of_last_status_change_id' => 'string',
        'watchers' => '\kruegge82\weclapp\Model\OnlyId[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'allow_over_booking' => null,
        'allow_time_booking' => null,
        'article_id' => null,
        'assignees' => null,
        'billable_status' => null,
        'calendar_event_id' => null,
        'creator_user_id' => null,
        'customer_id' => null,
        'date_from' => 'timestamp',
        'date_to' => 'timestamp',
        'description' => 'html',
        'entity_references' => null,
        'identifier' => null,
        'invoicing_status' => null,
        'last_reminder_date_for_overdue' => 'timestamp',
        'order_item_id' => null,
        'parent_task_id' => null,
        'performance_recorded_status' => null,
        'planned_effort' => 'int64',
        'position_number' => 'int32',
        'previous_task_id' => null,
        'subject' => null,
        'task_lists' => null,
        'task_mail_account' => null,
        'task_priority' => null,
        'task_status' => null,
        'task_topics' => null,
        'task_types' => null,
        'task_visibility_type' => null,
        'ticket_id' => null,
        'user_of_last_status_change_id' => null,
        'watchers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'allow_over_booking' => false,
        'allow_time_booking' => false,
        'article_id' => false,
        'assignees' => false,
        'billable_status' => false,
        'calendar_event_id' => false,
        'creator_user_id' => false,
        'customer_id' => false,
        'date_from' => false,
        'date_to' => false,
        'description' => false,
        'entity_references' => false,
        'identifier' => false,
        'invoicing_status' => false,
        'last_reminder_date_for_overdue' => false,
        'order_item_id' => false,
        'parent_task_id' => false,
        'performance_recorded_status' => false,
        'planned_effort' => false,
        'position_number' => false,
        'previous_task_id' => false,
        'subject' => false,
        'task_lists' => false,
        'task_mail_account' => false,
        'task_priority' => false,
        'task_status' => false,
        'task_topics' => false,
        'task_types' => false,
        'task_visibility_type' => false,
        'ticket_id' => false,
        'user_of_last_status_change_id' => false,
        'watchers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'allow_over_booking' => 'allowOverBooking',
        'allow_time_booking' => 'allowTimeBooking',
        'article_id' => 'articleId',
        'assignees' => 'assignees',
        'billable_status' => 'billableStatus',
        'calendar_event_id' => 'calendarEventId',
        'creator_user_id' => 'creatorUserId',
        'customer_id' => 'customerId',
        'date_from' => 'dateFrom',
        'date_to' => 'dateTo',
        'description' => 'description',
        'entity_references' => 'entityReferences',
        'identifier' => 'identifier',
        'invoicing_status' => 'invoicingStatus',
        'last_reminder_date_for_overdue' => 'lastReminderDateForOverdue',
        'order_item_id' => 'orderItemId',
        'parent_task_id' => 'parentTaskId',
        'performance_recorded_status' => 'performanceRecordedStatus',
        'planned_effort' => 'plannedEffort',
        'position_number' => 'positionNumber',
        'previous_task_id' => 'previousTaskId',
        'subject' => 'subject',
        'task_lists' => 'taskLists',
        'task_mail_account' => 'taskMailAccount',
        'task_priority' => 'taskPriority',
        'task_status' => 'taskStatus',
        'task_topics' => 'taskTopics',
        'task_types' => 'taskTypes',
        'task_visibility_type' => 'taskVisibilityType',
        'ticket_id' => 'ticketId',
        'user_of_last_status_change_id' => 'userOfLastStatusChangeId',
        'watchers' => 'watchers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'allow_over_booking' => 'setAllowOverBooking',
        'allow_time_booking' => 'setAllowTimeBooking',
        'article_id' => 'setArticleId',
        'assignees' => 'setAssignees',
        'billable_status' => 'setBillableStatus',
        'calendar_event_id' => 'setCalendarEventId',
        'creator_user_id' => 'setCreatorUserId',
        'customer_id' => 'setCustomerId',
        'date_from' => 'setDateFrom',
        'date_to' => 'setDateTo',
        'description' => 'setDescription',
        'entity_references' => 'setEntityReferences',
        'identifier' => 'setIdentifier',
        'invoicing_status' => 'setInvoicingStatus',
        'last_reminder_date_for_overdue' => 'setLastReminderDateForOverdue',
        'order_item_id' => 'setOrderItemId',
        'parent_task_id' => 'setParentTaskId',
        'performance_recorded_status' => 'setPerformanceRecordedStatus',
        'planned_effort' => 'setPlannedEffort',
        'position_number' => 'setPositionNumber',
        'previous_task_id' => 'setPreviousTaskId',
        'subject' => 'setSubject',
        'task_lists' => 'setTaskLists',
        'task_mail_account' => 'setTaskMailAccount',
        'task_priority' => 'setTaskPriority',
        'task_status' => 'setTaskStatus',
        'task_topics' => 'setTaskTopics',
        'task_types' => 'setTaskTypes',
        'task_visibility_type' => 'setTaskVisibilityType',
        'ticket_id' => 'setTicketId',
        'user_of_last_status_change_id' => 'setUserOfLastStatusChangeId',
        'watchers' => 'setWatchers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'allow_over_booking' => 'getAllowOverBooking',
        'allow_time_booking' => 'getAllowTimeBooking',
        'article_id' => 'getArticleId',
        'assignees' => 'getAssignees',
        'billable_status' => 'getBillableStatus',
        'calendar_event_id' => 'getCalendarEventId',
        'creator_user_id' => 'getCreatorUserId',
        'customer_id' => 'getCustomerId',
        'date_from' => 'getDateFrom',
        'date_to' => 'getDateTo',
        'description' => 'getDescription',
        'entity_references' => 'getEntityReferences',
        'identifier' => 'getIdentifier',
        'invoicing_status' => 'getInvoicingStatus',
        'last_reminder_date_for_overdue' => 'getLastReminderDateForOverdue',
        'order_item_id' => 'getOrderItemId',
        'parent_task_id' => 'getParentTaskId',
        'performance_recorded_status' => 'getPerformanceRecordedStatus',
        'planned_effort' => 'getPlannedEffort',
        'position_number' => 'getPositionNumber',
        'previous_task_id' => 'getPreviousTaskId',
        'subject' => 'getSubject',
        'task_lists' => 'getTaskLists',
        'task_mail_account' => 'getTaskMailAccount',
        'task_priority' => 'getTaskPriority',
        'task_status' => 'getTaskStatus',
        'task_topics' => 'getTaskTopics',
        'task_types' => 'getTaskTypes',
        'task_visibility_type' => 'getTaskVisibilityType',
        'ticket_id' => 'getTicketId',
        'user_of_last_status_change_id' => 'getUserOfLastStatusChangeId',
        'watchers' => 'getWatchers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('allow_over_booking', $data ?? [], null);
        $this->setIfExists('allow_time_booking', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('assignees', $data ?? [], null);
        $this->setIfExists('billable_status', $data ?? [], null);
        $this->setIfExists('calendar_event_id', $data ?? [], null);
        $this->setIfExists('creator_user_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('date_from', $data ?? [], null);
        $this->setIfExists('date_to', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('entity_references', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('invoicing_status', $data ?? [], null);
        $this->setIfExists('last_reminder_date_for_overdue', $data ?? [], null);
        $this->setIfExists('order_item_id', $data ?? [], null);
        $this->setIfExists('parent_task_id', $data ?? [], null);
        $this->setIfExists('performance_recorded_status', $data ?? [], null);
        $this->setIfExists('planned_effort', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('previous_task_id', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('task_lists', $data ?? [], null);
        $this->setIfExists('task_mail_account', $data ?? [], null);
        $this->setIfExists('task_priority', $data ?? [], null);
        $this->setIfExists('task_status', $data ?? [], null);
        $this->setIfExists('task_topics', $data ?? [], null);
        $this->setIfExists('task_types', $data ?? [], null);
        $this->setIfExists('task_visibility_type', $data ?? [], null);
        $this->setIfExists('ticket_id', $data ?? [], null);
        $this->setIfExists('user_of_last_status_change_id', $data ?? [], null);
        $this->setIfExists('watchers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['identifier']) && (mb_strlen($this->container['identifier']) > 2000)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 2000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets allow_over_booking
     *
     * @return bool|null
     */
    public function getAllowOverBooking()
    {
        return $this->container['allow_over_booking'];
    }

    /**
     * Sets allow_over_booking
     *
     * @param bool|null $allow_over_booking allow_over_booking
     *
     * @return self
     */
    public function setAllowOverBooking($allow_over_booking)
    {
        if (is_null($allow_over_booking)) {
            throw new \InvalidArgumentException('non-nullable allow_over_booking cannot be null');
        }
        $this->container['allow_over_booking'] = $allow_over_booking;

        return $this;
    }

    /**
     * Gets allow_time_booking
     *
     * @return bool|null
     */
    public function getAllowTimeBooking()
    {
        return $this->container['allow_time_booking'];
    }

    /**
     * Sets allow_time_booking
     *
     * @param bool|null $allow_time_booking allow_time_booking
     *
     * @return self
     */
    public function setAllowTimeBooking($allow_time_booking)
    {
        if (is_null($allow_time_booking)) {
            throw new \InvalidArgumentException('non-nullable allow_time_booking cannot be null');
        }
        $this->container['allow_time_booking'] = $allow_time_booking;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets assignees
     *
     * @return \kruegge82\weclapp\Model\TaskAssignee[]|null
     */
    public function getAssignees()
    {
        return $this->container['assignees'];
    }

    /**
     * Sets assignees
     *
     * @param \kruegge82\weclapp\Model\TaskAssignee[]|null $assignees assignees
     *
     * @return self
     */
    public function setAssignees($assignees)
    {
        if (is_null($assignees)) {
            throw new \InvalidArgumentException('non-nullable assignees cannot be null');
        }
        $this->container['assignees'] = $assignees;

        return $this;
    }

    /**
     * Gets billable_status
     *
     * @return bool|null
     */
    public function getBillableStatus()
    {
        return $this->container['billable_status'];
    }

    /**
     * Sets billable_status
     *
     * @param bool|null $billable_status billable_status
     *
     * @return self
     */
    public function setBillableStatus($billable_status)
    {
        if (is_null($billable_status)) {
            throw new \InvalidArgumentException('non-nullable billable_status cannot be null');
        }
        $this->container['billable_status'] = $billable_status;

        return $this;
    }

    /**
     * Gets calendar_event_id
     *
     * @return string|null
     */
    public function getCalendarEventId()
    {
        return $this->container['calendar_event_id'];
    }

    /**
     * Sets calendar_event_id
     *
     * @param string|null $calendar_event_id calendar_event_id
     *
     * @return self
     */
    public function setCalendarEventId($calendar_event_id)
    {
        if (is_null($calendar_event_id)) {
            throw new \InvalidArgumentException('non-nullable calendar_event_id cannot be null');
        }
        $this->container['calendar_event_id'] = $calendar_event_id;

        return $this;
    }

    /**
     * Gets creator_user_id
     *
     * @return string|null
     */
    public function getCreatorUserId()
    {
        return $this->container['creator_user_id'];
    }

    /**
     * Sets creator_user_id
     *
     * @param string|null $creator_user_id creator_user_id
     *
     * @return self
     */
    public function setCreatorUserId($creator_user_id)
    {
        if (is_null($creator_user_id)) {
            throw new \InvalidArgumentException('non-nullable creator_user_id cannot be null');
        }
        $this->container['creator_user_id'] = $creator_user_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets date_from
     *
     * @return int|null
     */
    public function getDateFrom()
    {
        return $this->container['date_from'];
    }

    /**
     * Sets date_from
     *
     * @param int|null $date_from date_from
     *
     * @return self
     */
    public function setDateFrom($date_from)
    {
        if (is_null($date_from)) {
            throw new \InvalidArgumentException('non-nullable date_from cannot be null');
        }
        $this->container['date_from'] = $date_from;

        return $this;
    }

    /**
     * Gets date_to
     *
     * @return int|null
     */
    public function getDateTo()
    {
        return $this->container['date_to'];
    }

    /**
     * Sets date_to
     *
     * @param int|null $date_to date_to
     *
     * @return self
     */
    public function setDateTo($date_to)
    {
        if (is_null($date_to)) {
            throw new \InvalidArgumentException('non-nullable date_to cannot be null');
        }
        $this->container['date_to'] = $date_to;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entity_references
     *
     * @return \kruegge82\weclapp\Model\EntityReference[]|null
     */
    public function getEntityReferences()
    {
        return $this->container['entity_references'];
    }

    /**
     * Sets entity_references
     *
     * @param \kruegge82\weclapp\Model\EntityReference[]|null $entity_references entity_references
     *
     * @return self
     */
    public function setEntityReferences($entity_references)
    {
        if (is_null($entity_references)) {
            throw new \InvalidArgumentException('non-nullable entity_references cannot be null');
        }
        $this->container['entity_references'] = $entity_references;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }
        if ((mb_strlen($identifier) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling Task., must be smaller than or equal to 2000.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets invoicing_status
     *
     * @return \kruegge82\weclapp\Model\BillableInvoiceStatus|null
     */
    public function getInvoicingStatus()
    {
        return $this->container['invoicing_status'];
    }

    /**
     * Sets invoicing_status
     *
     * @param \kruegge82\weclapp\Model\BillableInvoiceStatus|null $invoicing_status invoicing_status
     *
     * @return self
     */
    public function setInvoicingStatus($invoicing_status)
    {
        if (is_null($invoicing_status)) {
            throw new \InvalidArgumentException('non-nullable invoicing_status cannot be null');
        }
        $this->container['invoicing_status'] = $invoicing_status;

        return $this;
    }

    /**
     * Gets last_reminder_date_for_overdue
     *
     * @return int|null
     */
    public function getLastReminderDateForOverdue()
    {
        return $this->container['last_reminder_date_for_overdue'];
    }

    /**
     * Sets last_reminder_date_for_overdue
     *
     * @param int|null $last_reminder_date_for_overdue last_reminder_date_for_overdue
     *
     * @return self
     */
    public function setLastReminderDateForOverdue($last_reminder_date_for_overdue)
    {
        if (is_null($last_reminder_date_for_overdue)) {
            throw new \InvalidArgumentException('non-nullable last_reminder_date_for_overdue cannot be null');
        }
        $this->container['last_reminder_date_for_overdue'] = $last_reminder_date_for_overdue;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return string|null
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param string|null $order_item_id order_item_id
     *
     * @return self
     */
    public function setOrderItemId($order_item_id)
    {
        if (is_null($order_item_id)) {
            throw new \InvalidArgumentException('non-nullable order_item_id cannot be null');
        }
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets parent_task_id
     *
     * @return string|null
     */
    public function getParentTaskId()
    {
        return $this->container['parent_task_id'];
    }

    /**
     * Sets parent_task_id
     *
     * @param string|null $parent_task_id parent_task_id
     *
     * @return self
     */
    public function setParentTaskId($parent_task_id)
    {
        if (is_null($parent_task_id)) {
            throw new \InvalidArgumentException('non-nullable parent_task_id cannot be null');
        }
        $this->container['parent_task_id'] = $parent_task_id;

        return $this;
    }

    /**
     * Gets performance_recorded_status
     *
     * @return \kruegge82\weclapp\Model\PerformanceRecordedStatus|null
     */
    public function getPerformanceRecordedStatus()
    {
        return $this->container['performance_recorded_status'];
    }

    /**
     * Sets performance_recorded_status
     *
     * @param \kruegge82\weclapp\Model\PerformanceRecordedStatus|null $performance_recorded_status performance_recorded_status
     *
     * @return self
     */
    public function setPerformanceRecordedStatus($performance_recorded_status)
    {
        if (is_null($performance_recorded_status)) {
            throw new \InvalidArgumentException('non-nullable performance_recorded_status cannot be null');
        }
        $this->container['performance_recorded_status'] = $performance_recorded_status;

        return $this;
    }

    /**
     * Gets planned_effort
     *
     * @return int|null
     */
    public function getPlannedEffort()
    {
        return $this->container['planned_effort'];
    }

    /**
     * Sets planned_effort
     *
     * @param int|null $planned_effort planned_effort
     *
     * @return self
     */
    public function setPlannedEffort($planned_effort)
    {
        if (is_null($planned_effort)) {
            throw new \InvalidArgumentException('non-nullable planned_effort cannot be null');
        }
        $this->container['planned_effort'] = $planned_effort;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets previous_task_id
     *
     * @return string|null
     */
    public function getPreviousTaskId()
    {
        return $this->container['previous_task_id'];
    }

    /**
     * Sets previous_task_id
     *
     * @param string|null $previous_task_id previous_task_id
     *
     * @return self
     */
    public function setPreviousTaskId($previous_task_id)
    {
        if (is_null($previous_task_id)) {
            throw new \InvalidArgumentException('non-nullable previous_task_id cannot be null');
        }
        $this->container['previous_task_id'] = $previous_task_id;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets task_lists
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getTaskLists()
    {
        return $this->container['task_lists'];
    }

    /**
     * Sets task_lists
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $task_lists task_lists
     *
     * @return self
     */
    public function setTaskLists($task_lists)
    {
        if (is_null($task_lists)) {
            throw new \InvalidArgumentException('non-nullable task_lists cannot be null');
        }
        $this->container['task_lists'] = $task_lists;

        return $this;
    }

    /**
     * Gets task_mail_account
     *
     * @return \kruegge82\weclapp\Model\TaskMailAccount|null
     */
    public function getTaskMailAccount()
    {
        return $this->container['task_mail_account'];
    }

    /**
     * Sets task_mail_account
     *
     * @param \kruegge82\weclapp\Model\TaskMailAccount|null $task_mail_account task_mail_account
     *
     * @return self
     */
    public function setTaskMailAccount($task_mail_account)
    {
        if (is_null($task_mail_account)) {
            throw new \InvalidArgumentException('non-nullable task_mail_account cannot be null');
        }
        $this->container['task_mail_account'] = $task_mail_account;

        return $this;
    }

    /**
     * Gets task_priority
     *
     * @return \kruegge82\weclapp\Model\TaskPriority|null
     */
    public function getTaskPriority()
    {
        return $this->container['task_priority'];
    }

    /**
     * Sets task_priority
     *
     * @param \kruegge82\weclapp\Model\TaskPriority|null $task_priority task_priority
     *
     * @return self
     */
    public function setTaskPriority($task_priority)
    {
        if (is_null($task_priority)) {
            throw new \InvalidArgumentException('non-nullable task_priority cannot be null');
        }
        $this->container['task_priority'] = $task_priority;

        return $this;
    }

    /**
     * Gets task_status
     *
     * @return \kruegge82\weclapp\Model\TaskProgressStatus|null
     */
    public function getTaskStatus()
    {
        return $this->container['task_status'];
    }

    /**
     * Sets task_status
     *
     * @param \kruegge82\weclapp\Model\TaskProgressStatus|null $task_status task_status
     *
     * @return self
     */
    public function setTaskStatus($task_status)
    {
        if (is_null($task_status)) {
            throw new \InvalidArgumentException('non-nullable task_status cannot be null');
        }
        $this->container['task_status'] = $task_status;

        return $this;
    }

    /**
     * Gets task_topics
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getTaskTopics()
    {
        return $this->container['task_topics'];
    }

    /**
     * Sets task_topics
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $task_topics task_topics
     *
     * @return self
     */
    public function setTaskTopics($task_topics)
    {
        if (is_null($task_topics)) {
            throw new \InvalidArgumentException('non-nullable task_topics cannot be null');
        }
        $this->container['task_topics'] = $task_topics;

        return $this;
    }

    /**
     * Gets task_types
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getTaskTypes()
    {
        return $this->container['task_types'];
    }

    /**
     * Sets task_types
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $task_types task_types
     *
     * @return self
     */
    public function setTaskTypes($task_types)
    {
        if (is_null($task_types)) {
            throw new \InvalidArgumentException('non-nullable task_types cannot be null');
        }
        $this->container['task_types'] = $task_types;

        return $this;
    }

    /**
     * Gets task_visibility_type
     *
     * @return \kruegge82\weclapp\Model\TaskVisibilityType|null
     */
    public function getTaskVisibilityType()
    {
        return $this->container['task_visibility_type'];
    }

    /**
     * Sets task_visibility_type
     *
     * @param \kruegge82\weclapp\Model\TaskVisibilityType|null $task_visibility_type task_visibility_type
     *
     * @return self
     */
    public function setTaskVisibilityType($task_visibility_type)
    {
        if (is_null($task_visibility_type)) {
            throw new \InvalidArgumentException('non-nullable task_visibility_type cannot be null');
        }
        $this->container['task_visibility_type'] = $task_visibility_type;

        return $this;
    }

    /**
     * Gets ticket_id
     *
     * @return string|null
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     *
     * @param string|null $ticket_id ticket_id
     *
     * @return self
     */
    public function setTicketId($ticket_id)
    {
        if (is_null($ticket_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_id cannot be null');
        }
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets user_of_last_status_change_id
     *
     * @return string|null
     */
    public function getUserOfLastStatusChangeId()
    {
        return $this->container['user_of_last_status_change_id'];
    }

    /**
     * Sets user_of_last_status_change_id
     *
     * @param string|null $user_of_last_status_change_id user_of_last_status_change_id
     *
     * @return self
     */
    public function setUserOfLastStatusChangeId($user_of_last_status_change_id)
    {
        if (is_null($user_of_last_status_change_id)) {
            throw new \InvalidArgumentException('non-nullable user_of_last_status_change_id cannot be null');
        }
        $this->container['user_of_last_status_change_id'] = $user_of_last_status_change_id;

        return $this;
    }

    /**
     * Gets watchers
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getWatchers()
    {
        return $this->container['watchers'];
    }

    /**
     * Sets watchers
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $watchers watchers
     *
     * @return self
     */
    public function setWatchers($watchers)
    {
        if (is_null($watchers)) {
            throw new \InvalidArgumentException('non-nullable watchers cannot be null');
        }
        $this->container['watchers'] = $watchers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


