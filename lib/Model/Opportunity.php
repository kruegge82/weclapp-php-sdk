<?php
/**
 * Opportunity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Opportunity Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Opportunity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'opportunity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'contact_id' => 'string',
        'creator_id' => 'string',
        'customer_id' => 'string',
        'description' => 'string',
        'expected_delivery_date' => 'int',
        'expected_signature_date' => 'int',
        'hot_lead' => 'bool',
        'name' => 'string',
        'next_call_date' => 'int',
        'opportunity_number' => 'string',
        'responsible_user_id' => 'string',
        'revenue' => 'float',
        'sales_channel' => '\kruegge82\weclapp\Model\DistributionChannel',
        'sales_probability' => 'int',
        'sales_stage_history' => '\kruegge82\weclapp\Model\SalesStageHistory[]',
        'sales_stage_id' => 'string',
        'start_date' => 'int',
        'tags' => 'string[]',
        'topics' => '\kruegge82\weclapp\Model\OnlyId[]',
        'win_loss_description' => 'string',
        'win_loss_reason_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'contact_id' => null,
        'creator_id' => null,
        'customer_id' => null,
        'description' => 'html',
        'expected_delivery_date' => 'timestamp',
        'expected_signature_date' => 'timestamp',
        'hot_lead' => null,
        'name' => null,
        'next_call_date' => 'timestamp',
        'opportunity_number' => null,
        'responsible_user_id' => null,
        'revenue' => 'decimal',
        'sales_channel' => null,
        'sales_probability' => 'int32',
        'sales_stage_history' => null,
        'sales_stage_id' => null,
        'start_date' => 'timestamp',
        'tags' => null,
        'topics' => null,
        'win_loss_description' => null,
        'win_loss_reason_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'contact_id' => false,
        'creator_id' => false,
        'customer_id' => false,
        'description' => false,
        'expected_delivery_date' => false,
        'expected_signature_date' => false,
        'hot_lead' => false,
        'name' => false,
        'next_call_date' => false,
        'opportunity_number' => false,
        'responsible_user_id' => false,
        'revenue' => false,
        'sales_channel' => false,
        'sales_probability' => false,
        'sales_stage_history' => false,
        'sales_stage_id' => false,
        'start_date' => false,
        'tags' => false,
        'topics' => false,
        'win_loss_description' => false,
        'win_loss_reason_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'contact_id' => 'contactId',
        'creator_id' => 'creatorId',
        'customer_id' => 'customerId',
        'description' => 'description',
        'expected_delivery_date' => 'expectedDeliveryDate',
        'expected_signature_date' => 'expectedSignatureDate',
        'hot_lead' => 'hotLead',
        'name' => 'name',
        'next_call_date' => 'nextCallDate',
        'opportunity_number' => 'opportunityNumber',
        'responsible_user_id' => 'responsibleUserId',
        'revenue' => 'revenue',
        'sales_channel' => 'salesChannel',
        'sales_probability' => 'salesProbability',
        'sales_stage_history' => 'salesStageHistory',
        'sales_stage_id' => 'salesStageId',
        'start_date' => 'startDate',
        'tags' => 'tags',
        'topics' => 'topics',
        'win_loss_description' => 'winLossDescription',
        'win_loss_reason_id' => 'winLossReasonId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'contact_id' => 'setContactId',
        'creator_id' => 'setCreatorId',
        'customer_id' => 'setCustomerId',
        'description' => 'setDescription',
        'expected_delivery_date' => 'setExpectedDeliveryDate',
        'expected_signature_date' => 'setExpectedSignatureDate',
        'hot_lead' => 'setHotLead',
        'name' => 'setName',
        'next_call_date' => 'setNextCallDate',
        'opportunity_number' => 'setOpportunityNumber',
        'responsible_user_id' => 'setResponsibleUserId',
        'revenue' => 'setRevenue',
        'sales_channel' => 'setSalesChannel',
        'sales_probability' => 'setSalesProbability',
        'sales_stage_history' => 'setSalesStageHistory',
        'sales_stage_id' => 'setSalesStageId',
        'start_date' => 'setStartDate',
        'tags' => 'setTags',
        'topics' => 'setTopics',
        'win_loss_description' => 'setWinLossDescription',
        'win_loss_reason_id' => 'setWinLossReasonId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'contact_id' => 'getContactId',
        'creator_id' => 'getCreatorId',
        'customer_id' => 'getCustomerId',
        'description' => 'getDescription',
        'expected_delivery_date' => 'getExpectedDeliveryDate',
        'expected_signature_date' => 'getExpectedSignatureDate',
        'hot_lead' => 'getHotLead',
        'name' => 'getName',
        'next_call_date' => 'getNextCallDate',
        'opportunity_number' => 'getOpportunityNumber',
        'responsible_user_id' => 'getResponsibleUserId',
        'revenue' => 'getRevenue',
        'sales_channel' => 'getSalesChannel',
        'sales_probability' => 'getSalesProbability',
        'sales_stage_history' => 'getSalesStageHistory',
        'sales_stage_id' => 'getSalesStageId',
        'start_date' => 'getStartDate',
        'tags' => 'getTags',
        'topics' => 'getTopics',
        'win_loss_description' => 'getWinLossDescription',
        'win_loss_reason_id' => 'getWinLossReasonId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('expected_delivery_date', $data ?? [], null);
        $this->setIfExists('expected_signature_date', $data ?? [], null);
        $this->setIfExists('hot_lead', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('next_call_date', $data ?? [], null);
        $this->setIfExists('opportunity_number', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('revenue', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
        $this->setIfExists('sales_probability', $data ?? [], null);
        $this->setIfExists('sales_stage_history', $data ?? [], null);
        $this->setIfExists('sales_stage_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('topics', $data ?? [], null);
        $this->setIfExists('win_loss_description', $data ?? [], null);
        $this->setIfExists('win_loss_reason_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['opportunity_number']) && (mb_strlen($this->container['opportunity_number']) > 64)) {
            $invalidProperties[] = "invalid value for 'opportunity_number', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['revenue']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['revenue'])) {
            $invalidProperties[] = "invalid value for 'revenue', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['win_loss_description']) && (mb_strlen($this->container['win_loss_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'win_loss_description', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        if (is_null($contact_id)) {
            throw new \InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Opportunity., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expected_delivery_date
     *
     * @return int|null
     */
    public function getExpectedDeliveryDate()
    {
        return $this->container['expected_delivery_date'];
    }

    /**
     * Sets expected_delivery_date
     *
     * @param int|null $expected_delivery_date expected_delivery_date
     *
     * @return self
     */
    public function setExpectedDeliveryDate($expected_delivery_date)
    {
        if (is_null($expected_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable expected_delivery_date cannot be null');
        }
        $this->container['expected_delivery_date'] = $expected_delivery_date;

        return $this;
    }

    /**
     * Gets expected_signature_date
     *
     * @return int|null
     */
    public function getExpectedSignatureDate()
    {
        return $this->container['expected_signature_date'];
    }

    /**
     * Sets expected_signature_date
     *
     * @param int|null $expected_signature_date expected_signature_date
     *
     * @return self
     */
    public function setExpectedSignatureDate($expected_signature_date)
    {
        if (is_null($expected_signature_date)) {
            throw new \InvalidArgumentException('non-nullable expected_signature_date cannot be null');
        }
        $this->container['expected_signature_date'] = $expected_signature_date;

        return $this;
    }

    /**
     * Gets hot_lead
     *
     * @return bool|null
     */
    public function getHotLead()
    {
        return $this->container['hot_lead'];
    }

    /**
     * Sets hot_lead
     *
     * @param bool|null $hot_lead hot_lead
     *
     * @return self
     */
    public function setHotLead($hot_lead)
    {
        if (is_null($hot_lead)) {
            throw new \InvalidArgumentException('non-nullable hot_lead cannot be null');
        }
        $this->container['hot_lead'] = $hot_lead;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Opportunity., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets next_call_date
     *
     * @return int|null
     */
    public function getNextCallDate()
    {
        return $this->container['next_call_date'];
    }

    /**
     * Sets next_call_date
     *
     * @param int|null $next_call_date next_call_date
     *
     * @return self
     */
    public function setNextCallDate($next_call_date)
    {
        if (is_null($next_call_date)) {
            throw new \InvalidArgumentException('non-nullable next_call_date cannot be null');
        }
        $this->container['next_call_date'] = $next_call_date;

        return $this;
    }

    /**
     * Gets opportunity_number
     *
     * @return string|null
     */
    public function getOpportunityNumber()
    {
        return $this->container['opportunity_number'];
    }

    /**
     * Sets opportunity_number
     *
     * @param string|null $opportunity_number opportunity_number
     *
     * @return self
     */
    public function setOpportunityNumber($opportunity_number)
    {
        if (is_null($opportunity_number)) {
            throw new \InvalidArgumentException('non-nullable opportunity_number cannot be null');
        }
        if ((mb_strlen($opportunity_number) > 64)) {
            throw new \InvalidArgumentException('invalid length for $opportunity_number when calling Opportunity., must be smaller than or equal to 64.');
        }

        $this->container['opportunity_number'] = $opportunity_number;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return float|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param float|null $revenue revenue
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        if (is_null($revenue)) {
            throw new \InvalidArgumentException('non-nullable revenue cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($revenue)))) {
            throw new \InvalidArgumentException("invalid value for \$revenue when calling Opportunity., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets sales_probability
     *
     * @return int|null
     */
    public function getSalesProbability()
    {
        return $this->container['sales_probability'];
    }

    /**
     * Sets sales_probability
     *
     * @param int|null $sales_probability sales_probability
     *
     * @return self
     */
    public function setSalesProbability($sales_probability)
    {
        if (is_null($sales_probability)) {
            throw new \InvalidArgumentException('non-nullable sales_probability cannot be null');
        }
        $this->container['sales_probability'] = $sales_probability;

        return $this;
    }

    /**
     * Gets sales_stage_history
     *
     * @return \kruegge82\weclapp\Model\SalesStageHistory[]|null
     */
    public function getSalesStageHistory()
    {
        return $this->container['sales_stage_history'];
    }

    /**
     * Sets sales_stage_history
     *
     * @param \kruegge82\weclapp\Model\SalesStageHistory[]|null $sales_stage_history sales_stage_history
     *
     * @return self
     */
    public function setSalesStageHistory($sales_stage_history)
    {
        if (is_null($sales_stage_history)) {
            throw new \InvalidArgumentException('non-nullable sales_stage_history cannot be null');
        }
        $this->container['sales_stage_history'] = $sales_stage_history;

        return $this;
    }

    /**
     * Gets sales_stage_id
     *
     * @return string|null
     */
    public function getSalesStageId()
    {
        return $this->container['sales_stage_id'];
    }

    /**
     * Sets sales_stage_id
     *
     * @param string|null $sales_stage_id sales_stage_id
     *
     * @return self
     */
    public function setSalesStageId($sales_stage_id)
    {
        if (is_null($sales_stage_id)) {
            throw new \InvalidArgumentException('non-nullable sales_stage_id cannot be null');
        }
        $this->container['sales_stage_id'] = $sales_stage_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getTopics()
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $topics topics
     *
     * @return self
     */
    public function setTopics($topics)
    {
        if (is_null($topics)) {
            throw new \InvalidArgumentException('non-nullable topics cannot be null');
        }
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets win_loss_description
     *
     * @return string|null
     */
    public function getWinLossDescription()
    {
        return $this->container['win_loss_description'];
    }

    /**
     * Sets win_loss_description
     *
     * @param string|null $win_loss_description win_loss_description
     *
     * @return self
     */
    public function setWinLossDescription($win_loss_description)
    {
        if (is_null($win_loss_description)) {
            throw new \InvalidArgumentException('non-nullable win_loss_description cannot be null');
        }
        if ((mb_strlen($win_loss_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $win_loss_description when calling Opportunity., must be smaller than or equal to 255.');
        }

        $this->container['win_loss_description'] = $win_loss_description;

        return $this;
    }

    /**
     * Gets win_loss_reason_id
     *
     * @return string|null
     */
    public function getWinLossReasonId()
    {
        return $this->container['win_loss_reason_id'];
    }

    /**
     * Sets win_loss_reason_id
     *
     * @param string|null $win_loss_reason_id win_loss_reason_id
     *
     * @return self
     */
    public function setWinLossReasonId($win_loss_reason_id)
    {
        if (is_null($win_loss_reason_id)) {
            throw new \InvalidArgumentException('non-nullable win_loss_reason_id cannot be null');
        }
        $this->container['win_loss_reason_id'] = $win_loss_reason_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


