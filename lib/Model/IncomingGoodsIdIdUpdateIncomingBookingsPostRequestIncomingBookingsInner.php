<?php
/**
 * IncomingGoodsIdIdUpdateIncomingBookingsPostRequestIncomingBookingsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * IncomingGoodsIdIdUpdateIncomingBookingsPostRequestIncomingBookingsInner Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IncomingGoodsIdIdUpdateIncomingBookingsPostRequestIncomingBookingsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_incomingGoods_id__id__updateIncomingBookings_post_request_incomingBookings_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'article_valuation_price' => 'float',
        'batch_number' => 'string',
        'book_into_warehouse' => 'bool',
        'confirmed_by_user_id' => 'string',
        'confirmed_by_user_id_deprecated' => 'string',
        'confirmed_date' => 'int',
        'confirmed_date_deprecated' => 'int',
        'confirmed_quantity_deprecated' => 'float',
        'created_date' => 'int',
        'expiration_date' => 'int',
        'id' => 'string',
        'incoming_goods_item_id' => 'string',
        'internal_transport_reference_id' => 'string',
        'last_modified_date' => 'int',
        'loading_equipment_identifier_id' => 'string',
        'quantity' => 'float',
        'serial_numbers' => 'string[]',
        'storage_place_id' => 'string',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'article_valuation_price' => 'decimal',
        'batch_number' => null,
        'book_into_warehouse' => null,
        'confirmed_by_user_id' => null,
        'confirmed_by_user_id_deprecated' => null,
        'confirmed_date' => 'timestamp',
        'confirmed_date_deprecated' => 'timestamp',
        'confirmed_quantity_deprecated' => 'decimal',
        'created_date' => 'timestamp',
        'expiration_date' => 'timestamp',
        'id' => null,
        'incoming_goods_item_id' => null,
        'internal_transport_reference_id' => null,
        'last_modified_date' => 'timestamp',
        'loading_equipment_identifier_id' => null,
        'quantity' => 'decimal',
        'serial_numbers' => null,
        'storage_place_id' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'article_valuation_price' => false,
        'batch_number' => false,
        'book_into_warehouse' => false,
        'confirmed_by_user_id' => false,
        'confirmed_by_user_id_deprecated' => false,
        'confirmed_date' => false,
        'confirmed_date_deprecated' => false,
        'confirmed_quantity_deprecated' => false,
        'created_date' => false,
        'expiration_date' => false,
        'id' => false,
        'incoming_goods_item_id' => false,
        'internal_transport_reference_id' => false,
        'last_modified_date' => false,
        'loading_equipment_identifier_id' => false,
        'quantity' => false,
        'serial_numbers' => false,
        'storage_place_id' => false,
        'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'article_valuation_price' => 'articleValuationPrice',
        'batch_number' => 'batchNumber',
        'book_into_warehouse' => 'bookIntoWarehouse',
        'confirmed_by_user_id' => 'confirmedByUserId',
        'confirmed_by_user_id_deprecated' => 'confirmedByUserIdDeprecated',
        'confirmed_date' => 'confirmedDate',
        'confirmed_date_deprecated' => 'confirmedDateDeprecated',
        'confirmed_quantity_deprecated' => 'confirmedQuantityDeprecated',
        'created_date' => 'createdDate',
        'expiration_date' => 'expirationDate',
        'id' => 'id',
        'incoming_goods_item_id' => 'incomingGoodsItemId',
        'internal_transport_reference_id' => 'internalTransportReferenceId',
        'last_modified_date' => 'lastModifiedDate',
        'loading_equipment_identifier_id' => 'loadingEquipmentIdentifierId',
        'quantity' => 'quantity',
        'serial_numbers' => 'serialNumbers',
        'storage_place_id' => 'storagePlaceId',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'article_valuation_price' => 'setArticleValuationPrice',
        'batch_number' => 'setBatchNumber',
        'book_into_warehouse' => 'setBookIntoWarehouse',
        'confirmed_by_user_id' => 'setConfirmedByUserId',
        'confirmed_by_user_id_deprecated' => 'setConfirmedByUserIdDeprecated',
        'confirmed_date' => 'setConfirmedDate',
        'confirmed_date_deprecated' => 'setConfirmedDateDeprecated',
        'confirmed_quantity_deprecated' => 'setConfirmedQuantityDeprecated',
        'created_date' => 'setCreatedDate',
        'expiration_date' => 'setExpirationDate',
        'id' => 'setId',
        'incoming_goods_item_id' => 'setIncomingGoodsItemId',
        'internal_transport_reference_id' => 'setInternalTransportReferenceId',
        'last_modified_date' => 'setLastModifiedDate',
        'loading_equipment_identifier_id' => 'setLoadingEquipmentIdentifierId',
        'quantity' => 'setQuantity',
        'serial_numbers' => 'setSerialNumbers',
        'storage_place_id' => 'setStoragePlaceId',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'article_valuation_price' => 'getArticleValuationPrice',
        'batch_number' => 'getBatchNumber',
        'book_into_warehouse' => 'getBookIntoWarehouse',
        'confirmed_by_user_id' => 'getConfirmedByUserId',
        'confirmed_by_user_id_deprecated' => 'getConfirmedByUserIdDeprecated',
        'confirmed_date' => 'getConfirmedDate',
        'confirmed_date_deprecated' => 'getConfirmedDateDeprecated',
        'confirmed_quantity_deprecated' => 'getConfirmedQuantityDeprecated',
        'created_date' => 'getCreatedDate',
        'expiration_date' => 'getExpirationDate',
        'id' => 'getId',
        'incoming_goods_item_id' => 'getIncomingGoodsItemId',
        'internal_transport_reference_id' => 'getInternalTransportReferenceId',
        'last_modified_date' => 'getLastModifiedDate',
        'loading_equipment_identifier_id' => 'getLoadingEquipmentIdentifierId',
        'quantity' => 'getQuantity',
        'serial_numbers' => 'getSerialNumbers',
        'storage_place_id' => 'getStoragePlaceId',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('article_valuation_price', $data ?? [], null);
        $this->setIfExists('batch_number', $data ?? [], null);
        $this->setIfExists('book_into_warehouse', $data ?? [], null);
        $this->setIfExists('confirmed_by_user_id', $data ?? [], null);
        $this->setIfExists('confirmed_by_user_id_deprecated', $data ?? [], null);
        $this->setIfExists('confirmed_date', $data ?? [], null);
        $this->setIfExists('confirmed_date_deprecated', $data ?? [], null);
        $this->setIfExists('confirmed_quantity_deprecated', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('incoming_goods_item_id', $data ?? [], null);
        $this->setIfExists('internal_transport_reference_id', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('loading_equipment_identifier_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('serial_numbers', $data ?? [], null);
        $this->setIfExists('storage_place_id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['article_valuation_price']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['article_valuation_price'])) {
            $invalidProperties[] = "invalid value for 'article_valuation_price', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['batch_number']) && (mb_strlen($this->container['batch_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'batch_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['confirmed_quantity_deprecated']) && !preg_match("/^-?([0-9]{1,13})/", $this->container['confirmed_quantity_deprecated'])) {
            $invalidProperties[] = "invalid value for 'confirmed_quantity_deprecated', must be conform to the pattern /^-?([0-9]{1,13})/.";
        }

        if (!is_null($this->container['quantity']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['quantity'])) {
            $invalidProperties[] = "invalid value for 'quantity', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets article_valuation_price
     *
     * @return float|null
     */
    public function getArticleValuationPrice()
    {
        return $this->container['article_valuation_price'];
    }

    /**
     * Sets article_valuation_price
     *
     * @param float|null $article_valuation_price article_valuation_price
     *
     * @return self
     */
    public function setArticleValuationPrice($article_valuation_price)
    {
        if (is_null($article_valuation_price)) {
            throw new \InvalidArgumentException('non-nullable article_valuation_price cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($article_valuation_price)))) {
            throw new \InvalidArgumentException("invalid value for \$article_valuation_price when calling IncomingGoodsIdIdUpdateIncomingBookingsPostRequestIncomingBookingsInner., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['article_valuation_price'] = $article_valuation_price;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return string|null
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string|null $batch_number batch_number
     *
     * @return self
     */
    public function setBatchNumber($batch_number)
    {
        if (is_null($batch_number)) {
            throw new \InvalidArgumentException('non-nullable batch_number cannot be null');
        }
        if ((mb_strlen($batch_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $batch_number when calling IncomingGoodsIdIdUpdateIncomingBookingsPostRequestIncomingBookingsInner., must be smaller than or equal to 1000.');
        }

        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets book_into_warehouse
     *
     * @return bool|null
     */
    public function getBookIntoWarehouse()
    {
        return $this->container['book_into_warehouse'];
    }

    /**
     * Sets book_into_warehouse
     *
     * @param bool|null $book_into_warehouse book_into_warehouse
     *
     * @return self
     */
    public function setBookIntoWarehouse($book_into_warehouse)
    {
        if (is_null($book_into_warehouse)) {
            throw new \InvalidArgumentException('non-nullable book_into_warehouse cannot be null');
        }
        $this->container['book_into_warehouse'] = $book_into_warehouse;

        return $this;
    }

    /**
     * Gets confirmed_by_user_id
     *
     * @return string|null
     */
    public function getConfirmedByUserId()
    {
        return $this->container['confirmed_by_user_id'];
    }

    /**
     * Sets confirmed_by_user_id
     *
     * @param string|null $confirmed_by_user_id confirmed_by_user_id
     *
     * @return self
     */
    public function setConfirmedByUserId($confirmed_by_user_id)
    {
        if (is_null($confirmed_by_user_id)) {
            throw new \InvalidArgumentException('non-nullable confirmed_by_user_id cannot be null');
        }
        $this->container['confirmed_by_user_id'] = $confirmed_by_user_id;

        return $this;
    }

    /**
     * Gets confirmed_by_user_id_deprecated
     *
     * @return string|null
     */
    public function getConfirmedByUserIdDeprecated()
    {
        return $this->container['confirmed_by_user_id_deprecated'];
    }

    /**
     * Sets confirmed_by_user_id_deprecated
     *
     * @param string|null $confirmed_by_user_id_deprecated confirmed_by_user_id_deprecated
     *
     * @return self
     */
    public function setConfirmedByUserIdDeprecated($confirmed_by_user_id_deprecated)
    {
        if (is_null($confirmed_by_user_id_deprecated)) {
            throw new \InvalidArgumentException('non-nullable confirmed_by_user_id_deprecated cannot be null');
        }
        $this->container['confirmed_by_user_id_deprecated'] = $confirmed_by_user_id_deprecated;

        return $this;
    }

    /**
     * Gets confirmed_date
     *
     * @return int|null
     */
    public function getConfirmedDate()
    {
        return $this->container['confirmed_date'];
    }

    /**
     * Sets confirmed_date
     *
     * @param int|null $confirmed_date confirmed_date
     *
     * @return self
     */
    public function setConfirmedDate($confirmed_date)
    {
        if (is_null($confirmed_date)) {
            throw new \InvalidArgumentException('non-nullable confirmed_date cannot be null');
        }
        $this->container['confirmed_date'] = $confirmed_date;

        return $this;
    }

    /**
     * Gets confirmed_date_deprecated
     *
     * @return int|null
     */
    public function getConfirmedDateDeprecated()
    {
        return $this->container['confirmed_date_deprecated'];
    }

    /**
     * Sets confirmed_date_deprecated
     *
     * @param int|null $confirmed_date_deprecated confirmed_date_deprecated
     *
     * @return self
     */
    public function setConfirmedDateDeprecated($confirmed_date_deprecated)
    {
        if (is_null($confirmed_date_deprecated)) {
            throw new \InvalidArgumentException('non-nullable confirmed_date_deprecated cannot be null');
        }
        $this->container['confirmed_date_deprecated'] = $confirmed_date_deprecated;

        return $this;
    }

    /**
     * Gets confirmed_quantity_deprecated
     *
     * @return float|null
     */
    public function getConfirmedQuantityDeprecated()
    {
        return $this->container['confirmed_quantity_deprecated'];
    }

    /**
     * Sets confirmed_quantity_deprecated
     *
     * @param float|null $confirmed_quantity_deprecated confirmed_quantity_deprecated
     *
     * @return self
     */
    public function setConfirmedQuantityDeprecated($confirmed_quantity_deprecated)
    {
        if (is_null($confirmed_quantity_deprecated)) {
            throw new \InvalidArgumentException('non-nullable confirmed_quantity_deprecated cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})/", ObjectSerializer::toString($confirmed_quantity_deprecated)))) {
            throw new \InvalidArgumentException("invalid value for \$confirmed_quantity_deprecated when calling IncomingGoodsIdIdUpdateIncomingBookingsPostRequestIncomingBookingsInner., must conform to the pattern /^-?([0-9]{1,13})/.");
        }

        $this->container['confirmed_quantity_deprecated'] = $confirmed_quantity_deprecated;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return int|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param int|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets incoming_goods_item_id
     *
     * @return string|null
     */
    public function getIncomingGoodsItemId()
    {
        return $this->container['incoming_goods_item_id'];
    }

    /**
     * Sets incoming_goods_item_id
     *
     * @param string|null $incoming_goods_item_id incoming_goods_item_id
     *
     * @return self
     */
    public function setIncomingGoodsItemId($incoming_goods_item_id)
    {
        if (is_null($incoming_goods_item_id)) {
            throw new \InvalidArgumentException('non-nullable incoming_goods_item_id cannot be null');
        }
        $this->container['incoming_goods_item_id'] = $incoming_goods_item_id;

        return $this;
    }

    /**
     * Gets internal_transport_reference_id
     *
     * @return string|null
     */
    public function getInternalTransportReferenceId()
    {
        return $this->container['internal_transport_reference_id'];
    }

    /**
     * Sets internal_transport_reference_id
     *
     * @param string|null $internal_transport_reference_id internal_transport_reference_id
     *
     * @return self
     */
    public function setInternalTransportReferenceId($internal_transport_reference_id)
    {
        if (is_null($internal_transport_reference_id)) {
            throw new \InvalidArgumentException('non-nullable internal_transport_reference_id cannot be null');
        }
        $this->container['internal_transport_reference_id'] = $internal_transport_reference_id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets loading_equipment_identifier_id
     *
     * @return string|null
     */
    public function getLoadingEquipmentIdentifierId()
    {
        return $this->container['loading_equipment_identifier_id'];
    }

    /**
     * Sets loading_equipment_identifier_id
     *
     * @param string|null $loading_equipment_identifier_id loading_equipment_identifier_id
     *
     * @return self
     */
    public function setLoadingEquipmentIdentifierId($loading_equipment_identifier_id)
    {
        if (is_null($loading_equipment_identifier_id)) {
            throw new \InvalidArgumentException('non-nullable loading_equipment_identifier_id cannot be null');
        }
        $this->container['loading_equipment_identifier_id'] = $loading_equipment_identifier_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$quantity when calling IncomingGoodsIdIdUpdateIncomingBookingsPostRequestIncomingBookingsInner., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets serial_numbers
     *
     * @return string[]|null
     */
    public function getSerialNumbers()
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers
     *
     * @param string[]|null $serial_numbers serial_numbers
     *
     * @return self
     */
    public function setSerialNumbers($serial_numbers)
    {
        if (is_null($serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable serial_numbers cannot be null');
        }
        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }

    /**
     * Gets storage_place_id
     *
     * @return string|null
     */
    public function getStoragePlaceId()
    {
        return $this->container['storage_place_id'];
    }

    /**
     * Sets storage_place_id
     *
     * @param string|null $storage_place_id storage_place_id
     *
     * @return self
     */
    public function setStoragePlaceId($storage_place_id)
    {
        if (is_null($storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable storage_place_id cannot be null');
        }
        $this->container['storage_place_id'] = $storage_place_id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


