<?php
/**
 * TransportationOrder
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * TransportationOrder Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransportationOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transportationOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'assigned_user_id' => 'string',
        'destination_storage_place_id' => 'string',
        'internal_transport_reference_id' => 'string',
        'loading_equipment_article_id' => 'string',
        'loading_equipment_identifier_id' => 'string',
        'picks' => '\kruegge82\weclapp\Model\TransportPick[]',
        'production_order_id' => 'string',
        'shipment_id' => 'string',
        'status' => '\kruegge82\weclapp\Model\TransportationOrderStatusType',
        'status_history' => '\kruegge82\weclapp\Model\TransportationOrderStatusHistory[]',
        'transportation_order_number' => 'string',
        'transportation_order_type' => '\kruegge82\weclapp\Model\TransportationOrderType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'assigned_user_id' => null,
        'destination_storage_place_id' => null,
        'internal_transport_reference_id' => null,
        'loading_equipment_article_id' => null,
        'loading_equipment_identifier_id' => null,
        'picks' => null,
        'production_order_id' => null,
        'shipment_id' => null,
        'status' => null,
        'status_history' => null,
        'transportation_order_number' => null,
        'transportation_order_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'assigned_user_id' => false,
        'destination_storage_place_id' => false,
        'internal_transport_reference_id' => false,
        'loading_equipment_article_id' => false,
        'loading_equipment_identifier_id' => false,
        'picks' => false,
        'production_order_id' => false,
        'shipment_id' => false,
        'status' => false,
        'status_history' => false,
        'transportation_order_number' => false,
        'transportation_order_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'assigned_user_id' => 'assignedUserId',
        'destination_storage_place_id' => 'destinationStoragePlaceId',
        'internal_transport_reference_id' => 'internalTransportReferenceId',
        'loading_equipment_article_id' => 'loadingEquipmentArticleId',
        'loading_equipment_identifier_id' => 'loadingEquipmentIdentifierId',
        'picks' => 'picks',
        'production_order_id' => 'productionOrderId',
        'shipment_id' => 'shipmentId',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'transportation_order_number' => 'transportationOrderNumber',
        'transportation_order_type' => 'transportationOrderType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'assigned_user_id' => 'setAssignedUserId',
        'destination_storage_place_id' => 'setDestinationStoragePlaceId',
        'internal_transport_reference_id' => 'setInternalTransportReferenceId',
        'loading_equipment_article_id' => 'setLoadingEquipmentArticleId',
        'loading_equipment_identifier_id' => 'setLoadingEquipmentIdentifierId',
        'picks' => 'setPicks',
        'production_order_id' => 'setProductionOrderId',
        'shipment_id' => 'setShipmentId',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'transportation_order_number' => 'setTransportationOrderNumber',
        'transportation_order_type' => 'setTransportationOrderType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'assigned_user_id' => 'getAssignedUserId',
        'destination_storage_place_id' => 'getDestinationStoragePlaceId',
        'internal_transport_reference_id' => 'getInternalTransportReferenceId',
        'loading_equipment_article_id' => 'getLoadingEquipmentArticleId',
        'loading_equipment_identifier_id' => 'getLoadingEquipmentIdentifierId',
        'picks' => 'getPicks',
        'production_order_id' => 'getProductionOrderId',
        'shipment_id' => 'getShipmentId',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'transportation_order_number' => 'getTransportationOrderNumber',
        'transportation_order_type' => 'getTransportationOrderType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('assigned_user_id', $data ?? [], null);
        $this->setIfExists('destination_storage_place_id', $data ?? [], null);
        $this->setIfExists('internal_transport_reference_id', $data ?? [], null);
        $this->setIfExists('loading_equipment_article_id', $data ?? [], null);
        $this->setIfExists('loading_equipment_identifier_id', $data ?? [], null);
        $this->setIfExists('picks', $data ?? [], null);
        $this->setIfExists('production_order_id', $data ?? [], null);
        $this->setIfExists('shipment_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('transportation_order_number', $data ?? [], null);
        $this->setIfExists('transportation_order_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['transportation_order_number']) && (mb_strlen($this->container['transportation_order_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'transportation_order_number', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets assigned_user_id
     *
     * @return string|null
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     *
     * @param string|null $assigned_user_id assigned_user_id
     *
     * @return self
     */
    public function setAssignedUserId($assigned_user_id)
    {
        if (is_null($assigned_user_id)) {
            throw new \InvalidArgumentException('non-nullable assigned_user_id cannot be null');
        }
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets destination_storage_place_id
     *
     * @return string|null
     */
    public function getDestinationStoragePlaceId()
    {
        return $this->container['destination_storage_place_id'];
    }

    /**
     * Sets destination_storage_place_id
     *
     * @param string|null $destination_storage_place_id destination_storage_place_id
     *
     * @return self
     */
    public function setDestinationStoragePlaceId($destination_storage_place_id)
    {
        if (is_null($destination_storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable destination_storage_place_id cannot be null');
        }
        $this->container['destination_storage_place_id'] = $destination_storage_place_id;

        return $this;
    }

    /**
     * Gets internal_transport_reference_id
     *
     * @return string|null
     */
    public function getInternalTransportReferenceId()
    {
        return $this->container['internal_transport_reference_id'];
    }

    /**
     * Sets internal_transport_reference_id
     *
     * @param string|null $internal_transport_reference_id internal_transport_reference_id
     *
     * @return self
     */
    public function setInternalTransportReferenceId($internal_transport_reference_id)
    {
        if (is_null($internal_transport_reference_id)) {
            throw new \InvalidArgumentException('non-nullable internal_transport_reference_id cannot be null');
        }
        $this->container['internal_transport_reference_id'] = $internal_transport_reference_id;

        return $this;
    }

    /**
     * Gets loading_equipment_article_id
     *
     * @return string|null
     */
    public function getLoadingEquipmentArticleId()
    {
        return $this->container['loading_equipment_article_id'];
    }

    /**
     * Sets loading_equipment_article_id
     *
     * @param string|null $loading_equipment_article_id loading_equipment_article_id
     *
     * @return self
     */
    public function setLoadingEquipmentArticleId($loading_equipment_article_id)
    {
        if (is_null($loading_equipment_article_id)) {
            throw new \InvalidArgumentException('non-nullable loading_equipment_article_id cannot be null');
        }
        $this->container['loading_equipment_article_id'] = $loading_equipment_article_id;

        return $this;
    }

    /**
     * Gets loading_equipment_identifier_id
     *
     * @return string|null
     */
    public function getLoadingEquipmentIdentifierId()
    {
        return $this->container['loading_equipment_identifier_id'];
    }

    /**
     * Sets loading_equipment_identifier_id
     *
     * @param string|null $loading_equipment_identifier_id loading_equipment_identifier_id
     *
     * @return self
     */
    public function setLoadingEquipmentIdentifierId($loading_equipment_identifier_id)
    {
        if (is_null($loading_equipment_identifier_id)) {
            throw new \InvalidArgumentException('non-nullable loading_equipment_identifier_id cannot be null');
        }
        $this->container['loading_equipment_identifier_id'] = $loading_equipment_identifier_id;

        return $this;
    }

    /**
     * Gets picks
     *
     * @return \kruegge82\weclapp\Model\TransportPick[]|null
     */
    public function getPicks()
    {
        return $this->container['picks'];
    }

    /**
     * Sets picks
     *
     * @param \kruegge82\weclapp\Model\TransportPick[]|null $picks picks
     *
     * @return self
     */
    public function setPicks($picks)
    {
        if (is_null($picks)) {
            throw new \InvalidArgumentException('non-nullable picks cannot be null');
        }
        $this->container['picks'] = $picks;

        return $this;
    }

    /**
     * Gets production_order_id
     *
     * @return string|null
     */
    public function getProductionOrderId()
    {
        return $this->container['production_order_id'];
    }

    /**
     * Sets production_order_id
     *
     * @param string|null $production_order_id production_order_id
     *
     * @return self
     */
    public function setProductionOrderId($production_order_id)
    {
        if (is_null($production_order_id)) {
            throw new \InvalidArgumentException('non-nullable production_order_id cannot be null');
        }
        $this->container['production_order_id'] = $production_order_id;

        return $this;
    }

    /**
     * Gets shipment_id
     *
     * @return string|null
     */
    public function getShipmentId()
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     *
     * @param string|null $shipment_id shipment_id
     *
     * @return self
     */
    public function setShipmentId($shipment_id)
    {
        if (is_null($shipment_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_id cannot be null');
        }
        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\TransportationOrderStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\TransportationOrderStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\TransportationOrderStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\TransportationOrderStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets transportation_order_number
     *
     * @return string|null
     */
    public function getTransportationOrderNumber()
    {
        return $this->container['transportation_order_number'];
    }

    /**
     * Sets transportation_order_number
     *
     * @param string|null $transportation_order_number transportation_order_number
     *
     * @return self
     */
    public function setTransportationOrderNumber($transportation_order_number)
    {
        if (is_null($transportation_order_number)) {
            throw new \InvalidArgumentException('non-nullable transportation_order_number cannot be null');
        }
        if ((mb_strlen($transportation_order_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $transportation_order_number when calling TransportationOrder., must be smaller than or equal to 1000.');
        }

        $this->container['transportation_order_number'] = $transportation_order_number;

        return $this;
    }

    /**
     * Gets transportation_order_type
     *
     * @return \kruegge82\weclapp\Model\TransportationOrderType|null
     */
    public function getTransportationOrderType()
    {
        return $this->container['transportation_order_type'];
    }

    /**
     * Sets transportation_order_type
     *
     * @param \kruegge82\weclapp\Model\TransportationOrderType|null $transportation_order_type transportation_order_type
     *
     * @return self
     */
    public function setTransportationOrderType($transportation_order_type)
    {
        if (is_null($transportation_order_type)) {
            throw new \InvalidArgumentException('non-nullable transportation_order_type cannot be null');
        }
        $this->container['transportation_order_type'] = $transportation_order_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


