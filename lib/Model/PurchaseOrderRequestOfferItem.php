<?php
/**
 * PurchaseOrderRequestOfferItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * PurchaseOrderRequestOfferItem Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PurchaseOrderRequestOfferItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'purchaseOrderRequestOfferItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'accepted' => 'bool',
        'article_id' => 'string',
        'article_number' => 'string',
        'container_quantity' => 'float',
        'description' => 'string',
        'description_fixed' => 'bool',
        'discount_percentage' => 'float',
        'gross_amount' => 'float',
        'gross_amount_in_company_currency' => 'float',
        'manual_quantity' => 'bool',
        'manual_unit_price' => 'bool',
        'min_quantity' => 'float',
        'net_amount' => 'float',
        'net_amount_for_statistics' => 'float',
        'net_amount_for_statistics_in_company_currency' => 'float',
        'net_amount_in_company_currency' => 'float',
        'note' => 'string',
        'parent_item_id' => 'string',
        'position_number' => 'int',
        'procurement_lead_days' => 'int',
        'purchase_order_request_item_id' => 'int',
        'quantity' => 'float',
        'reduction_addition_items' => '\kruegge82\weclapp\Model\ReductionAdditionItem[]',
        'scale_type' => '\kruegge82\weclapp\Model\PriceScaleType',
        'scale_values' => '\kruegge82\weclapp\Model\PurchaseOrderRequestOfferItemScaleValue[]',
        'supplier_article_number' => 'string',
        'tax_id' => 'string',
        'tax_name' => 'string',
        'title' => 'string',
        'unit_id' => 'string',
        'unit_name' => 'string',
        'unit_price' => 'float',
        'unit_price_in_company_currency' => 'float',
        'use_supplier_article_number' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'accepted' => null,
        'article_id' => null,
        'article_number' => null,
        'container_quantity' => 'decimal',
        'description' => 'html',
        'description_fixed' => null,
        'discount_percentage' => 'decimal',
        'gross_amount' => 'decimal',
        'gross_amount_in_company_currency' => 'decimal',
        'manual_quantity' => null,
        'manual_unit_price' => null,
        'min_quantity' => 'decimal',
        'net_amount' => 'decimal',
        'net_amount_for_statistics' => 'decimal',
        'net_amount_for_statistics_in_company_currency' => 'decimal',
        'net_amount_in_company_currency' => 'decimal',
        'note' => null,
        'parent_item_id' => null,
        'position_number' => 'int32',
        'procurement_lead_days' => 'int32',
        'purchase_order_request_item_id' => 'int32',
        'quantity' => 'decimal',
        'reduction_addition_items' => null,
        'scale_type' => null,
        'scale_values' => null,
        'supplier_article_number' => null,
        'tax_id' => null,
        'tax_name' => null,
        'title' => null,
        'unit_id' => null,
        'unit_name' => null,
        'unit_price' => 'decimal',
        'unit_price_in_company_currency' => 'decimal',
        'use_supplier_article_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'accepted' => false,
        'article_id' => false,
        'article_number' => false,
        'container_quantity' => false,
        'description' => false,
        'description_fixed' => false,
        'discount_percentage' => false,
        'gross_amount' => false,
        'gross_amount_in_company_currency' => false,
        'manual_quantity' => false,
        'manual_unit_price' => false,
        'min_quantity' => false,
        'net_amount' => false,
        'net_amount_for_statistics' => false,
        'net_amount_for_statistics_in_company_currency' => false,
        'net_amount_in_company_currency' => false,
        'note' => false,
        'parent_item_id' => false,
        'position_number' => false,
        'procurement_lead_days' => false,
        'purchase_order_request_item_id' => false,
        'quantity' => false,
        'reduction_addition_items' => false,
        'scale_type' => false,
        'scale_values' => false,
        'supplier_article_number' => false,
        'tax_id' => false,
        'tax_name' => false,
        'title' => false,
        'unit_id' => false,
        'unit_name' => false,
        'unit_price' => false,
        'unit_price_in_company_currency' => false,
        'use_supplier_article_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'accepted' => 'accepted',
        'article_id' => 'articleId',
        'article_number' => 'articleNumber',
        'container_quantity' => 'containerQuantity',
        'description' => 'description',
        'description_fixed' => 'descriptionFixed',
        'discount_percentage' => 'discountPercentage',
        'gross_amount' => 'grossAmount',
        'gross_amount_in_company_currency' => 'grossAmountInCompanyCurrency',
        'manual_quantity' => 'manualQuantity',
        'manual_unit_price' => 'manualUnitPrice',
        'min_quantity' => 'minQuantity',
        'net_amount' => 'netAmount',
        'net_amount_for_statistics' => 'netAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'netAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'netAmountInCompanyCurrency',
        'note' => 'note',
        'parent_item_id' => 'parentItemId',
        'position_number' => 'positionNumber',
        'procurement_lead_days' => 'procurementLeadDays',
        'purchase_order_request_item_id' => 'purchaseOrderRequestItemId',
        'quantity' => 'quantity',
        'reduction_addition_items' => 'reductionAdditionItems',
        'scale_type' => 'scaleType',
        'scale_values' => 'scaleValues',
        'supplier_article_number' => 'supplierArticleNumber',
        'tax_id' => 'taxId',
        'tax_name' => 'taxName',
        'title' => 'title',
        'unit_id' => 'unitId',
        'unit_name' => 'unitName',
        'unit_price' => 'unitPrice',
        'unit_price_in_company_currency' => 'unitPriceInCompanyCurrency',
        'use_supplier_article_number' => 'useSupplierArticleNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'accepted' => 'setAccepted',
        'article_id' => 'setArticleId',
        'article_number' => 'setArticleNumber',
        'container_quantity' => 'setContainerQuantity',
        'description' => 'setDescription',
        'description_fixed' => 'setDescriptionFixed',
        'discount_percentage' => 'setDiscountPercentage',
        'gross_amount' => 'setGrossAmount',
        'gross_amount_in_company_currency' => 'setGrossAmountInCompanyCurrency',
        'manual_quantity' => 'setManualQuantity',
        'manual_unit_price' => 'setManualUnitPrice',
        'min_quantity' => 'setMinQuantity',
        'net_amount' => 'setNetAmount',
        'net_amount_for_statistics' => 'setNetAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'setNetAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'setNetAmountInCompanyCurrency',
        'note' => 'setNote',
        'parent_item_id' => 'setParentItemId',
        'position_number' => 'setPositionNumber',
        'procurement_lead_days' => 'setProcurementLeadDays',
        'purchase_order_request_item_id' => 'setPurchaseOrderRequestItemId',
        'quantity' => 'setQuantity',
        'reduction_addition_items' => 'setReductionAdditionItems',
        'scale_type' => 'setScaleType',
        'scale_values' => 'setScaleValues',
        'supplier_article_number' => 'setSupplierArticleNumber',
        'tax_id' => 'setTaxId',
        'tax_name' => 'setTaxName',
        'title' => 'setTitle',
        'unit_id' => 'setUnitId',
        'unit_name' => 'setUnitName',
        'unit_price' => 'setUnitPrice',
        'unit_price_in_company_currency' => 'setUnitPriceInCompanyCurrency',
        'use_supplier_article_number' => 'setUseSupplierArticleNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'accepted' => 'getAccepted',
        'article_id' => 'getArticleId',
        'article_number' => 'getArticleNumber',
        'container_quantity' => 'getContainerQuantity',
        'description' => 'getDescription',
        'description_fixed' => 'getDescriptionFixed',
        'discount_percentage' => 'getDiscountPercentage',
        'gross_amount' => 'getGrossAmount',
        'gross_amount_in_company_currency' => 'getGrossAmountInCompanyCurrency',
        'manual_quantity' => 'getManualQuantity',
        'manual_unit_price' => 'getManualUnitPrice',
        'min_quantity' => 'getMinQuantity',
        'net_amount' => 'getNetAmount',
        'net_amount_for_statistics' => 'getNetAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'getNetAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'getNetAmountInCompanyCurrency',
        'note' => 'getNote',
        'parent_item_id' => 'getParentItemId',
        'position_number' => 'getPositionNumber',
        'procurement_lead_days' => 'getProcurementLeadDays',
        'purchase_order_request_item_id' => 'getPurchaseOrderRequestItemId',
        'quantity' => 'getQuantity',
        'reduction_addition_items' => 'getReductionAdditionItems',
        'scale_type' => 'getScaleType',
        'scale_values' => 'getScaleValues',
        'supplier_article_number' => 'getSupplierArticleNumber',
        'tax_id' => 'getTaxId',
        'tax_name' => 'getTaxName',
        'title' => 'getTitle',
        'unit_id' => 'getUnitId',
        'unit_name' => 'getUnitName',
        'unit_price' => 'getUnitPrice',
        'unit_price_in_company_currency' => 'getUnitPriceInCompanyCurrency',
        'use_supplier_article_number' => 'getUseSupplierArticleNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('accepted', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('article_number', $data ?? [], null);
        $this->setIfExists('container_quantity', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description_fixed', $data ?? [], null);
        $this->setIfExists('discount_percentage', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('gross_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('manual_quantity', $data ?? [], null);
        $this->setIfExists('manual_unit_price', $data ?? [], null);
        $this->setIfExists('min_quantity', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('net_amount_for_statistics', $data ?? [], null);
        $this->setIfExists('net_amount_for_statistics_in_company_currency', $data ?? [], null);
        $this->setIfExists('net_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('parent_item_id', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('procurement_lead_days', $data ?? [], null);
        $this->setIfExists('purchase_order_request_item_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('reduction_addition_items', $data ?? [], null);
        $this->setIfExists('scale_type', $data ?? [], null);
        $this->setIfExists('scale_values', $data ?? [], null);
        $this->setIfExists('supplier_article_number', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('tax_name', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
        $this->setIfExists('unit_name', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('unit_price_in_company_currency', $data ?? [], null);
        $this->setIfExists('use_supplier_article_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['container_quantity']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['container_quantity'])) {
            $invalidProperties[] = "invalid value for 'container_quantity', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['discount_percentage']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['discount_percentage'])) {
            $invalidProperties[] = "invalid value for 'discount_percentage', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount'])) {
            $invalidProperties[] = "invalid value for 'gross_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'gross_amount_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['min_quantity']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['min_quantity'])) {
            $invalidProperties[] = "invalid value for 'min_quantity', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount'])) {
            $invalidProperties[] = "invalid value for 'net_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_for_statistics']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_for_statistics'])) {
            $invalidProperties[] = "invalid value for 'net_amount_for_statistics', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_for_statistics_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_for_statistics_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'net_amount_for_statistics_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'net_amount_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 1000)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['quantity']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['quantity'])) {
            $invalidProperties[] = "invalid value for 'quantity', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['supplier_article_number']) && (mb_strlen($this->container['supplier_article_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'supplier_article_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 1000)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['unit_price']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['unit_price'])) {
            $invalidProperties[] = "invalid value for 'unit_price', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['unit_price_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['unit_price_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'unit_price_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets accepted
     *
     * @return bool|null
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param bool|null $accepted accepted
     *
     * @return self
     */
    public function setAccepted($accepted)
    {
        if (is_null($accepted)) {
            throw new \InvalidArgumentException('non-nullable accepted cannot be null');
        }
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     * @deprecated
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     * @deprecated
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string|null
     * @deprecated
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string|null $article_number article_number
     *
     * @return self
     * @deprecated
     */
    public function setArticleNumber($article_number)
    {
        if (is_null($article_number)) {
            throw new \InvalidArgumentException('non-nullable article_number cannot be null');
        }
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets container_quantity
     *
     * @return float|null
     */
    public function getContainerQuantity()
    {
        return $this->container['container_quantity'];
    }

    /**
     * Sets container_quantity
     *
     * @param float|null $container_quantity container_quantity
     *
     * @return self
     */
    public function setContainerQuantity($container_quantity)
    {
        if (is_null($container_quantity)) {
            throw new \InvalidArgumentException('non-nullable container_quantity cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($container_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$container_quantity when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['container_quantity'] = $container_quantity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     * @deprecated
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     * @deprecated
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_fixed
     *
     * @return bool|null
     * @deprecated
     */
    public function getDescriptionFixed()
    {
        return $this->container['description_fixed'];
    }

    /**
     * Sets description_fixed
     *
     * @param bool|null $description_fixed description_fixed
     *
     * @return self
     * @deprecated
     */
    public function setDescriptionFixed($description_fixed)
    {
        if (is_null($description_fixed)) {
            throw new \InvalidArgumentException('non-nullable description_fixed cannot be null');
        }
        $this->container['description_fixed'] = $description_fixed;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param float|null $discount_percentage discount_percentage
     *
     * @return self
     */
    public function setDiscountPercentage($discount_percentage)
    {
        if (is_null($discount_percentage)) {
            throw new \InvalidArgumentException('non-nullable discount_percentage cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($discount_percentage)))) {
            throw new \InvalidArgumentException("invalid value for \$discount_percentage when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets gross_amount_in_company_currency
     *
     * @return float|null
     */
    public function getGrossAmountInCompanyCurrency()
    {
        return $this->container['gross_amount_in_company_currency'];
    }

    /**
     * Sets gross_amount_in_company_currency
     *
     * @param float|null $gross_amount_in_company_currency gross_amount_in_company_currency
     *
     * @return self
     */
    public function setGrossAmountInCompanyCurrency($gross_amount_in_company_currency)
    {
        if (is_null($gross_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable gross_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount_in_company_currency when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount_in_company_currency'] = $gross_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets manual_quantity
     *
     * @return bool|null
     * @deprecated
     */
    public function getManualQuantity()
    {
        return $this->container['manual_quantity'];
    }

    /**
     * Sets manual_quantity
     *
     * @param bool|null $manual_quantity manual_quantity
     *
     * @return self
     * @deprecated
     */
    public function setManualQuantity($manual_quantity)
    {
        if (is_null($manual_quantity)) {
            throw new \InvalidArgumentException('non-nullable manual_quantity cannot be null');
        }
        $this->container['manual_quantity'] = $manual_quantity;

        return $this;
    }

    /**
     * Gets manual_unit_price
     *
     * @return bool|null
     * @deprecated
     */
    public function getManualUnitPrice()
    {
        return $this->container['manual_unit_price'];
    }

    /**
     * Sets manual_unit_price
     *
     * @param bool|null $manual_unit_price manual_unit_price
     *
     * @return self
     * @deprecated
     */
    public function setManualUnitPrice($manual_unit_price)
    {
        if (is_null($manual_unit_price)) {
            throw new \InvalidArgumentException('non-nullable manual_unit_price cannot be null');
        }
        $this->container['manual_unit_price'] = $manual_unit_price;

        return $this;
    }

    /**
     * Gets min_quantity
     *
     * @return float|null
     */
    public function getMinQuantity()
    {
        return $this->container['min_quantity'];
    }

    /**
     * Sets min_quantity
     *
     * @param float|null $min_quantity min_quantity
     *
     * @return self
     */
    public function setMinQuantity($min_quantity)
    {
        if (is_null($min_quantity)) {
            throw new \InvalidArgumentException('non-nullable min_quantity cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($min_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$min_quantity when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['min_quantity'] = $min_quantity;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets net_amount_for_statistics
     *
     * @return float|null
     */
    public function getNetAmountForStatistics()
    {
        return $this->container['net_amount_for_statistics'];
    }

    /**
     * Sets net_amount_for_statistics
     *
     * @param float|null $net_amount_for_statistics net_amount_for_statistics
     *
     * @return self
     */
    public function setNetAmountForStatistics($net_amount_for_statistics)
    {
        if (is_null($net_amount_for_statistics)) {
            throw new \InvalidArgumentException('non-nullable net_amount_for_statistics cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_for_statistics)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_for_statistics when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_for_statistics'] = $net_amount_for_statistics;

        return $this;
    }

    /**
     * Gets net_amount_for_statistics_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountForStatisticsInCompanyCurrency()
    {
        return $this->container['net_amount_for_statistics_in_company_currency'];
    }

    /**
     * Sets net_amount_for_statistics_in_company_currency
     *
     * @param float|null $net_amount_for_statistics_in_company_currency net_amount_for_statistics_in_company_currency
     *
     * @return self
     */
    public function setNetAmountForStatisticsInCompanyCurrency($net_amount_for_statistics_in_company_currency)
    {
        if (is_null($net_amount_for_statistics_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_for_statistics_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_for_statistics_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_for_statistics_in_company_currency when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_for_statistics_in_company_currency'] = $net_amount_for_statistics_in_company_currency;

        return $this;
    }

    /**
     * Gets net_amount_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountInCompanyCurrency()
    {
        return $this->container['net_amount_in_company_currency'];
    }

    /**
     * Sets net_amount_in_company_currency
     *
     * @param float|null $net_amount_in_company_currency net_amount_in_company_currency
     *
     * @return self
     */
    public function setNetAmountInCompanyCurrency($net_amount_in_company_currency)
    {
        if (is_null($net_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_in_company_currency when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_in_company_currency'] = $net_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     * @deprecated
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     * @deprecated
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        if ((mb_strlen($note) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $note when calling PurchaseOrderRequestOfferItem., must be smaller than or equal to 1000.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets parent_item_id
     *
     * @return string|null
     * @deprecated
     */
    public function getParentItemId()
    {
        return $this->container['parent_item_id'];
    }

    /**
     * Sets parent_item_id
     *
     * @param string|null $parent_item_id parent_item_id
     *
     * @return self
     * @deprecated
     */
    public function setParentItemId($parent_item_id)
    {
        if (is_null($parent_item_id)) {
            throw new \InvalidArgumentException('non-nullable parent_item_id cannot be null');
        }
        $this->container['parent_item_id'] = $parent_item_id;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     * @deprecated
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     * @deprecated
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets procurement_lead_days
     *
     * @return int|null
     */
    public function getProcurementLeadDays()
    {
        return $this->container['procurement_lead_days'];
    }

    /**
     * Sets procurement_lead_days
     *
     * @param int|null $procurement_lead_days procurement_lead_days
     *
     * @return self
     */
    public function setProcurementLeadDays($procurement_lead_days)
    {
        if (is_null($procurement_lead_days)) {
            throw new \InvalidArgumentException('non-nullable procurement_lead_days cannot be null');
        }
        $this->container['procurement_lead_days'] = $procurement_lead_days;

        return $this;
    }

    /**
     * Gets purchase_order_request_item_id
     *
     * @return int|null
     * @deprecated
     */
    public function getPurchaseOrderRequestItemId()
    {
        return $this->container['purchase_order_request_item_id'];
    }

    /**
     * Sets purchase_order_request_item_id
     *
     * @param int|null $purchase_order_request_item_id purchase_order_request_item_id
     *
     * @return self
     * @deprecated
     */
    public function setPurchaseOrderRequestItemId($purchase_order_request_item_id)
    {
        if (is_null($purchase_order_request_item_id)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_request_item_id cannot be null');
        }
        $this->container['purchase_order_request_item_id'] = $purchase_order_request_item_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     * @deprecated
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     * @deprecated
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$quantity when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reduction_addition_items
     *
     * @return \kruegge82\weclapp\Model\ReductionAdditionItem[]|null
     */
    public function getReductionAdditionItems()
    {
        return $this->container['reduction_addition_items'];
    }

    /**
     * Sets reduction_addition_items
     *
     * @param \kruegge82\weclapp\Model\ReductionAdditionItem[]|null $reduction_addition_items reduction_addition_items
     *
     * @return self
     */
    public function setReductionAdditionItems($reduction_addition_items)
    {
        if (is_null($reduction_addition_items)) {
            throw new \InvalidArgumentException('non-nullable reduction_addition_items cannot be null');
        }
        $this->container['reduction_addition_items'] = $reduction_addition_items;

        return $this;
    }

    /**
     * Gets scale_type
     *
     * @return \kruegge82\weclapp\Model\PriceScaleType|null
     */
    public function getScaleType()
    {
        return $this->container['scale_type'];
    }

    /**
     * Sets scale_type
     *
     * @param \kruegge82\weclapp\Model\PriceScaleType|null $scale_type scale_type
     *
     * @return self
     */
    public function setScaleType($scale_type)
    {
        if (is_null($scale_type)) {
            throw new \InvalidArgumentException('non-nullable scale_type cannot be null');
        }
        $this->container['scale_type'] = $scale_type;

        return $this;
    }

    /**
     * Gets scale_values
     *
     * @return \kruegge82\weclapp\Model\PurchaseOrderRequestOfferItemScaleValue[]|null
     */
    public function getScaleValues()
    {
        return $this->container['scale_values'];
    }

    /**
     * Sets scale_values
     *
     * @param \kruegge82\weclapp\Model\PurchaseOrderRequestOfferItemScaleValue[]|null $scale_values scale_values
     *
     * @return self
     */
    public function setScaleValues($scale_values)
    {
        if (is_null($scale_values)) {
            throw new \InvalidArgumentException('non-nullable scale_values cannot be null');
        }
        $this->container['scale_values'] = $scale_values;

        return $this;
    }

    /**
     * Gets supplier_article_number
     *
     * @return string|null
     */
    public function getSupplierArticleNumber()
    {
        return $this->container['supplier_article_number'];
    }

    /**
     * Sets supplier_article_number
     *
     * @param string|null $supplier_article_number supplier_article_number
     *
     * @return self
     */
    public function setSupplierArticleNumber($supplier_article_number)
    {
        if (is_null($supplier_article_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_article_number cannot be null');
        }
        if ((mb_strlen($supplier_article_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $supplier_article_number when calling PurchaseOrderRequestOfferItem., must be smaller than or equal to 1000.');
        }

        $this->container['supplier_article_number'] = $supplier_article_number;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets tax_name
     *
     * @return string|null
     * @deprecated
     */
    public function getTaxName()
    {
        return $this->container['tax_name'];
    }

    /**
     * Sets tax_name
     *
     * @param string|null $tax_name tax_name
     *
     * @return self
     * @deprecated
     */
    public function setTaxName($tax_name)
    {
        if (is_null($tax_name)) {
            throw new \InvalidArgumentException('non-nullable tax_name cannot be null');
        }
        $this->container['tax_name'] = $tax_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     * @deprecated
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     * @deprecated
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $title when calling PurchaseOrderRequestOfferItem., must be smaller than or equal to 1000.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string|null
     * @deprecated
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string|null $unit_id unit_id
     *
     * @return self
     * @deprecated
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            throw new \InvalidArgumentException('non-nullable unit_id cannot be null');
        }
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_name
     *
     * @return string|null
     * @deprecated
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     *
     * @param string|null $unit_name unit_name
     *
     * @return self
     * @deprecated
     */
    public function setUnitName($unit_name)
    {
        if (is_null($unit_name)) {
            throw new \InvalidArgumentException('non-nullable unit_name cannot be null');
        }
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price unit_price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($unit_price)))) {
            throw new \InvalidArgumentException("invalid value for \$unit_price when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_in_company_currency
     *
     * @return float|null
     */
    public function getUnitPriceInCompanyCurrency()
    {
        return $this->container['unit_price_in_company_currency'];
    }

    /**
     * Sets unit_price_in_company_currency
     *
     * @param float|null $unit_price_in_company_currency unit_price_in_company_currency
     *
     * @return self
     */
    public function setUnitPriceInCompanyCurrency($unit_price_in_company_currency)
    {
        if (is_null($unit_price_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable unit_price_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($unit_price_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$unit_price_in_company_currency when calling PurchaseOrderRequestOfferItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['unit_price_in_company_currency'] = $unit_price_in_company_currency;

        return $this;
    }

    /**
     * Gets use_supplier_article_number
     *
     * @return bool|null
     */
    public function getUseSupplierArticleNumber()
    {
        return $this->container['use_supplier_article_number'];
    }

    /**
     * Sets use_supplier_article_number
     *
     * @param bool|null $use_supplier_article_number use_supplier_article_number
     *
     * @return self
     */
    public function setUseSupplierArticleNumber($use_supplier_article_number)
    {
        if (is_null($use_supplier_article_number)) {
            throw new \InvalidArgumentException('non-nullable use_supplier_article_number cannot be null');
        }
        $this->container['use_supplier_article_number'] = $use_supplier_article_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


