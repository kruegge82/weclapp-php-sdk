<?php
/**
 * Shipment
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Shipment Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Shipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'commercial_language' => 'string',
        'creator_id' => 'string',
        'description' => 'string',
        'disable_record_emailing_rule' => 'bool',
        'record_comment' => 'string',
        'record_free_text' => 'string',
        'record_opening' => 'string',
        'sent_to_recipient' => 'bool',
        'tags' => 'string[]',
        'invoice_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'recipient_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'sales_orders' => '\kruegge82\weclapp\Model\OnlyId[]',
        'status' => '\kruegge82\weclapp\Model\ShipmentStatusType',
        'status_history' => '\kruegge82\weclapp\Model\ShipmentStatus[]',
        'additional_delivery_information' => 'string',
        'availability' => '\kruegge82\weclapp\Model\DispositionInfoAvailabilityType',
        'availability_for_all_warehouses' => '\kruegge82\weclapp\Model\DispositionInfoAvailabilityType',
        'consolidation_storage_place_id' => 'string',
        'customer_purchase_order_number' => 'string',
        'declared_value_amount' => 'float',
        'declared_value_amount_currency_id' => 'string',
        'delivery_date' => 'int',
        'destination_storage_place_id' => 'string',
        'destination_warehouse_id' => 'string',
        'dhl_receiver_id' => 'string',
        'invoice_recipient_id' => 'string',
        'main_sales_order_id' => 'string',
        'package_height' => 'int',
        'package_length' => 'int',
        'package_reference_number' => 'string',
        'package_return_tracking_number' => 'string',
        'package_return_tracking_url' => 'string',
        'package_tracking_number' => 'string',
        'package_tracking_url' => 'string',
        'package_weight' => 'float',
        'package_width' => 'int',
        'picking_instructions' => 'string',
        'picks_complete' => 'bool',
        'purchase_orders' => '\kruegge82\weclapp\Model\OnlyId[]',
        'recipient_customer_number' => 'string',
        'recipient_party_id' => 'string',
        'recipient_supplier_number' => 'string',
        'record_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'responsible_user_id' => 'string',
        'sales_invoice_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'shipment_items' => '\kruegge82\weclapp\Model\ShipmentItem[]',
        'shipment_method_id' => 'string',
        'shipment_number' => 'string',
        'shipment_type' => '\kruegge82\weclapp\Model\ShipmentOutType',
        'shipped_from_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'shipping_carrier_id' => 'string',
        'shipping_date' => 'int',
        'shipping_labels_count' => 'int',
        'shipping_return_carrier_id' => 'string',
        'warehouse_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'commercial_language' => null,
        'creator_id' => null,
        'description' => 'html',
        'disable_record_emailing_rule' => null,
        'record_comment' => 'html',
        'record_free_text' => 'html',
        'record_opening' => 'html',
        'sent_to_recipient' => null,
        'tags' => null,
        'invoice_address' => null,
        'recipient_address' => null,
        'sales_orders' => null,
        'status' => null,
        'status_history' => null,
        'additional_delivery_information' => 'html',
        'availability' => null,
        'availability_for_all_warehouses' => null,
        'consolidation_storage_place_id' => null,
        'customer_purchase_order_number' => null,
        'declared_value_amount' => 'decimal',
        'declared_value_amount_currency_id' => null,
        'delivery_date' => 'timestamp',
        'destination_storage_place_id' => null,
        'destination_warehouse_id' => null,
        'dhl_receiver_id' => null,
        'invoice_recipient_id' => null,
        'main_sales_order_id' => null,
        'package_height' => 'int32',
        'package_length' => 'int32',
        'package_reference_number' => null,
        'package_return_tracking_number' => null,
        'package_return_tracking_url' => null,
        'package_tracking_number' => null,
        'package_tracking_url' => null,
        'package_weight' => 'decimal',
        'package_width' => 'int32',
        'picking_instructions' => null,
        'picks_complete' => null,
        'purchase_orders' => null,
        'recipient_customer_number' => null,
        'recipient_party_id' => null,
        'recipient_supplier_number' => null,
        'record_email_addresses' => null,
        'responsible_user_id' => null,
        'sales_invoice_email_addresses' => null,
        'shipment_items' => null,
        'shipment_method_id' => null,
        'shipment_number' => null,
        'shipment_type' => null,
        'shipped_from_address' => null,
        'shipping_carrier_id' => null,
        'shipping_date' => 'timestamp',
        'shipping_labels_count' => 'int32',
        'shipping_return_carrier_id' => null,
        'warehouse_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'commercial_language' => false,
        'creator_id' => false,
        'description' => false,
        'disable_record_emailing_rule' => false,
        'record_comment' => false,
        'record_free_text' => false,
        'record_opening' => false,
        'sent_to_recipient' => false,
        'tags' => false,
        'invoice_address' => false,
        'recipient_address' => false,
        'sales_orders' => false,
        'status' => false,
        'status_history' => false,
        'additional_delivery_information' => false,
        'availability' => false,
        'availability_for_all_warehouses' => false,
        'consolidation_storage_place_id' => false,
        'customer_purchase_order_number' => false,
        'declared_value_amount' => false,
        'declared_value_amount_currency_id' => false,
        'delivery_date' => false,
        'destination_storage_place_id' => false,
        'destination_warehouse_id' => false,
        'dhl_receiver_id' => false,
        'invoice_recipient_id' => false,
        'main_sales_order_id' => false,
        'package_height' => false,
        'package_length' => false,
        'package_reference_number' => false,
        'package_return_tracking_number' => false,
        'package_return_tracking_url' => false,
        'package_tracking_number' => false,
        'package_tracking_url' => false,
        'package_weight' => false,
        'package_width' => false,
        'picking_instructions' => false,
        'picks_complete' => false,
        'purchase_orders' => false,
        'recipient_customer_number' => false,
        'recipient_party_id' => false,
        'recipient_supplier_number' => false,
        'record_email_addresses' => false,
        'responsible_user_id' => false,
        'sales_invoice_email_addresses' => false,
        'shipment_items' => false,
        'shipment_method_id' => false,
        'shipment_number' => false,
        'shipment_type' => false,
        'shipped_from_address' => false,
        'shipping_carrier_id' => false,
        'shipping_date' => false,
        'shipping_labels_count' => false,
        'shipping_return_carrier_id' => false,
        'warehouse_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'commercial_language' => 'commercialLanguage',
        'creator_id' => 'creatorId',
        'description' => 'description',
        'disable_record_emailing_rule' => 'disableRecordEmailingRule',
        'record_comment' => 'recordComment',
        'record_free_text' => 'recordFreeText',
        'record_opening' => 'recordOpening',
        'sent_to_recipient' => 'sentToRecipient',
        'tags' => 'tags',
        'invoice_address' => 'invoiceAddress',
        'recipient_address' => 'recipientAddress',
        'sales_orders' => 'salesOrders',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'additional_delivery_information' => 'additionalDeliveryInformation',
        'availability' => 'availability',
        'availability_for_all_warehouses' => 'availabilityForAllWarehouses',
        'consolidation_storage_place_id' => 'consolidationStoragePlaceId',
        'customer_purchase_order_number' => 'customerPurchaseOrderNumber',
        'declared_value_amount' => 'declaredValueAmount',
        'declared_value_amount_currency_id' => 'declaredValueAmountCurrencyId',
        'delivery_date' => 'deliveryDate',
        'destination_storage_place_id' => 'destinationStoragePlaceId',
        'destination_warehouse_id' => 'destinationWarehouseId',
        'dhl_receiver_id' => 'dhlReceiverId',
        'invoice_recipient_id' => 'invoiceRecipientId',
        'main_sales_order_id' => 'mainSalesOrderId',
        'package_height' => 'packageHeight',
        'package_length' => 'packageLength',
        'package_reference_number' => 'packageReferenceNumber',
        'package_return_tracking_number' => 'packageReturnTrackingNumber',
        'package_return_tracking_url' => 'packageReturnTrackingUrl',
        'package_tracking_number' => 'packageTrackingNumber',
        'package_tracking_url' => 'packageTrackingUrl',
        'package_weight' => 'packageWeight',
        'package_width' => 'packageWidth',
        'picking_instructions' => 'pickingInstructions',
        'picks_complete' => 'picksComplete',
        'purchase_orders' => 'purchaseOrders',
        'recipient_customer_number' => 'recipientCustomerNumber',
        'recipient_party_id' => 'recipientPartyId',
        'recipient_supplier_number' => 'recipientSupplierNumber',
        'record_email_addresses' => 'recordEmailAddresses',
        'responsible_user_id' => 'responsibleUserId',
        'sales_invoice_email_addresses' => 'salesInvoiceEmailAddresses',
        'shipment_items' => 'shipmentItems',
        'shipment_method_id' => 'shipmentMethodId',
        'shipment_number' => 'shipmentNumber',
        'shipment_type' => 'shipmentType',
        'shipped_from_address' => 'shippedFromAddress',
        'shipping_carrier_id' => 'shippingCarrierId',
        'shipping_date' => 'shippingDate',
        'shipping_labels_count' => 'shippingLabelsCount',
        'shipping_return_carrier_id' => 'shippingReturnCarrierId',
        'warehouse_id' => 'warehouseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'commercial_language' => 'setCommercialLanguage',
        'creator_id' => 'setCreatorId',
        'description' => 'setDescription',
        'disable_record_emailing_rule' => 'setDisableRecordEmailingRule',
        'record_comment' => 'setRecordComment',
        'record_free_text' => 'setRecordFreeText',
        'record_opening' => 'setRecordOpening',
        'sent_to_recipient' => 'setSentToRecipient',
        'tags' => 'setTags',
        'invoice_address' => 'setInvoiceAddress',
        'recipient_address' => 'setRecipientAddress',
        'sales_orders' => 'setSalesOrders',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'additional_delivery_information' => 'setAdditionalDeliveryInformation',
        'availability' => 'setAvailability',
        'availability_for_all_warehouses' => 'setAvailabilityForAllWarehouses',
        'consolidation_storage_place_id' => 'setConsolidationStoragePlaceId',
        'customer_purchase_order_number' => 'setCustomerPurchaseOrderNumber',
        'declared_value_amount' => 'setDeclaredValueAmount',
        'declared_value_amount_currency_id' => 'setDeclaredValueAmountCurrencyId',
        'delivery_date' => 'setDeliveryDate',
        'destination_storage_place_id' => 'setDestinationStoragePlaceId',
        'destination_warehouse_id' => 'setDestinationWarehouseId',
        'dhl_receiver_id' => 'setDhlReceiverId',
        'invoice_recipient_id' => 'setInvoiceRecipientId',
        'main_sales_order_id' => 'setMainSalesOrderId',
        'package_height' => 'setPackageHeight',
        'package_length' => 'setPackageLength',
        'package_reference_number' => 'setPackageReferenceNumber',
        'package_return_tracking_number' => 'setPackageReturnTrackingNumber',
        'package_return_tracking_url' => 'setPackageReturnTrackingUrl',
        'package_tracking_number' => 'setPackageTrackingNumber',
        'package_tracking_url' => 'setPackageTrackingUrl',
        'package_weight' => 'setPackageWeight',
        'package_width' => 'setPackageWidth',
        'picking_instructions' => 'setPickingInstructions',
        'picks_complete' => 'setPicksComplete',
        'purchase_orders' => 'setPurchaseOrders',
        'recipient_customer_number' => 'setRecipientCustomerNumber',
        'recipient_party_id' => 'setRecipientPartyId',
        'recipient_supplier_number' => 'setRecipientSupplierNumber',
        'record_email_addresses' => 'setRecordEmailAddresses',
        'responsible_user_id' => 'setResponsibleUserId',
        'sales_invoice_email_addresses' => 'setSalesInvoiceEmailAddresses',
        'shipment_items' => 'setShipmentItems',
        'shipment_method_id' => 'setShipmentMethodId',
        'shipment_number' => 'setShipmentNumber',
        'shipment_type' => 'setShipmentType',
        'shipped_from_address' => 'setShippedFromAddress',
        'shipping_carrier_id' => 'setShippingCarrierId',
        'shipping_date' => 'setShippingDate',
        'shipping_labels_count' => 'setShippingLabelsCount',
        'shipping_return_carrier_id' => 'setShippingReturnCarrierId',
        'warehouse_id' => 'setWarehouseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'commercial_language' => 'getCommercialLanguage',
        'creator_id' => 'getCreatorId',
        'description' => 'getDescription',
        'disable_record_emailing_rule' => 'getDisableRecordEmailingRule',
        'record_comment' => 'getRecordComment',
        'record_free_text' => 'getRecordFreeText',
        'record_opening' => 'getRecordOpening',
        'sent_to_recipient' => 'getSentToRecipient',
        'tags' => 'getTags',
        'invoice_address' => 'getInvoiceAddress',
        'recipient_address' => 'getRecipientAddress',
        'sales_orders' => 'getSalesOrders',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'additional_delivery_information' => 'getAdditionalDeliveryInformation',
        'availability' => 'getAvailability',
        'availability_for_all_warehouses' => 'getAvailabilityForAllWarehouses',
        'consolidation_storage_place_id' => 'getConsolidationStoragePlaceId',
        'customer_purchase_order_number' => 'getCustomerPurchaseOrderNumber',
        'declared_value_amount' => 'getDeclaredValueAmount',
        'declared_value_amount_currency_id' => 'getDeclaredValueAmountCurrencyId',
        'delivery_date' => 'getDeliveryDate',
        'destination_storage_place_id' => 'getDestinationStoragePlaceId',
        'destination_warehouse_id' => 'getDestinationWarehouseId',
        'dhl_receiver_id' => 'getDhlReceiverId',
        'invoice_recipient_id' => 'getInvoiceRecipientId',
        'main_sales_order_id' => 'getMainSalesOrderId',
        'package_height' => 'getPackageHeight',
        'package_length' => 'getPackageLength',
        'package_reference_number' => 'getPackageReferenceNumber',
        'package_return_tracking_number' => 'getPackageReturnTrackingNumber',
        'package_return_tracking_url' => 'getPackageReturnTrackingUrl',
        'package_tracking_number' => 'getPackageTrackingNumber',
        'package_tracking_url' => 'getPackageTrackingUrl',
        'package_weight' => 'getPackageWeight',
        'package_width' => 'getPackageWidth',
        'picking_instructions' => 'getPickingInstructions',
        'picks_complete' => 'getPicksComplete',
        'purchase_orders' => 'getPurchaseOrders',
        'recipient_customer_number' => 'getRecipientCustomerNumber',
        'recipient_party_id' => 'getRecipientPartyId',
        'recipient_supplier_number' => 'getRecipientSupplierNumber',
        'record_email_addresses' => 'getRecordEmailAddresses',
        'responsible_user_id' => 'getResponsibleUserId',
        'sales_invoice_email_addresses' => 'getSalesInvoiceEmailAddresses',
        'shipment_items' => 'getShipmentItems',
        'shipment_method_id' => 'getShipmentMethodId',
        'shipment_number' => 'getShipmentNumber',
        'shipment_type' => 'getShipmentType',
        'shipped_from_address' => 'getShippedFromAddress',
        'shipping_carrier_id' => 'getShippingCarrierId',
        'shipping_date' => 'getShippingDate',
        'shipping_labels_count' => 'getShippingLabelsCount',
        'shipping_return_carrier_id' => 'getShippingReturnCarrierId',
        'warehouse_id' => 'getWarehouseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('disable_record_emailing_rule', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('recipient_address', $data ?? [], null);
        $this->setIfExists('sales_orders', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('additional_delivery_information', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], null);
        $this->setIfExists('availability_for_all_warehouses', $data ?? [], null);
        $this->setIfExists('consolidation_storage_place_id', $data ?? [], null);
        $this->setIfExists('customer_purchase_order_number', $data ?? [], null);
        $this->setIfExists('declared_value_amount', $data ?? [], null);
        $this->setIfExists('declared_value_amount_currency_id', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('destination_storage_place_id', $data ?? [], null);
        $this->setIfExists('destination_warehouse_id', $data ?? [], null);
        $this->setIfExists('dhl_receiver_id', $data ?? [], null);
        $this->setIfExists('invoice_recipient_id', $data ?? [], null);
        $this->setIfExists('main_sales_order_id', $data ?? [], null);
        $this->setIfExists('package_height', $data ?? [], null);
        $this->setIfExists('package_length', $data ?? [], null);
        $this->setIfExists('package_reference_number', $data ?? [], null);
        $this->setIfExists('package_return_tracking_number', $data ?? [], null);
        $this->setIfExists('package_return_tracking_url', $data ?? [], null);
        $this->setIfExists('package_tracking_number', $data ?? [], null);
        $this->setIfExists('package_tracking_url', $data ?? [], null);
        $this->setIfExists('package_weight', $data ?? [], null);
        $this->setIfExists('package_width', $data ?? [], null);
        $this->setIfExists('picking_instructions', $data ?? [], null);
        $this->setIfExists('picks_complete', $data ?? [], null);
        $this->setIfExists('purchase_orders', $data ?? [], null);
        $this->setIfExists('recipient_customer_number', $data ?? [], null);
        $this->setIfExists('recipient_party_id', $data ?? [], null);
        $this->setIfExists('recipient_supplier_number', $data ?? [], null);
        $this->setIfExists('record_email_addresses', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('sales_invoice_email_addresses', $data ?? [], null);
        $this->setIfExists('shipment_items', $data ?? [], null);
        $this->setIfExists('shipment_method_id', $data ?? [], null);
        $this->setIfExists('shipment_number', $data ?? [], null);
        $this->setIfExists('shipment_type', $data ?? [], null);
        $this->setIfExists('shipped_from_address', $data ?? [], null);
        $this->setIfExists('shipping_carrier_id', $data ?? [], null);
        $this->setIfExists('shipping_date', $data ?? [], null);
        $this->setIfExists('shipping_labels_count', $data ?? [], null);
        $this->setIfExists('shipping_return_carrier_id', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['commercial_language']) && (mb_strlen($this->container['commercial_language']) > 255)) {
            $invalidProperties[] = "invalid value for 'commercial_language', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_comment']) && (mb_strlen($this->container['record_comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_free_text']) && (mb_strlen($this->container['record_free_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_free_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_opening']) && (mb_strlen($this->container['record_opening']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_opening', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['additional_delivery_information']) && (mb_strlen($this->container['additional_delivery_information']) > 255)) {
            $invalidProperties[] = "invalid value for 'additional_delivery_information', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['customer_purchase_order_number']) && (mb_strlen($this->container['customer_purchase_order_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'customer_purchase_order_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['declared_value_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['declared_value_amount'])) {
            $invalidProperties[] = "invalid value for 'declared_value_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['dhl_receiver_id']) && (mb_strlen($this->container['dhl_receiver_id']) > 1000)) {
            $invalidProperties[] = "invalid value for 'dhl_receiver_id', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['package_reference_number']) && (mb_strlen($this->container['package_reference_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'package_reference_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['package_return_tracking_number']) && (mb_strlen($this->container['package_return_tracking_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'package_return_tracking_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['package_return_tracking_url']) && (mb_strlen($this->container['package_return_tracking_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'package_return_tracking_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['package_tracking_number']) && (mb_strlen($this->container['package_tracking_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'package_tracking_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['package_tracking_url']) && (mb_strlen($this->container['package_tracking_url']) > 1000)) {
            $invalidProperties[] = "invalid value for 'package_tracking_url', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['package_weight']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['package_weight'])) {
            $invalidProperties[] = "invalid value for 'package_weight', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['picking_instructions']) && (mb_strlen($this->container['picking_instructions']) > 255)) {
            $invalidProperties[] = "invalid value for 'picking_instructions', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['recipient_customer_number']) && (mb_strlen($this->container['recipient_customer_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'recipient_customer_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['recipient_supplier_number']) && (mb_strlen($this->container['recipient_supplier_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'recipient_supplier_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['shipment_number']) && (mb_strlen($this->container['shipment_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'shipment_number', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        if ((mb_strlen($commercial_language) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commercial_language when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disable_record_emailing_rule
     *
     * @return bool|null
     */
    public function getDisableRecordEmailingRule()
    {
        return $this->container['disable_record_emailing_rule'];
    }

    /**
     * Sets disable_record_emailing_rule
     *
     * @param bool|null $disable_record_emailing_rule disable_record_emailing_rule
     *
     * @return self
     */
    public function setDisableRecordEmailingRule($disable_record_emailing_rule)
    {
        if (is_null($disable_record_emailing_rule)) {
            throw new \InvalidArgumentException('non-nullable disable_record_emailing_rule cannot be null');
        }
        $this->container['disable_record_emailing_rule'] = $disable_record_emailing_rule;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        if ((mb_strlen($record_comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_comment when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        if ((mb_strlen($record_free_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_free_text when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        if ((mb_strlen($record_opening) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_opening when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets recipient_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getRecipientAddress()
    {
        return $this->container['recipient_address'];
    }

    /**
     * Sets recipient_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $recipient_address recipient_address
     *
     * @return self
     */
    public function setRecipientAddress($recipient_address)
    {
        if (is_null($recipient_address)) {
            throw new \InvalidArgumentException('non-nullable recipient_address cannot be null');
        }
        $this->container['recipient_address'] = $recipient_address;

        return $this;
    }

    /**
     * Gets sales_orders
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getSalesOrders()
    {
        return $this->container['sales_orders'];
    }

    /**
     * Sets sales_orders
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $sales_orders sales_orders
     *
     * @return self
     */
    public function setSalesOrders($sales_orders)
    {
        if (is_null($sales_orders)) {
            throw new \InvalidArgumentException('non-nullable sales_orders cannot be null');
        }
        $this->container['sales_orders'] = $sales_orders;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\ShipmentStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\ShipmentStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\ShipmentStatus[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\ShipmentStatus[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets additional_delivery_information
     *
     * @return string|null
     */
    public function getAdditionalDeliveryInformation()
    {
        return $this->container['additional_delivery_information'];
    }

    /**
     * Sets additional_delivery_information
     *
     * @param string|null $additional_delivery_information additional_delivery_information
     *
     * @return self
     */
    public function setAdditionalDeliveryInformation($additional_delivery_information)
    {
        if (is_null($additional_delivery_information)) {
            throw new \InvalidArgumentException('non-nullable additional_delivery_information cannot be null');
        }
        if ((mb_strlen($additional_delivery_information) > 255)) {
            throw new \InvalidArgumentException('invalid length for $additional_delivery_information when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['additional_delivery_information'] = $additional_delivery_information;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \kruegge82\weclapp\Model\DispositionInfoAvailabilityType|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \kruegge82\weclapp\Model\DispositionInfoAvailabilityType|null $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        if (is_null($availability)) {
            throw new \InvalidArgumentException('non-nullable availability cannot be null');
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets availability_for_all_warehouses
     *
     * @return \kruegge82\weclapp\Model\DispositionInfoAvailabilityType|null
     */
    public function getAvailabilityForAllWarehouses()
    {
        return $this->container['availability_for_all_warehouses'];
    }

    /**
     * Sets availability_for_all_warehouses
     *
     * @param \kruegge82\weclapp\Model\DispositionInfoAvailabilityType|null $availability_for_all_warehouses availability_for_all_warehouses
     *
     * @return self
     */
    public function setAvailabilityForAllWarehouses($availability_for_all_warehouses)
    {
        if (is_null($availability_for_all_warehouses)) {
            throw new \InvalidArgumentException('non-nullable availability_for_all_warehouses cannot be null');
        }
        $this->container['availability_for_all_warehouses'] = $availability_for_all_warehouses;

        return $this;
    }

    /**
     * Gets consolidation_storage_place_id
     *
     * @return string|null
     */
    public function getConsolidationStoragePlaceId()
    {
        return $this->container['consolidation_storage_place_id'];
    }

    /**
     * Sets consolidation_storage_place_id
     *
     * @param string|null $consolidation_storage_place_id consolidation_storage_place_id
     *
     * @return self
     */
    public function setConsolidationStoragePlaceId($consolidation_storage_place_id)
    {
        if (is_null($consolidation_storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable consolidation_storage_place_id cannot be null');
        }
        $this->container['consolidation_storage_place_id'] = $consolidation_storage_place_id;

        return $this;
    }

    /**
     * Gets customer_purchase_order_number
     *
     * @return string|null
     */
    public function getCustomerPurchaseOrderNumber()
    {
        return $this->container['customer_purchase_order_number'];
    }

    /**
     * Sets customer_purchase_order_number
     *
     * @param string|null $customer_purchase_order_number customer_purchase_order_number
     *
     * @return self
     */
    public function setCustomerPurchaseOrderNumber($customer_purchase_order_number)
    {
        if (is_null($customer_purchase_order_number)) {
            throw new \InvalidArgumentException('non-nullable customer_purchase_order_number cannot be null');
        }
        if ((mb_strlen($customer_purchase_order_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $customer_purchase_order_number when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['customer_purchase_order_number'] = $customer_purchase_order_number;

        return $this;
    }

    /**
     * Gets declared_value_amount
     *
     * @return float|null
     */
    public function getDeclaredValueAmount()
    {
        return $this->container['declared_value_amount'];
    }

    /**
     * Sets declared_value_amount
     *
     * @param float|null $declared_value_amount declared_value_amount
     *
     * @return self
     */
    public function setDeclaredValueAmount($declared_value_amount)
    {
        if (is_null($declared_value_amount)) {
            throw new \InvalidArgumentException('non-nullable declared_value_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($declared_value_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$declared_value_amount when calling Shipment., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['declared_value_amount'] = $declared_value_amount;

        return $this;
    }

    /**
     * Gets declared_value_amount_currency_id
     *
     * @return string|null
     */
    public function getDeclaredValueAmountCurrencyId()
    {
        return $this->container['declared_value_amount_currency_id'];
    }

    /**
     * Sets declared_value_amount_currency_id
     *
     * @param string|null $declared_value_amount_currency_id declared_value_amount_currency_id
     *
     * @return self
     */
    public function setDeclaredValueAmountCurrencyId($declared_value_amount_currency_id)
    {
        if (is_null($declared_value_amount_currency_id)) {
            throw new \InvalidArgumentException('non-nullable declared_value_amount_currency_id cannot be null');
        }
        $this->container['declared_value_amount_currency_id'] = $declared_value_amount_currency_id;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return int|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param int|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets destination_storage_place_id
     *
     * @return string|null
     */
    public function getDestinationStoragePlaceId()
    {
        return $this->container['destination_storage_place_id'];
    }

    /**
     * Sets destination_storage_place_id
     *
     * @param string|null $destination_storage_place_id destination_storage_place_id
     *
     * @return self
     */
    public function setDestinationStoragePlaceId($destination_storage_place_id)
    {
        if (is_null($destination_storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable destination_storage_place_id cannot be null');
        }
        $this->container['destination_storage_place_id'] = $destination_storage_place_id;

        return $this;
    }

    /**
     * Gets destination_warehouse_id
     *
     * @return string|null
     */
    public function getDestinationWarehouseId()
    {
        return $this->container['destination_warehouse_id'];
    }

    /**
     * Sets destination_warehouse_id
     *
     * @param string|null $destination_warehouse_id destination_warehouse_id
     *
     * @return self
     */
    public function setDestinationWarehouseId($destination_warehouse_id)
    {
        if (is_null($destination_warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable destination_warehouse_id cannot be null');
        }
        $this->container['destination_warehouse_id'] = $destination_warehouse_id;

        return $this;
    }

    /**
     * Gets dhl_receiver_id
     *
     * @return string|null
     */
    public function getDhlReceiverId()
    {
        return $this->container['dhl_receiver_id'];
    }

    /**
     * Sets dhl_receiver_id
     *
     * @param string|null $dhl_receiver_id dhl_receiver_id
     *
     * @return self
     */
    public function setDhlReceiverId($dhl_receiver_id)
    {
        if (is_null($dhl_receiver_id)) {
            throw new \InvalidArgumentException('non-nullable dhl_receiver_id cannot be null');
        }
        if ((mb_strlen($dhl_receiver_id) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $dhl_receiver_id when calling Shipment., must be smaller than or equal to 1000.');
        }

        $this->container['dhl_receiver_id'] = $dhl_receiver_id;

        return $this;
    }

    /**
     * Gets invoice_recipient_id
     *
     * @return string|null
     */
    public function getInvoiceRecipientId()
    {
        return $this->container['invoice_recipient_id'];
    }

    /**
     * Sets invoice_recipient_id
     *
     * @param string|null $invoice_recipient_id invoice_recipient_id
     *
     * @return self
     */
    public function setInvoiceRecipientId($invoice_recipient_id)
    {
        if (is_null($invoice_recipient_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_recipient_id cannot be null');
        }
        $this->container['invoice_recipient_id'] = $invoice_recipient_id;

        return $this;
    }

    /**
     * Gets main_sales_order_id
     *
     * @return string|null
     */
    public function getMainSalesOrderId()
    {
        return $this->container['main_sales_order_id'];
    }

    /**
     * Sets main_sales_order_id
     *
     * @param string|null $main_sales_order_id main_sales_order_id
     *
     * @return self
     */
    public function setMainSalesOrderId($main_sales_order_id)
    {
        if (is_null($main_sales_order_id)) {
            throw new \InvalidArgumentException('non-nullable main_sales_order_id cannot be null');
        }
        $this->container['main_sales_order_id'] = $main_sales_order_id;

        return $this;
    }

    /**
     * Gets package_height
     *
     * @return int|null
     */
    public function getPackageHeight()
    {
        return $this->container['package_height'];
    }

    /**
     * Sets package_height
     *
     * @param int|null $package_height package_height
     *
     * @return self
     */
    public function setPackageHeight($package_height)
    {
        if (is_null($package_height)) {
            throw new \InvalidArgumentException('non-nullable package_height cannot be null');
        }
        $this->container['package_height'] = $package_height;

        return $this;
    }

    /**
     * Gets package_length
     *
     * @return int|null
     */
    public function getPackageLength()
    {
        return $this->container['package_length'];
    }

    /**
     * Sets package_length
     *
     * @param int|null $package_length package_length
     *
     * @return self
     */
    public function setPackageLength($package_length)
    {
        if (is_null($package_length)) {
            throw new \InvalidArgumentException('non-nullable package_length cannot be null');
        }
        $this->container['package_length'] = $package_length;

        return $this;
    }

    /**
     * Gets package_reference_number
     *
     * @return string|null
     */
    public function getPackageReferenceNumber()
    {
        return $this->container['package_reference_number'];
    }

    /**
     * Sets package_reference_number
     *
     * @param string|null $package_reference_number package_reference_number
     *
     * @return self
     */
    public function setPackageReferenceNumber($package_reference_number)
    {
        if (is_null($package_reference_number)) {
            throw new \InvalidArgumentException('non-nullable package_reference_number cannot be null');
        }
        if ((mb_strlen($package_reference_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $package_reference_number when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['package_reference_number'] = $package_reference_number;

        return $this;
    }

    /**
     * Gets package_return_tracking_number
     *
     * @return string|null
     */
    public function getPackageReturnTrackingNumber()
    {
        return $this->container['package_return_tracking_number'];
    }

    /**
     * Sets package_return_tracking_number
     *
     * @param string|null $package_return_tracking_number package_return_tracking_number
     *
     * @return self
     */
    public function setPackageReturnTrackingNumber($package_return_tracking_number)
    {
        if (is_null($package_return_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable package_return_tracking_number cannot be null');
        }
        if ((mb_strlen($package_return_tracking_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $package_return_tracking_number when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['package_return_tracking_number'] = $package_return_tracking_number;

        return $this;
    }

    /**
     * Gets package_return_tracking_url
     *
     * @return string|null
     */
    public function getPackageReturnTrackingUrl()
    {
        return $this->container['package_return_tracking_url'];
    }

    /**
     * Sets package_return_tracking_url
     *
     * @param string|null $package_return_tracking_url package_return_tracking_url
     *
     * @return self
     */
    public function setPackageReturnTrackingUrl($package_return_tracking_url)
    {
        if (is_null($package_return_tracking_url)) {
            throw new \InvalidArgumentException('non-nullable package_return_tracking_url cannot be null');
        }
        if ((mb_strlen($package_return_tracking_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $package_return_tracking_url when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['package_return_tracking_url'] = $package_return_tracking_url;

        return $this;
    }

    /**
     * Gets package_tracking_number
     *
     * @return string|null
     */
    public function getPackageTrackingNumber()
    {
        return $this->container['package_tracking_number'];
    }

    /**
     * Sets package_tracking_number
     *
     * @param string|null $package_tracking_number package_tracking_number
     *
     * @return self
     */
    public function setPackageTrackingNumber($package_tracking_number)
    {
        if (is_null($package_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable package_tracking_number cannot be null');
        }
        if ((mb_strlen($package_tracking_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $package_tracking_number when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['package_tracking_number'] = $package_tracking_number;

        return $this;
    }

    /**
     * Gets package_tracking_url
     *
     * @return string|null
     */
    public function getPackageTrackingUrl()
    {
        return $this->container['package_tracking_url'];
    }

    /**
     * Sets package_tracking_url
     *
     * @param string|null $package_tracking_url package_tracking_url
     *
     * @return self
     */
    public function setPackageTrackingUrl($package_tracking_url)
    {
        if (is_null($package_tracking_url)) {
            throw new \InvalidArgumentException('non-nullable package_tracking_url cannot be null');
        }
        if ((mb_strlen($package_tracking_url) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $package_tracking_url when calling Shipment., must be smaller than or equal to 1000.');
        }

        $this->container['package_tracking_url'] = $package_tracking_url;

        return $this;
    }

    /**
     * Gets package_weight
     *
     * @return float|null
     */
    public function getPackageWeight()
    {
        return $this->container['package_weight'];
    }

    /**
     * Sets package_weight
     *
     * @param float|null $package_weight package_weight
     *
     * @return self
     */
    public function setPackageWeight($package_weight)
    {
        if (is_null($package_weight)) {
            throw new \InvalidArgumentException('non-nullable package_weight cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($package_weight)))) {
            throw new \InvalidArgumentException("invalid value for \$package_weight when calling Shipment., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['package_weight'] = $package_weight;

        return $this;
    }

    /**
     * Gets package_width
     *
     * @return int|null
     */
    public function getPackageWidth()
    {
        return $this->container['package_width'];
    }

    /**
     * Sets package_width
     *
     * @param int|null $package_width package_width
     *
     * @return self
     */
    public function setPackageWidth($package_width)
    {
        if (is_null($package_width)) {
            throw new \InvalidArgumentException('non-nullable package_width cannot be null');
        }
        $this->container['package_width'] = $package_width;

        return $this;
    }

    /**
     * Gets picking_instructions
     *
     * @return string|null
     */
    public function getPickingInstructions()
    {
        return $this->container['picking_instructions'];
    }

    /**
     * Sets picking_instructions
     *
     * @param string|null $picking_instructions picking_instructions
     *
     * @return self
     */
    public function setPickingInstructions($picking_instructions)
    {
        if (is_null($picking_instructions)) {
            throw new \InvalidArgumentException('non-nullable picking_instructions cannot be null');
        }
        if ((mb_strlen($picking_instructions) > 255)) {
            throw new \InvalidArgumentException('invalid length for $picking_instructions when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['picking_instructions'] = $picking_instructions;

        return $this;
    }

    /**
     * Gets picks_complete
     *
     * @return bool|null
     */
    public function getPicksComplete()
    {
        return $this->container['picks_complete'];
    }

    /**
     * Sets picks_complete
     *
     * @param bool|null $picks_complete picks_complete
     *
     * @return self
     */
    public function setPicksComplete($picks_complete)
    {
        if (is_null($picks_complete)) {
            throw new \InvalidArgumentException('non-nullable picks_complete cannot be null');
        }
        $this->container['picks_complete'] = $picks_complete;

        return $this;
    }

    /**
     * Gets purchase_orders
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getPurchaseOrders()
    {
        return $this->container['purchase_orders'];
    }

    /**
     * Sets purchase_orders
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $purchase_orders purchase_orders
     *
     * @return self
     */
    public function setPurchaseOrders($purchase_orders)
    {
        if (is_null($purchase_orders)) {
            throw new \InvalidArgumentException('non-nullable purchase_orders cannot be null');
        }
        $this->container['purchase_orders'] = $purchase_orders;

        return $this;
    }

    /**
     * Gets recipient_customer_number
     *
     * @return string|null
     */
    public function getRecipientCustomerNumber()
    {
        return $this->container['recipient_customer_number'];
    }

    /**
     * Sets recipient_customer_number
     *
     * @param string|null $recipient_customer_number recipient_customer_number
     *
     * @return self
     */
    public function setRecipientCustomerNumber($recipient_customer_number)
    {
        if (is_null($recipient_customer_number)) {
            throw new \InvalidArgumentException('non-nullable recipient_customer_number cannot be null');
        }
        if ((mb_strlen($recipient_customer_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $recipient_customer_number when calling Shipment., must be smaller than or equal to 1000.');
        }

        $this->container['recipient_customer_number'] = $recipient_customer_number;

        return $this;
    }

    /**
     * Gets recipient_party_id
     *
     * @return string|null
     */
    public function getRecipientPartyId()
    {
        return $this->container['recipient_party_id'];
    }

    /**
     * Sets recipient_party_id
     *
     * @param string|null $recipient_party_id recipient_party_id
     *
     * @return self
     */
    public function setRecipientPartyId($recipient_party_id)
    {
        if (is_null($recipient_party_id)) {
            throw new \InvalidArgumentException('non-nullable recipient_party_id cannot be null');
        }
        $this->container['recipient_party_id'] = $recipient_party_id;

        return $this;
    }

    /**
     * Gets recipient_supplier_number
     *
     * @return string|null
     */
    public function getRecipientSupplierNumber()
    {
        return $this->container['recipient_supplier_number'];
    }

    /**
     * Sets recipient_supplier_number
     *
     * @param string|null $recipient_supplier_number recipient_supplier_number
     *
     * @return self
     */
    public function setRecipientSupplierNumber($recipient_supplier_number)
    {
        if (is_null($recipient_supplier_number)) {
            throw new \InvalidArgumentException('non-nullable recipient_supplier_number cannot be null');
        }
        if ((mb_strlen($recipient_supplier_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $recipient_supplier_number when calling Shipment., must be smaller than or equal to 1000.');
        }

        $this->container['recipient_supplier_number'] = $recipient_supplier_number;

        return $this;
    }

    /**
     * Gets record_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getRecordEmailAddresses()
    {
        return $this->container['record_email_addresses'];
    }

    /**
     * Sets record_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $record_email_addresses record_email_addresses
     *
     * @return self
     */
    public function setRecordEmailAddresses($record_email_addresses)
    {
        if (is_null($record_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable record_email_addresses cannot be null');
        }
        $this->container['record_email_addresses'] = $record_email_addresses;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets sales_invoice_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getSalesInvoiceEmailAddresses()
    {
        return $this->container['sales_invoice_email_addresses'];
    }

    /**
     * Sets sales_invoice_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $sales_invoice_email_addresses sales_invoice_email_addresses
     *
     * @return self
     */
    public function setSalesInvoiceEmailAddresses($sales_invoice_email_addresses)
    {
        if (is_null($sales_invoice_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_email_addresses cannot be null');
        }
        $this->container['sales_invoice_email_addresses'] = $sales_invoice_email_addresses;

        return $this;
    }

    /**
     * Gets shipment_items
     *
     * @return \kruegge82\weclapp\Model\ShipmentItem[]|null
     */
    public function getShipmentItems()
    {
        return $this->container['shipment_items'];
    }

    /**
     * Sets shipment_items
     *
     * @param \kruegge82\weclapp\Model\ShipmentItem[]|null $shipment_items shipment_items
     *
     * @return self
     */
    public function setShipmentItems($shipment_items)
    {
        if (is_null($shipment_items)) {
            throw new \InvalidArgumentException('non-nullable shipment_items cannot be null');
        }
        $this->container['shipment_items'] = $shipment_items;

        return $this;
    }

    /**
     * Gets shipment_method_id
     *
     * @return string|null
     */
    public function getShipmentMethodId()
    {
        return $this->container['shipment_method_id'];
    }

    /**
     * Sets shipment_method_id
     *
     * @param string|null $shipment_method_id shipment_method_id
     *
     * @return self
     */
    public function setShipmentMethodId($shipment_method_id)
    {
        if (is_null($shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_id cannot be null');
        }
        $this->container['shipment_method_id'] = $shipment_method_id;

        return $this;
    }

    /**
     * Gets shipment_number
     *
     * @return string|null
     */
    public function getShipmentNumber()
    {
        return $this->container['shipment_number'];
    }

    /**
     * Sets shipment_number
     *
     * @param string|null $shipment_number shipment_number
     *
     * @return self
     */
    public function setShipmentNumber($shipment_number)
    {
        if (is_null($shipment_number)) {
            throw new \InvalidArgumentException('non-nullable shipment_number cannot be null');
        }
        if ((mb_strlen($shipment_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $shipment_number when calling Shipment., must be smaller than or equal to 255.');
        }

        $this->container['shipment_number'] = $shipment_number;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return \kruegge82\weclapp\Model\ShipmentOutType|null
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param \kruegge82\weclapp\Model\ShipmentOutType|null $shipment_type shipment_type
     *
     * @return self
     */
    public function setShipmentType($shipment_type)
    {
        if (is_null($shipment_type)) {
            throw new \InvalidArgumentException('non-nullable shipment_type cannot be null');
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets shipped_from_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getShippedFromAddress()
    {
        return $this->container['shipped_from_address'];
    }

    /**
     * Sets shipped_from_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $shipped_from_address shipped_from_address
     *
     * @return self
     */
    public function setShippedFromAddress($shipped_from_address)
    {
        if (is_null($shipped_from_address)) {
            throw new \InvalidArgumentException('non-nullable shipped_from_address cannot be null');
        }
        $this->container['shipped_from_address'] = $shipped_from_address;

        return $this;
    }

    /**
     * Gets shipping_carrier_id
     *
     * @return string|null
     */
    public function getShippingCarrierId()
    {
        return $this->container['shipping_carrier_id'];
    }

    /**
     * Sets shipping_carrier_id
     *
     * @param string|null $shipping_carrier_id shipping_carrier_id
     *
     * @return self
     */
    public function setShippingCarrierId($shipping_carrier_id)
    {
        if (is_null($shipping_carrier_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_carrier_id cannot be null');
        }
        $this->container['shipping_carrier_id'] = $shipping_carrier_id;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return int|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param int|null $shipping_date shipping_date
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        if (is_null($shipping_date)) {
            throw new \InvalidArgumentException('non-nullable shipping_date cannot be null');
        }
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets shipping_labels_count
     *
     * @return int|null
     */
    public function getShippingLabelsCount()
    {
        return $this->container['shipping_labels_count'];
    }

    /**
     * Sets shipping_labels_count
     *
     * @param int|null $shipping_labels_count shipping_labels_count
     *
     * @return self
     */
    public function setShippingLabelsCount($shipping_labels_count)
    {
        if (is_null($shipping_labels_count)) {
            throw new \InvalidArgumentException('non-nullable shipping_labels_count cannot be null');
        }
        $this->container['shipping_labels_count'] = $shipping_labels_count;

        return $this;
    }

    /**
     * Gets shipping_return_carrier_id
     *
     * @return string|null
     */
    public function getShippingReturnCarrierId()
    {
        return $this->container['shipping_return_carrier_id'];
    }

    /**
     * Sets shipping_return_carrier_id
     *
     * @param string|null $shipping_return_carrier_id shipping_return_carrier_id
     *
     * @return self
     */
    public function setShippingReturnCarrierId($shipping_return_carrier_id)
    {
        if (is_null($shipping_return_carrier_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_return_carrier_id cannot be null');
        }
        $this->container['shipping_return_carrier_id'] = $shipping_return_carrier_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


