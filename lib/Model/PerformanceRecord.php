<?php
/**
 * PerformanceRecord
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * PerformanceRecord Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PerformanceRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'performanceRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'commercial_language' => 'string',
        'creator_id' => 'string',
        'description' => 'string',
        'disable_record_emailing_rule' => 'bool',
        'record_comment' => 'string',
        'record_free_text' => 'string',
        'record_opening' => 'string',
        'sent_to_recipient' => 'bool',
        'tags' => 'string[]',
        'commission' => 'string',
        'customer_id' => 'string',
        'customer_signature_date' => 'int',
        'invoice_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'invoice_recipient_id' => 'string',
        'order_number_at_customer' => 'string',
        'performance_record_date' => 'int',
        'performance_record_items' => '\kruegge82\weclapp\Model\PerformanceRecordItem[]',
        'performance_record_number' => 'string',
        'record_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'record_comment_inheritance' => 'bool',
        'record_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'record_free_text_inheritance' => 'bool',
        'record_opening_inheritance' => 'bool',
        'sales_channel' => '\kruegge82\weclapp\Model\DistributionChannel',
        'sales_invoice_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'sales_order_id' => 'string',
        'service_period_from' => 'int',
        'service_period_to' => 'int',
        'service_provider_id' => 'string',
        'service_provider_signature_date' => 'int',
        'status' => '\kruegge82\weclapp\Model\PerformanceRecordStatusType',
        'status_history' => '\kruegge82\weclapp\Model\PerformanceRecordStatusHistory[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'commercial_language' => null,
        'creator_id' => null,
        'description' => 'html',
        'disable_record_emailing_rule' => null,
        'record_comment' => 'html',
        'record_free_text' => 'html',
        'record_opening' => 'html',
        'sent_to_recipient' => null,
        'tags' => null,
        'commission' => null,
        'customer_id' => null,
        'customer_signature_date' => 'timestamp',
        'invoice_address' => null,
        'invoice_recipient_id' => null,
        'order_number_at_customer' => null,
        'performance_record_date' => 'timestamp',
        'performance_record_items' => null,
        'performance_record_number' => null,
        'record_address' => null,
        'record_comment_inheritance' => null,
        'record_email_addresses' => null,
        'record_free_text_inheritance' => null,
        'record_opening_inheritance' => null,
        'sales_channel' => null,
        'sales_invoice_email_addresses' => null,
        'sales_order_id' => null,
        'service_period_from' => 'timestamp',
        'service_period_to' => 'timestamp',
        'service_provider_id' => null,
        'service_provider_signature_date' => 'timestamp',
        'status' => null,
        'status_history' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'commercial_language' => false,
        'creator_id' => false,
        'description' => false,
        'disable_record_emailing_rule' => false,
        'record_comment' => false,
        'record_free_text' => false,
        'record_opening' => false,
        'sent_to_recipient' => false,
        'tags' => false,
        'commission' => false,
        'customer_id' => false,
        'customer_signature_date' => false,
        'invoice_address' => false,
        'invoice_recipient_id' => false,
        'order_number_at_customer' => false,
        'performance_record_date' => false,
        'performance_record_items' => false,
        'performance_record_number' => false,
        'record_address' => false,
        'record_comment_inheritance' => false,
        'record_email_addresses' => false,
        'record_free_text_inheritance' => false,
        'record_opening_inheritance' => false,
        'sales_channel' => false,
        'sales_invoice_email_addresses' => false,
        'sales_order_id' => false,
        'service_period_from' => false,
        'service_period_to' => false,
        'service_provider_id' => false,
        'service_provider_signature_date' => false,
        'status' => false,
        'status_history' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'commercial_language' => 'commercialLanguage',
        'creator_id' => 'creatorId',
        'description' => 'description',
        'disable_record_emailing_rule' => 'disableRecordEmailingRule',
        'record_comment' => 'recordComment',
        'record_free_text' => 'recordFreeText',
        'record_opening' => 'recordOpening',
        'sent_to_recipient' => 'sentToRecipient',
        'tags' => 'tags',
        'commission' => 'commission',
        'customer_id' => 'customerId',
        'customer_signature_date' => 'customerSignatureDate',
        'invoice_address' => 'invoiceAddress',
        'invoice_recipient_id' => 'invoiceRecipientId',
        'order_number_at_customer' => 'orderNumberAtCustomer',
        'performance_record_date' => 'performanceRecordDate',
        'performance_record_items' => 'performanceRecordItems',
        'performance_record_number' => 'performanceRecordNumber',
        'record_address' => 'recordAddress',
        'record_comment_inheritance' => 'recordCommentInheritance',
        'record_email_addresses' => 'recordEmailAddresses',
        'record_free_text_inheritance' => 'recordFreeTextInheritance',
        'record_opening_inheritance' => 'recordOpeningInheritance',
        'sales_channel' => 'salesChannel',
        'sales_invoice_email_addresses' => 'salesInvoiceEmailAddresses',
        'sales_order_id' => 'salesOrderId',
        'service_period_from' => 'servicePeriodFrom',
        'service_period_to' => 'servicePeriodTo',
        'service_provider_id' => 'serviceProviderId',
        'service_provider_signature_date' => 'serviceProviderSignatureDate',
        'status' => 'status',
        'status_history' => 'statusHistory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'commercial_language' => 'setCommercialLanguage',
        'creator_id' => 'setCreatorId',
        'description' => 'setDescription',
        'disable_record_emailing_rule' => 'setDisableRecordEmailingRule',
        'record_comment' => 'setRecordComment',
        'record_free_text' => 'setRecordFreeText',
        'record_opening' => 'setRecordOpening',
        'sent_to_recipient' => 'setSentToRecipient',
        'tags' => 'setTags',
        'commission' => 'setCommission',
        'customer_id' => 'setCustomerId',
        'customer_signature_date' => 'setCustomerSignatureDate',
        'invoice_address' => 'setInvoiceAddress',
        'invoice_recipient_id' => 'setInvoiceRecipientId',
        'order_number_at_customer' => 'setOrderNumberAtCustomer',
        'performance_record_date' => 'setPerformanceRecordDate',
        'performance_record_items' => 'setPerformanceRecordItems',
        'performance_record_number' => 'setPerformanceRecordNumber',
        'record_address' => 'setRecordAddress',
        'record_comment_inheritance' => 'setRecordCommentInheritance',
        'record_email_addresses' => 'setRecordEmailAddresses',
        'record_free_text_inheritance' => 'setRecordFreeTextInheritance',
        'record_opening_inheritance' => 'setRecordOpeningInheritance',
        'sales_channel' => 'setSalesChannel',
        'sales_invoice_email_addresses' => 'setSalesInvoiceEmailAddresses',
        'sales_order_id' => 'setSalesOrderId',
        'service_period_from' => 'setServicePeriodFrom',
        'service_period_to' => 'setServicePeriodTo',
        'service_provider_id' => 'setServiceProviderId',
        'service_provider_signature_date' => 'setServiceProviderSignatureDate',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'commercial_language' => 'getCommercialLanguage',
        'creator_id' => 'getCreatorId',
        'description' => 'getDescription',
        'disable_record_emailing_rule' => 'getDisableRecordEmailingRule',
        'record_comment' => 'getRecordComment',
        'record_free_text' => 'getRecordFreeText',
        'record_opening' => 'getRecordOpening',
        'sent_to_recipient' => 'getSentToRecipient',
        'tags' => 'getTags',
        'commission' => 'getCommission',
        'customer_id' => 'getCustomerId',
        'customer_signature_date' => 'getCustomerSignatureDate',
        'invoice_address' => 'getInvoiceAddress',
        'invoice_recipient_id' => 'getInvoiceRecipientId',
        'order_number_at_customer' => 'getOrderNumberAtCustomer',
        'performance_record_date' => 'getPerformanceRecordDate',
        'performance_record_items' => 'getPerformanceRecordItems',
        'performance_record_number' => 'getPerformanceRecordNumber',
        'record_address' => 'getRecordAddress',
        'record_comment_inheritance' => 'getRecordCommentInheritance',
        'record_email_addresses' => 'getRecordEmailAddresses',
        'record_free_text_inheritance' => 'getRecordFreeTextInheritance',
        'record_opening_inheritance' => 'getRecordOpeningInheritance',
        'sales_channel' => 'getSalesChannel',
        'sales_invoice_email_addresses' => 'getSalesInvoiceEmailAddresses',
        'sales_order_id' => 'getSalesOrderId',
        'service_period_from' => 'getServicePeriodFrom',
        'service_period_to' => 'getServicePeriodTo',
        'service_provider_id' => 'getServiceProviderId',
        'service_provider_signature_date' => 'getServiceProviderSignatureDate',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('disable_record_emailing_rule', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('customer_signature_date', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('invoice_recipient_id', $data ?? [], null);
        $this->setIfExists('order_number_at_customer', $data ?? [], null);
        $this->setIfExists('performance_record_date', $data ?? [], null);
        $this->setIfExists('performance_record_items', $data ?? [], null);
        $this->setIfExists('performance_record_number', $data ?? [], null);
        $this->setIfExists('record_address', $data ?? [], null);
        $this->setIfExists('record_comment_inheritance', $data ?? [], null);
        $this->setIfExists('record_email_addresses', $data ?? [], null);
        $this->setIfExists('record_free_text_inheritance', $data ?? [], null);
        $this->setIfExists('record_opening_inheritance', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
        $this->setIfExists('sales_invoice_email_addresses', $data ?? [], null);
        $this->setIfExists('sales_order_id', $data ?? [], null);
        $this->setIfExists('service_period_from', $data ?? [], null);
        $this->setIfExists('service_period_to', $data ?? [], null);
        $this->setIfExists('service_provider_id', $data ?? [], null);
        $this->setIfExists('service_provider_signature_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['commercial_language']) && (mb_strlen($this->container['commercial_language']) > 255)) {
            $invalidProperties[] = "invalid value for 'commercial_language', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['commission']) && (mb_strlen($this->container['commission']) > 255)) {
            $invalidProperties[] = "invalid value for 'commission', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['order_number_at_customer']) && (mb_strlen($this->container['order_number_at_customer']) > 255)) {
            $invalidProperties[] = "invalid value for 'order_number_at_customer', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['performance_record_number']) && (mb_strlen($this->container['performance_record_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'performance_record_number', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        if ((mb_strlen($commercial_language) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commercial_language when calling PerformanceRecord., must be smaller than or equal to 255.');
        }

        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disable_record_emailing_rule
     *
     * @return bool|null
     */
    public function getDisableRecordEmailingRule()
    {
        return $this->container['disable_record_emailing_rule'];
    }

    /**
     * Sets disable_record_emailing_rule
     *
     * @param bool|null $disable_record_emailing_rule disable_record_emailing_rule
     *
     * @return self
     */
    public function setDisableRecordEmailingRule($disable_record_emailing_rule)
    {
        if (is_null($disable_record_emailing_rule)) {
            throw new \InvalidArgumentException('non-nullable disable_record_emailing_rule cannot be null');
        }
        $this->container['disable_record_emailing_rule'] = $disable_record_emailing_rule;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return string|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param string|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        if ((mb_strlen($commission) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commission when calling PerformanceRecord., must be smaller than or equal to 255.');
        }

        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_signature_date
     *
     * @return int|null
     */
    public function getCustomerSignatureDate()
    {
        return $this->container['customer_signature_date'];
    }

    /**
     * Sets customer_signature_date
     *
     * @param int|null $customer_signature_date customer_signature_date
     *
     * @return self
     */
    public function setCustomerSignatureDate($customer_signature_date)
    {
        if (is_null($customer_signature_date)) {
            throw new \InvalidArgumentException('non-nullable customer_signature_date cannot be null');
        }
        $this->container['customer_signature_date'] = $customer_signature_date;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets invoice_recipient_id
     *
     * @return string|null
     */
    public function getInvoiceRecipientId()
    {
        return $this->container['invoice_recipient_id'];
    }

    /**
     * Sets invoice_recipient_id
     *
     * @param string|null $invoice_recipient_id invoice_recipient_id
     *
     * @return self
     */
    public function setInvoiceRecipientId($invoice_recipient_id)
    {
        if (is_null($invoice_recipient_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_recipient_id cannot be null');
        }
        $this->container['invoice_recipient_id'] = $invoice_recipient_id;

        return $this;
    }

    /**
     * Gets order_number_at_customer
     *
     * @return string|null
     */
    public function getOrderNumberAtCustomer()
    {
        return $this->container['order_number_at_customer'];
    }

    /**
     * Sets order_number_at_customer
     *
     * @param string|null $order_number_at_customer order_number_at_customer
     *
     * @return self
     */
    public function setOrderNumberAtCustomer($order_number_at_customer)
    {
        if (is_null($order_number_at_customer)) {
            throw new \InvalidArgumentException('non-nullable order_number_at_customer cannot be null');
        }
        if ((mb_strlen($order_number_at_customer) > 255)) {
            throw new \InvalidArgumentException('invalid length for $order_number_at_customer when calling PerformanceRecord., must be smaller than or equal to 255.');
        }

        $this->container['order_number_at_customer'] = $order_number_at_customer;

        return $this;
    }

    /**
     * Gets performance_record_date
     *
     * @return int|null
     */
    public function getPerformanceRecordDate()
    {
        return $this->container['performance_record_date'];
    }

    /**
     * Sets performance_record_date
     *
     * @param int|null $performance_record_date performance_record_date
     *
     * @return self
     */
    public function setPerformanceRecordDate($performance_record_date)
    {
        if (is_null($performance_record_date)) {
            throw new \InvalidArgumentException('non-nullable performance_record_date cannot be null');
        }
        $this->container['performance_record_date'] = $performance_record_date;

        return $this;
    }

    /**
     * Gets performance_record_items
     *
     * @return \kruegge82\weclapp\Model\PerformanceRecordItem[]|null
     */
    public function getPerformanceRecordItems()
    {
        return $this->container['performance_record_items'];
    }

    /**
     * Sets performance_record_items
     *
     * @param \kruegge82\weclapp\Model\PerformanceRecordItem[]|null $performance_record_items performance_record_items
     *
     * @return self
     */
    public function setPerformanceRecordItems($performance_record_items)
    {
        if (is_null($performance_record_items)) {
            throw new \InvalidArgumentException('non-nullable performance_record_items cannot be null');
        }
        $this->container['performance_record_items'] = $performance_record_items;

        return $this;
    }

    /**
     * Gets performance_record_number
     *
     * @return string|null
     */
    public function getPerformanceRecordNumber()
    {
        return $this->container['performance_record_number'];
    }

    /**
     * Sets performance_record_number
     *
     * @param string|null $performance_record_number performance_record_number
     *
     * @return self
     */
    public function setPerformanceRecordNumber($performance_record_number)
    {
        if (is_null($performance_record_number)) {
            throw new \InvalidArgumentException('non-nullable performance_record_number cannot be null');
        }
        if ((mb_strlen($performance_record_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $performance_record_number when calling PerformanceRecord., must be smaller than or equal to 1000.');
        }

        $this->container['performance_record_number'] = $performance_record_number;

        return $this;
    }

    /**
     * Gets record_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getRecordAddress()
    {
        return $this->container['record_address'];
    }

    /**
     * Sets record_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $record_address record_address
     *
     * @return self
     */
    public function setRecordAddress($record_address)
    {
        if (is_null($record_address)) {
            throw new \InvalidArgumentException('non-nullable record_address cannot be null');
        }
        $this->container['record_address'] = $record_address;

        return $this;
    }

    /**
     * Gets record_comment_inheritance
     *
     * @return bool|null
     */
    public function getRecordCommentInheritance()
    {
        return $this->container['record_comment_inheritance'];
    }

    /**
     * Sets record_comment_inheritance
     *
     * @param bool|null $record_comment_inheritance record_comment_inheritance
     *
     * @return self
     */
    public function setRecordCommentInheritance($record_comment_inheritance)
    {
        if (is_null($record_comment_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_comment_inheritance cannot be null');
        }
        $this->container['record_comment_inheritance'] = $record_comment_inheritance;

        return $this;
    }

    /**
     * Gets record_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getRecordEmailAddresses()
    {
        return $this->container['record_email_addresses'];
    }

    /**
     * Sets record_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $record_email_addresses record_email_addresses
     *
     * @return self
     */
    public function setRecordEmailAddresses($record_email_addresses)
    {
        if (is_null($record_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable record_email_addresses cannot be null');
        }
        $this->container['record_email_addresses'] = $record_email_addresses;

        return $this;
    }

    /**
     * Gets record_free_text_inheritance
     *
     * @return bool|null
     */
    public function getRecordFreeTextInheritance()
    {
        return $this->container['record_free_text_inheritance'];
    }

    /**
     * Sets record_free_text_inheritance
     *
     * @param bool|null $record_free_text_inheritance record_free_text_inheritance
     *
     * @return self
     */
    public function setRecordFreeTextInheritance($record_free_text_inheritance)
    {
        if (is_null($record_free_text_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_free_text_inheritance cannot be null');
        }
        $this->container['record_free_text_inheritance'] = $record_free_text_inheritance;

        return $this;
    }

    /**
     * Gets record_opening_inheritance
     *
     * @return bool|null
     */
    public function getRecordOpeningInheritance()
    {
        return $this->container['record_opening_inheritance'];
    }

    /**
     * Sets record_opening_inheritance
     *
     * @param bool|null $record_opening_inheritance record_opening_inheritance
     *
     * @return self
     */
    public function setRecordOpeningInheritance($record_opening_inheritance)
    {
        if (is_null($record_opening_inheritance)) {
            throw new \InvalidArgumentException('non-nullable record_opening_inheritance cannot be null');
        }
        $this->container['record_opening_inheritance'] = $record_opening_inheritance;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets sales_invoice_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getSalesInvoiceEmailAddresses()
    {
        return $this->container['sales_invoice_email_addresses'];
    }

    /**
     * Sets sales_invoice_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $sales_invoice_email_addresses sales_invoice_email_addresses
     *
     * @return self
     */
    public function setSalesInvoiceEmailAddresses($sales_invoice_email_addresses)
    {
        if (is_null($sales_invoice_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_email_addresses cannot be null');
        }
        $this->container['sales_invoice_email_addresses'] = $sales_invoice_email_addresses;

        return $this;
    }

    /**
     * Gets sales_order_id
     *
     * @return string|null
     */
    public function getSalesOrderId()
    {
        return $this->container['sales_order_id'];
    }

    /**
     * Sets sales_order_id
     *
     * @param string|null $sales_order_id sales_order_id
     *
     * @return self
     */
    public function setSalesOrderId($sales_order_id)
    {
        if (is_null($sales_order_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_id cannot be null');
        }
        $this->container['sales_order_id'] = $sales_order_id;

        return $this;
    }

    /**
     * Gets service_period_from
     *
     * @return int|null
     */
    public function getServicePeriodFrom()
    {
        return $this->container['service_period_from'];
    }

    /**
     * Sets service_period_from
     *
     * @param int|null $service_period_from service_period_from
     *
     * @return self
     */
    public function setServicePeriodFrom($service_period_from)
    {
        if (is_null($service_period_from)) {
            throw new \InvalidArgumentException('non-nullable service_period_from cannot be null');
        }
        $this->container['service_period_from'] = $service_period_from;

        return $this;
    }

    /**
     * Gets service_period_to
     *
     * @return int|null
     */
    public function getServicePeriodTo()
    {
        return $this->container['service_period_to'];
    }

    /**
     * Sets service_period_to
     *
     * @param int|null $service_period_to service_period_to
     *
     * @return self
     */
    public function setServicePeriodTo($service_period_to)
    {
        if (is_null($service_period_to)) {
            throw new \InvalidArgumentException('non-nullable service_period_to cannot be null');
        }
        $this->container['service_period_to'] = $service_period_to;

        return $this;
    }

    /**
     * Gets service_provider_id
     *
     * @return string|null
     */
    public function getServiceProviderId()
    {
        return $this->container['service_provider_id'];
    }

    /**
     * Sets service_provider_id
     *
     * @param string|null $service_provider_id service_provider_id
     *
     * @return self
     */
    public function setServiceProviderId($service_provider_id)
    {
        if (is_null($service_provider_id)) {
            throw new \InvalidArgumentException('non-nullable service_provider_id cannot be null');
        }
        $this->container['service_provider_id'] = $service_provider_id;

        return $this;
    }

    /**
     * Gets service_provider_signature_date
     *
     * @return int|null
     */
    public function getServiceProviderSignatureDate()
    {
        return $this->container['service_provider_signature_date'];
    }

    /**
     * Sets service_provider_signature_date
     *
     * @param int|null $service_provider_signature_date service_provider_signature_date
     *
     * @return self
     */
    public function setServiceProviderSignatureDate($service_provider_signature_date)
    {
        if (is_null($service_provider_signature_date)) {
            throw new \InvalidArgumentException('non-nullable service_provider_signature_date cannot be null');
        }
        $this->container['service_provider_signature_date'] = $service_provider_signature_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\PerformanceRecordStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\PerformanceRecordStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\PerformanceRecordStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\PerformanceRecordStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


