<?php
/**
 * CustomAttributeDefinition
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * CustomAttributeDefinition Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomAttributeDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'customAttributeDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'active' => 'bool',
        'attribute_description' => 'string',
        'attribute_entity_type' => 'string',
        'attribute_key' => 'string',
        'attribute_labels' => '\kruegge82\weclapp\Model\CustomAttributeDefinitionTranslation[]',
        'attribute_type' => 'string',
        'conditions' => '\kruegge82\weclapp\Model\CustomAttributeDefinitionConditions',
        'created_date' => 'int',
        'default_boolean_value' => 'bool',
        'default_date_value' => 'int',
        'default_number_value' => 'float',
        'default_string_value' => 'string',
        'entities' => 'string[]',
        'group_name' => 'string',
        'label' => 'string',
        'last_modified_date' => 'int',
        'legacy_entities' => 'string[]',
        'mandatory' => 'bool',
        'permissions' => '\kruegge82\weclapp\Model\CustomAttributeDefinitionPermission[]',
        'public_page_types' => 'string[]',
        'read_only' => 'bool',
        'selectable_values' => '\kruegge82\weclapp\Model\CustomAttributeDefinitionListValue[]',
        'show_attribute_entity_type' => 'bool',
        'show_in_overview' => 'bool',
        'show_on_creation_dialog' => 'bool',
        'system_custom_attribute' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'active' => null,
        'attribute_description' => null,
        'attribute_entity_type' => null,
        'attribute_key' => null,
        'attribute_labels' => null,
        'attribute_type' => null,
        'conditions' => null,
        'created_date' => 'timestamp',
        'default_boolean_value' => null,
        'default_date_value' => 'timestamp',
        'default_number_value' => 'number',
        'default_string_value' => null,
        'entities' => null,
        'group_name' => null,
        'label' => null,
        'last_modified_date' => 'timestamp',
        'legacy_entities' => null,
        'mandatory' => null,
        'permissions' => null,
        'public_page_types' => null,
        'read_only' => null,
        'selectable_values' => null,
        'show_attribute_entity_type' => null,
        'show_in_overview' => null,
        'show_on_creation_dialog' => null,
        'system_custom_attribute' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'active' => false,
        'attribute_description' => false,
        'attribute_entity_type' => false,
        'attribute_key' => false,
        'attribute_labels' => false,
        'attribute_type' => false,
        'conditions' => false,
        'created_date' => false,
        'default_boolean_value' => false,
        'default_date_value' => false,
        'default_number_value' => false,
        'default_string_value' => false,
        'entities' => false,
        'group_name' => false,
        'label' => false,
        'last_modified_date' => false,
        'legacy_entities' => false,
        'mandatory' => false,
        'permissions' => false,
        'public_page_types' => false,
        'read_only' => false,
        'selectable_values' => false,
        'show_attribute_entity_type' => false,
        'show_in_overview' => false,
        'show_on_creation_dialog' => false,
        'system_custom_attribute' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'active' => 'active',
        'attribute_description' => 'attributeDescription',
        'attribute_entity_type' => 'attributeEntityType',
        'attribute_key' => 'attributeKey',
        'attribute_labels' => 'attributeLabels',
        'attribute_type' => 'attributeType',
        'conditions' => 'conditions',
        'created_date' => 'createdDate',
        'default_boolean_value' => 'defaultBooleanValue',
        'default_date_value' => 'defaultDateValue',
        'default_number_value' => 'defaultNumberValue',
        'default_string_value' => 'defaultStringValue',
        'entities' => 'entities',
        'group_name' => 'groupName',
        'label' => 'label',
        'last_modified_date' => 'lastModifiedDate',
        'legacy_entities' => 'legacyEntities',
        'mandatory' => 'mandatory',
        'permissions' => 'permissions',
        'public_page_types' => 'publicPageTypes',
        'read_only' => 'readOnly',
        'selectable_values' => 'selectableValues',
        'show_attribute_entity_type' => 'showAttributeEntityType',
        'show_in_overview' => 'showInOverview',
        'show_on_creation_dialog' => 'showOnCreationDialog',
        'system_custom_attribute' => 'systemCustomAttribute'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'active' => 'setActive',
        'attribute_description' => 'setAttributeDescription',
        'attribute_entity_type' => 'setAttributeEntityType',
        'attribute_key' => 'setAttributeKey',
        'attribute_labels' => 'setAttributeLabels',
        'attribute_type' => 'setAttributeType',
        'conditions' => 'setConditions',
        'created_date' => 'setCreatedDate',
        'default_boolean_value' => 'setDefaultBooleanValue',
        'default_date_value' => 'setDefaultDateValue',
        'default_number_value' => 'setDefaultNumberValue',
        'default_string_value' => 'setDefaultStringValue',
        'entities' => 'setEntities',
        'group_name' => 'setGroupName',
        'label' => 'setLabel',
        'last_modified_date' => 'setLastModifiedDate',
        'legacy_entities' => 'setLegacyEntities',
        'mandatory' => 'setMandatory',
        'permissions' => 'setPermissions',
        'public_page_types' => 'setPublicPageTypes',
        'read_only' => 'setReadOnly',
        'selectable_values' => 'setSelectableValues',
        'show_attribute_entity_type' => 'setShowAttributeEntityType',
        'show_in_overview' => 'setShowInOverview',
        'show_on_creation_dialog' => 'setShowOnCreationDialog',
        'system_custom_attribute' => 'setSystemCustomAttribute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'active' => 'getActive',
        'attribute_description' => 'getAttributeDescription',
        'attribute_entity_type' => 'getAttributeEntityType',
        'attribute_key' => 'getAttributeKey',
        'attribute_labels' => 'getAttributeLabels',
        'attribute_type' => 'getAttributeType',
        'conditions' => 'getConditions',
        'created_date' => 'getCreatedDate',
        'default_boolean_value' => 'getDefaultBooleanValue',
        'default_date_value' => 'getDefaultDateValue',
        'default_number_value' => 'getDefaultNumberValue',
        'default_string_value' => 'getDefaultStringValue',
        'entities' => 'getEntities',
        'group_name' => 'getGroupName',
        'label' => 'getLabel',
        'last_modified_date' => 'getLastModifiedDate',
        'legacy_entities' => 'getLegacyEntities',
        'mandatory' => 'getMandatory',
        'permissions' => 'getPermissions',
        'public_page_types' => 'getPublicPageTypes',
        'read_only' => 'getReadOnly',
        'selectable_values' => 'getSelectableValues',
        'show_attribute_entity_type' => 'getShowAttributeEntityType',
        'show_in_overview' => 'getShowInOverview',
        'show_on_creation_dialog' => 'getShowOnCreationDialog',
        'system_custom_attribute' => 'getSystemCustomAttribute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ATTRIBUTE_ENTITY_TYPE_ARTICLE = 'article';
    public const ATTRIBUTE_ENTITY_TYPE_BLANKET_PURCHASE_ORDER = 'blanketPurchaseOrder';
    public const ATTRIBUTE_ENTITY_TYPE_BLANKET_SALES_ORDER = 'blanketSalesOrder';
    public const ATTRIBUTE_ENTITY_TYPE_CAMPAIGN = 'campaign';
    public const ATTRIBUTE_ENTITY_TYPE_CONTRACT = 'contract';
    public const ATTRIBUTE_ENTITY_TYPE_CUSTOMER = 'customer';
    public const ATTRIBUTE_ENTITY_TYPE_INCOMING_GOODS = 'incomingGoods';
    public const ATTRIBUTE_ENTITY_TYPE_OPPORTUNITY = 'opportunity';
    public const ATTRIBUTE_ENTITY_TYPE_PARTY = 'party';
    public const ATTRIBUTE_ENTITY_TYPE_PERFORMANCE_RECORD = 'performanceRecord';
    public const ATTRIBUTE_ENTITY_TYPE_PRODUCTION_ORDER = 'productionOrder';
    public const ATTRIBUTE_ENTITY_TYPE_PROJECT = 'project';
    public const ATTRIBUTE_ENTITY_TYPE_PURCHASE_INVOICE = 'purchaseInvoice';
    public const ATTRIBUTE_ENTITY_TYPE_PURCHASE_ORDER = 'purchaseOrder';
    public const ATTRIBUTE_ENTITY_TYPE_PURCHASE_ORDER_REQUEST = 'purchaseOrderRequest';
    public const ATTRIBUTE_ENTITY_TYPE_QUOTATION = 'quotation';
    public const ATTRIBUTE_ENTITY_TYPE_RECURRING_INVOICE = 'recurringInvoice';
    public const ATTRIBUTE_ENTITY_TYPE_SALES_INVOICE = 'salesInvoice';
    public const ATTRIBUTE_ENTITY_TYPE_SALES_ORDER = 'salesOrder';
    public const ATTRIBUTE_ENTITY_TYPE_SERIAL_NUMBER = 'serialNumber';
    public const ATTRIBUTE_ENTITY_TYPE_SHIPMENT = 'shipment';
    public const ATTRIBUTE_ENTITY_TYPE_SUPPLIER = 'supplier';
    public const ATTRIBUTE_ENTITY_TYPE_TICKET = 'ticket';
    public const ATTRIBUTE_ENTITY_TYPE_USER = 'user';
    public const ATTRIBUTE_TYPE_BOOLEAN = 'BOOLEAN';
    public const ATTRIBUTE_TYPE_DATE = 'DATE';
    public const ATTRIBUTE_TYPE_DECIMAL = 'DECIMAL';
    public const ATTRIBUTE_TYPE_ENTITY = 'ENTITY';
    public const ATTRIBUTE_TYPE_INTEGER = 'INTEGER';
    public const ATTRIBUTE_TYPE_LARGE_TEXT = 'LARGE_TEXT';
    public const ATTRIBUTE_TYPE__LIST = 'LIST';
    public const ATTRIBUTE_TYPE_MULTISELECT_LIST = 'MULTISELECT_LIST';
    public const ATTRIBUTE_TYPE_REFERENCE = 'REFERENCE';
    public const ATTRIBUTE_TYPE_STRING = 'STRING';
    public const ATTRIBUTE_TYPE_URL = 'URL';
    public const PUBLIC_PAGE_TYPES_PURCHASE_ORDER_REQUEST = 'PURCHASE_ORDER_REQUEST';
    public const PUBLIC_PAGE_TYPES_QUOTATION = 'QUOTATION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttributeEntityTypeAllowableValues()
    {
        return [
            self::ATTRIBUTE_ENTITY_TYPE_ARTICLE,
            self::ATTRIBUTE_ENTITY_TYPE_BLANKET_PURCHASE_ORDER,
            self::ATTRIBUTE_ENTITY_TYPE_BLANKET_SALES_ORDER,
            self::ATTRIBUTE_ENTITY_TYPE_CAMPAIGN,
            self::ATTRIBUTE_ENTITY_TYPE_CONTRACT,
            self::ATTRIBUTE_ENTITY_TYPE_CUSTOMER,
            self::ATTRIBUTE_ENTITY_TYPE_INCOMING_GOODS,
            self::ATTRIBUTE_ENTITY_TYPE_OPPORTUNITY,
            self::ATTRIBUTE_ENTITY_TYPE_PARTY,
            self::ATTRIBUTE_ENTITY_TYPE_PERFORMANCE_RECORD,
            self::ATTRIBUTE_ENTITY_TYPE_PRODUCTION_ORDER,
            self::ATTRIBUTE_ENTITY_TYPE_PROJECT,
            self::ATTRIBUTE_ENTITY_TYPE_PURCHASE_INVOICE,
            self::ATTRIBUTE_ENTITY_TYPE_PURCHASE_ORDER,
            self::ATTRIBUTE_ENTITY_TYPE_PURCHASE_ORDER_REQUEST,
            self::ATTRIBUTE_ENTITY_TYPE_QUOTATION,
            self::ATTRIBUTE_ENTITY_TYPE_RECURRING_INVOICE,
            self::ATTRIBUTE_ENTITY_TYPE_SALES_INVOICE,
            self::ATTRIBUTE_ENTITY_TYPE_SALES_ORDER,
            self::ATTRIBUTE_ENTITY_TYPE_SERIAL_NUMBER,
            self::ATTRIBUTE_ENTITY_TYPE_SHIPMENT,
            self::ATTRIBUTE_ENTITY_TYPE_SUPPLIER,
            self::ATTRIBUTE_ENTITY_TYPE_TICKET,
            self::ATTRIBUTE_ENTITY_TYPE_USER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttributeTypeAllowableValues()
    {
        return [
            self::ATTRIBUTE_TYPE_BOOLEAN,
            self::ATTRIBUTE_TYPE_DATE,
            self::ATTRIBUTE_TYPE_DECIMAL,
            self::ATTRIBUTE_TYPE_ENTITY,
            self::ATTRIBUTE_TYPE_INTEGER,
            self::ATTRIBUTE_TYPE_LARGE_TEXT,
            self::ATTRIBUTE_TYPE__LIST,
            self::ATTRIBUTE_TYPE_MULTISELECT_LIST,
            self::ATTRIBUTE_TYPE_REFERENCE,
            self::ATTRIBUTE_TYPE_STRING,
            self::ATTRIBUTE_TYPE_URL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublicPageTypesAllowableValues()
    {
        return [
            self::PUBLIC_PAGE_TYPES_PURCHASE_ORDER_REQUEST,
            self::PUBLIC_PAGE_TYPES_QUOTATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('attribute_description', $data ?? [], null);
        $this->setIfExists('attribute_entity_type', $data ?? [], null);
        $this->setIfExists('attribute_key', $data ?? [], null);
        $this->setIfExists('attribute_labels', $data ?? [], null);
        $this->setIfExists('attribute_type', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('default_boolean_value', $data ?? [], null);
        $this->setIfExists('default_date_value', $data ?? [], null);
        $this->setIfExists('default_number_value', $data ?? [], null);
        $this->setIfExists('default_string_value', $data ?? [], null);
        $this->setIfExists('entities', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('legacy_entities', $data ?? [], null);
        $this->setIfExists('mandatory', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('public_page_types', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('selectable_values', $data ?? [], null);
        $this->setIfExists('show_attribute_entity_type', $data ?? [], null);
        $this->setIfExists('show_in_overview', $data ?? [], null);
        $this->setIfExists('show_on_creation_dialog', $data ?? [], null);
        $this->setIfExists('system_custom_attribute', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAttributeEntityTypeAllowableValues();
        if (!is_null($this->container['attribute_entity_type']) && !in_array($this->container['attribute_entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'attribute_entity_type', must be one of '%s'",
                $this->container['attribute_entity_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['attribute_type'] === null) {
            $invalidProperties[] = "'attribute_type' can't be null";
        }
        $allowedValues = $this->getAttributeTypeAllowableValues();
        if (!is_null($this->container['attribute_type']) && !in_array($this->container['attribute_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'attribute_type', must be one of '%s'",
                $this->container['attribute_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets attribute_description
     *
     * @return string|null
     */
    public function getAttributeDescription()
    {
        return $this->container['attribute_description'];
    }

    /**
     * Sets attribute_description
     *
     * @param string|null $attribute_description attribute_description
     *
     * @return self
     */
    public function setAttributeDescription($attribute_description)
    {
        if (is_null($attribute_description)) {
            throw new \InvalidArgumentException('non-nullable attribute_description cannot be null');
        }
        $this->container['attribute_description'] = $attribute_description;

        return $this;
    }

    /**
     * Gets attribute_entity_type
     *
     * @return string|null
     */
    public function getAttributeEntityType()
    {
        return $this->container['attribute_entity_type'];
    }

    /**
     * Sets attribute_entity_type
     *
     * @param string|null $attribute_entity_type attribute_entity_type
     *
     * @return self
     */
    public function setAttributeEntityType($attribute_entity_type)
    {
        if (is_null($attribute_entity_type)) {
            throw new \InvalidArgumentException('non-nullable attribute_entity_type cannot be null');
        }
        $allowedValues = $this->getAttributeEntityTypeAllowableValues();
        if (!in_array($attribute_entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'attribute_entity_type', must be one of '%s'",
                    $attribute_entity_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attribute_entity_type'] = $attribute_entity_type;

        return $this;
    }

    /**
     * Gets attribute_key
     *
     * @return string|null
     */
    public function getAttributeKey()
    {
        return $this->container['attribute_key'];
    }

    /**
     * Sets attribute_key
     *
     * @param string|null $attribute_key attribute_key
     *
     * @return self
     */
    public function setAttributeKey($attribute_key)
    {
        if (is_null($attribute_key)) {
            throw new \InvalidArgumentException('non-nullable attribute_key cannot be null');
        }
        $this->container['attribute_key'] = $attribute_key;

        return $this;
    }

    /**
     * Gets attribute_labels
     *
     * @return \kruegge82\weclapp\Model\CustomAttributeDefinitionTranslation[]|null
     */
    public function getAttributeLabels()
    {
        return $this->container['attribute_labels'];
    }

    /**
     * Sets attribute_labels
     *
     * @param \kruegge82\weclapp\Model\CustomAttributeDefinitionTranslation[]|null $attribute_labels attribute_labels
     *
     * @return self
     */
    public function setAttributeLabels($attribute_labels)
    {
        if (is_null($attribute_labels)) {
            throw new \InvalidArgumentException('non-nullable attribute_labels cannot be null');
        }
        $this->container['attribute_labels'] = $attribute_labels;

        return $this;
    }

    /**
     * Gets attribute_type
     *
     * @return string
     */
    public function getAttributeType()
    {
        return $this->container['attribute_type'];
    }

    /**
     * Sets attribute_type
     *
     * @param string $attribute_type attribute_type
     *
     * @return self
     */
    public function setAttributeType($attribute_type)
    {
        if (is_null($attribute_type)) {
            throw new \InvalidArgumentException('non-nullable attribute_type cannot be null');
        }
        $allowedValues = $this->getAttributeTypeAllowableValues();
        if (!in_array($attribute_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'attribute_type', must be one of '%s'",
                    $attribute_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attribute_type'] = $attribute_type;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \kruegge82\weclapp\Model\CustomAttributeDefinitionConditions|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \kruegge82\weclapp\Model\CustomAttributeDefinitionConditions|null $conditions conditions
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets default_boolean_value
     *
     * @return bool|null
     */
    public function getDefaultBooleanValue()
    {
        return $this->container['default_boolean_value'];
    }

    /**
     * Sets default_boolean_value
     *
     * @param bool|null $default_boolean_value default_boolean_value
     *
     * @return self
     */
    public function setDefaultBooleanValue($default_boolean_value)
    {
        if (is_null($default_boolean_value)) {
            throw new \InvalidArgumentException('non-nullable default_boolean_value cannot be null');
        }
        $this->container['default_boolean_value'] = $default_boolean_value;

        return $this;
    }

    /**
     * Gets default_date_value
     *
     * @return int|null
     */
    public function getDefaultDateValue()
    {
        return $this->container['default_date_value'];
    }

    /**
     * Sets default_date_value
     *
     * @param int|null $default_date_value default_date_value
     *
     * @return self
     */
    public function setDefaultDateValue($default_date_value)
    {
        if (is_null($default_date_value)) {
            throw new \InvalidArgumentException('non-nullable default_date_value cannot be null');
        }
        $this->container['default_date_value'] = $default_date_value;

        return $this;
    }

    /**
     * Gets default_number_value
     *
     * @return float|null
     */
    public function getDefaultNumberValue()
    {
        return $this->container['default_number_value'];
    }

    /**
     * Sets default_number_value
     *
     * @param float|null $default_number_value default_number_value
     *
     * @return self
     */
    public function setDefaultNumberValue($default_number_value)
    {
        if (is_null($default_number_value)) {
            throw new \InvalidArgumentException('non-nullable default_number_value cannot be null');
        }
        $this->container['default_number_value'] = $default_number_value;

        return $this;
    }

    /**
     * Gets default_string_value
     *
     * @return string|null
     */
    public function getDefaultStringValue()
    {
        return $this->container['default_string_value'];
    }

    /**
     * Sets default_string_value
     *
     * @param string|null $default_string_value default_string_value
     *
     * @return self
     */
    public function setDefaultStringValue($default_string_value)
    {
        if (is_null($default_string_value)) {
            throw new \InvalidArgumentException('non-nullable default_string_value cannot be null');
        }
        $this->container['default_string_value'] = $default_string_value;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return string[]|null
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param string[]|null $entities entities
     *
     * @return self
     */
    public function setEntities($entities)
    {
        if (is_null($entities)) {
            throw new \InvalidArgumentException('non-nullable entities cannot be null');
        }
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name group_name
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            throw new \InvalidArgumentException('non-nullable group_name cannot be null');
        }
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets legacy_entities
     *
     * @return string[]|null
     */
    public function getLegacyEntities()
    {
        return $this->container['legacy_entities'];
    }

    /**
     * Sets legacy_entities
     *
     * @param string[]|null $legacy_entities legacy_entities
     *
     * @return self
     */
    public function setLegacyEntities($legacy_entities)
    {
        if (is_null($legacy_entities)) {
            throw new \InvalidArgumentException('non-nullable legacy_entities cannot be null');
        }
        $this->container['legacy_entities'] = $legacy_entities;

        return $this;
    }

    /**
     * Gets mandatory
     *
     * @return bool|null
     */
    public function getMandatory()
    {
        return $this->container['mandatory'];
    }

    /**
     * Sets mandatory
     *
     * @param bool|null $mandatory mandatory
     *
     * @return self
     */
    public function setMandatory($mandatory)
    {
        if (is_null($mandatory)) {
            throw new \InvalidArgumentException('non-nullable mandatory cannot be null');
        }
        $this->container['mandatory'] = $mandatory;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \kruegge82\weclapp\Model\CustomAttributeDefinitionPermission[]|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \kruegge82\weclapp\Model\CustomAttributeDefinitionPermission[]|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets public_page_types
     *
     * @return string[]|null
     */
    public function getPublicPageTypes()
    {
        return $this->container['public_page_types'];
    }

    /**
     * Sets public_page_types
     *
     * @param string[]|null $public_page_types public_page_types
     *
     * @return self
     */
    public function setPublicPageTypes($public_page_types)
    {
        if (is_null($public_page_types)) {
            throw new \InvalidArgumentException('non-nullable public_page_types cannot be null');
        }
        $allowedValues = $this->getPublicPageTypesAllowableValues();
        if (array_diff($public_page_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'public_page_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['public_page_types'] = $public_page_types;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only read_only
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {
        if (is_null($read_only)) {
            throw new \InvalidArgumentException('non-nullable read_only cannot be null');
        }
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets selectable_values
     *
     * @return \kruegge82\weclapp\Model\CustomAttributeDefinitionListValue[]|null
     */
    public function getSelectableValues()
    {
        return $this->container['selectable_values'];
    }

    /**
     * Sets selectable_values
     *
     * @param \kruegge82\weclapp\Model\CustomAttributeDefinitionListValue[]|null $selectable_values selectable_values
     *
     * @return self
     */
    public function setSelectableValues($selectable_values)
    {
        if (is_null($selectable_values)) {
            throw new \InvalidArgumentException('non-nullable selectable_values cannot be null');
        }
        $this->container['selectable_values'] = $selectable_values;

        return $this;
    }

    /**
     * Gets show_attribute_entity_type
     *
     * @return bool|null
     */
    public function getShowAttributeEntityType()
    {
        return $this->container['show_attribute_entity_type'];
    }

    /**
     * Sets show_attribute_entity_type
     *
     * @param bool|null $show_attribute_entity_type show_attribute_entity_type
     *
     * @return self
     */
    public function setShowAttributeEntityType($show_attribute_entity_type)
    {
        if (is_null($show_attribute_entity_type)) {
            throw new \InvalidArgumentException('non-nullable show_attribute_entity_type cannot be null');
        }
        $this->container['show_attribute_entity_type'] = $show_attribute_entity_type;

        return $this;
    }

    /**
     * Gets show_in_overview
     *
     * @return bool|null
     */
    public function getShowInOverview()
    {
        return $this->container['show_in_overview'];
    }

    /**
     * Sets show_in_overview
     *
     * @param bool|null $show_in_overview show_in_overview
     *
     * @return self
     */
    public function setShowInOverview($show_in_overview)
    {
        if (is_null($show_in_overview)) {
            throw new \InvalidArgumentException('non-nullable show_in_overview cannot be null');
        }
        $this->container['show_in_overview'] = $show_in_overview;

        return $this;
    }

    /**
     * Gets show_on_creation_dialog
     *
     * @return bool|null
     */
    public function getShowOnCreationDialog()
    {
        return $this->container['show_on_creation_dialog'];
    }

    /**
     * Sets show_on_creation_dialog
     *
     * @param bool|null $show_on_creation_dialog show_on_creation_dialog
     *
     * @return self
     */
    public function setShowOnCreationDialog($show_on_creation_dialog)
    {
        if (is_null($show_on_creation_dialog)) {
            throw new \InvalidArgumentException('non-nullable show_on_creation_dialog cannot be null');
        }
        $this->container['show_on_creation_dialog'] = $show_on_creation_dialog;

        return $this;
    }

    /**
     * Gets system_custom_attribute
     *
     * @return bool|null
     */
    public function getSystemCustomAttribute()
    {
        return $this->container['system_custom_attribute'];
    }

    /**
     * Sets system_custom_attribute
     *
     * @param bool|null $system_custom_attribute system_custom_attribute
     *
     * @return self
     */
    public function setSystemCustomAttribute($system_custom_attribute)
    {
        if (is_null($system_custom_attribute)) {
            throw new \InvalidArgumentException('non-nullable system_custom_attribute cannot be null');
        }
        $this->container['system_custom_attribute'] = $system_custom_attribute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


