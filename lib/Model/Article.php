<?php
/**
 * Article
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Article Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Article implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'article';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'article_number' => 'string',
        'description' => 'string',
        'ean' => 'string',
        'fixed_purchase_quantity' => 'float',
        'internal_note' => 'string',
        'manufacturer_part_number' => 'string',
        'match_code' => 'string',
        'minimum_purchase_quantity' => 'float',
        'name' => 'string',
        'short_description1' => 'string',
        'short_description2' => 'string',
        'tax_rate_type' => '\kruegge82\weclapp\Model\TaxRateType',
        'unit_id' => 'string',
        'account_id' => 'string',
        'accounting_code_id' => 'string',
        'active' => 'bool',
        'apply_cash_discount' => 'bool',
        'article_alternative_quantities' => '\kruegge82\weclapp\Model\ArticleAlternativeQuantity[]',
        'article_calculation_prices' => '\kruegge82\weclapp\Model\ArticleCalculationPrice[]',
        'article_category_id' => 'string',
        'article_gross_weight' => 'float',
        'article_height' => 'float',
        'article_images' => '\kruegge82\weclapp\Model\ArticleImage[]',
        'article_length' => 'float',
        'article_net_weight' => 'float',
        'article_prices' => '\kruegge82\weclapp\Model\ArticlePriceWithoutArticleReference[]',
        'article_type' => '\kruegge82\weclapp\Model\ArticleType',
        'article_width' => 'float',
        'available_for_sales_channels' => '\kruegge82\weclapp\Model\DistributionChannel[]',
        'available_in_sale' => 'bool',
        'average_delivery_time' => 'int',
        'barcode' => 'string',
        'batch_number_required' => 'bool',
        'bill_of_material_part_delivery_possible' => 'bool',
        'catalog_code' => 'string',
        'commission_rate' => 'float',
        'contract_billing_cycle' => '\kruegge82\weclapp\Model\ContractChargeInterval',
        'contract_billing_mode' => '\kruegge82\weclapp\Model\ContractChargeIntervalType',
        'country_of_origin_code' => 'string',
        'customer_article_numbers' => '\kruegge82\weclapp\Model\CustomerSpecificArticleAttributes[]',
        'customs_description' => 'string',
        'customs_tariff_number_id' => 'string',
        'default_loading_equipment_identifier_id' => 'string',
        'default_price_calculation_type' => '\kruegge82\weclapp\Model\CalculationType',
        'default_storage_places' => '\kruegge82\weclapp\Model\OnlyId[]',
        'define_individual_task_templates' => 'bool',
        'expense_account_id' => 'string',
        'expiration_days' => 'int',
        'invoicing_type' => '\kruegge82\weclapp\Model\InvoicingType',
        'launch_date' => 'int',
        'loading_equipment_article_id' => 'string',
        'long_text' => 'string',
        'low_level_code' => 'int',
        'manufacturer_id' => 'string',
        'margin_calculation_price_type' => '\kruegge82\weclapp\Model\MarginCalculationPriceType',
        'minimum_stock_quantity' => 'float',
        'packaging_quantity' => 'int',
        'packaging_unit_base_article_id' => 'string',
        'packaging_unit_parent_article_id' => 'string',
        'planned_working_time_per_unit' => 'int',
        'primary_supply_source_id' => 'string',
        'procurement_lead_days' => 'int',
        'producer_type' => 'string',
        'production_article' => 'bool',
        'production_bill_of_material_items' => '\kruegge82\weclapp\Model\BillOfMaterial[]',
        'production_configuration_rule' => '\kruegge82\weclapp\Model\ProductionArticleConfigurationRule',
        'purchase_cost_center_id' => 'string',
        'quantity_conversions' => '\kruegge82\weclapp\Model\QuantityConversion[]',
        'rating_id' => 'string',
        'record_item_group_name' => 'string',
        'safety_stock_days' => 'int',
        'sales_bill_of_material_items' => '\kruegge82\weclapp\Model\SalesBillOfMaterialArticleItem[]',
        'sales_cost_center_id' => 'string',
        'sell_by_date' => 'int',
        'sell_from_date' => 'int',
        'serial_number_required' => 'bool',
        'service_article_for_service_quota_booking_id' => 'string',
        'service_quota_quantity' => 'float',
        'show_on_delivery_note' => 'bool',
        'status_id' => 'string',
        'supply_sources' => '\kruegge82\weclapp\Model\SupplySource[]',
        'support_until_date' => 'int',
        'system_code' => 'string',
        'tags' => 'string[]',
        'target_stock_quantity' => 'float',
        'use_available_for_sales_channels' => 'bool',
        'use_sales_bill_of_material_item_prices' => 'bool',
        'use_sales_bill_of_material_item_prices_for_purchase' => 'bool',
        'use_sales_bill_of_material_subitem_costs' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'article_number' => null,
        'description' => 'html',
        'ean' => null,
        'fixed_purchase_quantity' => 'decimal',
        'internal_note' => 'html',
        'manufacturer_part_number' => null,
        'match_code' => null,
        'minimum_purchase_quantity' => 'decimal',
        'name' => null,
        'short_description1' => null,
        'short_description2' => null,
        'tax_rate_type' => null,
        'unit_id' => null,
        'account_id' => null,
        'accounting_code_id' => null,
        'active' => null,
        'apply_cash_discount' => null,
        'article_alternative_quantities' => null,
        'article_calculation_prices' => null,
        'article_category_id' => null,
        'article_gross_weight' => 'decimal',
        'article_height' => 'decimal',
        'article_images' => null,
        'article_length' => 'decimal',
        'article_net_weight' => 'decimal',
        'article_prices' => null,
        'article_type' => null,
        'article_width' => 'decimal',
        'available_for_sales_channels' => null,
        'available_in_sale' => null,
        'average_delivery_time' => 'int32',
        'barcode' => null,
        'batch_number_required' => null,
        'bill_of_material_part_delivery_possible' => null,
        'catalog_code' => null,
        'commission_rate' => 'decimal',
        'contract_billing_cycle' => null,
        'contract_billing_mode' => null,
        'country_of_origin_code' => null,
        'customer_article_numbers' => null,
        'customs_description' => null,
        'customs_tariff_number_id' => null,
        'default_loading_equipment_identifier_id' => null,
        'default_price_calculation_type' => null,
        'default_storage_places' => null,
        'define_individual_task_templates' => null,
        'expense_account_id' => null,
        'expiration_days' => 'int32',
        'invoicing_type' => null,
        'launch_date' => 'timestamp',
        'loading_equipment_article_id' => null,
        'long_text' => 'html',
        'low_level_code' => 'int32',
        'manufacturer_id' => null,
        'margin_calculation_price_type' => null,
        'minimum_stock_quantity' => 'decimal',
        'packaging_quantity' => 'int32',
        'packaging_unit_base_article_id' => null,
        'packaging_unit_parent_article_id' => null,
        'planned_working_time_per_unit' => 'int64',
        'primary_supply_source_id' => null,
        'procurement_lead_days' => 'int32',
        'producer_type' => null,
        'production_article' => null,
        'production_bill_of_material_items' => null,
        'production_configuration_rule' => null,
        'purchase_cost_center_id' => null,
        'quantity_conversions' => null,
        'rating_id' => null,
        'record_item_group_name' => null,
        'safety_stock_days' => 'int32',
        'sales_bill_of_material_items' => null,
        'sales_cost_center_id' => null,
        'sell_by_date' => 'timestamp',
        'sell_from_date' => 'timestamp',
        'serial_number_required' => null,
        'service_article_for_service_quota_booking_id' => null,
        'service_quota_quantity' => 'decimal',
        'show_on_delivery_note' => null,
        'status_id' => null,
        'supply_sources' => null,
        'support_until_date' => 'timestamp',
        'system_code' => null,
        'tags' => null,
        'target_stock_quantity' => 'decimal',
        'use_available_for_sales_channels' => null,
        'use_sales_bill_of_material_item_prices' => null,
        'use_sales_bill_of_material_item_prices_for_purchase' => null,
        'use_sales_bill_of_material_subitem_costs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'article_number' => false,
        'description' => false,
        'ean' => false,
        'fixed_purchase_quantity' => false,
        'internal_note' => false,
        'manufacturer_part_number' => false,
        'match_code' => false,
        'minimum_purchase_quantity' => false,
        'name' => false,
        'short_description1' => false,
        'short_description2' => false,
        'tax_rate_type' => false,
        'unit_id' => false,
        'account_id' => false,
        'accounting_code_id' => false,
        'active' => false,
        'apply_cash_discount' => false,
        'article_alternative_quantities' => false,
        'article_calculation_prices' => false,
        'article_category_id' => false,
        'article_gross_weight' => false,
        'article_height' => false,
        'article_images' => false,
        'article_length' => false,
        'article_net_weight' => false,
        'article_prices' => false,
        'article_type' => false,
        'article_width' => false,
        'available_for_sales_channels' => false,
        'available_in_sale' => false,
        'average_delivery_time' => false,
        'barcode' => false,
        'batch_number_required' => false,
        'bill_of_material_part_delivery_possible' => false,
        'catalog_code' => false,
        'commission_rate' => false,
        'contract_billing_cycle' => false,
        'contract_billing_mode' => false,
        'country_of_origin_code' => false,
        'customer_article_numbers' => false,
        'customs_description' => false,
        'customs_tariff_number_id' => false,
        'default_loading_equipment_identifier_id' => false,
        'default_price_calculation_type' => false,
        'default_storage_places' => false,
        'define_individual_task_templates' => false,
        'expense_account_id' => false,
        'expiration_days' => false,
        'invoicing_type' => false,
        'launch_date' => false,
        'loading_equipment_article_id' => false,
        'long_text' => false,
        'low_level_code' => false,
        'manufacturer_id' => false,
        'margin_calculation_price_type' => false,
        'minimum_stock_quantity' => false,
        'packaging_quantity' => false,
        'packaging_unit_base_article_id' => false,
        'packaging_unit_parent_article_id' => false,
        'planned_working_time_per_unit' => false,
        'primary_supply_source_id' => false,
        'procurement_lead_days' => false,
        'producer_type' => false,
        'production_article' => false,
        'production_bill_of_material_items' => false,
        'production_configuration_rule' => false,
        'purchase_cost_center_id' => false,
        'quantity_conversions' => false,
        'rating_id' => false,
        'record_item_group_name' => false,
        'safety_stock_days' => false,
        'sales_bill_of_material_items' => false,
        'sales_cost_center_id' => false,
        'sell_by_date' => false,
        'sell_from_date' => false,
        'serial_number_required' => false,
        'service_article_for_service_quota_booking_id' => false,
        'service_quota_quantity' => false,
        'show_on_delivery_note' => false,
        'status_id' => false,
        'supply_sources' => false,
        'support_until_date' => false,
        'system_code' => false,
        'tags' => false,
        'target_stock_quantity' => false,
        'use_available_for_sales_channels' => false,
        'use_sales_bill_of_material_item_prices' => false,
        'use_sales_bill_of_material_item_prices_for_purchase' => false,
        'use_sales_bill_of_material_subitem_costs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'article_number' => 'articleNumber',
        'description' => 'description',
        'ean' => 'ean',
        'fixed_purchase_quantity' => 'fixedPurchaseQuantity',
        'internal_note' => 'internalNote',
        'manufacturer_part_number' => 'manufacturerPartNumber',
        'match_code' => 'matchCode',
        'minimum_purchase_quantity' => 'minimumPurchaseQuantity',
        'name' => 'name',
        'short_description1' => 'shortDescription1',
        'short_description2' => 'shortDescription2',
        'tax_rate_type' => 'taxRateType',
        'unit_id' => 'unitId',
        'account_id' => 'accountId',
        'accounting_code_id' => 'accountingCodeId',
        'active' => 'active',
        'apply_cash_discount' => 'applyCashDiscount',
        'article_alternative_quantities' => 'articleAlternativeQuantities',
        'article_calculation_prices' => 'articleCalculationPrices',
        'article_category_id' => 'articleCategoryId',
        'article_gross_weight' => 'articleGrossWeight',
        'article_height' => 'articleHeight',
        'article_images' => 'articleImages',
        'article_length' => 'articleLength',
        'article_net_weight' => 'articleNetWeight',
        'article_prices' => 'articlePrices',
        'article_type' => 'articleType',
        'article_width' => 'articleWidth',
        'available_for_sales_channels' => 'availableForSalesChannels',
        'available_in_sale' => 'availableInSale',
        'average_delivery_time' => 'averageDeliveryTime',
        'barcode' => 'barcode',
        'batch_number_required' => 'batchNumberRequired',
        'bill_of_material_part_delivery_possible' => 'billOfMaterialPartDeliveryPossible',
        'catalog_code' => 'catalogCode',
        'commission_rate' => 'commissionRate',
        'contract_billing_cycle' => 'contractBillingCycle',
        'contract_billing_mode' => 'contractBillingMode',
        'country_of_origin_code' => 'countryOfOriginCode',
        'customer_article_numbers' => 'customerArticleNumbers',
        'customs_description' => 'customsDescription',
        'customs_tariff_number_id' => 'customsTariffNumberId',
        'default_loading_equipment_identifier_id' => 'defaultLoadingEquipmentIdentifierId',
        'default_price_calculation_type' => 'defaultPriceCalculationType',
        'default_storage_places' => 'defaultStoragePlaces',
        'define_individual_task_templates' => 'defineIndividualTaskTemplates',
        'expense_account_id' => 'expenseAccountId',
        'expiration_days' => 'expirationDays',
        'invoicing_type' => 'invoicingType',
        'launch_date' => 'launchDate',
        'loading_equipment_article_id' => 'loadingEquipmentArticleId',
        'long_text' => 'longText',
        'low_level_code' => 'lowLevelCode',
        'manufacturer_id' => 'manufacturerId',
        'margin_calculation_price_type' => 'marginCalculationPriceType',
        'minimum_stock_quantity' => 'minimumStockQuantity',
        'packaging_quantity' => 'packagingQuantity',
        'packaging_unit_base_article_id' => 'packagingUnitBaseArticleId',
        'packaging_unit_parent_article_id' => 'packagingUnitParentArticleId',
        'planned_working_time_per_unit' => 'plannedWorkingTimePerUnit',
        'primary_supply_source_id' => 'primarySupplySourceId',
        'procurement_lead_days' => 'procurementLeadDays',
        'producer_type' => 'producerType',
        'production_article' => 'productionArticle',
        'production_bill_of_material_items' => 'productionBillOfMaterialItems',
        'production_configuration_rule' => 'productionConfigurationRule',
        'purchase_cost_center_id' => 'purchaseCostCenterId',
        'quantity_conversions' => 'quantityConversions',
        'rating_id' => 'ratingId',
        'record_item_group_name' => 'recordItemGroupName',
        'safety_stock_days' => 'safetyStockDays',
        'sales_bill_of_material_items' => 'salesBillOfMaterialItems',
        'sales_cost_center_id' => 'salesCostCenterId',
        'sell_by_date' => 'sellByDate',
        'sell_from_date' => 'sellFromDate',
        'serial_number_required' => 'serialNumberRequired',
        'service_article_for_service_quota_booking_id' => 'serviceArticleForServiceQuotaBookingId',
        'service_quota_quantity' => 'serviceQuotaQuantity',
        'show_on_delivery_note' => 'showOnDeliveryNote',
        'status_id' => 'statusId',
        'supply_sources' => 'supplySources',
        'support_until_date' => 'supportUntilDate',
        'system_code' => 'systemCode',
        'tags' => 'tags',
        'target_stock_quantity' => 'targetStockQuantity',
        'use_available_for_sales_channels' => 'useAvailableForSalesChannels',
        'use_sales_bill_of_material_item_prices' => 'useSalesBillOfMaterialItemPrices',
        'use_sales_bill_of_material_item_prices_for_purchase' => 'useSalesBillOfMaterialItemPricesForPurchase',
        'use_sales_bill_of_material_subitem_costs' => 'useSalesBillOfMaterialSubitemCosts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'article_number' => 'setArticleNumber',
        'description' => 'setDescription',
        'ean' => 'setEan',
        'fixed_purchase_quantity' => 'setFixedPurchaseQuantity',
        'internal_note' => 'setInternalNote',
        'manufacturer_part_number' => 'setManufacturerPartNumber',
        'match_code' => 'setMatchCode',
        'minimum_purchase_quantity' => 'setMinimumPurchaseQuantity',
        'name' => 'setName',
        'short_description1' => 'setShortDescription1',
        'short_description2' => 'setShortDescription2',
        'tax_rate_type' => 'setTaxRateType',
        'unit_id' => 'setUnitId',
        'account_id' => 'setAccountId',
        'accounting_code_id' => 'setAccountingCodeId',
        'active' => 'setActive',
        'apply_cash_discount' => 'setApplyCashDiscount',
        'article_alternative_quantities' => 'setArticleAlternativeQuantities',
        'article_calculation_prices' => 'setArticleCalculationPrices',
        'article_category_id' => 'setArticleCategoryId',
        'article_gross_weight' => 'setArticleGrossWeight',
        'article_height' => 'setArticleHeight',
        'article_images' => 'setArticleImages',
        'article_length' => 'setArticleLength',
        'article_net_weight' => 'setArticleNetWeight',
        'article_prices' => 'setArticlePrices',
        'article_type' => 'setArticleType',
        'article_width' => 'setArticleWidth',
        'available_for_sales_channels' => 'setAvailableForSalesChannels',
        'available_in_sale' => 'setAvailableInSale',
        'average_delivery_time' => 'setAverageDeliveryTime',
        'barcode' => 'setBarcode',
        'batch_number_required' => 'setBatchNumberRequired',
        'bill_of_material_part_delivery_possible' => 'setBillOfMaterialPartDeliveryPossible',
        'catalog_code' => 'setCatalogCode',
        'commission_rate' => 'setCommissionRate',
        'contract_billing_cycle' => 'setContractBillingCycle',
        'contract_billing_mode' => 'setContractBillingMode',
        'country_of_origin_code' => 'setCountryOfOriginCode',
        'customer_article_numbers' => 'setCustomerArticleNumbers',
        'customs_description' => 'setCustomsDescription',
        'customs_tariff_number_id' => 'setCustomsTariffNumberId',
        'default_loading_equipment_identifier_id' => 'setDefaultLoadingEquipmentIdentifierId',
        'default_price_calculation_type' => 'setDefaultPriceCalculationType',
        'default_storage_places' => 'setDefaultStoragePlaces',
        'define_individual_task_templates' => 'setDefineIndividualTaskTemplates',
        'expense_account_id' => 'setExpenseAccountId',
        'expiration_days' => 'setExpirationDays',
        'invoicing_type' => 'setInvoicingType',
        'launch_date' => 'setLaunchDate',
        'loading_equipment_article_id' => 'setLoadingEquipmentArticleId',
        'long_text' => 'setLongText',
        'low_level_code' => 'setLowLevelCode',
        'manufacturer_id' => 'setManufacturerId',
        'margin_calculation_price_type' => 'setMarginCalculationPriceType',
        'minimum_stock_quantity' => 'setMinimumStockQuantity',
        'packaging_quantity' => 'setPackagingQuantity',
        'packaging_unit_base_article_id' => 'setPackagingUnitBaseArticleId',
        'packaging_unit_parent_article_id' => 'setPackagingUnitParentArticleId',
        'planned_working_time_per_unit' => 'setPlannedWorkingTimePerUnit',
        'primary_supply_source_id' => 'setPrimarySupplySourceId',
        'procurement_lead_days' => 'setProcurementLeadDays',
        'producer_type' => 'setProducerType',
        'production_article' => 'setProductionArticle',
        'production_bill_of_material_items' => 'setProductionBillOfMaterialItems',
        'production_configuration_rule' => 'setProductionConfigurationRule',
        'purchase_cost_center_id' => 'setPurchaseCostCenterId',
        'quantity_conversions' => 'setQuantityConversions',
        'rating_id' => 'setRatingId',
        'record_item_group_name' => 'setRecordItemGroupName',
        'safety_stock_days' => 'setSafetyStockDays',
        'sales_bill_of_material_items' => 'setSalesBillOfMaterialItems',
        'sales_cost_center_id' => 'setSalesCostCenterId',
        'sell_by_date' => 'setSellByDate',
        'sell_from_date' => 'setSellFromDate',
        'serial_number_required' => 'setSerialNumberRequired',
        'service_article_for_service_quota_booking_id' => 'setServiceArticleForServiceQuotaBookingId',
        'service_quota_quantity' => 'setServiceQuotaQuantity',
        'show_on_delivery_note' => 'setShowOnDeliveryNote',
        'status_id' => 'setStatusId',
        'supply_sources' => 'setSupplySources',
        'support_until_date' => 'setSupportUntilDate',
        'system_code' => 'setSystemCode',
        'tags' => 'setTags',
        'target_stock_quantity' => 'setTargetStockQuantity',
        'use_available_for_sales_channels' => 'setUseAvailableForSalesChannels',
        'use_sales_bill_of_material_item_prices' => 'setUseSalesBillOfMaterialItemPrices',
        'use_sales_bill_of_material_item_prices_for_purchase' => 'setUseSalesBillOfMaterialItemPricesForPurchase',
        'use_sales_bill_of_material_subitem_costs' => 'setUseSalesBillOfMaterialSubitemCosts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'article_number' => 'getArticleNumber',
        'description' => 'getDescription',
        'ean' => 'getEan',
        'fixed_purchase_quantity' => 'getFixedPurchaseQuantity',
        'internal_note' => 'getInternalNote',
        'manufacturer_part_number' => 'getManufacturerPartNumber',
        'match_code' => 'getMatchCode',
        'minimum_purchase_quantity' => 'getMinimumPurchaseQuantity',
        'name' => 'getName',
        'short_description1' => 'getShortDescription1',
        'short_description2' => 'getShortDescription2',
        'tax_rate_type' => 'getTaxRateType',
        'unit_id' => 'getUnitId',
        'account_id' => 'getAccountId',
        'accounting_code_id' => 'getAccountingCodeId',
        'active' => 'getActive',
        'apply_cash_discount' => 'getApplyCashDiscount',
        'article_alternative_quantities' => 'getArticleAlternativeQuantities',
        'article_calculation_prices' => 'getArticleCalculationPrices',
        'article_category_id' => 'getArticleCategoryId',
        'article_gross_weight' => 'getArticleGrossWeight',
        'article_height' => 'getArticleHeight',
        'article_images' => 'getArticleImages',
        'article_length' => 'getArticleLength',
        'article_net_weight' => 'getArticleNetWeight',
        'article_prices' => 'getArticlePrices',
        'article_type' => 'getArticleType',
        'article_width' => 'getArticleWidth',
        'available_for_sales_channels' => 'getAvailableForSalesChannels',
        'available_in_sale' => 'getAvailableInSale',
        'average_delivery_time' => 'getAverageDeliveryTime',
        'barcode' => 'getBarcode',
        'batch_number_required' => 'getBatchNumberRequired',
        'bill_of_material_part_delivery_possible' => 'getBillOfMaterialPartDeliveryPossible',
        'catalog_code' => 'getCatalogCode',
        'commission_rate' => 'getCommissionRate',
        'contract_billing_cycle' => 'getContractBillingCycle',
        'contract_billing_mode' => 'getContractBillingMode',
        'country_of_origin_code' => 'getCountryOfOriginCode',
        'customer_article_numbers' => 'getCustomerArticleNumbers',
        'customs_description' => 'getCustomsDescription',
        'customs_tariff_number_id' => 'getCustomsTariffNumberId',
        'default_loading_equipment_identifier_id' => 'getDefaultLoadingEquipmentIdentifierId',
        'default_price_calculation_type' => 'getDefaultPriceCalculationType',
        'default_storage_places' => 'getDefaultStoragePlaces',
        'define_individual_task_templates' => 'getDefineIndividualTaskTemplates',
        'expense_account_id' => 'getExpenseAccountId',
        'expiration_days' => 'getExpirationDays',
        'invoicing_type' => 'getInvoicingType',
        'launch_date' => 'getLaunchDate',
        'loading_equipment_article_id' => 'getLoadingEquipmentArticleId',
        'long_text' => 'getLongText',
        'low_level_code' => 'getLowLevelCode',
        'manufacturer_id' => 'getManufacturerId',
        'margin_calculation_price_type' => 'getMarginCalculationPriceType',
        'minimum_stock_quantity' => 'getMinimumStockQuantity',
        'packaging_quantity' => 'getPackagingQuantity',
        'packaging_unit_base_article_id' => 'getPackagingUnitBaseArticleId',
        'packaging_unit_parent_article_id' => 'getPackagingUnitParentArticleId',
        'planned_working_time_per_unit' => 'getPlannedWorkingTimePerUnit',
        'primary_supply_source_id' => 'getPrimarySupplySourceId',
        'procurement_lead_days' => 'getProcurementLeadDays',
        'producer_type' => 'getProducerType',
        'production_article' => 'getProductionArticle',
        'production_bill_of_material_items' => 'getProductionBillOfMaterialItems',
        'production_configuration_rule' => 'getProductionConfigurationRule',
        'purchase_cost_center_id' => 'getPurchaseCostCenterId',
        'quantity_conversions' => 'getQuantityConversions',
        'rating_id' => 'getRatingId',
        'record_item_group_name' => 'getRecordItemGroupName',
        'safety_stock_days' => 'getSafetyStockDays',
        'sales_bill_of_material_items' => 'getSalesBillOfMaterialItems',
        'sales_cost_center_id' => 'getSalesCostCenterId',
        'sell_by_date' => 'getSellByDate',
        'sell_from_date' => 'getSellFromDate',
        'serial_number_required' => 'getSerialNumberRequired',
        'service_article_for_service_quota_booking_id' => 'getServiceArticleForServiceQuotaBookingId',
        'service_quota_quantity' => 'getServiceQuotaQuantity',
        'show_on_delivery_note' => 'getShowOnDeliveryNote',
        'status_id' => 'getStatusId',
        'supply_sources' => 'getSupplySources',
        'support_until_date' => 'getSupportUntilDate',
        'system_code' => 'getSystemCode',
        'tags' => 'getTags',
        'target_stock_quantity' => 'getTargetStockQuantity',
        'use_available_for_sales_channels' => 'getUseAvailableForSalesChannels',
        'use_sales_bill_of_material_item_prices' => 'getUseSalesBillOfMaterialItemPrices',
        'use_sales_bill_of_material_item_prices_for_purchase' => 'getUseSalesBillOfMaterialItemPricesForPurchase',
        'use_sales_bill_of_material_subitem_costs' => 'getUseSalesBillOfMaterialSubitemCosts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('article_number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('fixed_purchase_quantity', $data ?? [], null);
        $this->setIfExists('internal_note', $data ?? [], null);
        $this->setIfExists('manufacturer_part_number', $data ?? [], null);
        $this->setIfExists('match_code', $data ?? [], null);
        $this->setIfExists('minimum_purchase_quantity', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('short_description1', $data ?? [], null);
        $this->setIfExists('short_description2', $data ?? [], null);
        $this->setIfExists('tax_rate_type', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('accounting_code_id', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('apply_cash_discount', $data ?? [], null);
        $this->setIfExists('article_alternative_quantities', $data ?? [], null);
        $this->setIfExists('article_calculation_prices', $data ?? [], null);
        $this->setIfExists('article_category_id', $data ?? [], null);
        $this->setIfExists('article_gross_weight', $data ?? [], null);
        $this->setIfExists('article_height', $data ?? [], null);
        $this->setIfExists('article_images', $data ?? [], null);
        $this->setIfExists('article_length', $data ?? [], null);
        $this->setIfExists('article_net_weight', $data ?? [], null);
        $this->setIfExists('article_prices', $data ?? [], null);
        $this->setIfExists('article_type', $data ?? [], null);
        $this->setIfExists('article_width', $data ?? [], null);
        $this->setIfExists('available_for_sales_channels', $data ?? [], null);
        $this->setIfExists('available_in_sale', $data ?? [], null);
        $this->setIfExists('average_delivery_time', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('batch_number_required', $data ?? [], null);
        $this->setIfExists('bill_of_material_part_delivery_possible', $data ?? [], null);
        $this->setIfExists('catalog_code', $data ?? [], null);
        $this->setIfExists('commission_rate', $data ?? [], null);
        $this->setIfExists('contract_billing_cycle', $data ?? [], null);
        $this->setIfExists('contract_billing_mode', $data ?? [], null);
        $this->setIfExists('country_of_origin_code', $data ?? [], null);
        $this->setIfExists('customer_article_numbers', $data ?? [], null);
        $this->setIfExists('customs_description', $data ?? [], null);
        $this->setIfExists('customs_tariff_number_id', $data ?? [], null);
        $this->setIfExists('default_loading_equipment_identifier_id', $data ?? [], null);
        $this->setIfExists('default_price_calculation_type', $data ?? [], null);
        $this->setIfExists('default_storage_places', $data ?? [], null);
        $this->setIfExists('define_individual_task_templates', $data ?? [], null);
        $this->setIfExists('expense_account_id', $data ?? [], null);
        $this->setIfExists('expiration_days', $data ?? [], null);
        $this->setIfExists('invoicing_type', $data ?? [], null);
        $this->setIfExists('launch_date', $data ?? [], null);
        $this->setIfExists('loading_equipment_article_id', $data ?? [], null);
        $this->setIfExists('long_text', $data ?? [], null);
        $this->setIfExists('low_level_code', $data ?? [], null);
        $this->setIfExists('manufacturer_id', $data ?? [], null);
        $this->setIfExists('margin_calculation_price_type', $data ?? [], null);
        $this->setIfExists('minimum_stock_quantity', $data ?? [], null);
        $this->setIfExists('packaging_quantity', $data ?? [], null);
        $this->setIfExists('packaging_unit_base_article_id', $data ?? [], null);
        $this->setIfExists('packaging_unit_parent_article_id', $data ?? [], null);
        $this->setIfExists('planned_working_time_per_unit', $data ?? [], null);
        $this->setIfExists('primary_supply_source_id', $data ?? [], null);
        $this->setIfExists('procurement_lead_days', $data ?? [], null);
        $this->setIfExists('producer_type', $data ?? [], null);
        $this->setIfExists('production_article', $data ?? [], null);
        $this->setIfExists('production_bill_of_material_items', $data ?? [], null);
        $this->setIfExists('production_configuration_rule', $data ?? [], null);
        $this->setIfExists('purchase_cost_center_id', $data ?? [], null);
        $this->setIfExists('quantity_conversions', $data ?? [], null);
        $this->setIfExists('rating_id', $data ?? [], null);
        $this->setIfExists('record_item_group_name', $data ?? [], null);
        $this->setIfExists('safety_stock_days', $data ?? [], null);
        $this->setIfExists('sales_bill_of_material_items', $data ?? [], null);
        $this->setIfExists('sales_cost_center_id', $data ?? [], null);
        $this->setIfExists('sell_by_date', $data ?? [], null);
        $this->setIfExists('sell_from_date', $data ?? [], null);
        $this->setIfExists('serial_number_required', $data ?? [], null);
        $this->setIfExists('service_article_for_service_quota_booking_id', $data ?? [], null);
        $this->setIfExists('service_quota_quantity', $data ?? [], null);
        $this->setIfExists('show_on_delivery_note', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('supply_sources', $data ?? [], null);
        $this->setIfExists('support_until_date', $data ?? [], null);
        $this->setIfExists('system_code', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('target_stock_quantity', $data ?? [], null);
        $this->setIfExists('use_available_for_sales_channels', $data ?? [], null);
        $this->setIfExists('use_sales_bill_of_material_item_prices', $data ?? [], null);
        $this->setIfExists('use_sales_bill_of_material_item_prices_for_purchase', $data ?? [], null);
        $this->setIfExists('use_sales_bill_of_material_subitem_costs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['article_number']) && (mb_strlen($this->container['article_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'article_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ean']) && (mb_strlen($this->container['ean']) > 18)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['fixed_purchase_quantity']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['fixed_purchase_quantity'])) {
            $invalidProperties[] = "invalid value for 'fixed_purchase_quantity', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['internal_note']) && (mb_strlen($this->container['internal_note']) > 1000)) {
            $invalidProperties[] = "invalid value for 'internal_note', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['manufacturer_part_number']) && (mb_strlen($this->container['manufacturer_part_number']) > 300)) {
            $invalidProperties[] = "invalid value for 'manufacturer_part_number', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['match_code']) && (mb_strlen($this->container['match_code']) > 1000)) {
            $invalidProperties[] = "invalid value for 'match_code', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['minimum_purchase_quantity']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['minimum_purchase_quantity'])) {
            $invalidProperties[] = "invalid value for 'minimum_purchase_quantity', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 300)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['short_description1']) && (mb_strlen($this->container['short_description1']) > 255)) {
            $invalidProperties[] = "invalid value for 'short_description1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['short_description2']) && (mb_strlen($this->container['short_description2']) > 255)) {
            $invalidProperties[] = "invalid value for 'short_description2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['article_gross_weight']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['article_gross_weight'])) {
            $invalidProperties[] = "invalid value for 'article_gross_weight', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['article_height']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['article_height'])) {
            $invalidProperties[] = "invalid value for 'article_height', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['article_length']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['article_length'])) {
            $invalidProperties[] = "invalid value for 'article_length', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['article_net_weight']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['article_net_weight'])) {
            $invalidProperties[] = "invalid value for 'article_net_weight', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['article_width']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['article_width'])) {
            $invalidProperties[] = "invalid value for 'article_width', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['barcode']) && (mb_strlen($this->container['barcode']) > 4000)) {
            $invalidProperties[] = "invalid value for 'barcode', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['catalog_code']) && (mb_strlen($this->container['catalog_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'catalog_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['commission_rate']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['commission_rate'])) {
            $invalidProperties[] = "invalid value for 'commission_rate', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['country_of_origin_code']) && (mb_strlen($this->container['country_of_origin_code']) > 5)) {
            $invalidProperties[] = "invalid value for 'country_of_origin_code', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['customs_description']) && (mb_strlen($this->container['customs_description']) > 256)) {
            $invalidProperties[] = "invalid value for 'customs_description', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['long_text']) && (mb_strlen($this->container['long_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'long_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['minimum_stock_quantity']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['minimum_stock_quantity'])) {
            $invalidProperties[] = "invalid value for 'minimum_stock_quantity', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['producer_type']) && (mb_strlen($this->container['producer_type']) > 63)) {
            $invalidProperties[] = "invalid value for 'producer_type', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['record_item_group_name']) && (mb_strlen($this->container['record_item_group_name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'record_item_group_name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['service_quota_quantity']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['service_quota_quantity'])) {
            $invalidProperties[] = "invalid value for 'service_quota_quantity', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['system_code']) && (mb_strlen($this->container['system_code']) > 4000)) {
            $invalidProperties[] = "invalid value for 'system_code', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['target_stock_quantity']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['target_stock_quantity'])) {
            $invalidProperties[] = "invalid value for 'target_stock_quantity', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string|null
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string|null $article_number article_number
     *
     * @return self
     */
    public function setArticleNumber($article_number)
    {
        if (is_null($article_number)) {
            throw new \InvalidArgumentException('non-nullable article_number cannot be null');
        }
        if ((mb_strlen($article_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $article_number when calling Article., must be smaller than or equal to 1000.');
        }

        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Article., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        if ((mb_strlen($ean) > 18)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling Article., must be smaller than or equal to 18.');
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets fixed_purchase_quantity
     *
     * @return float|null
     */
    public function getFixedPurchaseQuantity()
    {
        return $this->container['fixed_purchase_quantity'];
    }

    /**
     * Sets fixed_purchase_quantity
     *
     * @param float|null $fixed_purchase_quantity fixed_purchase_quantity
     *
     * @return self
     */
    public function setFixedPurchaseQuantity($fixed_purchase_quantity)
    {
        if (is_null($fixed_purchase_quantity)) {
            throw new \InvalidArgumentException('non-nullable fixed_purchase_quantity cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($fixed_purchase_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$fixed_purchase_quantity when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['fixed_purchase_quantity'] = $fixed_purchase_quantity;

        return $this;
    }

    /**
     * Gets internal_note
     *
     * @return string|null
     */
    public function getInternalNote()
    {
        return $this->container['internal_note'];
    }

    /**
     * Sets internal_note
     *
     * @param string|null $internal_note internal_note
     *
     * @return self
     */
    public function setInternalNote($internal_note)
    {
        if (is_null($internal_note)) {
            throw new \InvalidArgumentException('non-nullable internal_note cannot be null');
        }
        if ((mb_strlen($internal_note) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $internal_note when calling Article., must be smaller than or equal to 1000.');
        }

        $this->container['internal_note'] = $internal_note;

        return $this;
    }

    /**
     * Gets manufacturer_part_number
     *
     * @return string|null
     */
    public function getManufacturerPartNumber()
    {
        return $this->container['manufacturer_part_number'];
    }

    /**
     * Sets manufacturer_part_number
     *
     * @param string|null $manufacturer_part_number manufacturer_part_number
     *
     * @return self
     */
    public function setManufacturerPartNumber($manufacturer_part_number)
    {
        if (is_null($manufacturer_part_number)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_part_number cannot be null');
        }
        if ((mb_strlen($manufacturer_part_number) > 300)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_part_number when calling Article., must be smaller than or equal to 300.');
        }

        $this->container['manufacturer_part_number'] = $manufacturer_part_number;

        return $this;
    }

    /**
     * Gets match_code
     *
     * @return string|null
     */
    public function getMatchCode()
    {
        return $this->container['match_code'];
    }

    /**
     * Sets match_code
     *
     * @param string|null $match_code match_code
     *
     * @return self
     */
    public function setMatchCode($match_code)
    {
        if (is_null($match_code)) {
            throw new \InvalidArgumentException('non-nullable match_code cannot be null');
        }
        if ((mb_strlen($match_code) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $match_code when calling Article., must be smaller than or equal to 1000.');
        }

        $this->container['match_code'] = $match_code;

        return $this;
    }

    /**
     * Gets minimum_purchase_quantity
     *
     * @return float|null
     */
    public function getMinimumPurchaseQuantity()
    {
        return $this->container['minimum_purchase_quantity'];
    }

    /**
     * Sets minimum_purchase_quantity
     *
     * @param float|null $minimum_purchase_quantity minimum_purchase_quantity
     *
     * @return self
     */
    public function setMinimumPurchaseQuantity($minimum_purchase_quantity)
    {
        if (is_null($minimum_purchase_quantity)) {
            throw new \InvalidArgumentException('non-nullable minimum_purchase_quantity cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($minimum_purchase_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$minimum_purchase_quantity when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['minimum_purchase_quantity'] = $minimum_purchase_quantity;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 300)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Article., must be smaller than or equal to 300.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_description1
     *
     * @return string|null
     */
    public function getShortDescription1()
    {
        return $this->container['short_description1'];
    }

    /**
     * Sets short_description1
     *
     * @param string|null $short_description1 short_description1
     *
     * @return self
     */
    public function setShortDescription1($short_description1)
    {
        if (is_null($short_description1)) {
            throw new \InvalidArgumentException('non-nullable short_description1 cannot be null');
        }
        if ((mb_strlen($short_description1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $short_description1 when calling Article., must be smaller than or equal to 255.');
        }

        $this->container['short_description1'] = $short_description1;

        return $this;
    }

    /**
     * Gets short_description2
     *
     * @return string|null
     */
    public function getShortDescription2()
    {
        return $this->container['short_description2'];
    }

    /**
     * Sets short_description2
     *
     * @param string|null $short_description2 short_description2
     *
     * @return self
     */
    public function setShortDescription2($short_description2)
    {
        if (is_null($short_description2)) {
            throw new \InvalidArgumentException('non-nullable short_description2 cannot be null');
        }
        if ((mb_strlen($short_description2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $short_description2 when calling Article., must be smaller than or equal to 255.');
        }

        $this->container['short_description2'] = $short_description2;

        return $this;
    }

    /**
     * Gets tax_rate_type
     *
     * @return \kruegge82\weclapp\Model\TaxRateType|null
     */
    public function getTaxRateType()
    {
        return $this->container['tax_rate_type'];
    }

    /**
     * Sets tax_rate_type
     *
     * @param \kruegge82\weclapp\Model\TaxRateType|null $tax_rate_type tax_rate_type
     *
     * @return self
     */
    public function setTaxRateType($tax_rate_type)
    {
        if (is_null($tax_rate_type)) {
            throw new \InvalidArgumentException('non-nullable tax_rate_type cannot be null');
        }
        $this->container['tax_rate_type'] = $tax_rate_type;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string|null $unit_id unit_id
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            throw new \InvalidArgumentException('non-nullable unit_id cannot be null');
        }
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets accounting_code_id
     *
     * @return string|null
     */
    public function getAccountingCodeId()
    {
        return $this->container['accounting_code_id'];
    }

    /**
     * Sets accounting_code_id
     *
     * @param string|null $accounting_code_id accounting_code_id
     *
     * @return self
     */
    public function setAccountingCodeId($accounting_code_id)
    {
        if (is_null($accounting_code_id)) {
            throw new \InvalidArgumentException('non-nullable accounting_code_id cannot be null');
        }
        $this->container['accounting_code_id'] = $accounting_code_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets apply_cash_discount
     *
     * @return bool|null
     */
    public function getApplyCashDiscount()
    {
        return $this->container['apply_cash_discount'];
    }

    /**
     * Sets apply_cash_discount
     *
     * @param bool|null $apply_cash_discount apply_cash_discount
     *
     * @return self
     */
    public function setApplyCashDiscount($apply_cash_discount)
    {
        if (is_null($apply_cash_discount)) {
            throw new \InvalidArgumentException('non-nullable apply_cash_discount cannot be null');
        }
        $this->container['apply_cash_discount'] = $apply_cash_discount;

        return $this;
    }

    /**
     * Gets article_alternative_quantities
     *
     * @return \kruegge82\weclapp\Model\ArticleAlternativeQuantity[]|null
     */
    public function getArticleAlternativeQuantities()
    {
        return $this->container['article_alternative_quantities'];
    }

    /**
     * Sets article_alternative_quantities
     *
     * @param \kruegge82\weclapp\Model\ArticleAlternativeQuantity[]|null $article_alternative_quantities article_alternative_quantities
     *
     * @return self
     */
    public function setArticleAlternativeQuantities($article_alternative_quantities)
    {
        if (is_null($article_alternative_quantities)) {
            throw new \InvalidArgumentException('non-nullable article_alternative_quantities cannot be null');
        }
        $this->container['article_alternative_quantities'] = $article_alternative_quantities;

        return $this;
    }

    /**
     * Gets article_calculation_prices
     *
     * @return \kruegge82\weclapp\Model\ArticleCalculationPrice[]|null
     */
    public function getArticleCalculationPrices()
    {
        return $this->container['article_calculation_prices'];
    }

    /**
     * Sets article_calculation_prices
     *
     * @param \kruegge82\weclapp\Model\ArticleCalculationPrice[]|null $article_calculation_prices article_calculation_prices
     *
     * @return self
     */
    public function setArticleCalculationPrices($article_calculation_prices)
    {
        if (is_null($article_calculation_prices)) {
            throw new \InvalidArgumentException('non-nullable article_calculation_prices cannot be null');
        }
        $this->container['article_calculation_prices'] = $article_calculation_prices;

        return $this;
    }

    /**
     * Gets article_category_id
     *
     * @return string|null
     */
    public function getArticleCategoryId()
    {
        return $this->container['article_category_id'];
    }

    /**
     * Sets article_category_id
     *
     * @param string|null $article_category_id article_category_id
     *
     * @return self
     */
    public function setArticleCategoryId($article_category_id)
    {
        if (is_null($article_category_id)) {
            throw new \InvalidArgumentException('non-nullable article_category_id cannot be null');
        }
        $this->container['article_category_id'] = $article_category_id;

        return $this;
    }

    /**
     * Gets article_gross_weight
     *
     * @return float|null
     */
    public function getArticleGrossWeight()
    {
        return $this->container['article_gross_weight'];
    }

    /**
     * Sets article_gross_weight
     *
     * @param float|null $article_gross_weight article_gross_weight
     *
     * @return self
     */
    public function setArticleGrossWeight($article_gross_weight)
    {
        if (is_null($article_gross_weight)) {
            throw new \InvalidArgumentException('non-nullable article_gross_weight cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($article_gross_weight)))) {
            throw new \InvalidArgumentException("invalid value for \$article_gross_weight when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['article_gross_weight'] = $article_gross_weight;

        return $this;
    }

    /**
     * Gets article_height
     *
     * @return float|null
     */
    public function getArticleHeight()
    {
        return $this->container['article_height'];
    }

    /**
     * Sets article_height
     *
     * @param float|null $article_height article_height
     *
     * @return self
     */
    public function setArticleHeight($article_height)
    {
        if (is_null($article_height)) {
            throw new \InvalidArgumentException('non-nullable article_height cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($article_height)))) {
            throw new \InvalidArgumentException("invalid value for \$article_height when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['article_height'] = $article_height;

        return $this;
    }

    /**
     * Gets article_images
     *
     * @return \kruegge82\weclapp\Model\ArticleImage[]|null
     */
    public function getArticleImages()
    {
        return $this->container['article_images'];
    }

    /**
     * Sets article_images
     *
     * @param \kruegge82\weclapp\Model\ArticleImage[]|null $article_images article_images
     *
     * @return self
     */
    public function setArticleImages($article_images)
    {
        if (is_null($article_images)) {
            throw new \InvalidArgumentException('non-nullable article_images cannot be null');
        }
        $this->container['article_images'] = $article_images;

        return $this;
    }

    /**
     * Gets article_length
     *
     * @return float|null
     */
    public function getArticleLength()
    {
        return $this->container['article_length'];
    }

    /**
     * Sets article_length
     *
     * @param float|null $article_length article_length
     *
     * @return self
     */
    public function setArticleLength($article_length)
    {
        if (is_null($article_length)) {
            throw new \InvalidArgumentException('non-nullable article_length cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($article_length)))) {
            throw new \InvalidArgumentException("invalid value for \$article_length when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['article_length'] = $article_length;

        return $this;
    }

    /**
     * Gets article_net_weight
     *
     * @return float|null
     */
    public function getArticleNetWeight()
    {
        return $this->container['article_net_weight'];
    }

    /**
     * Sets article_net_weight
     *
     * @param float|null $article_net_weight article_net_weight
     *
     * @return self
     */
    public function setArticleNetWeight($article_net_weight)
    {
        if (is_null($article_net_weight)) {
            throw new \InvalidArgumentException('non-nullable article_net_weight cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($article_net_weight)))) {
            throw new \InvalidArgumentException("invalid value for \$article_net_weight when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['article_net_weight'] = $article_net_weight;

        return $this;
    }

    /**
     * Gets article_prices
     *
     * @return \kruegge82\weclapp\Model\ArticlePriceWithoutArticleReference[]|null
     */
    public function getArticlePrices()
    {
        return $this->container['article_prices'];
    }

    /**
     * Sets article_prices
     *
     * @param \kruegge82\weclapp\Model\ArticlePriceWithoutArticleReference[]|null $article_prices article_prices
     *
     * @return self
     */
    public function setArticlePrices($article_prices)
    {
        if (is_null($article_prices)) {
            throw new \InvalidArgumentException('non-nullable article_prices cannot be null');
        }
        $this->container['article_prices'] = $article_prices;

        return $this;
    }

    /**
     * Gets article_type
     *
     * @return \kruegge82\weclapp\Model\ArticleType|null
     */
    public function getArticleType()
    {
        return $this->container['article_type'];
    }

    /**
     * Sets article_type
     *
     * @param \kruegge82\weclapp\Model\ArticleType|null $article_type article_type
     *
     * @return self
     */
    public function setArticleType($article_type)
    {
        if (is_null($article_type)) {
            throw new \InvalidArgumentException('non-nullable article_type cannot be null');
        }
        $this->container['article_type'] = $article_type;

        return $this;
    }

    /**
     * Gets article_width
     *
     * @return float|null
     */
    public function getArticleWidth()
    {
        return $this->container['article_width'];
    }

    /**
     * Sets article_width
     *
     * @param float|null $article_width article_width
     *
     * @return self
     */
    public function setArticleWidth($article_width)
    {
        if (is_null($article_width)) {
            throw new \InvalidArgumentException('non-nullable article_width cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($article_width)))) {
            throw new \InvalidArgumentException("invalid value for \$article_width when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['article_width'] = $article_width;

        return $this;
    }

    /**
     * Gets available_for_sales_channels
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel[]|null
     */
    public function getAvailableForSalesChannels()
    {
        return $this->container['available_for_sales_channels'];
    }

    /**
     * Sets available_for_sales_channels
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel[]|null $available_for_sales_channels available_for_sales_channels
     *
     * @return self
     */
    public function setAvailableForSalesChannels($available_for_sales_channels)
    {
        if (is_null($available_for_sales_channels)) {
            throw new \InvalidArgumentException('non-nullable available_for_sales_channels cannot be null');
        }
        $this->container['available_for_sales_channels'] = $available_for_sales_channels;

        return $this;
    }

    /**
     * Gets available_in_sale
     *
     * @return bool|null
     */
    public function getAvailableInSale()
    {
        return $this->container['available_in_sale'];
    }

    /**
     * Sets available_in_sale
     *
     * @param bool|null $available_in_sale available_in_sale
     *
     * @return self
     */
    public function setAvailableInSale($available_in_sale)
    {
        if (is_null($available_in_sale)) {
            throw new \InvalidArgumentException('non-nullable available_in_sale cannot be null');
        }
        $this->container['available_in_sale'] = $available_in_sale;

        return $this;
    }

    /**
     * Gets average_delivery_time
     *
     * @return int|null
     */
    public function getAverageDeliveryTime()
    {
        return $this->container['average_delivery_time'];
    }

    /**
     * Sets average_delivery_time
     *
     * @param int|null $average_delivery_time average_delivery_time
     *
     * @return self
     */
    public function setAverageDeliveryTime($average_delivery_time)
    {
        if (is_null($average_delivery_time)) {
            throw new \InvalidArgumentException('non-nullable average_delivery_time cannot be null');
        }
        $this->container['average_delivery_time'] = $average_delivery_time;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        if ((mb_strlen($barcode) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $barcode when calling Article., must be smaller than or equal to 4000.');
        }

        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets batch_number_required
     *
     * @return bool|null
     */
    public function getBatchNumberRequired()
    {
        return $this->container['batch_number_required'];
    }

    /**
     * Sets batch_number_required
     *
     * @param bool|null $batch_number_required batch_number_required
     *
     * @return self
     */
    public function setBatchNumberRequired($batch_number_required)
    {
        if (is_null($batch_number_required)) {
            throw new \InvalidArgumentException('non-nullable batch_number_required cannot be null');
        }
        $this->container['batch_number_required'] = $batch_number_required;

        return $this;
    }

    /**
     * Gets bill_of_material_part_delivery_possible
     *
     * @return bool|null
     */
    public function getBillOfMaterialPartDeliveryPossible()
    {
        return $this->container['bill_of_material_part_delivery_possible'];
    }

    /**
     * Sets bill_of_material_part_delivery_possible
     *
     * @param bool|null $bill_of_material_part_delivery_possible bill_of_material_part_delivery_possible
     *
     * @return self
     */
    public function setBillOfMaterialPartDeliveryPossible($bill_of_material_part_delivery_possible)
    {
        if (is_null($bill_of_material_part_delivery_possible)) {
            throw new \InvalidArgumentException('non-nullable bill_of_material_part_delivery_possible cannot be null');
        }
        $this->container['bill_of_material_part_delivery_possible'] = $bill_of_material_part_delivery_possible;

        return $this;
    }

    /**
     * Gets catalog_code
     *
     * @return string|null
     */
    public function getCatalogCode()
    {
        return $this->container['catalog_code'];
    }

    /**
     * Sets catalog_code
     *
     * @param string|null $catalog_code catalog_code
     *
     * @return self
     */
    public function setCatalogCode($catalog_code)
    {
        if (is_null($catalog_code)) {
            throw new \InvalidArgumentException('non-nullable catalog_code cannot be null');
        }
        if ((mb_strlen($catalog_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $catalog_code when calling Article., must be smaller than or equal to 255.');
        }

        $this->container['catalog_code'] = $catalog_code;

        return $this;
    }

    /**
     * Gets commission_rate
     *
     * @return float|null
     */
    public function getCommissionRate()
    {
        return $this->container['commission_rate'];
    }

    /**
     * Sets commission_rate
     *
     * @param float|null $commission_rate commission_rate
     *
     * @return self
     */
    public function setCommissionRate($commission_rate)
    {
        if (is_null($commission_rate)) {
            throw new \InvalidArgumentException('non-nullable commission_rate cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($commission_rate)))) {
            throw new \InvalidArgumentException("invalid value for \$commission_rate when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['commission_rate'] = $commission_rate;

        return $this;
    }

    /**
     * Gets contract_billing_cycle
     *
     * @return \kruegge82\weclapp\Model\ContractChargeInterval|null
     */
    public function getContractBillingCycle()
    {
        return $this->container['contract_billing_cycle'];
    }

    /**
     * Sets contract_billing_cycle
     *
     * @param \kruegge82\weclapp\Model\ContractChargeInterval|null $contract_billing_cycle contract_billing_cycle
     *
     * @return self
     */
    public function setContractBillingCycle($contract_billing_cycle)
    {
        if (is_null($contract_billing_cycle)) {
            throw new \InvalidArgumentException('non-nullable contract_billing_cycle cannot be null');
        }
        $this->container['contract_billing_cycle'] = $contract_billing_cycle;

        return $this;
    }

    /**
     * Gets contract_billing_mode
     *
     * @return \kruegge82\weclapp\Model\ContractChargeIntervalType|null
     */
    public function getContractBillingMode()
    {
        return $this->container['contract_billing_mode'];
    }

    /**
     * Sets contract_billing_mode
     *
     * @param \kruegge82\weclapp\Model\ContractChargeIntervalType|null $contract_billing_mode contract_billing_mode
     *
     * @return self
     */
    public function setContractBillingMode($contract_billing_mode)
    {
        if (is_null($contract_billing_mode)) {
            throw new \InvalidArgumentException('non-nullable contract_billing_mode cannot be null');
        }
        $this->container['contract_billing_mode'] = $contract_billing_mode;

        return $this;
    }

    /**
     * Gets country_of_origin_code
     *
     * @return string|null
     */
    public function getCountryOfOriginCode()
    {
        return $this->container['country_of_origin_code'];
    }

    /**
     * Sets country_of_origin_code
     *
     * @param string|null $country_of_origin_code country_of_origin_code
     *
     * @return self
     */
    public function setCountryOfOriginCode($country_of_origin_code)
    {
        if (is_null($country_of_origin_code)) {
            throw new \InvalidArgumentException('non-nullable country_of_origin_code cannot be null');
        }
        if ((mb_strlen($country_of_origin_code) > 5)) {
            throw new \InvalidArgumentException('invalid length for $country_of_origin_code when calling Article., must be smaller than or equal to 5.');
        }

        $this->container['country_of_origin_code'] = $country_of_origin_code;

        return $this;
    }

    /**
     * Gets customer_article_numbers
     *
     * @return \kruegge82\weclapp\Model\CustomerSpecificArticleAttributes[]|null
     */
    public function getCustomerArticleNumbers()
    {
        return $this->container['customer_article_numbers'];
    }

    /**
     * Sets customer_article_numbers
     *
     * @param \kruegge82\weclapp\Model\CustomerSpecificArticleAttributes[]|null $customer_article_numbers customer_article_numbers
     *
     * @return self
     */
    public function setCustomerArticleNumbers($customer_article_numbers)
    {
        if (is_null($customer_article_numbers)) {
            throw new \InvalidArgumentException('non-nullable customer_article_numbers cannot be null');
        }
        $this->container['customer_article_numbers'] = $customer_article_numbers;

        return $this;
    }

    /**
     * Gets customs_description
     *
     * @return string|null
     */
    public function getCustomsDescription()
    {
        return $this->container['customs_description'];
    }

    /**
     * Sets customs_description
     *
     * @param string|null $customs_description customs_description
     *
     * @return self
     */
    public function setCustomsDescription($customs_description)
    {
        if (is_null($customs_description)) {
            throw new \InvalidArgumentException('non-nullable customs_description cannot be null');
        }
        if ((mb_strlen($customs_description) > 256)) {
            throw new \InvalidArgumentException('invalid length for $customs_description when calling Article., must be smaller than or equal to 256.');
        }

        $this->container['customs_description'] = $customs_description;

        return $this;
    }

    /**
     * Gets customs_tariff_number_id
     *
     * @return string|null
     */
    public function getCustomsTariffNumberId()
    {
        return $this->container['customs_tariff_number_id'];
    }

    /**
     * Sets customs_tariff_number_id
     *
     * @param string|null $customs_tariff_number_id customs_tariff_number_id
     *
     * @return self
     */
    public function setCustomsTariffNumberId($customs_tariff_number_id)
    {
        if (is_null($customs_tariff_number_id)) {
            throw new \InvalidArgumentException('non-nullable customs_tariff_number_id cannot be null');
        }
        $this->container['customs_tariff_number_id'] = $customs_tariff_number_id;

        return $this;
    }

    /**
     * Gets default_loading_equipment_identifier_id
     *
     * @return string|null
     */
    public function getDefaultLoadingEquipmentIdentifierId()
    {
        return $this->container['default_loading_equipment_identifier_id'];
    }

    /**
     * Sets default_loading_equipment_identifier_id
     *
     * @param string|null $default_loading_equipment_identifier_id default_loading_equipment_identifier_id
     *
     * @return self
     */
    public function setDefaultLoadingEquipmentIdentifierId($default_loading_equipment_identifier_id)
    {
        if (is_null($default_loading_equipment_identifier_id)) {
            throw new \InvalidArgumentException('non-nullable default_loading_equipment_identifier_id cannot be null');
        }
        $this->container['default_loading_equipment_identifier_id'] = $default_loading_equipment_identifier_id;

        return $this;
    }

    /**
     * Gets default_price_calculation_type
     *
     * @return \kruegge82\weclapp\Model\CalculationType|null
     */
    public function getDefaultPriceCalculationType()
    {
        return $this->container['default_price_calculation_type'];
    }

    /**
     * Sets default_price_calculation_type
     *
     * @param \kruegge82\weclapp\Model\CalculationType|null $default_price_calculation_type default_price_calculation_type
     *
     * @return self
     */
    public function setDefaultPriceCalculationType($default_price_calculation_type)
    {
        if (is_null($default_price_calculation_type)) {
            throw new \InvalidArgumentException('non-nullable default_price_calculation_type cannot be null');
        }
        $this->container['default_price_calculation_type'] = $default_price_calculation_type;

        return $this;
    }

    /**
     * Gets default_storage_places
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getDefaultStoragePlaces()
    {
        return $this->container['default_storage_places'];
    }

    /**
     * Sets default_storage_places
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $default_storage_places default_storage_places
     *
     * @return self
     */
    public function setDefaultStoragePlaces($default_storage_places)
    {
        if (is_null($default_storage_places)) {
            throw new \InvalidArgumentException('non-nullable default_storage_places cannot be null');
        }
        $this->container['default_storage_places'] = $default_storage_places;

        return $this;
    }

    /**
     * Gets define_individual_task_templates
     *
     * @return bool|null
     */
    public function getDefineIndividualTaskTemplates()
    {
        return $this->container['define_individual_task_templates'];
    }

    /**
     * Sets define_individual_task_templates
     *
     * @param bool|null $define_individual_task_templates define_individual_task_templates
     *
     * @return self
     */
    public function setDefineIndividualTaskTemplates($define_individual_task_templates)
    {
        if (is_null($define_individual_task_templates)) {
            throw new \InvalidArgumentException('non-nullable define_individual_task_templates cannot be null');
        }
        $this->container['define_individual_task_templates'] = $define_individual_task_templates;

        return $this;
    }

    /**
     * Gets expense_account_id
     *
     * @return string|null
     */
    public function getExpenseAccountId()
    {
        return $this->container['expense_account_id'];
    }

    /**
     * Sets expense_account_id
     *
     * @param string|null $expense_account_id expense_account_id
     *
     * @return self
     */
    public function setExpenseAccountId($expense_account_id)
    {
        if (is_null($expense_account_id)) {
            throw new \InvalidArgumentException('non-nullable expense_account_id cannot be null');
        }
        $this->container['expense_account_id'] = $expense_account_id;

        return $this;
    }

    /**
     * Gets expiration_days
     *
     * @return int|null
     */
    public function getExpirationDays()
    {
        return $this->container['expiration_days'];
    }

    /**
     * Sets expiration_days
     *
     * @param int|null $expiration_days expiration_days
     *
     * @return self
     */
    public function setExpirationDays($expiration_days)
    {
        if (is_null($expiration_days)) {
            throw new \InvalidArgumentException('non-nullable expiration_days cannot be null');
        }
        $this->container['expiration_days'] = $expiration_days;

        return $this;
    }

    /**
     * Gets invoicing_type
     *
     * @return \kruegge82\weclapp\Model\InvoicingType|null
     */
    public function getInvoicingType()
    {
        return $this->container['invoicing_type'];
    }

    /**
     * Sets invoicing_type
     *
     * @param \kruegge82\weclapp\Model\InvoicingType|null $invoicing_type invoicing_type
     *
     * @return self
     */
    public function setInvoicingType($invoicing_type)
    {
        if (is_null($invoicing_type)) {
            throw new \InvalidArgumentException('non-nullable invoicing_type cannot be null');
        }
        $this->container['invoicing_type'] = $invoicing_type;

        return $this;
    }

    /**
     * Gets launch_date
     *
     * @return int|null
     */
    public function getLaunchDate()
    {
        return $this->container['launch_date'];
    }

    /**
     * Sets launch_date
     *
     * @param int|null $launch_date launch_date
     *
     * @return self
     */
    public function setLaunchDate($launch_date)
    {
        if (is_null($launch_date)) {
            throw new \InvalidArgumentException('non-nullable launch_date cannot be null');
        }
        $this->container['launch_date'] = $launch_date;

        return $this;
    }

    /**
     * Gets loading_equipment_article_id
     *
     * @return string|null
     */
    public function getLoadingEquipmentArticleId()
    {
        return $this->container['loading_equipment_article_id'];
    }

    /**
     * Sets loading_equipment_article_id
     *
     * @param string|null $loading_equipment_article_id loading_equipment_article_id
     *
     * @return self
     */
    public function setLoadingEquipmentArticleId($loading_equipment_article_id)
    {
        if (is_null($loading_equipment_article_id)) {
            throw new \InvalidArgumentException('non-nullable loading_equipment_article_id cannot be null');
        }
        $this->container['loading_equipment_article_id'] = $loading_equipment_article_id;

        return $this;
    }

    /**
     * Gets long_text
     *
     * @return string|null
     */
    public function getLongText()
    {
        return $this->container['long_text'];
    }

    /**
     * Sets long_text
     *
     * @param string|null $long_text long_text
     *
     * @return self
     */
    public function setLongText($long_text)
    {
        if (is_null($long_text)) {
            throw new \InvalidArgumentException('non-nullable long_text cannot be null');
        }
        if ((mb_strlen($long_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $long_text when calling Article., must be smaller than or equal to 255.');
        }

        $this->container['long_text'] = $long_text;

        return $this;
    }

    /**
     * Gets low_level_code
     *
     * @return int|null
     */
    public function getLowLevelCode()
    {
        return $this->container['low_level_code'];
    }

    /**
     * Sets low_level_code
     *
     * @param int|null $low_level_code low_level_code
     *
     * @return self
     */
    public function setLowLevelCode($low_level_code)
    {
        if (is_null($low_level_code)) {
            throw new \InvalidArgumentException('non-nullable low_level_code cannot be null');
        }
        $this->container['low_level_code'] = $low_level_code;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return string|null
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param string|null $manufacturer_id manufacturer_id
     *
     * @return self
     */
    public function setManufacturerId($manufacturer_id)
    {
        if (is_null($manufacturer_id)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_id cannot be null');
        }
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets margin_calculation_price_type
     *
     * @return \kruegge82\weclapp\Model\MarginCalculationPriceType|null
     */
    public function getMarginCalculationPriceType()
    {
        return $this->container['margin_calculation_price_type'];
    }

    /**
     * Sets margin_calculation_price_type
     *
     * @param \kruegge82\weclapp\Model\MarginCalculationPriceType|null $margin_calculation_price_type margin_calculation_price_type
     *
     * @return self
     */
    public function setMarginCalculationPriceType($margin_calculation_price_type)
    {
        if (is_null($margin_calculation_price_type)) {
            throw new \InvalidArgumentException('non-nullable margin_calculation_price_type cannot be null');
        }
        $this->container['margin_calculation_price_type'] = $margin_calculation_price_type;

        return $this;
    }

    /**
     * Gets minimum_stock_quantity
     *
     * @return float|null
     */
    public function getMinimumStockQuantity()
    {
        return $this->container['minimum_stock_quantity'];
    }

    /**
     * Sets minimum_stock_quantity
     *
     * @param float|null $minimum_stock_quantity minimum_stock_quantity
     *
     * @return self
     */
    public function setMinimumStockQuantity($minimum_stock_quantity)
    {
        if (is_null($minimum_stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable minimum_stock_quantity cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($minimum_stock_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$minimum_stock_quantity when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['minimum_stock_quantity'] = $minimum_stock_quantity;

        return $this;
    }

    /**
     * Gets packaging_quantity
     *
     * @return int|null
     */
    public function getPackagingQuantity()
    {
        return $this->container['packaging_quantity'];
    }

    /**
     * Sets packaging_quantity
     *
     * @param int|null $packaging_quantity packaging_quantity
     *
     * @return self
     */
    public function setPackagingQuantity($packaging_quantity)
    {
        if (is_null($packaging_quantity)) {
            throw new \InvalidArgumentException('non-nullable packaging_quantity cannot be null');
        }
        $this->container['packaging_quantity'] = $packaging_quantity;

        return $this;
    }

    /**
     * Gets packaging_unit_base_article_id
     *
     * @return string|null
     */
    public function getPackagingUnitBaseArticleId()
    {
        return $this->container['packaging_unit_base_article_id'];
    }

    /**
     * Sets packaging_unit_base_article_id
     *
     * @param string|null $packaging_unit_base_article_id packaging_unit_base_article_id
     *
     * @return self
     */
    public function setPackagingUnitBaseArticleId($packaging_unit_base_article_id)
    {
        if (is_null($packaging_unit_base_article_id)) {
            throw new \InvalidArgumentException('non-nullable packaging_unit_base_article_id cannot be null');
        }
        $this->container['packaging_unit_base_article_id'] = $packaging_unit_base_article_id;

        return $this;
    }

    /**
     * Gets packaging_unit_parent_article_id
     *
     * @return string|null
     */
    public function getPackagingUnitParentArticleId()
    {
        return $this->container['packaging_unit_parent_article_id'];
    }

    /**
     * Sets packaging_unit_parent_article_id
     *
     * @param string|null $packaging_unit_parent_article_id packaging_unit_parent_article_id
     *
     * @return self
     */
    public function setPackagingUnitParentArticleId($packaging_unit_parent_article_id)
    {
        if (is_null($packaging_unit_parent_article_id)) {
            throw new \InvalidArgumentException('non-nullable packaging_unit_parent_article_id cannot be null');
        }
        $this->container['packaging_unit_parent_article_id'] = $packaging_unit_parent_article_id;

        return $this;
    }

    /**
     * Gets planned_working_time_per_unit
     *
     * @return int|null
     */
    public function getPlannedWorkingTimePerUnit()
    {
        return $this->container['planned_working_time_per_unit'];
    }

    /**
     * Sets planned_working_time_per_unit
     *
     * @param int|null $planned_working_time_per_unit planned_working_time_per_unit
     *
     * @return self
     */
    public function setPlannedWorkingTimePerUnit($planned_working_time_per_unit)
    {
        if (is_null($planned_working_time_per_unit)) {
            throw new \InvalidArgumentException('non-nullable planned_working_time_per_unit cannot be null');
        }
        $this->container['planned_working_time_per_unit'] = $planned_working_time_per_unit;

        return $this;
    }

    /**
     * Gets primary_supply_source_id
     *
     * @return string|null
     */
    public function getPrimarySupplySourceId()
    {
        return $this->container['primary_supply_source_id'];
    }

    /**
     * Sets primary_supply_source_id
     *
     * @param string|null $primary_supply_source_id primary_supply_source_id
     *
     * @return self
     */
    public function setPrimarySupplySourceId($primary_supply_source_id)
    {
        if (is_null($primary_supply_source_id)) {
            throw new \InvalidArgumentException('non-nullable primary_supply_source_id cannot be null');
        }
        $this->container['primary_supply_source_id'] = $primary_supply_source_id;

        return $this;
    }

    /**
     * Gets procurement_lead_days
     *
     * @return int|null
     */
    public function getProcurementLeadDays()
    {
        return $this->container['procurement_lead_days'];
    }

    /**
     * Sets procurement_lead_days
     *
     * @param int|null $procurement_lead_days procurement_lead_days
     *
     * @return self
     */
    public function setProcurementLeadDays($procurement_lead_days)
    {
        if (is_null($procurement_lead_days)) {
            throw new \InvalidArgumentException('non-nullable procurement_lead_days cannot be null');
        }
        $this->container['procurement_lead_days'] = $procurement_lead_days;

        return $this;
    }

    /**
     * Gets producer_type
     *
     * @return string|null
     */
    public function getProducerType()
    {
        return $this->container['producer_type'];
    }

    /**
     * Sets producer_type
     *
     * @param string|null $producer_type producer_type
     *
     * @return self
     */
    public function setProducerType($producer_type)
    {
        if (is_null($producer_type)) {
            throw new \InvalidArgumentException('non-nullable producer_type cannot be null');
        }
        if ((mb_strlen($producer_type) > 63)) {
            throw new \InvalidArgumentException('invalid length for $producer_type when calling Article., must be smaller than or equal to 63.');
        }

        $this->container['producer_type'] = $producer_type;

        return $this;
    }

    /**
     * Gets production_article
     *
     * @return bool|null
     */
    public function getProductionArticle()
    {
        return $this->container['production_article'];
    }

    /**
     * Sets production_article
     *
     * @param bool|null $production_article production_article
     *
     * @return self
     */
    public function setProductionArticle($production_article)
    {
        if (is_null($production_article)) {
            throw new \InvalidArgumentException('non-nullable production_article cannot be null');
        }
        $this->container['production_article'] = $production_article;

        return $this;
    }

    /**
     * Gets production_bill_of_material_items
     *
     * @return \kruegge82\weclapp\Model\BillOfMaterial[]|null
     */
    public function getProductionBillOfMaterialItems()
    {
        return $this->container['production_bill_of_material_items'];
    }

    /**
     * Sets production_bill_of_material_items
     *
     * @param \kruegge82\weclapp\Model\BillOfMaterial[]|null $production_bill_of_material_items production_bill_of_material_items
     *
     * @return self
     */
    public function setProductionBillOfMaterialItems($production_bill_of_material_items)
    {
        if (is_null($production_bill_of_material_items)) {
            throw new \InvalidArgumentException('non-nullable production_bill_of_material_items cannot be null');
        }
        $this->container['production_bill_of_material_items'] = $production_bill_of_material_items;

        return $this;
    }

    /**
     * Gets production_configuration_rule
     *
     * @return \kruegge82\weclapp\Model\ProductionArticleConfigurationRule|null
     */
    public function getProductionConfigurationRule()
    {
        return $this->container['production_configuration_rule'];
    }

    /**
     * Sets production_configuration_rule
     *
     * @param \kruegge82\weclapp\Model\ProductionArticleConfigurationRule|null $production_configuration_rule production_configuration_rule
     *
     * @return self
     */
    public function setProductionConfigurationRule($production_configuration_rule)
    {
        if (is_null($production_configuration_rule)) {
            throw new \InvalidArgumentException('non-nullable production_configuration_rule cannot be null');
        }
        $this->container['production_configuration_rule'] = $production_configuration_rule;

        return $this;
    }

    /**
     * Gets purchase_cost_center_id
     *
     * @return string|null
     */
    public function getPurchaseCostCenterId()
    {
        return $this->container['purchase_cost_center_id'];
    }

    /**
     * Sets purchase_cost_center_id
     *
     * @param string|null $purchase_cost_center_id purchase_cost_center_id
     *
     * @return self
     */
    public function setPurchaseCostCenterId($purchase_cost_center_id)
    {
        if (is_null($purchase_cost_center_id)) {
            throw new \InvalidArgumentException('non-nullable purchase_cost_center_id cannot be null');
        }
        $this->container['purchase_cost_center_id'] = $purchase_cost_center_id;

        return $this;
    }

    /**
     * Gets quantity_conversions
     *
     * @return \kruegge82\weclapp\Model\QuantityConversion[]|null
     */
    public function getQuantityConversions()
    {
        return $this->container['quantity_conversions'];
    }

    /**
     * Sets quantity_conversions
     *
     * @param \kruegge82\weclapp\Model\QuantityConversion[]|null $quantity_conversions quantity_conversions
     *
     * @return self
     */
    public function setQuantityConversions($quantity_conversions)
    {
        if (is_null($quantity_conversions)) {
            throw new \InvalidArgumentException('non-nullable quantity_conversions cannot be null');
        }
        $this->container['quantity_conversions'] = $quantity_conversions;

        return $this;
    }

    /**
     * Gets rating_id
     *
     * @return string|null
     */
    public function getRatingId()
    {
        return $this->container['rating_id'];
    }

    /**
     * Sets rating_id
     *
     * @param string|null $rating_id rating_id
     *
     * @return self
     */
    public function setRatingId($rating_id)
    {
        if (is_null($rating_id)) {
            throw new \InvalidArgumentException('non-nullable rating_id cannot be null');
        }
        $this->container['rating_id'] = $rating_id;

        return $this;
    }

    /**
     * Gets record_item_group_name
     *
     * @return string|null
     */
    public function getRecordItemGroupName()
    {
        return $this->container['record_item_group_name'];
    }

    /**
     * Sets record_item_group_name
     *
     * @param string|null $record_item_group_name record_item_group_name
     *
     * @return self
     */
    public function setRecordItemGroupName($record_item_group_name)
    {
        if (is_null($record_item_group_name)) {
            throw new \InvalidArgumentException('non-nullable record_item_group_name cannot be null');
        }
        if ((mb_strlen($record_item_group_name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $record_item_group_name when calling Article., must be smaller than or equal to 1000.');
        }

        $this->container['record_item_group_name'] = $record_item_group_name;

        return $this;
    }

    /**
     * Gets safety_stock_days
     *
     * @return int|null
     */
    public function getSafetyStockDays()
    {
        return $this->container['safety_stock_days'];
    }

    /**
     * Sets safety_stock_days
     *
     * @param int|null $safety_stock_days safety_stock_days
     *
     * @return self
     */
    public function setSafetyStockDays($safety_stock_days)
    {
        if (is_null($safety_stock_days)) {
            throw new \InvalidArgumentException('non-nullable safety_stock_days cannot be null');
        }
        $this->container['safety_stock_days'] = $safety_stock_days;

        return $this;
    }

    /**
     * Gets sales_bill_of_material_items
     *
     * @return \kruegge82\weclapp\Model\SalesBillOfMaterialArticleItem[]|null
     */
    public function getSalesBillOfMaterialItems()
    {
        return $this->container['sales_bill_of_material_items'];
    }

    /**
     * Sets sales_bill_of_material_items
     *
     * @param \kruegge82\weclapp\Model\SalesBillOfMaterialArticleItem[]|null $sales_bill_of_material_items sales_bill_of_material_items
     *
     * @return self
     */
    public function setSalesBillOfMaterialItems($sales_bill_of_material_items)
    {
        if (is_null($sales_bill_of_material_items)) {
            throw new \InvalidArgumentException('non-nullable sales_bill_of_material_items cannot be null');
        }
        $this->container['sales_bill_of_material_items'] = $sales_bill_of_material_items;

        return $this;
    }

    /**
     * Gets sales_cost_center_id
     *
     * @return string|null
     */
    public function getSalesCostCenterId()
    {
        return $this->container['sales_cost_center_id'];
    }

    /**
     * Sets sales_cost_center_id
     *
     * @param string|null $sales_cost_center_id sales_cost_center_id
     *
     * @return self
     */
    public function setSalesCostCenterId($sales_cost_center_id)
    {
        if (is_null($sales_cost_center_id)) {
            throw new \InvalidArgumentException('non-nullable sales_cost_center_id cannot be null');
        }
        $this->container['sales_cost_center_id'] = $sales_cost_center_id;

        return $this;
    }

    /**
     * Gets sell_by_date
     *
     * @return int|null
     */
    public function getSellByDate()
    {
        return $this->container['sell_by_date'];
    }

    /**
     * Sets sell_by_date
     *
     * @param int|null $sell_by_date sell_by_date
     *
     * @return self
     */
    public function setSellByDate($sell_by_date)
    {
        if (is_null($sell_by_date)) {
            throw new \InvalidArgumentException('non-nullable sell_by_date cannot be null');
        }
        $this->container['sell_by_date'] = $sell_by_date;

        return $this;
    }

    /**
     * Gets sell_from_date
     *
     * @return int|null
     */
    public function getSellFromDate()
    {
        return $this->container['sell_from_date'];
    }

    /**
     * Sets sell_from_date
     *
     * @param int|null $sell_from_date sell_from_date
     *
     * @return self
     */
    public function setSellFromDate($sell_from_date)
    {
        if (is_null($sell_from_date)) {
            throw new \InvalidArgumentException('non-nullable sell_from_date cannot be null');
        }
        $this->container['sell_from_date'] = $sell_from_date;

        return $this;
    }

    /**
     * Gets serial_number_required
     *
     * @return bool|null
     */
    public function getSerialNumberRequired()
    {
        return $this->container['serial_number_required'];
    }

    /**
     * Sets serial_number_required
     *
     * @param bool|null $serial_number_required serial_number_required
     *
     * @return self
     */
    public function setSerialNumberRequired($serial_number_required)
    {
        if (is_null($serial_number_required)) {
            throw new \InvalidArgumentException('non-nullable serial_number_required cannot be null');
        }
        $this->container['serial_number_required'] = $serial_number_required;

        return $this;
    }

    /**
     * Gets service_article_for_service_quota_booking_id
     *
     * @return string|null
     */
    public function getServiceArticleForServiceQuotaBookingId()
    {
        return $this->container['service_article_for_service_quota_booking_id'];
    }

    /**
     * Sets service_article_for_service_quota_booking_id
     *
     * @param string|null $service_article_for_service_quota_booking_id service_article_for_service_quota_booking_id
     *
     * @return self
     */
    public function setServiceArticleForServiceQuotaBookingId($service_article_for_service_quota_booking_id)
    {
        if (is_null($service_article_for_service_quota_booking_id)) {
            throw new \InvalidArgumentException('non-nullable service_article_for_service_quota_booking_id cannot be null');
        }
        $this->container['service_article_for_service_quota_booking_id'] = $service_article_for_service_quota_booking_id;

        return $this;
    }

    /**
     * Gets service_quota_quantity
     *
     * @return float|null
     */
    public function getServiceQuotaQuantity()
    {
        return $this->container['service_quota_quantity'];
    }

    /**
     * Sets service_quota_quantity
     *
     * @param float|null $service_quota_quantity service_quota_quantity
     *
     * @return self
     */
    public function setServiceQuotaQuantity($service_quota_quantity)
    {
        if (is_null($service_quota_quantity)) {
            throw new \InvalidArgumentException('non-nullable service_quota_quantity cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($service_quota_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$service_quota_quantity when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['service_quota_quantity'] = $service_quota_quantity;

        return $this;
    }

    /**
     * Gets show_on_delivery_note
     *
     * @return bool|null
     */
    public function getShowOnDeliveryNote()
    {
        return $this->container['show_on_delivery_note'];
    }

    /**
     * Sets show_on_delivery_note
     *
     * @param bool|null $show_on_delivery_note show_on_delivery_note
     *
     * @return self
     */
    public function setShowOnDeliveryNote($show_on_delivery_note)
    {
        if (is_null($show_on_delivery_note)) {
            throw new \InvalidArgumentException('non-nullable show_on_delivery_note cannot be null');
        }
        $this->container['show_on_delivery_note'] = $show_on_delivery_note;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return string|null
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string|null $status_id status_id
     *
     * @return self
     */
    public function setStatusId($status_id)
    {
        if (is_null($status_id)) {
            throw new \InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets supply_sources
     *
     * @return \kruegge82\weclapp\Model\SupplySource[]|null
     */
    public function getSupplySources()
    {
        return $this->container['supply_sources'];
    }

    /**
     * Sets supply_sources
     *
     * @param \kruegge82\weclapp\Model\SupplySource[]|null $supply_sources supply_sources
     *
     * @return self
     */
    public function setSupplySources($supply_sources)
    {
        if (is_null($supply_sources)) {
            throw new \InvalidArgumentException('non-nullable supply_sources cannot be null');
        }
        $this->container['supply_sources'] = $supply_sources;

        return $this;
    }

    /**
     * Gets support_until_date
     *
     * @return int|null
     */
    public function getSupportUntilDate()
    {
        return $this->container['support_until_date'];
    }

    /**
     * Sets support_until_date
     *
     * @param int|null $support_until_date support_until_date
     *
     * @return self
     */
    public function setSupportUntilDate($support_until_date)
    {
        if (is_null($support_until_date)) {
            throw new \InvalidArgumentException('non-nullable support_until_date cannot be null');
        }
        $this->container['support_until_date'] = $support_until_date;

        return $this;
    }

    /**
     * Gets system_code
     *
     * @return string|null
     */
    public function getSystemCode()
    {
        return $this->container['system_code'];
    }

    /**
     * Sets system_code
     *
     * @param string|null $system_code system_code
     *
     * @return self
     */
    public function setSystemCode($system_code)
    {
        if (is_null($system_code)) {
            throw new \InvalidArgumentException('non-nullable system_code cannot be null');
        }
        if ((mb_strlen($system_code) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $system_code when calling Article., must be smaller than or equal to 4000.');
        }

        $this->container['system_code'] = $system_code;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets target_stock_quantity
     *
     * @return float|null
     */
    public function getTargetStockQuantity()
    {
        return $this->container['target_stock_quantity'];
    }

    /**
     * Sets target_stock_quantity
     *
     * @param float|null $target_stock_quantity target_stock_quantity
     *
     * @return self
     */
    public function setTargetStockQuantity($target_stock_quantity)
    {
        if (is_null($target_stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable target_stock_quantity cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($target_stock_quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$target_stock_quantity when calling Article., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['target_stock_quantity'] = $target_stock_quantity;

        return $this;
    }

    /**
     * Gets use_available_for_sales_channels
     *
     * @return bool|null
     */
    public function getUseAvailableForSalesChannels()
    {
        return $this->container['use_available_for_sales_channels'];
    }

    /**
     * Sets use_available_for_sales_channels
     *
     * @param bool|null $use_available_for_sales_channels use_available_for_sales_channels
     *
     * @return self
     */
    public function setUseAvailableForSalesChannels($use_available_for_sales_channels)
    {
        if (is_null($use_available_for_sales_channels)) {
            throw new \InvalidArgumentException('non-nullable use_available_for_sales_channels cannot be null');
        }
        $this->container['use_available_for_sales_channels'] = $use_available_for_sales_channels;

        return $this;
    }

    /**
     * Gets use_sales_bill_of_material_item_prices
     *
     * @return bool|null
     */
    public function getUseSalesBillOfMaterialItemPrices()
    {
        return $this->container['use_sales_bill_of_material_item_prices'];
    }

    /**
     * Sets use_sales_bill_of_material_item_prices
     *
     * @param bool|null $use_sales_bill_of_material_item_prices use_sales_bill_of_material_item_prices
     *
     * @return self
     */
    public function setUseSalesBillOfMaterialItemPrices($use_sales_bill_of_material_item_prices)
    {
        if (is_null($use_sales_bill_of_material_item_prices)) {
            throw new \InvalidArgumentException('non-nullable use_sales_bill_of_material_item_prices cannot be null');
        }
        $this->container['use_sales_bill_of_material_item_prices'] = $use_sales_bill_of_material_item_prices;

        return $this;
    }

    /**
     * Gets use_sales_bill_of_material_item_prices_for_purchase
     *
     * @return bool|null
     */
    public function getUseSalesBillOfMaterialItemPricesForPurchase()
    {
        return $this->container['use_sales_bill_of_material_item_prices_for_purchase'];
    }

    /**
     * Sets use_sales_bill_of_material_item_prices_for_purchase
     *
     * @param bool|null $use_sales_bill_of_material_item_prices_for_purchase use_sales_bill_of_material_item_prices_for_purchase
     *
     * @return self
     */
    public function setUseSalesBillOfMaterialItemPricesForPurchase($use_sales_bill_of_material_item_prices_for_purchase)
    {
        if (is_null($use_sales_bill_of_material_item_prices_for_purchase)) {
            throw new \InvalidArgumentException('non-nullable use_sales_bill_of_material_item_prices_for_purchase cannot be null');
        }
        $this->container['use_sales_bill_of_material_item_prices_for_purchase'] = $use_sales_bill_of_material_item_prices_for_purchase;

        return $this;
    }

    /**
     * Gets use_sales_bill_of_material_subitem_costs
     *
     * @return bool|null
     */
    public function getUseSalesBillOfMaterialSubitemCosts()
    {
        return $this->container['use_sales_bill_of_material_subitem_costs'];
    }

    /**
     * Sets use_sales_bill_of_material_subitem_costs
     *
     * @param bool|null $use_sales_bill_of_material_subitem_costs use_sales_bill_of_material_subitem_costs
     *
     * @return self
     */
    public function setUseSalesBillOfMaterialSubitemCosts($use_sales_bill_of_material_subitem_costs)
    {
        if (is_null($use_sales_bill_of_material_subitem_costs)) {
            throw new \InvalidArgumentException('non-nullable use_sales_bill_of_material_subitem_costs cannot be null');
        }
        $this->container['use_sales_bill_of_material_subitem_costs'] = $use_sales_bill_of_material_subitem_costs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


