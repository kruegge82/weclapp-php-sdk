<?php
/**
 * SepaDirectDebitMandate
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * SepaDirectDebitMandate Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SepaDirectDebitMandate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sepaDirectDebitMandate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'bank_account_id' => 'string',
        'cancellation_date' => 'int',
        'created_date' => 'int',
        'description' => 'string',
        'first_debit' => 'bool',
        'last_modified_date' => 'int',
        'mandate_reference' => 'string',
        'party_bank_account_id' => 'string',
        'runtime' => 'string',
        'signature_date' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'bank_account_id' => null,
        'cancellation_date' => 'timestamp',
        'created_date' => 'timestamp',
        'description' => null,
        'first_debit' => null,
        'last_modified_date' => 'timestamp',
        'mandate_reference' => null,
        'party_bank_account_id' => null,
        'runtime' => null,
        'signature_date' => 'timestamp',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'bank_account_id' => false,
        'cancellation_date' => false,
        'created_date' => false,
        'description' => false,
        'first_debit' => false,
        'last_modified_date' => false,
        'mandate_reference' => false,
        'party_bank_account_id' => false,
        'runtime' => false,
        'signature_date' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'bank_account_id' => 'bankAccountId',
        'cancellation_date' => 'cancellationDate',
        'created_date' => 'createdDate',
        'description' => 'description',
        'first_debit' => 'firstDebit',
        'last_modified_date' => 'lastModifiedDate',
        'mandate_reference' => 'mandateReference',
        'party_bank_account_id' => 'partyBankAccountId',
        'runtime' => 'runtime',
        'signature_date' => 'signatureDate',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'bank_account_id' => 'setBankAccountId',
        'cancellation_date' => 'setCancellationDate',
        'created_date' => 'setCreatedDate',
        'description' => 'setDescription',
        'first_debit' => 'setFirstDebit',
        'last_modified_date' => 'setLastModifiedDate',
        'mandate_reference' => 'setMandateReference',
        'party_bank_account_id' => 'setPartyBankAccountId',
        'runtime' => 'setRuntime',
        'signature_date' => 'setSignatureDate',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'bank_account_id' => 'getBankAccountId',
        'cancellation_date' => 'getCancellationDate',
        'created_date' => 'getCreatedDate',
        'description' => 'getDescription',
        'first_debit' => 'getFirstDebit',
        'last_modified_date' => 'getLastModifiedDate',
        'mandate_reference' => 'getMandateReference',
        'party_bank_account_id' => 'getPartyBankAccountId',
        'runtime' => 'getRuntime',
        'signature_date' => 'getSignatureDate',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RUNTIME_ONE_OFF_MANDATE = 'ONE_OFF_MANDATE';
    public const RUNTIME_RECURRING_MANDATE = 'RECURRING_MANDATE';
    public const TYPE_B2_B = 'B2B';
    public const TYPE_CORE = 'CORE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRuntimeAllowableValues()
    {
        return [
            self::RUNTIME_ONE_OFF_MANDATE,
            self::RUNTIME_RECURRING_MANDATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_B2_B,
            self::TYPE_CORE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('bank_account_id', $data ?? [], null);
        $this->setIfExists('cancellation_date', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('first_debit', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('mandate_reference', $data ?? [], null);
        $this->setIfExists('party_bank_account_id', $data ?? [], null);
        $this->setIfExists('runtime', $data ?? [], null);
        $this->setIfExists('signature_date', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRuntimeAllowableValues();
        if (!is_null($this->container['runtime']) && !in_array($this->container['runtime'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'runtime', must be one of '%s'",
                $this->container['runtime'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets bank_account_id
     *
     * @return string|null
     */
    public function getBankAccountId()
    {
        return $this->container['bank_account_id'];
    }

    /**
     * Sets bank_account_id
     *
     * @param string|null $bank_account_id bank_account_id
     *
     * @return self
     */
    public function setBankAccountId($bank_account_id)
    {
        if (is_null($bank_account_id)) {
            throw new \InvalidArgumentException('non-nullable bank_account_id cannot be null');
        }
        $this->container['bank_account_id'] = $bank_account_id;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return int|null
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param int|null $cancellation_date cancellation_date
     *
     * @return self
     */
    public function setCancellationDate($cancellation_date)
    {
        if (is_null($cancellation_date)) {
            throw new \InvalidArgumentException('non-nullable cancellation_date cannot be null');
        }
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets first_debit
     *
     * @return bool|null
     */
    public function getFirstDebit()
    {
        return $this->container['first_debit'];
    }

    /**
     * Sets first_debit
     *
     * @param bool|null $first_debit first_debit
     *
     * @return self
     */
    public function setFirstDebit($first_debit)
    {
        if (is_null($first_debit)) {
            throw new \InvalidArgumentException('non-nullable first_debit cannot be null');
        }
        $this->container['first_debit'] = $first_debit;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets mandate_reference
     *
     * @return string|null
     */
    public function getMandateReference()
    {
        return $this->container['mandate_reference'];
    }

    /**
     * Sets mandate_reference
     *
     * @param string|null $mandate_reference mandate_reference
     *
     * @return self
     */
    public function setMandateReference($mandate_reference)
    {
        if (is_null($mandate_reference)) {
            throw new \InvalidArgumentException('non-nullable mandate_reference cannot be null');
        }
        $this->container['mandate_reference'] = $mandate_reference;

        return $this;
    }

    /**
     * Gets party_bank_account_id
     *
     * @return string|null
     */
    public function getPartyBankAccountId()
    {
        return $this->container['party_bank_account_id'];
    }

    /**
     * Sets party_bank_account_id
     *
     * @param string|null $party_bank_account_id party_bank_account_id
     *
     * @return self
     */
    public function setPartyBankAccountId($party_bank_account_id)
    {
        if (is_null($party_bank_account_id)) {
            throw new \InvalidArgumentException('non-nullable party_bank_account_id cannot be null');
        }
        $this->container['party_bank_account_id'] = $party_bank_account_id;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return string|null
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param string|null $runtime runtime
     *
     * @return self
     */
    public function setRuntime($runtime)
    {
        if (is_null($runtime)) {
            throw new \InvalidArgumentException('non-nullable runtime cannot be null');
        }
        $allowedValues = $this->getRuntimeAllowableValues();
        if (!in_array($runtime, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'runtime', must be one of '%s'",
                    $runtime,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets signature_date
     *
     * @return int|null
     */
    public function getSignatureDate()
    {
        return $this->container['signature_date'];
    }

    /**
     * Sets signature_date
     *
     * @param int|null $signature_date signature_date
     *
     * @return self
     */
    public function setSignatureDate($signature_date)
    {
        if (is_null($signature_date)) {
            throw new \InvalidArgumentException('non-nullable signature_date cannot be null');
        }
        $this->container['signature_date'] = $signature_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


