<?php
/**
 * TicketServiceLevelAgreementTarget
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * TicketServiceLevelAgreementTarget Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TicketServiceLevelAgreementTarget implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ticketServiceLevelAgreementTarget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assignment_time_quantity' => 'int',
        'assignment_time_unit' => '\kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit',
        'business_holidays_id' => 'int',
        'business_hours_id' => 'int',
        'first_reply_time_quantity' => 'int',
        'first_reply_time_unit' => '\kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit',
        'notification' => 'bool',
        'priority_id' => 'int',
        'send_escalation_email' => 'bool',
        'solution_time_quantity' => 'int',
        'solution_time_unit' => '\kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assignment_time_quantity' => 'int32',
        'assignment_time_unit' => null,
        'business_holidays_id' => 'int32',
        'business_hours_id' => 'int32',
        'first_reply_time_quantity' => 'int32',
        'first_reply_time_unit' => null,
        'notification' => null,
        'priority_id' => 'int32',
        'send_escalation_email' => null,
        'solution_time_quantity' => 'int32',
        'solution_time_unit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assignment_time_quantity' => false,
        'assignment_time_unit' => false,
        'business_holidays_id' => false,
        'business_hours_id' => false,
        'first_reply_time_quantity' => false,
        'first_reply_time_unit' => false,
        'notification' => false,
        'priority_id' => false,
        'send_escalation_email' => false,
        'solution_time_quantity' => false,
        'solution_time_unit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignment_time_quantity' => 'assignmentTimeQuantity',
        'assignment_time_unit' => 'assignmentTimeUnit',
        'business_holidays_id' => 'businessHolidaysId',
        'business_hours_id' => 'businessHoursId',
        'first_reply_time_quantity' => 'firstReplyTimeQuantity',
        'first_reply_time_unit' => 'firstReplyTimeUnit',
        'notification' => 'notification',
        'priority_id' => 'priorityId',
        'send_escalation_email' => 'sendEscalationEmail',
        'solution_time_quantity' => 'solutionTimeQuantity',
        'solution_time_unit' => 'solutionTimeUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignment_time_quantity' => 'setAssignmentTimeQuantity',
        'assignment_time_unit' => 'setAssignmentTimeUnit',
        'business_holidays_id' => 'setBusinessHolidaysId',
        'business_hours_id' => 'setBusinessHoursId',
        'first_reply_time_quantity' => 'setFirstReplyTimeQuantity',
        'first_reply_time_unit' => 'setFirstReplyTimeUnit',
        'notification' => 'setNotification',
        'priority_id' => 'setPriorityId',
        'send_escalation_email' => 'setSendEscalationEmail',
        'solution_time_quantity' => 'setSolutionTimeQuantity',
        'solution_time_unit' => 'setSolutionTimeUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignment_time_quantity' => 'getAssignmentTimeQuantity',
        'assignment_time_unit' => 'getAssignmentTimeUnit',
        'business_holidays_id' => 'getBusinessHolidaysId',
        'business_hours_id' => 'getBusinessHoursId',
        'first_reply_time_quantity' => 'getFirstReplyTimeQuantity',
        'first_reply_time_unit' => 'getFirstReplyTimeUnit',
        'notification' => 'getNotification',
        'priority_id' => 'getPriorityId',
        'send_escalation_email' => 'getSendEscalationEmail',
        'solution_time_quantity' => 'getSolutionTimeQuantity',
        'solution_time_unit' => 'getSolutionTimeUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('assignment_time_quantity', $data ?? [], null);
        $this->setIfExists('assignment_time_unit', $data ?? [], null);
        $this->setIfExists('business_holidays_id', $data ?? [], null);
        $this->setIfExists('business_hours_id', $data ?? [], null);
        $this->setIfExists('first_reply_time_quantity', $data ?? [], null);
        $this->setIfExists('first_reply_time_unit', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('priority_id', $data ?? [], null);
        $this->setIfExists('send_escalation_email', $data ?? [], null);
        $this->setIfExists('solution_time_quantity', $data ?? [], null);
        $this->setIfExists('solution_time_unit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignment_time_quantity
     *
     * @return int|null
     */
    public function getAssignmentTimeQuantity()
    {
        return $this->container['assignment_time_quantity'];
    }

    /**
     * Sets assignment_time_quantity
     *
     * @param int|null $assignment_time_quantity assignment_time_quantity
     *
     * @return self
     */
    public function setAssignmentTimeQuantity($assignment_time_quantity)
    {
        if (is_null($assignment_time_quantity)) {
            throw new \InvalidArgumentException('non-nullable assignment_time_quantity cannot be null');
        }
        $this->container['assignment_time_quantity'] = $assignment_time_quantity;

        return $this;
    }

    /**
     * Gets assignment_time_unit
     *
     * @return \kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit|null
     */
    public function getAssignmentTimeUnit()
    {
        return $this->container['assignment_time_unit'];
    }

    /**
     * Sets assignment_time_unit
     *
     * @param \kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit|null $assignment_time_unit assignment_time_unit
     *
     * @return self
     */
    public function setAssignmentTimeUnit($assignment_time_unit)
    {
        if (is_null($assignment_time_unit)) {
            throw new \InvalidArgumentException('non-nullable assignment_time_unit cannot be null');
        }
        $this->container['assignment_time_unit'] = $assignment_time_unit;

        return $this;
    }

    /**
     * Gets business_holidays_id
     *
     * @return int|null
     */
    public function getBusinessHolidaysId()
    {
        return $this->container['business_holidays_id'];
    }

    /**
     * Sets business_holidays_id
     *
     * @param int|null $business_holidays_id business_holidays_id
     *
     * @return self
     */
    public function setBusinessHolidaysId($business_holidays_id)
    {
        if (is_null($business_holidays_id)) {
            throw new \InvalidArgumentException('non-nullable business_holidays_id cannot be null');
        }
        $this->container['business_holidays_id'] = $business_holidays_id;

        return $this;
    }

    /**
     * Gets business_hours_id
     *
     * @return int|null
     */
    public function getBusinessHoursId()
    {
        return $this->container['business_hours_id'];
    }

    /**
     * Sets business_hours_id
     *
     * @param int|null $business_hours_id business_hours_id
     *
     * @return self
     */
    public function setBusinessHoursId($business_hours_id)
    {
        if (is_null($business_hours_id)) {
            throw new \InvalidArgumentException('non-nullable business_hours_id cannot be null');
        }
        $this->container['business_hours_id'] = $business_hours_id;

        return $this;
    }

    /**
     * Gets first_reply_time_quantity
     *
     * @return int|null
     */
    public function getFirstReplyTimeQuantity()
    {
        return $this->container['first_reply_time_quantity'];
    }

    /**
     * Sets first_reply_time_quantity
     *
     * @param int|null $first_reply_time_quantity first_reply_time_quantity
     *
     * @return self
     */
    public function setFirstReplyTimeQuantity($first_reply_time_quantity)
    {
        if (is_null($first_reply_time_quantity)) {
            throw new \InvalidArgumentException('non-nullable first_reply_time_quantity cannot be null');
        }
        $this->container['first_reply_time_quantity'] = $first_reply_time_quantity;

        return $this;
    }

    /**
     * Gets first_reply_time_unit
     *
     * @return \kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit|null
     */
    public function getFirstReplyTimeUnit()
    {
        return $this->container['first_reply_time_unit'];
    }

    /**
     * Sets first_reply_time_unit
     *
     * @param \kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit|null $first_reply_time_unit first_reply_time_unit
     *
     * @return self
     */
    public function setFirstReplyTimeUnit($first_reply_time_unit)
    {
        if (is_null($first_reply_time_unit)) {
            throw new \InvalidArgumentException('non-nullable first_reply_time_unit cannot be null');
        }
        $this->container['first_reply_time_unit'] = $first_reply_time_unit;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return bool|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param bool|null $notification notification
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets priority_id
     *
     * @return int|null
     */
    public function getPriorityId()
    {
        return $this->container['priority_id'];
    }

    /**
     * Sets priority_id
     *
     * @param int|null $priority_id priority_id
     *
     * @return self
     */
    public function setPriorityId($priority_id)
    {
        if (is_null($priority_id)) {
            throw new \InvalidArgumentException('non-nullable priority_id cannot be null');
        }
        $this->container['priority_id'] = $priority_id;

        return $this;
    }

    /**
     * Gets send_escalation_email
     *
     * @return bool|null
     */
    public function getSendEscalationEmail()
    {
        return $this->container['send_escalation_email'];
    }

    /**
     * Sets send_escalation_email
     *
     * @param bool|null $send_escalation_email send_escalation_email
     *
     * @return self
     */
    public function setSendEscalationEmail($send_escalation_email)
    {
        if (is_null($send_escalation_email)) {
            throw new \InvalidArgumentException('non-nullable send_escalation_email cannot be null');
        }
        $this->container['send_escalation_email'] = $send_escalation_email;

        return $this;
    }

    /**
     * Gets solution_time_quantity
     *
     * @return int|null
     */
    public function getSolutionTimeQuantity()
    {
        return $this->container['solution_time_quantity'];
    }

    /**
     * Sets solution_time_quantity
     *
     * @param int|null $solution_time_quantity solution_time_quantity
     *
     * @return self
     */
    public function setSolutionTimeQuantity($solution_time_quantity)
    {
        if (is_null($solution_time_quantity)) {
            throw new \InvalidArgumentException('non-nullable solution_time_quantity cannot be null');
        }
        $this->container['solution_time_quantity'] = $solution_time_quantity;

        return $this;
    }

    /**
     * Gets solution_time_unit
     *
     * @return \kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit|null
     */
    public function getSolutionTimeUnit()
    {
        return $this->container['solution_time_unit'];
    }

    /**
     * Sets solution_time_unit
     *
     * @param \kruegge82\weclapp\Model\TicketServiceLevelAgreementUnit|null $solution_time_unit solution_time_unit
     *
     * @return self
     */
    public function setSolutionTimeUnit($solution_time_unit)
    {
        if (is_null($solution_time_unit)) {
            throw new \InvalidArgumentException('non-nullable solution_time_unit cannot be null');
        }
        $this->container['solution_time_unit'] = $solution_time_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


