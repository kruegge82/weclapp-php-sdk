<?php
/**
 * SalesInvoiceItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * SalesInvoiceItem Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SalesInvoiceItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'salesInvoiceItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'article_id' => 'string',
        'note' => 'string',
        'position_number' => 'int',
        'quantity' => 'float',
        'description' => 'string',
        'description_fixed' => 'bool',
        'item_type' => '\kruegge82\weclapp\Model\ItemType',
        'manual_quantity' => 'bool',
        'parent_item_id' => 'string',
        'title' => 'string',
        'unit_id' => 'string',
        'discount_percentage' => 'float',
        'gross_amount' => 'float',
        'gross_amount_in_company_currency' => 'float',
        'manual_unit_price' => 'bool',
        'net_amount' => 'float',
        'net_amount_for_statistics' => 'float',
        'net_amount_for_statistics_in_company_currency' => 'float',
        'net_amount_in_company_currency' => 'float',
        'reduction_addition_items' => '\kruegge82\weclapp\Model\ReductionAdditionItem[]',
        'tax_id' => 'string',
        'unit_price' => 'float',
        'unit_price_in_company_currency' => 'float',
        'add_page_break_before' => 'bool',
        'group_name' => 'string',
        'commission_sales_partners' => '\kruegge82\weclapp\Model\CommissionSalesPartner[]',
        'manual_unit_cost' => 'bool',
        'recommended_retail_price' => 'float',
        'service_period_from' => 'int',
        'service_period_to' => 'int',
        'unit_cost' => 'float',
        'unit_cost_in_company_currency' => 'float',
        'account_id' => 'string',
        'contract_item_id' => 'string',
        'cost2_cost_center_id' => 'string',
        'cost_center_items' => '\kruegge82\weclapp\Model\CostCenterWithDistributionPercentage[]',
        'cost_type_id' => 'string',
        'credited_invoice_item_id' => 'string',
        'delivery_date' => 'int',
        'sales_invoice_item_relationships' => '\kruegge82\weclapp\Model\SalesInvoiceItemRelationship[]',
        'serial_numbers' => 'string[]',
        'shipping_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'article_id' => null,
        'note' => null,
        'position_number' => 'int32',
        'quantity' => 'decimal',
        'description' => 'html',
        'description_fixed' => null,
        'item_type' => null,
        'manual_quantity' => null,
        'parent_item_id' => null,
        'title' => null,
        'unit_id' => null,
        'discount_percentage' => 'decimal',
        'gross_amount' => 'decimal',
        'gross_amount_in_company_currency' => 'decimal',
        'manual_unit_price' => null,
        'net_amount' => 'decimal',
        'net_amount_for_statistics' => 'decimal',
        'net_amount_for_statistics_in_company_currency' => 'decimal',
        'net_amount_in_company_currency' => 'decimal',
        'reduction_addition_items' => null,
        'tax_id' => null,
        'unit_price' => 'decimal',
        'unit_price_in_company_currency' => 'decimal',
        'add_page_break_before' => null,
        'group_name' => null,
        'commission_sales_partners' => null,
        'manual_unit_cost' => null,
        'recommended_retail_price' => 'decimal',
        'service_period_from' => 'timestamp',
        'service_period_to' => 'timestamp',
        'unit_cost' => 'decimal',
        'unit_cost_in_company_currency' => 'decimal',
        'account_id' => null,
        'contract_item_id' => null,
        'cost2_cost_center_id' => null,
        'cost_center_items' => null,
        'cost_type_id' => null,
        'credited_invoice_item_id' => null,
        'delivery_date' => 'timestamp',
        'sales_invoice_item_relationships' => null,
        'serial_numbers' => null,
        'shipping_date' => 'timestamp'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'article_id' => false,
        'note' => false,
        'position_number' => false,
        'quantity' => false,
        'description' => false,
        'description_fixed' => false,
        'item_type' => false,
        'manual_quantity' => false,
        'parent_item_id' => false,
        'title' => false,
        'unit_id' => false,
        'discount_percentage' => false,
        'gross_amount' => false,
        'gross_amount_in_company_currency' => false,
        'manual_unit_price' => false,
        'net_amount' => false,
        'net_amount_for_statistics' => false,
        'net_amount_for_statistics_in_company_currency' => false,
        'net_amount_in_company_currency' => false,
        'reduction_addition_items' => false,
        'tax_id' => false,
        'unit_price' => false,
        'unit_price_in_company_currency' => false,
        'add_page_break_before' => false,
        'group_name' => false,
        'commission_sales_partners' => false,
        'manual_unit_cost' => false,
        'recommended_retail_price' => false,
        'service_period_from' => false,
        'service_period_to' => false,
        'unit_cost' => false,
        'unit_cost_in_company_currency' => false,
        'account_id' => false,
        'contract_item_id' => false,
        'cost2_cost_center_id' => false,
        'cost_center_items' => false,
        'cost_type_id' => false,
        'credited_invoice_item_id' => false,
        'delivery_date' => false,
        'sales_invoice_item_relationships' => false,
        'serial_numbers' => false,
        'shipping_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'article_id' => 'articleId',
        'note' => 'note',
        'position_number' => 'positionNumber',
        'quantity' => 'quantity',
        'description' => 'description',
        'description_fixed' => 'descriptionFixed',
        'item_type' => 'itemType',
        'manual_quantity' => 'manualQuantity',
        'parent_item_id' => 'parentItemId',
        'title' => 'title',
        'unit_id' => 'unitId',
        'discount_percentage' => 'discountPercentage',
        'gross_amount' => 'grossAmount',
        'gross_amount_in_company_currency' => 'grossAmountInCompanyCurrency',
        'manual_unit_price' => 'manualUnitPrice',
        'net_amount' => 'netAmount',
        'net_amount_for_statistics' => 'netAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'netAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'netAmountInCompanyCurrency',
        'reduction_addition_items' => 'reductionAdditionItems',
        'tax_id' => 'taxId',
        'unit_price' => 'unitPrice',
        'unit_price_in_company_currency' => 'unitPriceInCompanyCurrency',
        'add_page_break_before' => 'addPageBreakBefore',
        'group_name' => 'groupName',
        'commission_sales_partners' => 'commissionSalesPartners',
        'manual_unit_cost' => 'manualUnitCost',
        'recommended_retail_price' => 'recommendedRetailPrice',
        'service_period_from' => 'servicePeriodFrom',
        'service_period_to' => 'servicePeriodTo',
        'unit_cost' => 'unitCost',
        'unit_cost_in_company_currency' => 'unitCostInCompanyCurrency',
        'account_id' => 'accountId',
        'contract_item_id' => 'contractItemId',
        'cost2_cost_center_id' => 'cost2CostCenterId',
        'cost_center_items' => 'costCenterItems',
        'cost_type_id' => 'costTypeId',
        'credited_invoice_item_id' => 'creditedInvoiceItemId',
        'delivery_date' => 'deliveryDate',
        'sales_invoice_item_relationships' => 'salesInvoiceItemRelationships',
        'serial_numbers' => 'serialNumbers',
        'shipping_date' => 'shippingDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'article_id' => 'setArticleId',
        'note' => 'setNote',
        'position_number' => 'setPositionNumber',
        'quantity' => 'setQuantity',
        'description' => 'setDescription',
        'description_fixed' => 'setDescriptionFixed',
        'item_type' => 'setItemType',
        'manual_quantity' => 'setManualQuantity',
        'parent_item_id' => 'setParentItemId',
        'title' => 'setTitle',
        'unit_id' => 'setUnitId',
        'discount_percentage' => 'setDiscountPercentage',
        'gross_amount' => 'setGrossAmount',
        'gross_amount_in_company_currency' => 'setGrossAmountInCompanyCurrency',
        'manual_unit_price' => 'setManualUnitPrice',
        'net_amount' => 'setNetAmount',
        'net_amount_for_statistics' => 'setNetAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'setNetAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'setNetAmountInCompanyCurrency',
        'reduction_addition_items' => 'setReductionAdditionItems',
        'tax_id' => 'setTaxId',
        'unit_price' => 'setUnitPrice',
        'unit_price_in_company_currency' => 'setUnitPriceInCompanyCurrency',
        'add_page_break_before' => 'setAddPageBreakBefore',
        'group_name' => 'setGroupName',
        'commission_sales_partners' => 'setCommissionSalesPartners',
        'manual_unit_cost' => 'setManualUnitCost',
        'recommended_retail_price' => 'setRecommendedRetailPrice',
        'service_period_from' => 'setServicePeriodFrom',
        'service_period_to' => 'setServicePeriodTo',
        'unit_cost' => 'setUnitCost',
        'unit_cost_in_company_currency' => 'setUnitCostInCompanyCurrency',
        'account_id' => 'setAccountId',
        'contract_item_id' => 'setContractItemId',
        'cost2_cost_center_id' => 'setCost2CostCenterId',
        'cost_center_items' => 'setCostCenterItems',
        'cost_type_id' => 'setCostTypeId',
        'credited_invoice_item_id' => 'setCreditedInvoiceItemId',
        'delivery_date' => 'setDeliveryDate',
        'sales_invoice_item_relationships' => 'setSalesInvoiceItemRelationships',
        'serial_numbers' => 'setSerialNumbers',
        'shipping_date' => 'setShippingDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'article_id' => 'getArticleId',
        'note' => 'getNote',
        'position_number' => 'getPositionNumber',
        'quantity' => 'getQuantity',
        'description' => 'getDescription',
        'description_fixed' => 'getDescriptionFixed',
        'item_type' => 'getItemType',
        'manual_quantity' => 'getManualQuantity',
        'parent_item_id' => 'getParentItemId',
        'title' => 'getTitle',
        'unit_id' => 'getUnitId',
        'discount_percentage' => 'getDiscountPercentage',
        'gross_amount' => 'getGrossAmount',
        'gross_amount_in_company_currency' => 'getGrossAmountInCompanyCurrency',
        'manual_unit_price' => 'getManualUnitPrice',
        'net_amount' => 'getNetAmount',
        'net_amount_for_statistics' => 'getNetAmountForStatistics',
        'net_amount_for_statistics_in_company_currency' => 'getNetAmountForStatisticsInCompanyCurrency',
        'net_amount_in_company_currency' => 'getNetAmountInCompanyCurrency',
        'reduction_addition_items' => 'getReductionAdditionItems',
        'tax_id' => 'getTaxId',
        'unit_price' => 'getUnitPrice',
        'unit_price_in_company_currency' => 'getUnitPriceInCompanyCurrency',
        'add_page_break_before' => 'getAddPageBreakBefore',
        'group_name' => 'getGroupName',
        'commission_sales_partners' => 'getCommissionSalesPartners',
        'manual_unit_cost' => 'getManualUnitCost',
        'recommended_retail_price' => 'getRecommendedRetailPrice',
        'service_period_from' => 'getServicePeriodFrom',
        'service_period_to' => 'getServicePeriodTo',
        'unit_cost' => 'getUnitCost',
        'unit_cost_in_company_currency' => 'getUnitCostInCompanyCurrency',
        'account_id' => 'getAccountId',
        'contract_item_id' => 'getContractItemId',
        'cost2_cost_center_id' => 'getCost2CostCenterId',
        'cost_center_items' => 'getCostCenterItems',
        'cost_type_id' => 'getCostTypeId',
        'credited_invoice_item_id' => 'getCreditedInvoiceItemId',
        'delivery_date' => 'getDeliveryDate',
        'sales_invoice_item_relationships' => 'getSalesInvoiceItemRelationships',
        'serial_numbers' => 'getSerialNumbers',
        'shipping_date' => 'getShippingDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description_fixed', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('manual_quantity', $data ?? [], null);
        $this->setIfExists('parent_item_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
        $this->setIfExists('discount_percentage', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('gross_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('manual_unit_price', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('net_amount_for_statistics', $data ?? [], null);
        $this->setIfExists('net_amount_for_statistics_in_company_currency', $data ?? [], null);
        $this->setIfExists('net_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('reduction_addition_items', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('unit_price_in_company_currency', $data ?? [], null);
        $this->setIfExists('add_page_break_before', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('commission_sales_partners', $data ?? [], null);
        $this->setIfExists('manual_unit_cost', $data ?? [], null);
        $this->setIfExists('recommended_retail_price', $data ?? [], null);
        $this->setIfExists('service_period_from', $data ?? [], null);
        $this->setIfExists('service_period_to', $data ?? [], null);
        $this->setIfExists('unit_cost', $data ?? [], null);
        $this->setIfExists('unit_cost_in_company_currency', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('contract_item_id', $data ?? [], null);
        $this->setIfExists('cost2_cost_center_id', $data ?? [], null);
        $this->setIfExists('cost_center_items', $data ?? [], null);
        $this->setIfExists('cost_type_id', $data ?? [], null);
        $this->setIfExists('credited_invoice_item_id', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('sales_invoice_item_relationships', $data ?? [], null);
        $this->setIfExists('serial_numbers', $data ?? [], null);
        $this->setIfExists('shipping_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 1000)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['quantity']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['quantity'])) {
            $invalidProperties[] = "invalid value for 'quantity', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 1000)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['discount_percentage']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['discount_percentage'])) {
            $invalidProperties[] = "invalid value for 'discount_percentage', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount'])) {
            $invalidProperties[] = "invalid value for 'gross_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'gross_amount_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount'])) {
            $invalidProperties[] = "invalid value for 'net_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_for_statistics']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_for_statistics'])) {
            $invalidProperties[] = "invalid value for 'net_amount_for_statistics', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_for_statistics_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_for_statistics_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'net_amount_for_statistics_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'net_amount_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['unit_price']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['unit_price'])) {
            $invalidProperties[] = "invalid value for 'unit_price', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['unit_price_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['unit_price_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'unit_price_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['group_name']) && (mb_strlen($this->container['group_name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'group_name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['recommended_retail_price']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['recommended_retail_price'])) {
            $invalidProperties[] = "invalid value for 'recommended_retail_price', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['unit_cost']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['unit_cost'])) {
            $invalidProperties[] = "invalid value for 'unit_cost', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['unit_cost_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['unit_cost_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'unit_cost_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        if ((mb_strlen($note) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $note when calling SalesInvoiceItem., must be smaller than or equal to 1000.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$quantity when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SalesInvoiceItem., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_fixed
     *
     * @return bool|null
     */
    public function getDescriptionFixed()
    {
        return $this->container['description_fixed'];
    }

    /**
     * Sets description_fixed
     *
     * @param bool|null $description_fixed description_fixed
     *
     * @return self
     */
    public function setDescriptionFixed($description_fixed)
    {
        if (is_null($description_fixed)) {
            throw new \InvalidArgumentException('non-nullable description_fixed cannot be null');
        }
        $this->container['description_fixed'] = $description_fixed;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return \kruegge82\weclapp\Model\ItemType|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param \kruegge82\weclapp\Model\ItemType|null $item_type item_type
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        if (is_null($item_type)) {
            throw new \InvalidArgumentException('non-nullable item_type cannot be null');
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets manual_quantity
     *
     * @return bool|null
     */
    public function getManualQuantity()
    {
        return $this->container['manual_quantity'];
    }

    /**
     * Sets manual_quantity
     *
     * @param bool|null $manual_quantity manual_quantity
     *
     * @return self
     */
    public function setManualQuantity($manual_quantity)
    {
        if (is_null($manual_quantity)) {
            throw new \InvalidArgumentException('non-nullable manual_quantity cannot be null');
        }
        $this->container['manual_quantity'] = $manual_quantity;

        return $this;
    }

    /**
     * Gets parent_item_id
     *
     * @return string|null
     */
    public function getParentItemId()
    {
        return $this->container['parent_item_id'];
    }

    /**
     * Sets parent_item_id
     *
     * @param string|null $parent_item_id parent_item_id
     *
     * @return self
     */
    public function setParentItemId($parent_item_id)
    {
        if (is_null($parent_item_id)) {
            throw new \InvalidArgumentException('non-nullable parent_item_id cannot be null');
        }
        $this->container['parent_item_id'] = $parent_item_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $title when calling SalesInvoiceItem., must be smaller than or equal to 1000.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string|null $unit_id unit_id
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            throw new \InvalidArgumentException('non-nullable unit_id cannot be null');
        }
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return float|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param float|null $discount_percentage discount_percentage
     *
     * @return self
     */
    public function setDiscountPercentage($discount_percentage)
    {
        if (is_null($discount_percentage)) {
            throw new \InvalidArgumentException('non-nullable discount_percentage cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($discount_percentage)))) {
            throw new \InvalidArgumentException("invalid value for \$discount_percentage when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets gross_amount_in_company_currency
     *
     * @return float|null
     */
    public function getGrossAmountInCompanyCurrency()
    {
        return $this->container['gross_amount_in_company_currency'];
    }

    /**
     * Sets gross_amount_in_company_currency
     *
     * @param float|null $gross_amount_in_company_currency gross_amount_in_company_currency
     *
     * @return self
     */
    public function setGrossAmountInCompanyCurrency($gross_amount_in_company_currency)
    {
        if (is_null($gross_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable gross_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount_in_company_currency when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount_in_company_currency'] = $gross_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets manual_unit_price
     *
     * @return bool|null
     */
    public function getManualUnitPrice()
    {
        return $this->container['manual_unit_price'];
    }

    /**
     * Sets manual_unit_price
     *
     * @param bool|null $manual_unit_price manual_unit_price
     *
     * @return self
     */
    public function setManualUnitPrice($manual_unit_price)
    {
        if (is_null($manual_unit_price)) {
            throw new \InvalidArgumentException('non-nullable manual_unit_price cannot be null');
        }
        $this->container['manual_unit_price'] = $manual_unit_price;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets net_amount_for_statistics
     *
     * @return float|null
     */
    public function getNetAmountForStatistics()
    {
        return $this->container['net_amount_for_statistics'];
    }

    /**
     * Sets net_amount_for_statistics
     *
     * @param float|null $net_amount_for_statistics net_amount_for_statistics
     *
     * @return self
     */
    public function setNetAmountForStatistics($net_amount_for_statistics)
    {
        if (is_null($net_amount_for_statistics)) {
            throw new \InvalidArgumentException('non-nullable net_amount_for_statistics cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_for_statistics)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_for_statistics when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_for_statistics'] = $net_amount_for_statistics;

        return $this;
    }

    /**
     * Gets net_amount_for_statistics_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountForStatisticsInCompanyCurrency()
    {
        return $this->container['net_amount_for_statistics_in_company_currency'];
    }

    /**
     * Sets net_amount_for_statistics_in_company_currency
     *
     * @param float|null $net_amount_for_statistics_in_company_currency net_amount_for_statistics_in_company_currency
     *
     * @return self
     */
    public function setNetAmountForStatisticsInCompanyCurrency($net_amount_for_statistics_in_company_currency)
    {
        if (is_null($net_amount_for_statistics_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_for_statistics_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_for_statistics_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_for_statistics_in_company_currency when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_for_statistics_in_company_currency'] = $net_amount_for_statistics_in_company_currency;

        return $this;
    }

    /**
     * Gets net_amount_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountInCompanyCurrency()
    {
        return $this->container['net_amount_in_company_currency'];
    }

    /**
     * Sets net_amount_in_company_currency
     *
     * @param float|null $net_amount_in_company_currency net_amount_in_company_currency
     *
     * @return self
     */
    public function setNetAmountInCompanyCurrency($net_amount_in_company_currency)
    {
        if (is_null($net_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_in_company_currency when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_in_company_currency'] = $net_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets reduction_addition_items
     *
     * @return \kruegge82\weclapp\Model\ReductionAdditionItem[]|null
     */
    public function getReductionAdditionItems()
    {
        return $this->container['reduction_addition_items'];
    }

    /**
     * Sets reduction_addition_items
     *
     * @param \kruegge82\weclapp\Model\ReductionAdditionItem[]|null $reduction_addition_items reduction_addition_items
     *
     * @return self
     */
    public function setReductionAdditionItems($reduction_addition_items)
    {
        if (is_null($reduction_addition_items)) {
            throw new \InvalidArgumentException('non-nullable reduction_addition_items cannot be null');
        }
        $this->container['reduction_addition_items'] = $reduction_addition_items;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price unit_price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($unit_price)))) {
            throw new \InvalidArgumentException("invalid value for \$unit_price when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_in_company_currency
     *
     * @return float|null
     */
    public function getUnitPriceInCompanyCurrency()
    {
        return $this->container['unit_price_in_company_currency'];
    }

    /**
     * Sets unit_price_in_company_currency
     *
     * @param float|null $unit_price_in_company_currency unit_price_in_company_currency
     *
     * @return self
     */
    public function setUnitPriceInCompanyCurrency($unit_price_in_company_currency)
    {
        if (is_null($unit_price_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable unit_price_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($unit_price_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$unit_price_in_company_currency when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['unit_price_in_company_currency'] = $unit_price_in_company_currency;

        return $this;
    }

    /**
     * Gets add_page_break_before
     *
     * @return bool|null
     */
    public function getAddPageBreakBefore()
    {
        return $this->container['add_page_break_before'];
    }

    /**
     * Sets add_page_break_before
     *
     * @param bool|null $add_page_break_before add_page_break_before
     *
     * @return self
     */
    public function setAddPageBreakBefore($add_page_break_before)
    {
        if (is_null($add_page_break_before)) {
            throw new \InvalidArgumentException('non-nullable add_page_break_before cannot be null');
        }
        $this->container['add_page_break_before'] = $add_page_break_before;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name group_name
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            throw new \InvalidArgumentException('non-nullable group_name cannot be null');
        }
        if ((mb_strlen($group_name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $group_name when calling SalesInvoiceItem., must be smaller than or equal to 1000.');
        }

        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets commission_sales_partners
     *
     * @return \kruegge82\weclapp\Model\CommissionSalesPartner[]|null
     */
    public function getCommissionSalesPartners()
    {
        return $this->container['commission_sales_partners'];
    }

    /**
     * Sets commission_sales_partners
     *
     * @param \kruegge82\weclapp\Model\CommissionSalesPartner[]|null $commission_sales_partners commission_sales_partners
     *
     * @return self
     */
    public function setCommissionSalesPartners($commission_sales_partners)
    {
        if (is_null($commission_sales_partners)) {
            throw new \InvalidArgumentException('non-nullable commission_sales_partners cannot be null');
        }
        $this->container['commission_sales_partners'] = $commission_sales_partners;

        return $this;
    }

    /**
     * Gets manual_unit_cost
     *
     * @return bool|null
     */
    public function getManualUnitCost()
    {
        return $this->container['manual_unit_cost'];
    }

    /**
     * Sets manual_unit_cost
     *
     * @param bool|null $manual_unit_cost manual_unit_cost
     *
     * @return self
     */
    public function setManualUnitCost($manual_unit_cost)
    {
        if (is_null($manual_unit_cost)) {
            throw new \InvalidArgumentException('non-nullable manual_unit_cost cannot be null');
        }
        $this->container['manual_unit_cost'] = $manual_unit_cost;

        return $this;
    }

    /**
     * Gets recommended_retail_price
     *
     * @return float|null
     */
    public function getRecommendedRetailPrice()
    {
        return $this->container['recommended_retail_price'];
    }

    /**
     * Sets recommended_retail_price
     *
     * @param float|null $recommended_retail_price recommended_retail_price
     *
     * @return self
     */
    public function setRecommendedRetailPrice($recommended_retail_price)
    {
        if (is_null($recommended_retail_price)) {
            throw new \InvalidArgumentException('non-nullable recommended_retail_price cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($recommended_retail_price)))) {
            throw new \InvalidArgumentException("invalid value for \$recommended_retail_price when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['recommended_retail_price'] = $recommended_retail_price;

        return $this;
    }

    /**
     * Gets service_period_from
     *
     * @return int|null
     */
    public function getServicePeriodFrom()
    {
        return $this->container['service_period_from'];
    }

    /**
     * Sets service_period_from
     *
     * @param int|null $service_period_from service_period_from
     *
     * @return self
     */
    public function setServicePeriodFrom($service_period_from)
    {
        if (is_null($service_period_from)) {
            throw new \InvalidArgumentException('non-nullable service_period_from cannot be null');
        }
        $this->container['service_period_from'] = $service_period_from;

        return $this;
    }

    /**
     * Gets service_period_to
     *
     * @return int|null
     */
    public function getServicePeriodTo()
    {
        return $this->container['service_period_to'];
    }

    /**
     * Sets service_period_to
     *
     * @param int|null $service_period_to service_period_to
     *
     * @return self
     */
    public function setServicePeriodTo($service_period_to)
    {
        if (is_null($service_period_to)) {
            throw new \InvalidArgumentException('non-nullable service_period_to cannot be null');
        }
        $this->container['service_period_to'] = $service_period_to;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return float|null
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param float|null $unit_cost unit_cost
     *
     * @return self
     */
    public function setUnitCost($unit_cost)
    {
        if (is_null($unit_cost)) {
            throw new \InvalidArgumentException('non-nullable unit_cost cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($unit_cost)))) {
            throw new \InvalidArgumentException("invalid value for \$unit_cost when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets unit_cost_in_company_currency
     *
     * @return float|null
     */
    public function getUnitCostInCompanyCurrency()
    {
        return $this->container['unit_cost_in_company_currency'];
    }

    /**
     * Sets unit_cost_in_company_currency
     *
     * @param float|null $unit_cost_in_company_currency unit_cost_in_company_currency
     *
     * @return self
     */
    public function setUnitCostInCompanyCurrency($unit_cost_in_company_currency)
    {
        if (is_null($unit_cost_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable unit_cost_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($unit_cost_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$unit_cost_in_company_currency when calling SalesInvoiceItem., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['unit_cost_in_company_currency'] = $unit_cost_in_company_currency;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets contract_item_id
     *
     * @return string|null
     */
    public function getContractItemId()
    {
        return $this->container['contract_item_id'];
    }

    /**
     * Sets contract_item_id
     *
     * @param string|null $contract_item_id contract_item_id
     *
     * @return self
     */
    public function setContractItemId($contract_item_id)
    {
        if (is_null($contract_item_id)) {
            throw new \InvalidArgumentException('non-nullable contract_item_id cannot be null');
        }
        $this->container['contract_item_id'] = $contract_item_id;

        return $this;
    }

    /**
     * Gets cost2_cost_center_id
     *
     * @return string|null
     */
    public function getCost2CostCenterId()
    {
        return $this->container['cost2_cost_center_id'];
    }

    /**
     * Sets cost2_cost_center_id
     *
     * @param string|null $cost2_cost_center_id cost2_cost_center_id
     *
     * @return self
     */
    public function setCost2CostCenterId($cost2_cost_center_id)
    {
        if (is_null($cost2_cost_center_id)) {
            throw new \InvalidArgumentException('non-nullable cost2_cost_center_id cannot be null');
        }
        $this->container['cost2_cost_center_id'] = $cost2_cost_center_id;

        return $this;
    }

    /**
     * Gets cost_center_items
     *
     * @return \kruegge82\weclapp\Model\CostCenterWithDistributionPercentage[]|null
     */
    public function getCostCenterItems()
    {
        return $this->container['cost_center_items'];
    }

    /**
     * Sets cost_center_items
     *
     * @param \kruegge82\weclapp\Model\CostCenterWithDistributionPercentage[]|null $cost_center_items cost_center_items
     *
     * @return self
     */
    public function setCostCenterItems($cost_center_items)
    {
        if (is_null($cost_center_items)) {
            throw new \InvalidArgumentException('non-nullable cost_center_items cannot be null');
        }
        $this->container['cost_center_items'] = $cost_center_items;

        return $this;
    }

    /**
     * Gets cost_type_id
     *
     * @return string|null
     */
    public function getCostTypeId()
    {
        return $this->container['cost_type_id'];
    }

    /**
     * Sets cost_type_id
     *
     * @param string|null $cost_type_id cost_type_id
     *
     * @return self
     */
    public function setCostTypeId($cost_type_id)
    {
        if (is_null($cost_type_id)) {
            throw new \InvalidArgumentException('non-nullable cost_type_id cannot be null');
        }
        $this->container['cost_type_id'] = $cost_type_id;

        return $this;
    }

    /**
     * Gets credited_invoice_item_id
     *
     * @return string|null
     */
    public function getCreditedInvoiceItemId()
    {
        return $this->container['credited_invoice_item_id'];
    }

    /**
     * Sets credited_invoice_item_id
     *
     * @param string|null $credited_invoice_item_id credited_invoice_item_id
     *
     * @return self
     */
    public function setCreditedInvoiceItemId($credited_invoice_item_id)
    {
        if (is_null($credited_invoice_item_id)) {
            throw new \InvalidArgumentException('non-nullable credited_invoice_item_id cannot be null');
        }
        $this->container['credited_invoice_item_id'] = $credited_invoice_item_id;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return int|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param int|null $delivery_date delivery_date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets sales_invoice_item_relationships
     *
     * @return \kruegge82\weclapp\Model\SalesInvoiceItemRelationship[]|null
     */
    public function getSalesInvoiceItemRelationships()
    {
        return $this->container['sales_invoice_item_relationships'];
    }

    /**
     * Sets sales_invoice_item_relationships
     *
     * @param \kruegge82\weclapp\Model\SalesInvoiceItemRelationship[]|null $sales_invoice_item_relationships sales_invoice_item_relationships
     *
     * @return self
     */
    public function setSalesInvoiceItemRelationships($sales_invoice_item_relationships)
    {
        if (is_null($sales_invoice_item_relationships)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_item_relationships cannot be null');
        }
        $this->container['sales_invoice_item_relationships'] = $sales_invoice_item_relationships;

        return $this;
    }

    /**
     * Gets serial_numbers
     *
     * @return string[]|null
     */
    public function getSerialNumbers()
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers
     *
     * @param string[]|null $serial_numbers serial_numbers
     *
     * @return self
     */
    public function setSerialNumbers($serial_numbers)
    {
        if (is_null($serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable serial_numbers cannot be null');
        }
        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return int|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param int|null $shipping_date shipping_date
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        if (is_null($shipping_date)) {
            throw new \InvalidArgumentException('non-nullable shipping_date cannot be null');
        }
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


