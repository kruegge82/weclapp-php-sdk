<?php
/**
 * Tax
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Tax Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tax implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tax';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'account_id' => 'string',
        'account_number' => 'string',
        'contra_account_id' => 'string',
        'contra_account_number' => 'string',
        'default_discount_account_id' => 'string',
        'default_discount_account_number' => 'string',
        'default_nominal_account_id' => 'string',
        'default_nominal_account_number' => 'string',
        'deposit_account_id' => 'string',
        'name' => 'string',
        'tax_key' => '\kruegge82\weclapp\Model\TaxKey',
        'tax_type' => '\kruegge82\weclapp\Model\TaxType',
        'tax_value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'account_id' => null,
        'account_number' => null,
        'contra_account_id' => null,
        'contra_account_number' => null,
        'default_discount_account_id' => null,
        'default_discount_account_number' => null,
        'default_nominal_account_id' => null,
        'default_nominal_account_number' => null,
        'deposit_account_id' => null,
        'name' => null,
        'tax_key' => null,
        'tax_type' => null,
        'tax_value' => 'decimal'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'account_id' => false,
        'account_number' => false,
        'contra_account_id' => false,
        'contra_account_number' => false,
        'default_discount_account_id' => false,
        'default_discount_account_number' => false,
        'default_nominal_account_id' => false,
        'default_nominal_account_number' => false,
        'deposit_account_id' => false,
        'name' => false,
        'tax_key' => false,
        'tax_type' => false,
        'tax_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'account_id' => 'accountId',
        'account_number' => 'accountNumber',
        'contra_account_id' => 'contraAccountId',
        'contra_account_number' => 'contraAccountNumber',
        'default_discount_account_id' => 'defaultDiscountAccountId',
        'default_discount_account_number' => 'defaultDiscountAccountNumber',
        'default_nominal_account_id' => 'defaultNominalAccountId',
        'default_nominal_account_number' => 'defaultNominalAccountNumber',
        'deposit_account_id' => 'depositAccountId',
        'name' => 'name',
        'tax_key' => 'taxKey',
        'tax_type' => 'taxType',
        'tax_value' => 'taxValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'account_id' => 'setAccountId',
        'account_number' => 'setAccountNumber',
        'contra_account_id' => 'setContraAccountId',
        'contra_account_number' => 'setContraAccountNumber',
        'default_discount_account_id' => 'setDefaultDiscountAccountId',
        'default_discount_account_number' => 'setDefaultDiscountAccountNumber',
        'default_nominal_account_id' => 'setDefaultNominalAccountId',
        'default_nominal_account_number' => 'setDefaultNominalAccountNumber',
        'deposit_account_id' => 'setDepositAccountId',
        'name' => 'setName',
        'tax_key' => 'setTaxKey',
        'tax_type' => 'setTaxType',
        'tax_value' => 'setTaxValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'account_id' => 'getAccountId',
        'account_number' => 'getAccountNumber',
        'contra_account_id' => 'getContraAccountId',
        'contra_account_number' => 'getContraAccountNumber',
        'default_discount_account_id' => 'getDefaultDiscountAccountId',
        'default_discount_account_number' => 'getDefaultDiscountAccountNumber',
        'default_nominal_account_id' => 'getDefaultNominalAccountId',
        'default_nominal_account_number' => 'getDefaultNominalAccountNumber',
        'deposit_account_id' => 'getDepositAccountId',
        'name' => 'getName',
        'tax_key' => 'getTaxKey',
        'tax_type' => 'getTaxType',
        'tax_value' => 'getTaxValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('contra_account_id', $data ?? [], null);
        $this->setIfExists('contra_account_number', $data ?? [], null);
        $this->setIfExists('default_discount_account_id', $data ?? [], null);
        $this->setIfExists('default_discount_account_number', $data ?? [], null);
        $this->setIfExists('default_nominal_account_id', $data ?? [], null);
        $this->setIfExists('default_nominal_account_number', $data ?? [], null);
        $this->setIfExists('deposit_account_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('tax_key', $data ?? [], null);
        $this->setIfExists('tax_type', $data ?? [], null);
        $this->setIfExists('tax_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['tax_value']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['tax_value'])) {
            $invalidProperties[] = "invalid value for 'tax_value', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     * @deprecated
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     * @deprecated
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets contra_account_id
     *
     * @return string|null
     */
    public function getContraAccountId()
    {
        return $this->container['contra_account_id'];
    }

    /**
     * Sets contra_account_id
     *
     * @param string|null $contra_account_id contra_account_id
     *
     * @return self
     */
    public function setContraAccountId($contra_account_id)
    {
        if (is_null($contra_account_id)) {
            throw new \InvalidArgumentException('non-nullable contra_account_id cannot be null');
        }
        $this->container['contra_account_id'] = $contra_account_id;

        return $this;
    }

    /**
     * Gets contra_account_number
     *
     * @return string|null
     * @deprecated
     */
    public function getContraAccountNumber()
    {
        return $this->container['contra_account_number'];
    }

    /**
     * Sets contra_account_number
     *
     * @param string|null $contra_account_number contra_account_number
     *
     * @return self
     * @deprecated
     */
    public function setContraAccountNumber($contra_account_number)
    {
        if (is_null($contra_account_number)) {
            throw new \InvalidArgumentException('non-nullable contra_account_number cannot be null');
        }
        $this->container['contra_account_number'] = $contra_account_number;

        return $this;
    }

    /**
     * Gets default_discount_account_id
     *
     * @return string|null
     */
    public function getDefaultDiscountAccountId()
    {
        return $this->container['default_discount_account_id'];
    }

    /**
     * Sets default_discount_account_id
     *
     * @param string|null $default_discount_account_id default_discount_account_id
     *
     * @return self
     */
    public function setDefaultDiscountAccountId($default_discount_account_id)
    {
        if (is_null($default_discount_account_id)) {
            throw new \InvalidArgumentException('non-nullable default_discount_account_id cannot be null');
        }
        $this->container['default_discount_account_id'] = $default_discount_account_id;

        return $this;
    }

    /**
     * Gets default_discount_account_number
     *
     * @return string|null
     * @deprecated
     */
    public function getDefaultDiscountAccountNumber()
    {
        return $this->container['default_discount_account_number'];
    }

    /**
     * Sets default_discount_account_number
     *
     * @param string|null $default_discount_account_number default_discount_account_number
     *
     * @return self
     * @deprecated
     */
    public function setDefaultDiscountAccountNumber($default_discount_account_number)
    {
        if (is_null($default_discount_account_number)) {
            throw new \InvalidArgumentException('non-nullable default_discount_account_number cannot be null');
        }
        $this->container['default_discount_account_number'] = $default_discount_account_number;

        return $this;
    }

    /**
     * Gets default_nominal_account_id
     *
     * @return string|null
     */
    public function getDefaultNominalAccountId()
    {
        return $this->container['default_nominal_account_id'];
    }

    /**
     * Sets default_nominal_account_id
     *
     * @param string|null $default_nominal_account_id default_nominal_account_id
     *
     * @return self
     */
    public function setDefaultNominalAccountId($default_nominal_account_id)
    {
        if (is_null($default_nominal_account_id)) {
            throw new \InvalidArgumentException('non-nullable default_nominal_account_id cannot be null');
        }
        $this->container['default_nominal_account_id'] = $default_nominal_account_id;

        return $this;
    }

    /**
     * Gets default_nominal_account_number
     *
     * @return string|null
     * @deprecated
     */
    public function getDefaultNominalAccountNumber()
    {
        return $this->container['default_nominal_account_number'];
    }

    /**
     * Sets default_nominal_account_number
     *
     * @param string|null $default_nominal_account_number default_nominal_account_number
     *
     * @return self
     * @deprecated
     */
    public function setDefaultNominalAccountNumber($default_nominal_account_number)
    {
        if (is_null($default_nominal_account_number)) {
            throw new \InvalidArgumentException('non-nullable default_nominal_account_number cannot be null');
        }
        $this->container['default_nominal_account_number'] = $default_nominal_account_number;

        return $this;
    }

    /**
     * Gets deposit_account_id
     *
     * @return string|null
     */
    public function getDepositAccountId()
    {
        return $this->container['deposit_account_id'];
    }

    /**
     * Sets deposit_account_id
     *
     * @param string|null $deposit_account_id deposit_account_id
     *
     * @return self
     */
    public function setDepositAccountId($deposit_account_id)
    {
        if (is_null($deposit_account_id)) {
            throw new \InvalidArgumentException('non-nullable deposit_account_id cannot be null');
        }
        $this->container['deposit_account_id'] = $deposit_account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Tax., must be smaller than or equal to 256.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tax_key
     *
     * @return \kruegge82\weclapp\Model\TaxKey|null
     */
    public function getTaxKey()
    {
        return $this->container['tax_key'];
    }

    /**
     * Sets tax_key
     *
     * @param \kruegge82\weclapp\Model\TaxKey|null $tax_key tax_key
     *
     * @return self
     */
    public function setTaxKey($tax_key)
    {
        if (is_null($tax_key)) {
            throw new \InvalidArgumentException('non-nullable tax_key cannot be null');
        }
        $this->container['tax_key'] = $tax_key;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return \kruegge82\weclapp\Model\TaxType|null
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param \kruegge82\weclapp\Model\TaxType|null $tax_type tax_type
     *
     * @return self
     */
    public function setTaxType($tax_type)
    {
        if (is_null($tax_type)) {
            throw new \InvalidArgumentException('non-nullable tax_type cannot be null');
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets tax_value
     *
     * @return float|null
     */
    public function getTaxValue()
    {
        return $this->container['tax_value'];
    }

    /**
     * Sets tax_value
     *
     * @param float|null $tax_value tax_value
     *
     * @return self
     */
    public function setTaxValue($tax_value)
    {
        if (is_null($tax_value)) {
            throw new \InvalidArgumentException('non-nullable tax_value cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($tax_value)))) {
            throw new \InvalidArgumentException("invalid value for \$tax_value when calling Tax., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['tax_value'] = $tax_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


