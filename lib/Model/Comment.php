<?php
/**
 * Comment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Comment Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Comment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'author_name' => 'string',
        'author_user_id' => 'string',
        'comment' => 'string',
        'entity_id' => 'string',
        'entity_name' => 'string',
        'html_comment' => 'string',
        'last_edit_date' => 'int',
        'parent_comment_id' => 'string',
        'private_comment' => 'bool',
        'public_comment' => 'bool',
        'recipient_users' => '\kruegge82\weclapp\Model\OnlyId[]',
        'solution' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'author_name' => null,
        'author_user_id' => null,
        'comment' => null,
        'entity_id' => null,
        'entity_name' => null,
        'html_comment' => null,
        'last_edit_date' => 'timestamp',
        'parent_comment_id' => null,
        'private_comment' => null,
        'public_comment' => null,
        'recipient_users' => null,
        'solution' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'author_name' => false,
        'author_user_id' => false,
        'comment' => false,
        'entity_id' => false,
        'entity_name' => false,
        'html_comment' => false,
        'last_edit_date' => false,
        'parent_comment_id' => false,
        'private_comment' => false,
        'public_comment' => false,
        'recipient_users' => false,
        'solution' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'author_name' => 'authorName',
        'author_user_id' => 'authorUserId',
        'comment' => 'comment',
        'entity_id' => 'entityId',
        'entity_name' => 'entityName',
        'html_comment' => 'htmlComment',
        'last_edit_date' => 'lastEditDate',
        'parent_comment_id' => 'parentCommentId',
        'private_comment' => 'privateComment',
        'public_comment' => 'publicComment',
        'recipient_users' => 'recipientUsers',
        'solution' => 'solution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'author_name' => 'setAuthorName',
        'author_user_id' => 'setAuthorUserId',
        'comment' => 'setComment',
        'entity_id' => 'setEntityId',
        'entity_name' => 'setEntityName',
        'html_comment' => 'setHtmlComment',
        'last_edit_date' => 'setLastEditDate',
        'parent_comment_id' => 'setParentCommentId',
        'private_comment' => 'setPrivateComment',
        'public_comment' => 'setPublicComment',
        'recipient_users' => 'setRecipientUsers',
        'solution' => 'setSolution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'author_name' => 'getAuthorName',
        'author_user_id' => 'getAuthorUserId',
        'comment' => 'getComment',
        'entity_id' => 'getEntityId',
        'entity_name' => 'getEntityName',
        'html_comment' => 'getHtmlComment',
        'last_edit_date' => 'getLastEditDate',
        'parent_comment_id' => 'getParentCommentId',
        'private_comment' => 'getPrivateComment',
        'public_comment' => 'getPublicComment',
        'recipient_users' => 'getRecipientUsers',
        'solution' => 'getSolution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('author_name', $data ?? [], null);
        $this->setIfExists('author_user_id', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('entity_id', $data ?? [], null);
        $this->setIfExists('entity_name', $data ?? [], null);
        $this->setIfExists('html_comment', $data ?? [], null);
        $this->setIfExists('last_edit_date', $data ?? [], null);
        $this->setIfExists('parent_comment_id', $data ?? [], null);
        $this->setIfExists('private_comment', $data ?? [], null);
        $this->setIfExists('public_comment', $data ?? [], null);
        $this->setIfExists('recipient_users', $data ?? [], null);
        $this->setIfExists('solution', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['author_name']) && (mb_strlen($this->container['author_name']) > 256)) {
            $invalidProperties[] = "invalid value for 'author_name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets author_name
     *
     * @return string|null
     */
    public function getAuthorName()
    {
        return $this->container['author_name'];
    }

    /**
     * Sets author_name
     *
     * @param string|null $author_name author_name
     *
     * @return self
     */
    public function setAuthorName($author_name)
    {
        if (is_null($author_name)) {
            throw new \InvalidArgumentException('non-nullable author_name cannot be null');
        }
        if ((mb_strlen($author_name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $author_name when calling Comment., must be smaller than or equal to 256.');
        }

        $this->container['author_name'] = $author_name;

        return $this;
    }

    /**
     * Gets author_user_id
     *
     * @return string|null
     */
    public function getAuthorUserId()
    {
        return $this->container['author_user_id'];
    }

    /**
     * Sets author_user_id
     *
     * @param string|null $author_user_id author_user_id
     *
     * @return self
     */
    public function setAuthorUserId($author_user_id)
    {
        if (is_null($author_user_id)) {
            throw new \InvalidArgumentException('non-nullable author_user_id cannot be null');
        }
        $this->container['author_user_id'] = $author_user_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        if ((mb_strlen($comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling Comment., must be smaller than or equal to 255.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets entity_id
     *
     * @return string|null
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string|null $entity_id entity_id
     *
     * @return self
     */
    public function setEntityId($entity_id)
    {
        if (is_null($entity_id)) {
            throw new \InvalidArgumentException('non-nullable entity_id cannot be null');
        }
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets entity_name
     *
     * @return string|null
     */
    public function getEntityName()
    {
        return $this->container['entity_name'];
    }

    /**
     * Sets entity_name
     *
     * @param string|null $entity_name entity_name
     *
     * @return self
     */
    public function setEntityName($entity_name)
    {
        if (is_null($entity_name)) {
            throw new \InvalidArgumentException('non-nullable entity_name cannot be null');
        }
        $this->container['entity_name'] = $entity_name;

        return $this;
    }

    /**
     * Gets html_comment
     *
     * @return string|null
     */
    public function getHtmlComment()
    {
        return $this->container['html_comment'];
    }

    /**
     * Sets html_comment
     *
     * @param string|null $html_comment html_comment
     *
     * @return self
     */
    public function setHtmlComment($html_comment)
    {
        if (is_null($html_comment)) {
            throw new \InvalidArgumentException('non-nullable html_comment cannot be null');
        }
        $this->container['html_comment'] = $html_comment;

        return $this;
    }

    /**
     * Gets last_edit_date
     *
     * @return int|null
     */
    public function getLastEditDate()
    {
        return $this->container['last_edit_date'];
    }

    /**
     * Sets last_edit_date
     *
     * @param int|null $last_edit_date last_edit_date
     *
     * @return self
     */
    public function setLastEditDate($last_edit_date)
    {
        if (is_null($last_edit_date)) {
            throw new \InvalidArgumentException('non-nullable last_edit_date cannot be null');
        }
        $this->container['last_edit_date'] = $last_edit_date;

        return $this;
    }

    /**
     * Gets parent_comment_id
     *
     * @return string|null
     */
    public function getParentCommentId()
    {
        return $this->container['parent_comment_id'];
    }

    /**
     * Sets parent_comment_id
     *
     * @param string|null $parent_comment_id parent_comment_id
     *
     * @return self
     */
    public function setParentCommentId($parent_comment_id)
    {
        if (is_null($parent_comment_id)) {
            throw new \InvalidArgumentException('non-nullable parent_comment_id cannot be null');
        }
        $this->container['parent_comment_id'] = $parent_comment_id;

        return $this;
    }

    /**
     * Gets private_comment
     *
     * @return bool|null
     */
    public function getPrivateComment()
    {
        return $this->container['private_comment'];
    }

    /**
     * Sets private_comment
     *
     * @param bool|null $private_comment private_comment
     *
     * @return self
     */
    public function setPrivateComment($private_comment)
    {
        if (is_null($private_comment)) {
            throw new \InvalidArgumentException('non-nullable private_comment cannot be null');
        }
        $this->container['private_comment'] = $private_comment;

        return $this;
    }

    /**
     * Gets public_comment
     *
     * @return bool|null
     */
    public function getPublicComment()
    {
        return $this->container['public_comment'];
    }

    /**
     * Sets public_comment
     *
     * @param bool|null $public_comment public_comment
     *
     * @return self
     */
    public function setPublicComment($public_comment)
    {
        if (is_null($public_comment)) {
            throw new \InvalidArgumentException('non-nullable public_comment cannot be null');
        }
        $this->container['public_comment'] = $public_comment;

        return $this;
    }

    /**
     * Gets recipient_users
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getRecipientUsers()
    {
        return $this->container['recipient_users'];
    }

    /**
     * Sets recipient_users
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $recipient_users recipient_users
     *
     * @return self
     */
    public function setRecipientUsers($recipient_users)
    {
        if (is_null($recipient_users)) {
            throw new \InvalidArgumentException('non-nullable recipient_users cannot be null');
        }
        $this->container['recipient_users'] = $recipient_users;

        return $this;
    }

    /**
     * Gets solution
     *
     * @return bool|null
     */
    public function getSolution()
    {
        return $this->container['solution'];
    }

    /**
     * Sets solution
     *
     * @param bool|null $solution solution
     *
     * @return self
     */
    public function setSolution($solution)
    {
        if (is_null($solution)) {
            throw new \InvalidArgumentException('non-nullable solution cannot be null');
        }
        $this->container['solution'] = $solution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


