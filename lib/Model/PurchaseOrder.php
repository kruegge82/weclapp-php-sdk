<?php
/**
 * PurchaseOrder
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * PurchaseOrder Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PurchaseOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'purchaseOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'commercial_language' => 'string',
        'creator_id' => 'string',
        'description' => 'string',
        'disable_email_template' => 'bool',
        'record_comment' => 'string',
        'record_free_text' => 'string',
        'record_opening' => 'string',
        'sent_to_recipient' => 'bool',
        'tags' => 'string[]',
        'currency_conversion_date' => 'int',
        'currency_conversion_rate' => 'float',
        'gross_amount' => 'float',
        'gross_amount_in_company_currency' => 'float',
        'header_discount' => 'float',
        'header_surcharge' => 'float',
        'net_amount' => 'float',
        'net_amount_in_company_currency' => 'float',
        'non_standard_tax_id' => 'string',
        'non_standard_tax_name' => 'string',
        'payment_method_id' => 'string',
        'payment_method_name' => 'string',
        'record_currency_id' => 'string',
        'record_currency_name' => 'string',
        'term_of_payment_id' => 'string',
        'term_of_payment_name' => 'string',
        'record_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'responsible_user_id' => 'string',
        'responsible_user_username' => 'string',
        'service_period_from' => 'int',
        'service_period_to' => 'int',
        'supplier_id' => 'string',
        'supplier_number' => 'string',
        'advance_payment_status' => '\kruegge82\weclapp\Model\AdvancePaymentStatus',
        'commercial_language_customer' => 'string',
        'commission' => 'string',
        'confirmation_number' => 'string',
        'delivery_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'dropshipping_delivery_note_form_texts' => '\kruegge82\weclapp\Model\DropshippingDeliveryNoteFormTextBlockData',
        'external_purchase_order_number' => 'string',
        'form_settings_from_sales_channel' => '\kruegge82\weclapp\Model\DistributionChannel',
        'invoice_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'invoiced' => 'bool',
        'merged_to_purchase_order_id' => 'string',
        'note' => 'string',
        'order_date' => 'int',
        'package_tracking_number' => 'string',
        'package_tracking_url' => 'string',
        'paid' => 'bool',
        'planned_delivery_date' => 'int',
        'planned_shipping_date' => 'int',
        'purchase_order_items' => '\kruegge82\weclapp\Model\PurchaseOrderItem[]',
        'purchase_order_number' => 'string',
        'purchase_order_request_id' => 'string',
        'purchase_order_type' => '\kruegge82\weclapp\Model\SupplierOrderType',
        'received' => 'bool',
        'record_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'sales_order_id' => 'string',
        'sales_order_number' => 'string',
        'sender_country_code' => 'string',
        'shipment_method_id' => 'string',
        'shipment_method_name' => 'string',
        'shipping_carrier_id' => 'string',
        'shipping_cost_items' => '\kruegge82\weclapp\Model\PurchaseOrderShippingCostItem[]',
        'shipping_notification_date' => 'int',
        'status' => '\kruegge82\weclapp\Model\SupplierOrderStatusType',
        'status_history' => '\kruegge82\weclapp\Model\PurchaseOrderStatusHistory[]',
        'supplier_habitual_exporter_letter_of_intent_id' => 'string',
        'supplier_quotation_number' => 'string',
        'warehouse_id' => 'string',
        'warehouse_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'commercial_language' => null,
        'creator_id' => null,
        'description' => 'html',
        'disable_email_template' => null,
        'record_comment' => 'html',
        'record_free_text' => 'html',
        'record_opening' => 'html',
        'sent_to_recipient' => null,
        'tags' => null,
        'currency_conversion_date' => 'timestamp',
        'currency_conversion_rate' => 'decimal',
        'gross_amount' => 'decimal',
        'gross_amount_in_company_currency' => 'decimal',
        'header_discount' => 'decimal',
        'header_surcharge' => 'decimal',
        'net_amount' => 'decimal',
        'net_amount_in_company_currency' => 'decimal',
        'non_standard_tax_id' => null,
        'non_standard_tax_name' => null,
        'payment_method_id' => null,
        'payment_method_name' => null,
        'record_currency_id' => null,
        'record_currency_name' => null,
        'term_of_payment_id' => null,
        'term_of_payment_name' => null,
        'record_email_addresses' => null,
        'responsible_user_id' => null,
        'responsible_user_username' => null,
        'service_period_from' => 'timestamp',
        'service_period_to' => 'timestamp',
        'supplier_id' => null,
        'supplier_number' => null,
        'advance_payment_status' => null,
        'commercial_language_customer' => null,
        'commission' => null,
        'confirmation_number' => null,
        'delivery_address' => null,
        'dropshipping_delivery_note_form_texts' => null,
        'external_purchase_order_number' => null,
        'form_settings_from_sales_channel' => null,
        'invoice_address' => null,
        'invoiced' => null,
        'merged_to_purchase_order_id' => null,
        'note' => null,
        'order_date' => 'timestamp',
        'package_tracking_number' => null,
        'package_tracking_url' => null,
        'paid' => null,
        'planned_delivery_date' => 'timestamp',
        'planned_shipping_date' => 'timestamp',
        'purchase_order_items' => null,
        'purchase_order_number' => null,
        'purchase_order_request_id' => null,
        'purchase_order_type' => null,
        'received' => null,
        'record_address' => null,
        'sales_order_id' => null,
        'sales_order_number' => null,
        'sender_country_code' => null,
        'shipment_method_id' => null,
        'shipment_method_name' => null,
        'shipping_carrier_id' => null,
        'shipping_cost_items' => null,
        'shipping_notification_date' => 'timestamp',
        'status' => null,
        'status_history' => null,
        'supplier_habitual_exporter_letter_of_intent_id' => null,
        'supplier_quotation_number' => null,
        'warehouse_id' => null,
        'warehouse_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'commercial_language' => false,
        'creator_id' => false,
        'description' => false,
        'disable_email_template' => false,
        'record_comment' => false,
        'record_free_text' => false,
        'record_opening' => false,
        'sent_to_recipient' => false,
        'tags' => false,
        'currency_conversion_date' => false,
        'currency_conversion_rate' => false,
        'gross_amount' => false,
        'gross_amount_in_company_currency' => false,
        'header_discount' => false,
        'header_surcharge' => false,
        'net_amount' => false,
        'net_amount_in_company_currency' => false,
        'non_standard_tax_id' => false,
        'non_standard_tax_name' => false,
        'payment_method_id' => false,
        'payment_method_name' => false,
        'record_currency_id' => false,
        'record_currency_name' => false,
        'term_of_payment_id' => false,
        'term_of_payment_name' => false,
        'record_email_addresses' => false,
        'responsible_user_id' => false,
        'responsible_user_username' => false,
        'service_period_from' => false,
        'service_period_to' => false,
        'supplier_id' => false,
        'supplier_number' => false,
        'advance_payment_status' => false,
        'commercial_language_customer' => false,
        'commission' => false,
        'confirmation_number' => false,
        'delivery_address' => false,
        'dropshipping_delivery_note_form_texts' => false,
        'external_purchase_order_number' => false,
        'form_settings_from_sales_channel' => false,
        'invoice_address' => false,
        'invoiced' => false,
        'merged_to_purchase_order_id' => false,
        'note' => false,
        'order_date' => false,
        'package_tracking_number' => false,
        'package_tracking_url' => false,
        'paid' => false,
        'planned_delivery_date' => false,
        'planned_shipping_date' => false,
        'purchase_order_items' => false,
        'purchase_order_number' => false,
        'purchase_order_request_id' => false,
        'purchase_order_type' => false,
        'received' => false,
        'record_address' => false,
        'sales_order_id' => false,
        'sales_order_number' => false,
        'sender_country_code' => false,
        'shipment_method_id' => false,
        'shipment_method_name' => false,
        'shipping_carrier_id' => false,
        'shipping_cost_items' => false,
        'shipping_notification_date' => false,
        'status' => false,
        'status_history' => false,
        'supplier_habitual_exporter_letter_of_intent_id' => false,
        'supplier_quotation_number' => false,
        'warehouse_id' => false,
        'warehouse_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'commercial_language' => 'commercialLanguage',
        'creator_id' => 'creatorId',
        'description' => 'description',
        'disable_email_template' => 'disableEmailTemplate',
        'record_comment' => 'recordComment',
        'record_free_text' => 'recordFreeText',
        'record_opening' => 'recordOpening',
        'sent_to_recipient' => 'sentToRecipient',
        'tags' => 'tags',
        'currency_conversion_date' => 'currencyConversionDate',
        'currency_conversion_rate' => 'currencyConversionRate',
        'gross_amount' => 'grossAmount',
        'gross_amount_in_company_currency' => 'grossAmountInCompanyCurrency',
        'header_discount' => 'headerDiscount',
        'header_surcharge' => 'headerSurcharge',
        'net_amount' => 'netAmount',
        'net_amount_in_company_currency' => 'netAmountInCompanyCurrency',
        'non_standard_tax_id' => 'nonStandardTaxId',
        'non_standard_tax_name' => 'nonStandardTaxName',
        'payment_method_id' => 'paymentMethodId',
        'payment_method_name' => 'paymentMethodName',
        'record_currency_id' => 'recordCurrencyId',
        'record_currency_name' => 'recordCurrencyName',
        'term_of_payment_id' => 'termOfPaymentId',
        'term_of_payment_name' => 'termOfPaymentName',
        'record_email_addresses' => 'recordEmailAddresses',
        'responsible_user_id' => 'responsibleUserId',
        'responsible_user_username' => 'responsibleUserUsername',
        'service_period_from' => 'servicePeriodFrom',
        'service_period_to' => 'servicePeriodTo',
        'supplier_id' => 'supplierId',
        'supplier_number' => 'supplierNumber',
        'advance_payment_status' => 'advancePaymentStatus',
        'commercial_language_customer' => 'commercialLanguageCustomer',
        'commission' => 'commission',
        'confirmation_number' => 'confirmationNumber',
        'delivery_address' => 'deliveryAddress',
        'dropshipping_delivery_note_form_texts' => 'dropshippingDeliveryNoteFormTexts',
        'external_purchase_order_number' => 'externalPurchaseOrderNumber',
        'form_settings_from_sales_channel' => 'formSettingsFromSalesChannel',
        'invoice_address' => 'invoiceAddress',
        'invoiced' => 'invoiced',
        'merged_to_purchase_order_id' => 'mergedToPurchaseOrderId',
        'note' => 'note',
        'order_date' => 'orderDate',
        'package_tracking_number' => 'packageTrackingNumber',
        'package_tracking_url' => 'packageTrackingUrl',
        'paid' => 'paid',
        'planned_delivery_date' => 'plannedDeliveryDate',
        'planned_shipping_date' => 'plannedShippingDate',
        'purchase_order_items' => 'purchaseOrderItems',
        'purchase_order_number' => 'purchaseOrderNumber',
        'purchase_order_request_id' => 'purchaseOrderRequestId',
        'purchase_order_type' => 'purchaseOrderType',
        'received' => 'received',
        'record_address' => 'recordAddress',
        'sales_order_id' => 'salesOrderId',
        'sales_order_number' => 'salesOrderNumber',
        'sender_country_code' => 'senderCountryCode',
        'shipment_method_id' => 'shipmentMethodId',
        'shipment_method_name' => 'shipmentMethodName',
        'shipping_carrier_id' => 'shippingCarrierId',
        'shipping_cost_items' => 'shippingCostItems',
        'shipping_notification_date' => 'shippingNotificationDate',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'supplier_habitual_exporter_letter_of_intent_id' => 'supplierHabitualExporterLetterOfIntentId',
        'supplier_quotation_number' => 'supplierQuotationNumber',
        'warehouse_id' => 'warehouseId',
        'warehouse_name' => 'warehouseName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'commercial_language' => 'setCommercialLanguage',
        'creator_id' => 'setCreatorId',
        'description' => 'setDescription',
        'disable_email_template' => 'setDisableEmailTemplate',
        'record_comment' => 'setRecordComment',
        'record_free_text' => 'setRecordFreeText',
        'record_opening' => 'setRecordOpening',
        'sent_to_recipient' => 'setSentToRecipient',
        'tags' => 'setTags',
        'currency_conversion_date' => 'setCurrencyConversionDate',
        'currency_conversion_rate' => 'setCurrencyConversionRate',
        'gross_amount' => 'setGrossAmount',
        'gross_amount_in_company_currency' => 'setGrossAmountInCompanyCurrency',
        'header_discount' => 'setHeaderDiscount',
        'header_surcharge' => 'setHeaderSurcharge',
        'net_amount' => 'setNetAmount',
        'net_amount_in_company_currency' => 'setNetAmountInCompanyCurrency',
        'non_standard_tax_id' => 'setNonStandardTaxId',
        'non_standard_tax_name' => 'setNonStandardTaxName',
        'payment_method_id' => 'setPaymentMethodId',
        'payment_method_name' => 'setPaymentMethodName',
        'record_currency_id' => 'setRecordCurrencyId',
        'record_currency_name' => 'setRecordCurrencyName',
        'term_of_payment_id' => 'setTermOfPaymentId',
        'term_of_payment_name' => 'setTermOfPaymentName',
        'record_email_addresses' => 'setRecordEmailAddresses',
        'responsible_user_id' => 'setResponsibleUserId',
        'responsible_user_username' => 'setResponsibleUserUsername',
        'service_period_from' => 'setServicePeriodFrom',
        'service_period_to' => 'setServicePeriodTo',
        'supplier_id' => 'setSupplierId',
        'supplier_number' => 'setSupplierNumber',
        'advance_payment_status' => 'setAdvancePaymentStatus',
        'commercial_language_customer' => 'setCommercialLanguageCustomer',
        'commission' => 'setCommission',
        'confirmation_number' => 'setConfirmationNumber',
        'delivery_address' => 'setDeliveryAddress',
        'dropshipping_delivery_note_form_texts' => 'setDropshippingDeliveryNoteFormTexts',
        'external_purchase_order_number' => 'setExternalPurchaseOrderNumber',
        'form_settings_from_sales_channel' => 'setFormSettingsFromSalesChannel',
        'invoice_address' => 'setInvoiceAddress',
        'invoiced' => 'setInvoiced',
        'merged_to_purchase_order_id' => 'setMergedToPurchaseOrderId',
        'note' => 'setNote',
        'order_date' => 'setOrderDate',
        'package_tracking_number' => 'setPackageTrackingNumber',
        'package_tracking_url' => 'setPackageTrackingUrl',
        'paid' => 'setPaid',
        'planned_delivery_date' => 'setPlannedDeliveryDate',
        'planned_shipping_date' => 'setPlannedShippingDate',
        'purchase_order_items' => 'setPurchaseOrderItems',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'purchase_order_request_id' => 'setPurchaseOrderRequestId',
        'purchase_order_type' => 'setPurchaseOrderType',
        'received' => 'setReceived',
        'record_address' => 'setRecordAddress',
        'sales_order_id' => 'setSalesOrderId',
        'sales_order_number' => 'setSalesOrderNumber',
        'sender_country_code' => 'setSenderCountryCode',
        'shipment_method_id' => 'setShipmentMethodId',
        'shipment_method_name' => 'setShipmentMethodName',
        'shipping_carrier_id' => 'setShippingCarrierId',
        'shipping_cost_items' => 'setShippingCostItems',
        'shipping_notification_date' => 'setShippingNotificationDate',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'supplier_habitual_exporter_letter_of_intent_id' => 'setSupplierHabitualExporterLetterOfIntentId',
        'supplier_quotation_number' => 'setSupplierQuotationNumber',
        'warehouse_id' => 'setWarehouseId',
        'warehouse_name' => 'setWarehouseName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'commercial_language' => 'getCommercialLanguage',
        'creator_id' => 'getCreatorId',
        'description' => 'getDescription',
        'disable_email_template' => 'getDisableEmailTemplate',
        'record_comment' => 'getRecordComment',
        'record_free_text' => 'getRecordFreeText',
        'record_opening' => 'getRecordOpening',
        'sent_to_recipient' => 'getSentToRecipient',
        'tags' => 'getTags',
        'currency_conversion_date' => 'getCurrencyConversionDate',
        'currency_conversion_rate' => 'getCurrencyConversionRate',
        'gross_amount' => 'getGrossAmount',
        'gross_amount_in_company_currency' => 'getGrossAmountInCompanyCurrency',
        'header_discount' => 'getHeaderDiscount',
        'header_surcharge' => 'getHeaderSurcharge',
        'net_amount' => 'getNetAmount',
        'net_amount_in_company_currency' => 'getNetAmountInCompanyCurrency',
        'non_standard_tax_id' => 'getNonStandardTaxId',
        'non_standard_tax_name' => 'getNonStandardTaxName',
        'payment_method_id' => 'getPaymentMethodId',
        'payment_method_name' => 'getPaymentMethodName',
        'record_currency_id' => 'getRecordCurrencyId',
        'record_currency_name' => 'getRecordCurrencyName',
        'term_of_payment_id' => 'getTermOfPaymentId',
        'term_of_payment_name' => 'getTermOfPaymentName',
        'record_email_addresses' => 'getRecordEmailAddresses',
        'responsible_user_id' => 'getResponsibleUserId',
        'responsible_user_username' => 'getResponsibleUserUsername',
        'service_period_from' => 'getServicePeriodFrom',
        'service_period_to' => 'getServicePeriodTo',
        'supplier_id' => 'getSupplierId',
        'supplier_number' => 'getSupplierNumber',
        'advance_payment_status' => 'getAdvancePaymentStatus',
        'commercial_language_customer' => 'getCommercialLanguageCustomer',
        'commission' => 'getCommission',
        'confirmation_number' => 'getConfirmationNumber',
        'delivery_address' => 'getDeliveryAddress',
        'dropshipping_delivery_note_form_texts' => 'getDropshippingDeliveryNoteFormTexts',
        'external_purchase_order_number' => 'getExternalPurchaseOrderNumber',
        'form_settings_from_sales_channel' => 'getFormSettingsFromSalesChannel',
        'invoice_address' => 'getInvoiceAddress',
        'invoiced' => 'getInvoiced',
        'merged_to_purchase_order_id' => 'getMergedToPurchaseOrderId',
        'note' => 'getNote',
        'order_date' => 'getOrderDate',
        'package_tracking_number' => 'getPackageTrackingNumber',
        'package_tracking_url' => 'getPackageTrackingUrl',
        'paid' => 'getPaid',
        'planned_delivery_date' => 'getPlannedDeliveryDate',
        'planned_shipping_date' => 'getPlannedShippingDate',
        'purchase_order_items' => 'getPurchaseOrderItems',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'purchase_order_request_id' => 'getPurchaseOrderRequestId',
        'purchase_order_type' => 'getPurchaseOrderType',
        'received' => 'getReceived',
        'record_address' => 'getRecordAddress',
        'sales_order_id' => 'getSalesOrderId',
        'sales_order_number' => 'getSalesOrderNumber',
        'sender_country_code' => 'getSenderCountryCode',
        'shipment_method_id' => 'getShipmentMethodId',
        'shipment_method_name' => 'getShipmentMethodName',
        'shipping_carrier_id' => 'getShippingCarrierId',
        'shipping_cost_items' => 'getShippingCostItems',
        'shipping_notification_date' => 'getShippingNotificationDate',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'supplier_habitual_exporter_letter_of_intent_id' => 'getSupplierHabitualExporterLetterOfIntentId',
        'supplier_quotation_number' => 'getSupplierQuotationNumber',
        'warehouse_id' => 'getWarehouseId',
        'warehouse_name' => 'getWarehouseName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('disable_email_template', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('currency_conversion_date', $data ?? [], null);
        $this->setIfExists('currency_conversion_rate', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('gross_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('header_discount', $data ?? [], null);
        $this->setIfExists('header_surcharge', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('net_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('non_standard_tax_id', $data ?? [], null);
        $this->setIfExists('non_standard_tax_name', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('payment_method_name', $data ?? [], null);
        $this->setIfExists('record_currency_id', $data ?? [], null);
        $this->setIfExists('record_currency_name', $data ?? [], null);
        $this->setIfExists('term_of_payment_id', $data ?? [], null);
        $this->setIfExists('term_of_payment_name', $data ?? [], null);
        $this->setIfExists('record_email_addresses', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('responsible_user_username', $data ?? [], null);
        $this->setIfExists('service_period_from', $data ?? [], null);
        $this->setIfExists('service_period_to', $data ?? [], null);
        $this->setIfExists('supplier_id', $data ?? [], null);
        $this->setIfExists('supplier_number', $data ?? [], null);
        $this->setIfExists('advance_payment_status', $data ?? [], null);
        $this->setIfExists('commercial_language_customer', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('confirmation_number', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('dropshipping_delivery_note_form_texts', $data ?? [], null);
        $this->setIfExists('external_purchase_order_number', $data ?? [], null);
        $this->setIfExists('form_settings_from_sales_channel', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('invoiced', $data ?? [], null);
        $this->setIfExists('merged_to_purchase_order_id', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('order_date', $data ?? [], null);
        $this->setIfExists('package_tracking_number', $data ?? [], null);
        $this->setIfExists('package_tracking_url', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('planned_delivery_date', $data ?? [], null);
        $this->setIfExists('planned_shipping_date', $data ?? [], null);
        $this->setIfExists('purchase_order_items', $data ?? [], null);
        $this->setIfExists('purchase_order_number', $data ?? [], null);
        $this->setIfExists('purchase_order_request_id', $data ?? [], null);
        $this->setIfExists('purchase_order_type', $data ?? [], null);
        $this->setIfExists('received', $data ?? [], null);
        $this->setIfExists('record_address', $data ?? [], null);
        $this->setIfExists('sales_order_id', $data ?? [], null);
        $this->setIfExists('sales_order_number', $data ?? [], null);
        $this->setIfExists('sender_country_code', $data ?? [], null);
        $this->setIfExists('shipment_method_id', $data ?? [], null);
        $this->setIfExists('shipment_method_name', $data ?? [], null);
        $this->setIfExists('shipping_carrier_id', $data ?? [], null);
        $this->setIfExists('shipping_cost_items', $data ?? [], null);
        $this->setIfExists('shipping_notification_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('supplier_habitual_exporter_letter_of_intent_id', $data ?? [], null);
        $this->setIfExists('supplier_quotation_number', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('warehouse_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['commercial_language']) && (mb_strlen($this->container['commercial_language']) > 255)) {
            $invalidProperties[] = "invalid value for 'commercial_language', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_comment']) && (mb_strlen($this->container['record_comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_comment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_free_text']) && (mb_strlen($this->container['record_free_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_free_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['record_opening']) && (mb_strlen($this->container['record_opening']) > 255)) {
            $invalidProperties[] = "invalid value for 'record_opening', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['currency_conversion_rate']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['currency_conversion_rate'])) {
            $invalidProperties[] = "invalid value for 'currency_conversion_rate', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount'])) {
            $invalidProperties[] = "invalid value for 'gross_amount', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount_in_company_currency']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'gross_amount_in_company_currency', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['header_discount']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['header_discount'])) {
            $invalidProperties[] = "invalid value for 'header_discount', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['header_surcharge']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['header_surcharge'])) {
            $invalidProperties[] = "invalid value for 'header_surcharge', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount'])) {
            $invalidProperties[] = "invalid value for 'net_amount', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_in_company_currency']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'net_amount_in_company_currency', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['commission']) && (mb_strlen($this->container['commission']) > 255)) {
            $invalidProperties[] = "invalid value for 'commission', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['confirmation_number']) && (mb_strlen($this->container['confirmation_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'confirmation_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['external_purchase_order_number']) && (mb_strlen($this->container['external_purchase_order_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_purchase_order_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 512)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['package_tracking_number']) && (mb_strlen($this->container['package_tracking_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'package_tracking_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['package_tracking_url']) && (mb_strlen($this->container['package_tracking_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'package_tracking_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['purchase_order_number']) && (mb_strlen($this->container['purchase_order_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'purchase_order_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['supplier_quotation_number']) && (mb_strlen($this->container['supplier_quotation_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'supplier_quotation_number', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        if ((mb_strlen($commercial_language) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commercial_language when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disable_email_template
     *
     * @return bool|null
     * @deprecated
     */
    public function getDisableEmailTemplate()
    {
        return $this->container['disable_email_template'];
    }

    /**
     * Sets disable_email_template
     *
     * @param bool|null $disable_email_template disable_email_template
     *
     * @return self
     * @deprecated
     */
    public function setDisableEmailTemplate($disable_email_template)
    {
        if (is_null($disable_email_template)) {
            throw new \InvalidArgumentException('non-nullable disable_email_template cannot be null');
        }
        $this->container['disable_email_template'] = $disable_email_template;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        if ((mb_strlen($record_comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_comment when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        if ((mb_strlen($record_free_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_free_text when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        if ((mb_strlen($record_opening) > 255)) {
            throw new \InvalidArgumentException('invalid length for $record_opening when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets currency_conversion_date
     *
     * @return int|null
     */
    public function getCurrencyConversionDate()
    {
        return $this->container['currency_conversion_date'];
    }

    /**
     * Sets currency_conversion_date
     *
     * @param int|null $currency_conversion_date currency_conversion_date
     *
     * @return self
     */
    public function setCurrencyConversionDate($currency_conversion_date)
    {
        if (is_null($currency_conversion_date)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_date cannot be null');
        }
        $this->container['currency_conversion_date'] = $currency_conversion_date;

        return $this;
    }

    /**
     * Gets currency_conversion_rate
     *
     * @return float|null
     * @deprecated
     */
    public function getCurrencyConversionRate()
    {
        return $this->container['currency_conversion_rate'];
    }

    /**
     * Sets currency_conversion_rate
     *
     * @param float|null $currency_conversion_rate currency_conversion_rate
     *
     * @return self
     * @deprecated
     */
    public function setCurrencyConversionRate($currency_conversion_rate)
    {
        if (is_null($currency_conversion_rate)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_rate cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($currency_conversion_rate)))) {
            throw new \InvalidArgumentException("invalid value for \$currency_conversion_rate when calling PurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['currency_conversion_rate'] = $currency_conversion_rate;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount when calling PurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets gross_amount_in_company_currency
     *
     * @return float|null
     */
    public function getGrossAmountInCompanyCurrency()
    {
        return $this->container['gross_amount_in_company_currency'];
    }

    /**
     * Sets gross_amount_in_company_currency
     *
     * @param float|null $gross_amount_in_company_currency gross_amount_in_company_currency
     *
     * @return self
     */
    public function setGrossAmountInCompanyCurrency($gross_amount_in_company_currency)
    {
        if (is_null($gross_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable gross_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount_in_company_currency when calling PurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount_in_company_currency'] = $gross_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets header_discount
     *
     * @return float|null
     */
    public function getHeaderDiscount()
    {
        return $this->container['header_discount'];
    }

    /**
     * Sets header_discount
     *
     * @param float|null $header_discount header_discount
     *
     * @return self
     */
    public function setHeaderDiscount($header_discount)
    {
        if (is_null($header_discount)) {
            throw new \InvalidArgumentException('non-nullable header_discount cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($header_discount)))) {
            throw new \InvalidArgumentException("invalid value for \$header_discount when calling PurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['header_discount'] = $header_discount;

        return $this;
    }

    /**
     * Gets header_surcharge
     *
     * @return float|null
     */
    public function getHeaderSurcharge()
    {
        return $this->container['header_surcharge'];
    }

    /**
     * Sets header_surcharge
     *
     * @param float|null $header_surcharge header_surcharge
     *
     * @return self
     */
    public function setHeaderSurcharge($header_surcharge)
    {
        if (is_null($header_surcharge)) {
            throw new \InvalidArgumentException('non-nullable header_surcharge cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($header_surcharge)))) {
            throw new \InvalidArgumentException("invalid value for \$header_surcharge when calling PurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['header_surcharge'] = $header_surcharge;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount when calling PurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets net_amount_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountInCompanyCurrency()
    {
        return $this->container['net_amount_in_company_currency'];
    }

    /**
     * Sets net_amount_in_company_currency
     *
     * @param float|null $net_amount_in_company_currency net_amount_in_company_currency
     *
     * @return self
     */
    public function setNetAmountInCompanyCurrency($net_amount_in_company_currency)
    {
        if (is_null($net_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_in_company_currency when calling PurchaseOrder., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_in_company_currency'] = $net_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets non_standard_tax_id
     *
     * @return string|null
     */
    public function getNonStandardTaxId()
    {
        return $this->container['non_standard_tax_id'];
    }

    /**
     * Sets non_standard_tax_id
     *
     * @param string|null $non_standard_tax_id non_standard_tax_id
     *
     * @return self
     */
    public function setNonStandardTaxId($non_standard_tax_id)
    {
        if (is_null($non_standard_tax_id)) {
            throw new \InvalidArgumentException('non-nullable non_standard_tax_id cannot be null');
        }
        $this->container['non_standard_tax_id'] = $non_standard_tax_id;

        return $this;
    }

    /**
     * Gets non_standard_tax_name
     *
     * @return string|null
     * @deprecated
     */
    public function getNonStandardTaxName()
    {
        return $this->container['non_standard_tax_name'];
    }

    /**
     * Sets non_standard_tax_name
     *
     * @param string|null $non_standard_tax_name non_standard_tax_name
     *
     * @return self
     * @deprecated
     */
    public function setNonStandardTaxName($non_standard_tax_name)
    {
        if (is_null($non_standard_tax_name)) {
            throw new \InvalidArgumentException('non-nullable non_standard_tax_name cannot be null');
        }
        $this->container['non_standard_tax_name'] = $non_standard_tax_name;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets payment_method_name
     *
     * @return string|null
     * @deprecated
     */
    public function getPaymentMethodName()
    {
        return $this->container['payment_method_name'];
    }

    /**
     * Sets payment_method_name
     *
     * @param string|null $payment_method_name payment_method_name
     *
     * @return self
     * @deprecated
     */
    public function setPaymentMethodName($payment_method_name)
    {
        if (is_null($payment_method_name)) {
            throw new \InvalidArgumentException('non-nullable payment_method_name cannot be null');
        }
        $this->container['payment_method_name'] = $payment_method_name;

        return $this;
    }

    /**
     * Gets record_currency_id
     *
     * @return string|null
     */
    public function getRecordCurrencyId()
    {
        return $this->container['record_currency_id'];
    }

    /**
     * Sets record_currency_id
     *
     * @param string|null $record_currency_id record_currency_id
     *
     * @return self
     */
    public function setRecordCurrencyId($record_currency_id)
    {
        if (is_null($record_currency_id)) {
            throw new \InvalidArgumentException('non-nullable record_currency_id cannot be null');
        }
        $this->container['record_currency_id'] = $record_currency_id;

        return $this;
    }

    /**
     * Gets record_currency_name
     *
     * @return string|null
     * @deprecated
     */
    public function getRecordCurrencyName()
    {
        return $this->container['record_currency_name'];
    }

    /**
     * Sets record_currency_name
     *
     * @param string|null $record_currency_name record_currency_name
     *
     * @return self
     * @deprecated
     */
    public function setRecordCurrencyName($record_currency_name)
    {
        if (is_null($record_currency_name)) {
            throw new \InvalidArgumentException('non-nullable record_currency_name cannot be null');
        }
        $this->container['record_currency_name'] = $record_currency_name;

        return $this;
    }

    /**
     * Gets term_of_payment_id
     *
     * @return string|null
     */
    public function getTermOfPaymentId()
    {
        return $this->container['term_of_payment_id'];
    }

    /**
     * Sets term_of_payment_id
     *
     * @param string|null $term_of_payment_id term_of_payment_id
     *
     * @return self
     */
    public function setTermOfPaymentId($term_of_payment_id)
    {
        if (is_null($term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_id cannot be null');
        }
        $this->container['term_of_payment_id'] = $term_of_payment_id;

        return $this;
    }

    /**
     * Gets term_of_payment_name
     *
     * @return string|null
     * @deprecated
     */
    public function getTermOfPaymentName()
    {
        return $this->container['term_of_payment_name'];
    }

    /**
     * Sets term_of_payment_name
     *
     * @param string|null $term_of_payment_name term_of_payment_name
     *
     * @return self
     * @deprecated
     */
    public function setTermOfPaymentName($term_of_payment_name)
    {
        if (is_null($term_of_payment_name)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_name cannot be null');
        }
        $this->container['term_of_payment_name'] = $term_of_payment_name;

        return $this;
    }

    /**
     * Gets record_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getRecordEmailAddresses()
    {
        return $this->container['record_email_addresses'];
    }

    /**
     * Sets record_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $record_email_addresses record_email_addresses
     *
     * @return self
     */
    public function setRecordEmailAddresses($record_email_addresses)
    {
        if (is_null($record_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable record_email_addresses cannot be null');
        }
        $this->container['record_email_addresses'] = $record_email_addresses;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets responsible_user_username
     *
     * @return string|null
     * @deprecated
     */
    public function getResponsibleUserUsername()
    {
        return $this->container['responsible_user_username'];
    }

    /**
     * Sets responsible_user_username
     *
     * @param string|null $responsible_user_username responsible_user_username
     *
     * @return self
     * @deprecated
     */
    public function setResponsibleUserUsername($responsible_user_username)
    {
        if (is_null($responsible_user_username)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_username cannot be null');
        }
        $this->container['responsible_user_username'] = $responsible_user_username;

        return $this;
    }

    /**
     * Gets service_period_from
     *
     * @return int|null
     */
    public function getServicePeriodFrom()
    {
        return $this->container['service_period_from'];
    }

    /**
     * Sets service_period_from
     *
     * @param int|null $service_period_from service_period_from
     *
     * @return self
     */
    public function setServicePeriodFrom($service_period_from)
    {
        if (is_null($service_period_from)) {
            throw new \InvalidArgumentException('non-nullable service_period_from cannot be null');
        }
        $this->container['service_period_from'] = $service_period_from;

        return $this;
    }

    /**
     * Gets service_period_to
     *
     * @return int|null
     */
    public function getServicePeriodTo()
    {
        return $this->container['service_period_to'];
    }

    /**
     * Sets service_period_to
     *
     * @param int|null $service_period_to service_period_to
     *
     * @return self
     */
    public function setServicePeriodTo($service_period_to)
    {
        if (is_null($service_period_to)) {
            throw new \InvalidArgumentException('non-nullable service_period_to cannot be null');
        }
        $this->container['service_period_to'] = $service_period_to;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string|null $supplier_id supplier_id
     *
     * @return self
     */
    public function setSupplierId($supplier_id)
    {
        if (is_null($supplier_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_id cannot be null');
        }
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets supplier_number
     *
     * @return string|null
     * @deprecated
     */
    public function getSupplierNumber()
    {
        return $this->container['supplier_number'];
    }

    /**
     * Sets supplier_number
     *
     * @param string|null $supplier_number supplier_number
     *
     * @return self
     * @deprecated
     */
    public function setSupplierNumber($supplier_number)
    {
        if (is_null($supplier_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_number cannot be null');
        }
        $this->container['supplier_number'] = $supplier_number;

        return $this;
    }

    /**
     * Gets advance_payment_status
     *
     * @return \kruegge82\weclapp\Model\AdvancePaymentStatus|null
     */
    public function getAdvancePaymentStatus()
    {
        return $this->container['advance_payment_status'];
    }

    /**
     * Sets advance_payment_status
     *
     * @param \kruegge82\weclapp\Model\AdvancePaymentStatus|null $advance_payment_status advance_payment_status
     *
     * @return self
     */
    public function setAdvancePaymentStatus($advance_payment_status)
    {
        if (is_null($advance_payment_status)) {
            throw new \InvalidArgumentException('non-nullable advance_payment_status cannot be null');
        }
        $this->container['advance_payment_status'] = $advance_payment_status;

        return $this;
    }

    /**
     * Gets commercial_language_customer
     *
     * @return string|null
     */
    public function getCommercialLanguageCustomer()
    {
        return $this->container['commercial_language_customer'];
    }

    /**
     * Sets commercial_language_customer
     *
     * @param string|null $commercial_language_customer commercial_language_customer
     *
     * @return self
     */
    public function setCommercialLanguageCustomer($commercial_language_customer)
    {
        if (is_null($commercial_language_customer)) {
            throw new \InvalidArgumentException('non-nullable commercial_language_customer cannot be null');
        }
        $this->container['commercial_language_customer'] = $commercial_language_customer;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return string|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param string|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        if ((mb_strlen($commission) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commission when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets confirmation_number
     *
     * @return string|null
     */
    public function getConfirmationNumber()
    {
        return $this->container['confirmation_number'];
    }

    /**
     * Sets confirmation_number
     *
     * @param string|null $confirmation_number confirmation_number
     *
     * @return self
     */
    public function setConfirmationNumber($confirmation_number)
    {
        if (is_null($confirmation_number)) {
            throw new \InvalidArgumentException('non-nullable confirmation_number cannot be null');
        }
        if ((mb_strlen($confirmation_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $confirmation_number when calling PurchaseOrder., must be smaller than or equal to 30.');
        }

        $this->container['confirmation_number'] = $confirmation_number;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets dropshipping_delivery_note_form_texts
     *
     * @return \kruegge82\weclapp\Model\DropshippingDeliveryNoteFormTextBlockData|null
     */
    public function getDropshippingDeliveryNoteFormTexts()
    {
        return $this->container['dropshipping_delivery_note_form_texts'];
    }

    /**
     * Sets dropshipping_delivery_note_form_texts
     *
     * @param \kruegge82\weclapp\Model\DropshippingDeliveryNoteFormTextBlockData|null $dropshipping_delivery_note_form_texts dropshipping_delivery_note_form_texts
     *
     * @return self
     */
    public function setDropshippingDeliveryNoteFormTexts($dropshipping_delivery_note_form_texts)
    {
        if (is_null($dropshipping_delivery_note_form_texts)) {
            throw new \InvalidArgumentException('non-nullable dropshipping_delivery_note_form_texts cannot be null');
        }
        $this->container['dropshipping_delivery_note_form_texts'] = $dropshipping_delivery_note_form_texts;

        return $this;
    }

    /**
     * Gets external_purchase_order_number
     *
     * @return string|null
     */
    public function getExternalPurchaseOrderNumber()
    {
        return $this->container['external_purchase_order_number'];
    }

    /**
     * Sets external_purchase_order_number
     *
     * @param string|null $external_purchase_order_number external_purchase_order_number
     *
     * @return self
     */
    public function setExternalPurchaseOrderNumber($external_purchase_order_number)
    {
        if (is_null($external_purchase_order_number)) {
            throw new \InvalidArgumentException('non-nullable external_purchase_order_number cannot be null');
        }
        if ((mb_strlen($external_purchase_order_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_purchase_order_number when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['external_purchase_order_number'] = $external_purchase_order_number;

        return $this;
    }

    /**
     * Gets form_settings_from_sales_channel
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel|null
     */
    public function getFormSettingsFromSalesChannel()
    {
        return $this->container['form_settings_from_sales_channel'];
    }

    /**
     * Sets form_settings_from_sales_channel
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel|null $form_settings_from_sales_channel form_settings_from_sales_channel
     *
     * @return self
     */
    public function setFormSettingsFromSalesChannel($form_settings_from_sales_channel)
    {
        if (is_null($form_settings_from_sales_channel)) {
            throw new \InvalidArgumentException('non-nullable form_settings_from_sales_channel cannot be null');
        }
        $this->container['form_settings_from_sales_channel'] = $form_settings_from_sales_channel;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets invoiced
     *
     * @return bool|null
     */
    public function getInvoiced()
    {
        return $this->container['invoiced'];
    }

    /**
     * Sets invoiced
     *
     * @param bool|null $invoiced invoiced
     *
     * @return self
     */
    public function setInvoiced($invoiced)
    {
        if (is_null($invoiced)) {
            throw new \InvalidArgumentException('non-nullable invoiced cannot be null');
        }
        $this->container['invoiced'] = $invoiced;

        return $this;
    }

    /**
     * Gets merged_to_purchase_order_id
     *
     * @return string|null
     */
    public function getMergedToPurchaseOrderId()
    {
        return $this->container['merged_to_purchase_order_id'];
    }

    /**
     * Sets merged_to_purchase_order_id
     *
     * @param string|null $merged_to_purchase_order_id merged_to_purchase_order_id
     *
     * @return self
     */
    public function setMergedToPurchaseOrderId($merged_to_purchase_order_id)
    {
        if (is_null($merged_to_purchase_order_id)) {
            throw new \InvalidArgumentException('non-nullable merged_to_purchase_order_id cannot be null');
        }
        $this->container['merged_to_purchase_order_id'] = $merged_to_purchase_order_id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        if ((mb_strlen($note) > 512)) {
            throw new \InvalidArgumentException('invalid length for $note when calling PurchaseOrder., must be smaller than or equal to 512.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return int|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param int|null $order_date order_date
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        if (is_null($order_date)) {
            throw new \InvalidArgumentException('non-nullable order_date cannot be null');
        }
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets package_tracking_number
     *
     * @return string|null
     */
    public function getPackageTrackingNumber()
    {
        return $this->container['package_tracking_number'];
    }

    /**
     * Sets package_tracking_number
     *
     * @param string|null $package_tracking_number package_tracking_number
     *
     * @return self
     */
    public function setPackageTrackingNumber($package_tracking_number)
    {
        if (is_null($package_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable package_tracking_number cannot be null');
        }
        if ((mb_strlen($package_tracking_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $package_tracking_number when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['package_tracking_number'] = $package_tracking_number;

        return $this;
    }

    /**
     * Gets package_tracking_url
     *
     * @return string|null
     */
    public function getPackageTrackingUrl()
    {
        return $this->container['package_tracking_url'];
    }

    /**
     * Sets package_tracking_url
     *
     * @param string|null $package_tracking_url package_tracking_url
     *
     * @return self
     */
    public function setPackageTrackingUrl($package_tracking_url)
    {
        if (is_null($package_tracking_url)) {
            throw new \InvalidArgumentException('non-nullable package_tracking_url cannot be null');
        }
        if ((mb_strlen($package_tracking_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $package_tracking_url when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['package_tracking_url'] = $package_tracking_url;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool|null $paid paid
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets planned_delivery_date
     *
     * @return int|null
     */
    public function getPlannedDeliveryDate()
    {
        return $this->container['planned_delivery_date'];
    }

    /**
     * Sets planned_delivery_date
     *
     * @param int|null $planned_delivery_date planned_delivery_date
     *
     * @return self
     */
    public function setPlannedDeliveryDate($planned_delivery_date)
    {
        if (is_null($planned_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable planned_delivery_date cannot be null');
        }
        $this->container['planned_delivery_date'] = $planned_delivery_date;

        return $this;
    }

    /**
     * Gets planned_shipping_date
     *
     * @return int|null
     */
    public function getPlannedShippingDate()
    {
        return $this->container['planned_shipping_date'];
    }

    /**
     * Sets planned_shipping_date
     *
     * @param int|null $planned_shipping_date planned_shipping_date
     *
     * @return self
     */
    public function setPlannedShippingDate($planned_shipping_date)
    {
        if (is_null($planned_shipping_date)) {
            throw new \InvalidArgumentException('non-nullable planned_shipping_date cannot be null');
        }
        $this->container['planned_shipping_date'] = $planned_shipping_date;

        return $this;
    }

    /**
     * Gets purchase_order_items
     *
     * @return \kruegge82\weclapp\Model\PurchaseOrderItem[]|null
     */
    public function getPurchaseOrderItems()
    {
        return $this->container['purchase_order_items'];
    }

    /**
     * Sets purchase_order_items
     *
     * @param \kruegge82\weclapp\Model\PurchaseOrderItem[]|null $purchase_order_items purchase_order_items
     *
     * @return self
     */
    public function setPurchaseOrderItems($purchase_order_items)
    {
        if (is_null($purchase_order_items)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_items cannot be null');
        }
        $this->container['purchase_order_items'] = $purchase_order_items;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string|null
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string|null $purchase_order_number purchase_order_number
     *
     * @return self
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        if (is_null($purchase_order_number)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_number cannot be null');
        }
        if ((mb_strlen($purchase_order_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_number when calling PurchaseOrder., must be smaller than or equal to 30.');
        }

        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets purchase_order_request_id
     *
     * @return string|null
     */
    public function getPurchaseOrderRequestId()
    {
        return $this->container['purchase_order_request_id'];
    }

    /**
     * Sets purchase_order_request_id
     *
     * @param string|null $purchase_order_request_id purchase_order_request_id
     *
     * @return self
     */
    public function setPurchaseOrderRequestId($purchase_order_request_id)
    {
        if (is_null($purchase_order_request_id)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_request_id cannot be null');
        }
        $this->container['purchase_order_request_id'] = $purchase_order_request_id;

        return $this;
    }

    /**
     * Gets purchase_order_type
     *
     * @return \kruegge82\weclapp\Model\SupplierOrderType|null
     */
    public function getPurchaseOrderType()
    {
        return $this->container['purchase_order_type'];
    }

    /**
     * Sets purchase_order_type
     *
     * @param \kruegge82\weclapp\Model\SupplierOrderType|null $purchase_order_type purchase_order_type
     *
     * @return self
     */
    public function setPurchaseOrderType($purchase_order_type)
    {
        if (is_null($purchase_order_type)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_type cannot be null');
        }
        $this->container['purchase_order_type'] = $purchase_order_type;

        return $this;
    }

    /**
     * Gets received
     *
     * @return bool|null
     */
    public function getReceived()
    {
        return $this->container['received'];
    }

    /**
     * Sets received
     *
     * @param bool|null $received received
     *
     * @return self
     */
    public function setReceived($received)
    {
        if (is_null($received)) {
            throw new \InvalidArgumentException('non-nullable received cannot be null');
        }
        $this->container['received'] = $received;

        return $this;
    }

    /**
     * Gets record_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getRecordAddress()
    {
        return $this->container['record_address'];
    }

    /**
     * Sets record_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $record_address record_address
     *
     * @return self
     */
    public function setRecordAddress($record_address)
    {
        if (is_null($record_address)) {
            throw new \InvalidArgumentException('non-nullable record_address cannot be null');
        }
        $this->container['record_address'] = $record_address;

        return $this;
    }

    /**
     * Gets sales_order_id
     *
     * @return string|null
     */
    public function getSalesOrderId()
    {
        return $this->container['sales_order_id'];
    }

    /**
     * Sets sales_order_id
     *
     * @param string|null $sales_order_id sales_order_id
     *
     * @return self
     */
    public function setSalesOrderId($sales_order_id)
    {
        if (is_null($sales_order_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_id cannot be null');
        }
        $this->container['sales_order_id'] = $sales_order_id;

        return $this;
    }

    /**
     * Gets sales_order_number
     *
     * @return string|null
     * @deprecated
     */
    public function getSalesOrderNumber()
    {
        return $this->container['sales_order_number'];
    }

    /**
     * Sets sales_order_number
     *
     * @param string|null $sales_order_number sales_order_number
     *
     * @return self
     * @deprecated
     */
    public function setSalesOrderNumber($sales_order_number)
    {
        if (is_null($sales_order_number)) {
            throw new \InvalidArgumentException('non-nullable sales_order_number cannot be null');
        }
        $this->container['sales_order_number'] = $sales_order_number;

        return $this;
    }

    /**
     * Gets sender_country_code
     *
     * @return string|null
     */
    public function getSenderCountryCode()
    {
        return $this->container['sender_country_code'];
    }

    /**
     * Sets sender_country_code
     *
     * @param string|null $sender_country_code sender_country_code
     *
     * @return self
     */
    public function setSenderCountryCode($sender_country_code)
    {
        if (is_null($sender_country_code)) {
            throw new \InvalidArgumentException('non-nullable sender_country_code cannot be null');
        }
        $this->container['sender_country_code'] = $sender_country_code;

        return $this;
    }

    /**
     * Gets shipment_method_id
     *
     * @return string|null
     */
    public function getShipmentMethodId()
    {
        return $this->container['shipment_method_id'];
    }

    /**
     * Sets shipment_method_id
     *
     * @param string|null $shipment_method_id shipment_method_id
     *
     * @return self
     */
    public function setShipmentMethodId($shipment_method_id)
    {
        if (is_null($shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_id cannot be null');
        }
        $this->container['shipment_method_id'] = $shipment_method_id;

        return $this;
    }

    /**
     * Gets shipment_method_name
     *
     * @return string|null
     * @deprecated
     */
    public function getShipmentMethodName()
    {
        return $this->container['shipment_method_name'];
    }

    /**
     * Sets shipment_method_name
     *
     * @param string|null $shipment_method_name shipment_method_name
     *
     * @return self
     * @deprecated
     */
    public function setShipmentMethodName($shipment_method_name)
    {
        if (is_null($shipment_method_name)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_name cannot be null');
        }
        $this->container['shipment_method_name'] = $shipment_method_name;

        return $this;
    }

    /**
     * Gets shipping_carrier_id
     *
     * @return string|null
     */
    public function getShippingCarrierId()
    {
        return $this->container['shipping_carrier_id'];
    }

    /**
     * Sets shipping_carrier_id
     *
     * @param string|null $shipping_carrier_id shipping_carrier_id
     *
     * @return self
     */
    public function setShippingCarrierId($shipping_carrier_id)
    {
        if (is_null($shipping_carrier_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_carrier_id cannot be null');
        }
        $this->container['shipping_carrier_id'] = $shipping_carrier_id;

        return $this;
    }

    /**
     * Gets shipping_cost_items
     *
     * @return \kruegge82\weclapp\Model\PurchaseOrderShippingCostItem[]|null
     */
    public function getShippingCostItems()
    {
        return $this->container['shipping_cost_items'];
    }

    /**
     * Sets shipping_cost_items
     *
     * @param \kruegge82\weclapp\Model\PurchaseOrderShippingCostItem[]|null $shipping_cost_items shipping_cost_items
     *
     * @return self
     */
    public function setShippingCostItems($shipping_cost_items)
    {
        if (is_null($shipping_cost_items)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost_items cannot be null');
        }
        $this->container['shipping_cost_items'] = $shipping_cost_items;

        return $this;
    }

    /**
     * Gets shipping_notification_date
     *
     * @return int|null
     */
    public function getShippingNotificationDate()
    {
        return $this->container['shipping_notification_date'];
    }

    /**
     * Sets shipping_notification_date
     *
     * @param int|null $shipping_notification_date shipping_notification_date
     *
     * @return self
     */
    public function setShippingNotificationDate($shipping_notification_date)
    {
        if (is_null($shipping_notification_date)) {
            throw new \InvalidArgumentException('non-nullable shipping_notification_date cannot be null');
        }
        $this->container['shipping_notification_date'] = $shipping_notification_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\SupplierOrderStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\SupplierOrderStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\PurchaseOrderStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\PurchaseOrderStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets supplier_habitual_exporter_letter_of_intent_id
     *
     * @return string|null
     */
    public function getSupplierHabitualExporterLetterOfIntentId()
    {
        return $this->container['supplier_habitual_exporter_letter_of_intent_id'];
    }

    /**
     * Sets supplier_habitual_exporter_letter_of_intent_id
     *
     * @param string|null $supplier_habitual_exporter_letter_of_intent_id supplier_habitual_exporter_letter_of_intent_id
     *
     * @return self
     */
    public function setSupplierHabitualExporterLetterOfIntentId($supplier_habitual_exporter_letter_of_intent_id)
    {
        if (is_null($supplier_habitual_exporter_letter_of_intent_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_habitual_exporter_letter_of_intent_id cannot be null');
        }
        $this->container['supplier_habitual_exporter_letter_of_intent_id'] = $supplier_habitual_exporter_letter_of_intent_id;

        return $this;
    }

    /**
     * Gets supplier_quotation_number
     *
     * @return string|null
     */
    public function getSupplierQuotationNumber()
    {
        return $this->container['supplier_quotation_number'];
    }

    /**
     * Sets supplier_quotation_number
     *
     * @param string|null $supplier_quotation_number supplier_quotation_number
     *
     * @return self
     */
    public function setSupplierQuotationNumber($supplier_quotation_number)
    {
        if (is_null($supplier_quotation_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_quotation_number cannot be null');
        }
        if ((mb_strlen($supplier_quotation_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $supplier_quotation_number when calling PurchaseOrder., must be smaller than or equal to 255.');
        }

        $this->container['supplier_quotation_number'] = $supplier_quotation_number;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets warehouse_name
     *
     * @return string|null
     * @deprecated
     */
    public function getWarehouseName()
    {
        return $this->container['warehouse_name'];
    }

    /**
     * Sets warehouse_name
     *
     * @param string|null $warehouse_name warehouse_name
     *
     * @return self
     * @deprecated
     */
    public function setWarehouseName($warehouse_name)
    {
        if (is_null($warehouse_name)) {
            throw new \InvalidArgumentException('non-nullable warehouse_name cannot be null');
        }
        $this->container['warehouse_name'] = $warehouse_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


