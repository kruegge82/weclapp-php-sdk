<?php
/**
 * RecordEmailingRule
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * RecordEmailingRule Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecordEmailingRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recordEmailingRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'active' => 'bool',
        'attach_purchase_order_request_csv_file' => 'bool',
        'attach_record_document' => 'bool',
        'attach_return_label' => 'bool',
        'attach_shipping_label' => 'bool',
        'bcc_recipients' => 'string',
        'cc_recipients' => 'string',
        'event' => '\kruegge82\weclapp\Model\RecordEmailingRuleEventType',
        'mail_account_id' => 'string',
        'name' => 'string',
        'other_recipients' => 'string',
        'payment_method_types' => '\kruegge82\weclapp\Model\OnlyId[]',
        'recipient_type' => '\kruegge82\weclapp\Model\RecordEmailingRuleRecipientType',
        'sales_channels' => '\kruegge82\weclapp\Model\DistributionChannel[]',
        'sales_invoice_origin' => '\kruegge82\weclapp\Model\SalesInvoiceOrigin',
        'sales_invoice_types' => '\kruegge82\weclapp\Model\SalesInvoiceType[]',
        'shipment_out_types' => '\kruegge82\weclapp\Model\ShipmentOutType[]',
        'template_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'active' => null,
        'attach_purchase_order_request_csv_file' => null,
        'attach_record_document' => null,
        'attach_return_label' => null,
        'attach_shipping_label' => null,
        'bcc_recipients' => null,
        'cc_recipients' => null,
        'event' => null,
        'mail_account_id' => null,
        'name' => null,
        'other_recipients' => null,
        'payment_method_types' => null,
        'recipient_type' => null,
        'sales_channels' => null,
        'sales_invoice_origin' => null,
        'sales_invoice_types' => null,
        'shipment_out_types' => null,
        'template_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'active' => false,
        'attach_purchase_order_request_csv_file' => false,
        'attach_record_document' => false,
        'attach_return_label' => false,
        'attach_shipping_label' => false,
        'bcc_recipients' => false,
        'cc_recipients' => false,
        'event' => false,
        'mail_account_id' => false,
        'name' => false,
        'other_recipients' => false,
        'payment_method_types' => false,
        'recipient_type' => false,
        'sales_channels' => false,
        'sales_invoice_origin' => false,
        'sales_invoice_types' => false,
        'shipment_out_types' => false,
        'template_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'active' => 'active',
        'attach_purchase_order_request_csv_file' => 'attachPurchaseOrderRequestCsvFile',
        'attach_record_document' => 'attachRecordDocument',
        'attach_return_label' => 'attachReturnLabel',
        'attach_shipping_label' => 'attachShippingLabel',
        'bcc_recipients' => 'bccRecipients',
        'cc_recipients' => 'ccRecipients',
        'event' => 'event',
        'mail_account_id' => 'mailAccountId',
        'name' => 'name',
        'other_recipients' => 'otherRecipients',
        'payment_method_types' => 'paymentMethodTypes',
        'recipient_type' => 'recipientType',
        'sales_channels' => 'salesChannels',
        'sales_invoice_origin' => 'salesInvoiceOrigin',
        'sales_invoice_types' => 'salesInvoiceTypes',
        'shipment_out_types' => 'shipmentOutTypes',
        'template_id' => 'templateId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'active' => 'setActive',
        'attach_purchase_order_request_csv_file' => 'setAttachPurchaseOrderRequestCsvFile',
        'attach_record_document' => 'setAttachRecordDocument',
        'attach_return_label' => 'setAttachReturnLabel',
        'attach_shipping_label' => 'setAttachShippingLabel',
        'bcc_recipients' => 'setBccRecipients',
        'cc_recipients' => 'setCcRecipients',
        'event' => 'setEvent',
        'mail_account_id' => 'setMailAccountId',
        'name' => 'setName',
        'other_recipients' => 'setOtherRecipients',
        'payment_method_types' => 'setPaymentMethodTypes',
        'recipient_type' => 'setRecipientType',
        'sales_channels' => 'setSalesChannels',
        'sales_invoice_origin' => 'setSalesInvoiceOrigin',
        'sales_invoice_types' => 'setSalesInvoiceTypes',
        'shipment_out_types' => 'setShipmentOutTypes',
        'template_id' => 'setTemplateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'active' => 'getActive',
        'attach_purchase_order_request_csv_file' => 'getAttachPurchaseOrderRequestCsvFile',
        'attach_record_document' => 'getAttachRecordDocument',
        'attach_return_label' => 'getAttachReturnLabel',
        'attach_shipping_label' => 'getAttachShippingLabel',
        'bcc_recipients' => 'getBccRecipients',
        'cc_recipients' => 'getCcRecipients',
        'event' => 'getEvent',
        'mail_account_id' => 'getMailAccountId',
        'name' => 'getName',
        'other_recipients' => 'getOtherRecipients',
        'payment_method_types' => 'getPaymentMethodTypes',
        'recipient_type' => 'getRecipientType',
        'sales_channels' => 'getSalesChannels',
        'sales_invoice_origin' => 'getSalesInvoiceOrigin',
        'sales_invoice_types' => 'getSalesInvoiceTypes',
        'shipment_out_types' => 'getShipmentOutTypes',
        'template_id' => 'getTemplateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('attach_purchase_order_request_csv_file', $data ?? [], null);
        $this->setIfExists('attach_record_document', $data ?? [], null);
        $this->setIfExists('attach_return_label', $data ?? [], null);
        $this->setIfExists('attach_shipping_label', $data ?? [], null);
        $this->setIfExists('bcc_recipients', $data ?? [], null);
        $this->setIfExists('cc_recipients', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('mail_account_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('other_recipients', $data ?? [], null);
        $this->setIfExists('payment_method_types', $data ?? [], null);
        $this->setIfExists('recipient_type', $data ?? [], null);
        $this->setIfExists('sales_channels', $data ?? [], null);
        $this->setIfExists('sales_invoice_origin', $data ?? [], null);
        $this->setIfExists('sales_invoice_types', $data ?? [], null);
        $this->setIfExists('shipment_out_types', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bcc_recipients']) && (mb_strlen($this->container['bcc_recipients']) > 1000)) {
            $invalidProperties[] = "invalid value for 'bcc_recipients', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['cc_recipients']) && (mb_strlen($this->container['cc_recipients']) > 1000)) {
            $invalidProperties[] = "invalid value for 'cc_recipients', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['other_recipients']) && (mb_strlen($this->container['other_recipients']) > 1000)) {
            $invalidProperties[] = "invalid value for 'other_recipients', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets attach_purchase_order_request_csv_file
     *
     * @return bool|null
     */
    public function getAttachPurchaseOrderRequestCsvFile()
    {
        return $this->container['attach_purchase_order_request_csv_file'];
    }

    /**
     * Sets attach_purchase_order_request_csv_file
     *
     * @param bool|null $attach_purchase_order_request_csv_file attach_purchase_order_request_csv_file
     *
     * @return self
     */
    public function setAttachPurchaseOrderRequestCsvFile($attach_purchase_order_request_csv_file)
    {
        if (is_null($attach_purchase_order_request_csv_file)) {
            throw new \InvalidArgumentException('non-nullable attach_purchase_order_request_csv_file cannot be null');
        }
        $this->container['attach_purchase_order_request_csv_file'] = $attach_purchase_order_request_csv_file;

        return $this;
    }

    /**
     * Gets attach_record_document
     *
     * @return bool|null
     */
    public function getAttachRecordDocument()
    {
        return $this->container['attach_record_document'];
    }

    /**
     * Sets attach_record_document
     *
     * @param bool|null $attach_record_document attach_record_document
     *
     * @return self
     */
    public function setAttachRecordDocument($attach_record_document)
    {
        if (is_null($attach_record_document)) {
            throw new \InvalidArgumentException('non-nullable attach_record_document cannot be null');
        }
        $this->container['attach_record_document'] = $attach_record_document;

        return $this;
    }

    /**
     * Gets attach_return_label
     *
     * @return bool|null
     */
    public function getAttachReturnLabel()
    {
        return $this->container['attach_return_label'];
    }

    /**
     * Sets attach_return_label
     *
     * @param bool|null $attach_return_label attach_return_label
     *
     * @return self
     */
    public function setAttachReturnLabel($attach_return_label)
    {
        if (is_null($attach_return_label)) {
            throw new \InvalidArgumentException('non-nullable attach_return_label cannot be null');
        }
        $this->container['attach_return_label'] = $attach_return_label;

        return $this;
    }

    /**
     * Gets attach_shipping_label
     *
     * @return bool|null
     */
    public function getAttachShippingLabel()
    {
        return $this->container['attach_shipping_label'];
    }

    /**
     * Sets attach_shipping_label
     *
     * @param bool|null $attach_shipping_label attach_shipping_label
     *
     * @return self
     */
    public function setAttachShippingLabel($attach_shipping_label)
    {
        if (is_null($attach_shipping_label)) {
            throw new \InvalidArgumentException('non-nullable attach_shipping_label cannot be null');
        }
        $this->container['attach_shipping_label'] = $attach_shipping_label;

        return $this;
    }

    /**
     * Gets bcc_recipients
     *
     * @return string|null
     */
    public function getBccRecipients()
    {
        return $this->container['bcc_recipients'];
    }

    /**
     * Sets bcc_recipients
     *
     * @param string|null $bcc_recipients bcc_recipients
     *
     * @return self
     */
    public function setBccRecipients($bcc_recipients)
    {
        if (is_null($bcc_recipients)) {
            throw new \InvalidArgumentException('non-nullable bcc_recipients cannot be null');
        }
        if ((mb_strlen($bcc_recipients) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $bcc_recipients when calling RecordEmailingRule., must be smaller than or equal to 1000.');
        }

        $this->container['bcc_recipients'] = $bcc_recipients;

        return $this;
    }

    /**
     * Gets cc_recipients
     *
     * @return string|null
     */
    public function getCcRecipients()
    {
        return $this->container['cc_recipients'];
    }

    /**
     * Sets cc_recipients
     *
     * @param string|null $cc_recipients cc_recipients
     *
     * @return self
     */
    public function setCcRecipients($cc_recipients)
    {
        if (is_null($cc_recipients)) {
            throw new \InvalidArgumentException('non-nullable cc_recipients cannot be null');
        }
        if ((mb_strlen($cc_recipients) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $cc_recipients when calling RecordEmailingRule., must be smaller than or equal to 1000.');
        }

        $this->container['cc_recipients'] = $cc_recipients;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \kruegge82\weclapp\Model\RecordEmailingRuleEventType|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \kruegge82\weclapp\Model\RecordEmailingRuleEventType|null $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets mail_account_id
     *
     * @return string|null
     */
    public function getMailAccountId()
    {
        return $this->container['mail_account_id'];
    }

    /**
     * Sets mail_account_id
     *
     * @param string|null $mail_account_id mail_account_id
     *
     * @return self
     */
    public function setMailAccountId($mail_account_id)
    {
        if (is_null($mail_account_id)) {
            throw new \InvalidArgumentException('non-nullable mail_account_id cannot be null');
        }
        $this->container['mail_account_id'] = $mail_account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RecordEmailingRule., must be smaller than or equal to 1000.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets other_recipients
     *
     * @return string|null
     */
    public function getOtherRecipients()
    {
        return $this->container['other_recipients'];
    }

    /**
     * Sets other_recipients
     *
     * @param string|null $other_recipients other_recipients
     *
     * @return self
     */
    public function setOtherRecipients($other_recipients)
    {
        if (is_null($other_recipients)) {
            throw new \InvalidArgumentException('non-nullable other_recipients cannot be null');
        }
        if ((mb_strlen($other_recipients) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $other_recipients when calling RecordEmailingRule., must be smaller than or equal to 1000.');
        }

        $this->container['other_recipients'] = $other_recipients;

        return $this;
    }

    /**
     * Gets payment_method_types
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getPaymentMethodTypes()
    {
        return $this->container['payment_method_types'];
    }

    /**
     * Sets payment_method_types
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $payment_method_types payment_method_types
     *
     * @return self
     */
    public function setPaymentMethodTypes($payment_method_types)
    {
        if (is_null($payment_method_types)) {
            throw new \InvalidArgumentException('non-nullable payment_method_types cannot be null');
        }
        $this->container['payment_method_types'] = $payment_method_types;

        return $this;
    }

    /**
     * Gets recipient_type
     *
     * @return \kruegge82\weclapp\Model\RecordEmailingRuleRecipientType|null
     */
    public function getRecipientType()
    {
        return $this->container['recipient_type'];
    }

    /**
     * Sets recipient_type
     *
     * @param \kruegge82\weclapp\Model\RecordEmailingRuleRecipientType|null $recipient_type recipient_type
     *
     * @return self
     */
    public function setRecipientType($recipient_type)
    {
        if (is_null($recipient_type)) {
            throw new \InvalidArgumentException('non-nullable recipient_type cannot be null');
        }
        $this->container['recipient_type'] = $recipient_type;

        return $this;
    }

    /**
     * Gets sales_channels
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel[]|null
     */
    public function getSalesChannels()
    {
        return $this->container['sales_channels'];
    }

    /**
     * Sets sales_channels
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel[]|null $sales_channels sales_channels
     *
     * @return self
     */
    public function setSalesChannels($sales_channels)
    {
        if (is_null($sales_channels)) {
            throw new \InvalidArgumentException('non-nullable sales_channels cannot be null');
        }
        $this->container['sales_channels'] = $sales_channels;

        return $this;
    }

    /**
     * Gets sales_invoice_origin
     *
     * @return \kruegge82\weclapp\Model\SalesInvoiceOrigin|null
     */
    public function getSalesInvoiceOrigin()
    {
        return $this->container['sales_invoice_origin'];
    }

    /**
     * Sets sales_invoice_origin
     *
     * @param \kruegge82\weclapp\Model\SalesInvoiceOrigin|null $sales_invoice_origin sales_invoice_origin
     *
     * @return self
     */
    public function setSalesInvoiceOrigin($sales_invoice_origin)
    {
        if (is_null($sales_invoice_origin)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_origin cannot be null');
        }
        $this->container['sales_invoice_origin'] = $sales_invoice_origin;

        return $this;
    }

    /**
     * Gets sales_invoice_types
     *
     * @return \kruegge82\weclapp\Model\SalesInvoiceType[]|null
     */
    public function getSalesInvoiceTypes()
    {
        return $this->container['sales_invoice_types'];
    }

    /**
     * Sets sales_invoice_types
     *
     * @param \kruegge82\weclapp\Model\SalesInvoiceType[]|null $sales_invoice_types sales_invoice_types
     *
     * @return self
     */
    public function setSalesInvoiceTypes($sales_invoice_types)
    {
        if (is_null($sales_invoice_types)) {
            throw new \InvalidArgumentException('non-nullable sales_invoice_types cannot be null');
        }
        $this->container['sales_invoice_types'] = $sales_invoice_types;

        return $this;
    }

    /**
     * Gets shipment_out_types
     *
     * @return \kruegge82\weclapp\Model\ShipmentOutType[]|null
     */
    public function getShipmentOutTypes()
    {
        return $this->container['shipment_out_types'];
    }

    /**
     * Sets shipment_out_types
     *
     * @param \kruegge82\weclapp\Model\ShipmentOutType[]|null $shipment_out_types shipment_out_types
     *
     * @return self
     */
    public function setShipmentOutTypes($shipment_out_types)
    {
        if (is_null($shipment_out_types)) {
            throw new \InvalidArgumentException('non-nullable shipment_out_types cannot be null');
        }
        $this->container['shipment_out_types'] = $shipment_out_types;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string|null $template_id template_id
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            throw new \InvalidArgumentException('non-nullable template_id cannot be null');
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


