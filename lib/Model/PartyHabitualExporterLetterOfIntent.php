<?php
/**
 * PartyHabitualExporterLetterOfIntent
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * PartyHabitualExporterLetterOfIntent Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartyHabitualExporterLetterOfIntent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'partyHabitualExporterLetterOfIntent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'automatically_suggest_in_invoice' => 'bool',
        'date' => 'int',
        'from_supplier' => 'bool',
        'invoices' => '\kruegge82\weclapp\Model\OnlyId[]',
        'number_declarer' => 'string',
        'number_supplier' => 'string',
        'total_amount' => 'float',
        'type' => '\kruegge82\weclapp\Model\PartyHabitualExporterLetterOfIntentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'automatically_suggest_in_invoice' => null,
        'date' => 'timestamp',
        'from_supplier' => null,
        'invoices' => null,
        'number_declarer' => null,
        'number_supplier' => null,
        'total_amount' => 'decimal',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'automatically_suggest_in_invoice' => false,
        'date' => false,
        'from_supplier' => false,
        'invoices' => false,
        'number_declarer' => false,
        'number_supplier' => false,
        'total_amount' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'automatically_suggest_in_invoice' => 'automaticallySuggestInInvoice',
        'date' => 'date',
        'from_supplier' => 'fromSupplier',
        'invoices' => 'invoices',
        'number_declarer' => 'numberDeclarer',
        'number_supplier' => 'numberSupplier',
        'total_amount' => 'totalAmount',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'automatically_suggest_in_invoice' => 'setAutomaticallySuggestInInvoice',
        'date' => 'setDate',
        'from_supplier' => 'setFromSupplier',
        'invoices' => 'setInvoices',
        'number_declarer' => 'setNumberDeclarer',
        'number_supplier' => 'setNumberSupplier',
        'total_amount' => 'setTotalAmount',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'automatically_suggest_in_invoice' => 'getAutomaticallySuggestInInvoice',
        'date' => 'getDate',
        'from_supplier' => 'getFromSupplier',
        'invoices' => 'getInvoices',
        'number_declarer' => 'getNumberDeclarer',
        'number_supplier' => 'getNumberSupplier',
        'total_amount' => 'getTotalAmount',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('automatically_suggest_in_invoice', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('from_supplier', $data ?? [], null);
        $this->setIfExists('invoices', $data ?? [], null);
        $this->setIfExists('number_declarer', $data ?? [], null);
        $this->setIfExists('number_supplier', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number_declarer']) && (mb_strlen($this->container['number_declarer']) > 30)) {
            $invalidProperties[] = "invalid value for 'number_declarer', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['number_supplier']) && (mb_strlen($this->container['number_supplier']) > 30)) {
            $invalidProperties[] = "invalid value for 'number_supplier', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['total_amount']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['total_amount'])) {
            $invalidProperties[] = "invalid value for 'total_amount', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets automatically_suggest_in_invoice
     *
     * @return bool|null
     */
    public function getAutomaticallySuggestInInvoice()
    {
        return $this->container['automatically_suggest_in_invoice'];
    }

    /**
     * Sets automatically_suggest_in_invoice
     *
     * @param bool|null $automatically_suggest_in_invoice automatically_suggest_in_invoice
     *
     * @return self
     */
    public function setAutomaticallySuggestInInvoice($automatically_suggest_in_invoice)
    {
        if (is_null($automatically_suggest_in_invoice)) {
            throw new \InvalidArgumentException('non-nullable automatically_suggest_in_invoice cannot be null');
        }
        $this->container['automatically_suggest_in_invoice'] = $automatically_suggest_in_invoice;

        return $this;
    }

    /**
     * Gets date
     *
     * @return int|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param int|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets from_supplier
     *
     * @return bool|null
     */
    public function getFromSupplier()
    {
        return $this->container['from_supplier'];
    }

    /**
     * Sets from_supplier
     *
     * @param bool|null $from_supplier from_supplier
     *
     * @return self
     */
    public function setFromSupplier($from_supplier)
    {
        if (is_null($from_supplier)) {
            throw new \InvalidArgumentException('non-nullable from_supplier cannot be null');
        }
        $this->container['from_supplier'] = $from_supplier;

        return $this;
    }

    /**
     * Gets invoices
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getInvoices()
    {
        return $this->container['invoices'];
    }

    /**
     * Sets invoices
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $invoices invoices
     *
     * @return self
     */
    public function setInvoices($invoices)
    {
        if (is_null($invoices)) {
            throw new \InvalidArgumentException('non-nullable invoices cannot be null');
        }
        $this->container['invoices'] = $invoices;

        return $this;
    }

    /**
     * Gets number_declarer
     *
     * @return string|null
     */
    public function getNumberDeclarer()
    {
        return $this->container['number_declarer'];
    }

    /**
     * Sets number_declarer
     *
     * @param string|null $number_declarer number_declarer
     *
     * @return self
     */
    public function setNumberDeclarer($number_declarer)
    {
        if (is_null($number_declarer)) {
            throw new \InvalidArgumentException('non-nullable number_declarer cannot be null');
        }
        if ((mb_strlen($number_declarer) > 30)) {
            throw new \InvalidArgumentException('invalid length for $number_declarer when calling PartyHabitualExporterLetterOfIntent., must be smaller than or equal to 30.');
        }

        $this->container['number_declarer'] = $number_declarer;

        return $this;
    }

    /**
     * Gets number_supplier
     *
     * @return string|null
     */
    public function getNumberSupplier()
    {
        return $this->container['number_supplier'];
    }

    /**
     * Sets number_supplier
     *
     * @param string|null $number_supplier number_supplier
     *
     * @return self
     */
    public function setNumberSupplier($number_supplier)
    {
        if (is_null($number_supplier)) {
            throw new \InvalidArgumentException('non-nullable number_supplier cannot be null');
        }
        if ((mb_strlen($number_supplier) > 30)) {
            throw new \InvalidArgumentException('invalid length for $number_supplier when calling PartyHabitualExporterLetterOfIntent., must be smaller than or equal to 30.');
        }

        $this->container['number_supplier'] = $number_supplier;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($total_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$total_amount when calling PartyHabitualExporterLetterOfIntent., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \kruegge82\weclapp\Model\PartyHabitualExporterLetterOfIntentType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \kruegge82\weclapp\Model\PartyHabitualExporterLetterOfIntentType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


