<?php
/**
 * BankAccount
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * BankAccount Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'bankAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'account_holder' => 'string',
        'account_id' => 'string',
        'account_number' => 'string',
        'active' => 'bool',
        'auto_sync' => 'bool',
        'automatic_processing' => '\kruegge82\weclapp\Model\MoneyTransactionProcessingStrategy',
        'balance' => 'float',
        'bank_code' => 'string',
        'connection_failure' => 'string',
        'credit_institute' => 'string',
        'credit_institute_city' => 'string',
        'credit_institute_street' => 'string',
        'credit_institute_zip' => 'string',
        'credit_line' => 'float',
        'currency_id' => 'string',
        'different_sepa_creditor_identifier' => 'string',
        'enabled_for_electronic_payment_transactions' => 'bool',
        'iban' => 'string',
        'incidental_costs_of_monetary_traffic_account_id' => 'string',
        'incidental_costs_of_monetary_traffic_tax_id' => 'string',
        'last_download' => 'int',
        'primary' => 'bool',
        'qr_iban' => 'string',
        'qr_identifier' => 'string',
        'swift_bic' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'account_holder' => null,
        'account_id' => null,
        'account_number' => null,
        'active' => null,
        'auto_sync' => null,
        'automatic_processing' => null,
        'balance' => 'decimal',
        'bank_code' => null,
        'connection_failure' => null,
        'credit_institute' => null,
        'credit_institute_city' => null,
        'credit_institute_street' => null,
        'credit_institute_zip' => null,
        'credit_line' => 'decimal',
        'currency_id' => null,
        'different_sepa_creditor_identifier' => null,
        'enabled_for_electronic_payment_transactions' => null,
        'iban' => null,
        'incidental_costs_of_monetary_traffic_account_id' => null,
        'incidental_costs_of_monetary_traffic_tax_id' => null,
        'last_download' => 'timestamp',
        'primary' => null,
        'qr_iban' => null,
        'qr_identifier' => null,
        'swift_bic' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'account_holder' => false,
        'account_id' => false,
        'account_number' => false,
        'active' => false,
        'auto_sync' => false,
        'automatic_processing' => false,
        'balance' => false,
        'bank_code' => false,
        'connection_failure' => false,
        'credit_institute' => false,
        'credit_institute_city' => false,
        'credit_institute_street' => false,
        'credit_institute_zip' => false,
        'credit_line' => false,
        'currency_id' => false,
        'different_sepa_creditor_identifier' => false,
        'enabled_for_electronic_payment_transactions' => false,
        'iban' => false,
        'incidental_costs_of_monetary_traffic_account_id' => false,
        'incidental_costs_of_monetary_traffic_tax_id' => false,
        'last_download' => false,
        'primary' => false,
        'qr_iban' => false,
        'qr_identifier' => false,
        'swift_bic' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'account_holder' => 'accountHolder',
        'account_id' => 'accountId',
        'account_number' => 'accountNumber',
        'active' => 'active',
        'auto_sync' => 'autoSync',
        'automatic_processing' => 'automaticProcessing',
        'balance' => 'balance',
        'bank_code' => 'bankCode',
        'connection_failure' => 'connectionFailure',
        'credit_institute' => 'creditInstitute',
        'credit_institute_city' => 'creditInstituteCity',
        'credit_institute_street' => 'creditInstituteStreet',
        'credit_institute_zip' => 'creditInstituteZip',
        'credit_line' => 'creditLine',
        'currency_id' => 'currencyId',
        'different_sepa_creditor_identifier' => 'differentSepaCreditorIdentifier',
        'enabled_for_electronic_payment_transactions' => 'enabledForElectronicPaymentTransactions',
        'iban' => 'iban',
        'incidental_costs_of_monetary_traffic_account_id' => 'incidentalCostsOfMonetaryTrafficAccountId',
        'incidental_costs_of_monetary_traffic_tax_id' => 'incidentalCostsOfMonetaryTrafficTaxId',
        'last_download' => 'lastDownload',
        'primary' => 'primary',
        'qr_iban' => 'qrIban',
        'qr_identifier' => 'qrIdentifier',
        'swift_bic' => 'swiftBic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'account_holder' => 'setAccountHolder',
        'account_id' => 'setAccountId',
        'account_number' => 'setAccountNumber',
        'active' => 'setActive',
        'auto_sync' => 'setAutoSync',
        'automatic_processing' => 'setAutomaticProcessing',
        'balance' => 'setBalance',
        'bank_code' => 'setBankCode',
        'connection_failure' => 'setConnectionFailure',
        'credit_institute' => 'setCreditInstitute',
        'credit_institute_city' => 'setCreditInstituteCity',
        'credit_institute_street' => 'setCreditInstituteStreet',
        'credit_institute_zip' => 'setCreditInstituteZip',
        'credit_line' => 'setCreditLine',
        'currency_id' => 'setCurrencyId',
        'different_sepa_creditor_identifier' => 'setDifferentSepaCreditorIdentifier',
        'enabled_for_electronic_payment_transactions' => 'setEnabledForElectronicPaymentTransactions',
        'iban' => 'setIban',
        'incidental_costs_of_monetary_traffic_account_id' => 'setIncidentalCostsOfMonetaryTrafficAccountId',
        'incidental_costs_of_monetary_traffic_tax_id' => 'setIncidentalCostsOfMonetaryTrafficTaxId',
        'last_download' => 'setLastDownload',
        'primary' => 'setPrimary',
        'qr_iban' => 'setQrIban',
        'qr_identifier' => 'setQrIdentifier',
        'swift_bic' => 'setSwiftBic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'account_holder' => 'getAccountHolder',
        'account_id' => 'getAccountId',
        'account_number' => 'getAccountNumber',
        'active' => 'getActive',
        'auto_sync' => 'getAutoSync',
        'automatic_processing' => 'getAutomaticProcessing',
        'balance' => 'getBalance',
        'bank_code' => 'getBankCode',
        'connection_failure' => 'getConnectionFailure',
        'credit_institute' => 'getCreditInstitute',
        'credit_institute_city' => 'getCreditInstituteCity',
        'credit_institute_street' => 'getCreditInstituteStreet',
        'credit_institute_zip' => 'getCreditInstituteZip',
        'credit_line' => 'getCreditLine',
        'currency_id' => 'getCurrencyId',
        'different_sepa_creditor_identifier' => 'getDifferentSepaCreditorIdentifier',
        'enabled_for_electronic_payment_transactions' => 'getEnabledForElectronicPaymentTransactions',
        'iban' => 'getIban',
        'incidental_costs_of_monetary_traffic_account_id' => 'getIncidentalCostsOfMonetaryTrafficAccountId',
        'incidental_costs_of_monetary_traffic_tax_id' => 'getIncidentalCostsOfMonetaryTrafficTaxId',
        'last_download' => 'getLastDownload',
        'primary' => 'getPrimary',
        'qr_iban' => 'getQrIban',
        'qr_identifier' => 'getQrIdentifier',
        'swift_bic' => 'getSwiftBic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('account_holder', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('auto_sync', $data ?? [], null);
        $this->setIfExists('automatic_processing', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('bank_code', $data ?? [], null);
        $this->setIfExists('connection_failure', $data ?? [], null);
        $this->setIfExists('credit_institute', $data ?? [], null);
        $this->setIfExists('credit_institute_city', $data ?? [], null);
        $this->setIfExists('credit_institute_street', $data ?? [], null);
        $this->setIfExists('credit_institute_zip', $data ?? [], null);
        $this->setIfExists('credit_line', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('different_sepa_creditor_identifier', $data ?? [], null);
        $this->setIfExists('enabled_for_electronic_payment_transactions', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('incidental_costs_of_monetary_traffic_account_id', $data ?? [], null);
        $this->setIfExists('incidental_costs_of_monetary_traffic_tax_id', $data ?? [], null);
        $this->setIfExists('last_download', $data ?? [], null);
        $this->setIfExists('primary', $data ?? [], null);
        $this->setIfExists('qr_iban', $data ?? [], null);
        $this->setIfExists('qr_identifier', $data ?? [], null);
        $this->setIfExists('swift_bic', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_holder']) && (mb_strlen($this->container['account_holder']) > 300)) {
            $invalidProperties[] = "invalid value for 'account_holder', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['balance']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['balance'])) {
            $invalidProperties[] = "invalid value for 'balance', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['bank_code']) && (mb_strlen($this->container['bank_code']) > 100)) {
            $invalidProperties[] = "invalid value for 'bank_code', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['connection_failure']) && (mb_strlen($this->container['connection_failure']) > 1000)) {
            $invalidProperties[] = "invalid value for 'connection_failure', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['credit_institute']) && (mb_strlen($this->container['credit_institute']) > 400)) {
            $invalidProperties[] = "invalid value for 'credit_institute', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['credit_institute_city']) && (mb_strlen($this->container['credit_institute_city']) > 1000)) {
            $invalidProperties[] = "invalid value for 'credit_institute_city', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['credit_institute_street']) && (mb_strlen($this->container['credit_institute_street']) > 1000)) {
            $invalidProperties[] = "invalid value for 'credit_institute_street', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['credit_institute_zip']) && (mb_strlen($this->container['credit_institute_zip']) > 1000)) {
            $invalidProperties[] = "invalid value for 'credit_institute_zip', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['credit_line']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['credit_line'])) {
            $invalidProperties[] = "invalid value for 'credit_line', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['different_sepa_creditor_identifier']) && (mb_strlen($this->container['different_sepa_creditor_identifier']) > 120)) {
            $invalidProperties[] = "invalid value for 'different_sepa_creditor_identifier', the character length must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['iban']) && (mb_strlen($this->container['iban']) > 34)) {
            $invalidProperties[] = "invalid value for 'iban', the character length must be smaller than or equal to 34.";
        }

        if (!is_null($this->container['qr_iban']) && (mb_strlen($this->container['qr_iban']) > 1000)) {
            $invalidProperties[] = "invalid value for 'qr_iban', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['qr_identifier']) && (mb_strlen($this->container['qr_identifier']) > 1000)) {
            $invalidProperties[] = "invalid value for 'qr_identifier', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['swift_bic']) && (mb_strlen($this->container['swift_bic']) > 11)) {
            $invalidProperties[] = "invalid value for 'swift_bic', the character length must be smaller than or equal to 11.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets account_holder
     *
     * @return string|null
     */
    public function getAccountHolder()
    {
        return $this->container['account_holder'];
    }

    /**
     * Sets account_holder
     *
     * @param string|null $account_holder account_holder
     *
     * @return self
     */
    public function setAccountHolder($account_holder)
    {
        if (is_null($account_holder)) {
            throw new \InvalidArgumentException('non-nullable account_holder cannot be null');
        }
        if ((mb_strlen($account_holder) > 300)) {
            throw new \InvalidArgumentException('invalid length for $account_holder when calling BankAccount., must be smaller than or equal to 300.');
        }

        $this->container['account_holder'] = $account_holder;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        if ((mb_strlen($account_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling BankAccount., must be smaller than or equal to 100.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets auto_sync
     *
     * @return bool|null
     */
    public function getAutoSync()
    {
        return $this->container['auto_sync'];
    }

    /**
     * Sets auto_sync
     *
     * @param bool|null $auto_sync auto_sync
     *
     * @return self
     */
    public function setAutoSync($auto_sync)
    {
        if (is_null($auto_sync)) {
            throw new \InvalidArgumentException('non-nullable auto_sync cannot be null');
        }
        $this->container['auto_sync'] = $auto_sync;

        return $this;
    }

    /**
     * Gets automatic_processing
     *
     * @return \kruegge82\weclapp\Model\MoneyTransactionProcessingStrategy|null
     */
    public function getAutomaticProcessing()
    {
        return $this->container['automatic_processing'];
    }

    /**
     * Sets automatic_processing
     *
     * @param \kruegge82\weclapp\Model\MoneyTransactionProcessingStrategy|null $automatic_processing automatic_processing
     *
     * @return self
     */
    public function setAutomaticProcessing($automatic_processing)
    {
        if (is_null($automatic_processing)) {
            throw new \InvalidArgumentException('non-nullable automatic_processing cannot be null');
        }
        $this->container['automatic_processing'] = $automatic_processing;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($balance)))) {
            throw new \InvalidArgumentException("invalid value for \$balance when calling BankAccount., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string|null
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string|null $bank_code bank_code
     *
     * @return self
     */
    public function setBankCode($bank_code)
    {
        if (is_null($bank_code)) {
            throw new \InvalidArgumentException('non-nullable bank_code cannot be null');
        }
        if ((mb_strlen($bank_code) > 100)) {
            throw new \InvalidArgumentException('invalid length for $bank_code when calling BankAccount., must be smaller than or equal to 100.');
        }

        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets connection_failure
     *
     * @return string|null
     */
    public function getConnectionFailure()
    {
        return $this->container['connection_failure'];
    }

    /**
     * Sets connection_failure
     *
     * @param string|null $connection_failure connection_failure
     *
     * @return self
     */
    public function setConnectionFailure($connection_failure)
    {
        if (is_null($connection_failure)) {
            throw new \InvalidArgumentException('non-nullable connection_failure cannot be null');
        }
        if ((mb_strlen($connection_failure) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $connection_failure when calling BankAccount., must be smaller than or equal to 1000.');
        }

        $this->container['connection_failure'] = $connection_failure;

        return $this;
    }

    /**
     * Gets credit_institute
     *
     * @return string|null
     */
    public function getCreditInstitute()
    {
        return $this->container['credit_institute'];
    }

    /**
     * Sets credit_institute
     *
     * @param string|null $credit_institute credit_institute
     *
     * @return self
     */
    public function setCreditInstitute($credit_institute)
    {
        if (is_null($credit_institute)) {
            throw new \InvalidArgumentException('non-nullable credit_institute cannot be null');
        }
        if ((mb_strlen($credit_institute) > 400)) {
            throw new \InvalidArgumentException('invalid length for $credit_institute when calling BankAccount., must be smaller than or equal to 400.');
        }

        $this->container['credit_institute'] = $credit_institute;

        return $this;
    }

    /**
     * Gets credit_institute_city
     *
     * @return string|null
     */
    public function getCreditInstituteCity()
    {
        return $this->container['credit_institute_city'];
    }

    /**
     * Sets credit_institute_city
     *
     * @param string|null $credit_institute_city credit_institute_city
     *
     * @return self
     */
    public function setCreditInstituteCity($credit_institute_city)
    {
        if (is_null($credit_institute_city)) {
            throw new \InvalidArgumentException('non-nullable credit_institute_city cannot be null');
        }
        if ((mb_strlen($credit_institute_city) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $credit_institute_city when calling BankAccount., must be smaller than or equal to 1000.');
        }

        $this->container['credit_institute_city'] = $credit_institute_city;

        return $this;
    }

    /**
     * Gets credit_institute_street
     *
     * @return string|null
     */
    public function getCreditInstituteStreet()
    {
        return $this->container['credit_institute_street'];
    }

    /**
     * Sets credit_institute_street
     *
     * @param string|null $credit_institute_street credit_institute_street
     *
     * @return self
     */
    public function setCreditInstituteStreet($credit_institute_street)
    {
        if (is_null($credit_institute_street)) {
            throw new \InvalidArgumentException('non-nullable credit_institute_street cannot be null');
        }
        if ((mb_strlen($credit_institute_street) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $credit_institute_street when calling BankAccount., must be smaller than or equal to 1000.');
        }

        $this->container['credit_institute_street'] = $credit_institute_street;

        return $this;
    }

    /**
     * Gets credit_institute_zip
     *
     * @return string|null
     */
    public function getCreditInstituteZip()
    {
        return $this->container['credit_institute_zip'];
    }

    /**
     * Sets credit_institute_zip
     *
     * @param string|null $credit_institute_zip credit_institute_zip
     *
     * @return self
     */
    public function setCreditInstituteZip($credit_institute_zip)
    {
        if (is_null($credit_institute_zip)) {
            throw new \InvalidArgumentException('non-nullable credit_institute_zip cannot be null');
        }
        if ((mb_strlen($credit_institute_zip) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $credit_institute_zip when calling BankAccount., must be smaller than or equal to 1000.');
        }

        $this->container['credit_institute_zip'] = $credit_institute_zip;

        return $this;
    }

    /**
     * Gets credit_line
     *
     * @return float|null
     */
    public function getCreditLine()
    {
        return $this->container['credit_line'];
    }

    /**
     * Sets credit_line
     *
     * @param float|null $credit_line credit_line
     *
     * @return self
     */
    public function setCreditLine($credit_line)
    {
        if (is_null($credit_line)) {
            throw new \InvalidArgumentException('non-nullable credit_line cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($credit_line)))) {
            throw new \InvalidArgumentException("invalid value for \$credit_line when calling BankAccount., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['credit_line'] = $credit_line;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            throw new \InvalidArgumentException('non-nullable currency_id cannot be null');
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets different_sepa_creditor_identifier
     *
     * @return string|null
     */
    public function getDifferentSepaCreditorIdentifier()
    {
        return $this->container['different_sepa_creditor_identifier'];
    }

    /**
     * Sets different_sepa_creditor_identifier
     *
     * @param string|null $different_sepa_creditor_identifier different_sepa_creditor_identifier
     *
     * @return self
     */
    public function setDifferentSepaCreditorIdentifier($different_sepa_creditor_identifier)
    {
        if (is_null($different_sepa_creditor_identifier)) {
            throw new \InvalidArgumentException('non-nullable different_sepa_creditor_identifier cannot be null');
        }
        if ((mb_strlen($different_sepa_creditor_identifier) > 120)) {
            throw new \InvalidArgumentException('invalid length for $different_sepa_creditor_identifier when calling BankAccount., must be smaller than or equal to 120.');
        }

        $this->container['different_sepa_creditor_identifier'] = $different_sepa_creditor_identifier;

        return $this;
    }

    /**
     * Gets enabled_for_electronic_payment_transactions
     *
     * @return bool|null
     */
    public function getEnabledForElectronicPaymentTransactions()
    {
        return $this->container['enabled_for_electronic_payment_transactions'];
    }

    /**
     * Sets enabled_for_electronic_payment_transactions
     *
     * @param bool|null $enabled_for_electronic_payment_transactions enabled_for_electronic_payment_transactions
     *
     * @return self
     */
    public function setEnabledForElectronicPaymentTransactions($enabled_for_electronic_payment_transactions)
    {
        if (is_null($enabled_for_electronic_payment_transactions)) {
            throw new \InvalidArgumentException('non-nullable enabled_for_electronic_payment_transactions cannot be null');
        }
        $this->container['enabled_for_electronic_payment_transactions'] = $enabled_for_electronic_payment_transactions;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban iban
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }
        if ((mb_strlen($iban) > 34)) {
            throw new \InvalidArgumentException('invalid length for $iban when calling BankAccount., must be smaller than or equal to 34.');
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets incidental_costs_of_monetary_traffic_account_id
     *
     * @return string|null
     */
    public function getIncidentalCostsOfMonetaryTrafficAccountId()
    {
        return $this->container['incidental_costs_of_monetary_traffic_account_id'];
    }

    /**
     * Sets incidental_costs_of_monetary_traffic_account_id
     *
     * @param string|null $incidental_costs_of_monetary_traffic_account_id incidental_costs_of_monetary_traffic_account_id
     *
     * @return self
     */
    public function setIncidentalCostsOfMonetaryTrafficAccountId($incidental_costs_of_monetary_traffic_account_id)
    {
        if (is_null($incidental_costs_of_monetary_traffic_account_id)) {
            throw new \InvalidArgumentException('non-nullable incidental_costs_of_monetary_traffic_account_id cannot be null');
        }
        $this->container['incidental_costs_of_monetary_traffic_account_id'] = $incidental_costs_of_monetary_traffic_account_id;

        return $this;
    }

    /**
     * Gets incidental_costs_of_monetary_traffic_tax_id
     *
     * @return string|null
     */
    public function getIncidentalCostsOfMonetaryTrafficTaxId()
    {
        return $this->container['incidental_costs_of_monetary_traffic_tax_id'];
    }

    /**
     * Sets incidental_costs_of_monetary_traffic_tax_id
     *
     * @param string|null $incidental_costs_of_monetary_traffic_tax_id incidental_costs_of_monetary_traffic_tax_id
     *
     * @return self
     */
    public function setIncidentalCostsOfMonetaryTrafficTaxId($incidental_costs_of_monetary_traffic_tax_id)
    {
        if (is_null($incidental_costs_of_monetary_traffic_tax_id)) {
            throw new \InvalidArgumentException('non-nullable incidental_costs_of_monetary_traffic_tax_id cannot be null');
        }
        $this->container['incidental_costs_of_monetary_traffic_tax_id'] = $incidental_costs_of_monetary_traffic_tax_id;

        return $this;
    }

    /**
     * Gets last_download
     *
     * @return int|null
     */
    public function getLastDownload()
    {
        return $this->container['last_download'];
    }

    /**
     * Sets last_download
     *
     * @param int|null $last_download last_download
     *
     * @return self
     */
    public function setLastDownload($last_download)
    {
        if (is_null($last_download)) {
            throw new \InvalidArgumentException('non-nullable last_download cannot be null');
        }
        $this->container['last_download'] = $last_download;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return bool|null
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param bool|null $primary primary
     *
     * @return self
     */
    public function setPrimary($primary)
    {
        if (is_null($primary)) {
            throw new \InvalidArgumentException('non-nullable primary cannot be null');
        }
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets qr_iban
     *
     * @return string|null
     */
    public function getQrIban()
    {
        return $this->container['qr_iban'];
    }

    /**
     * Sets qr_iban
     *
     * @param string|null $qr_iban qr_iban
     *
     * @return self
     */
    public function setQrIban($qr_iban)
    {
        if (is_null($qr_iban)) {
            throw new \InvalidArgumentException('non-nullable qr_iban cannot be null');
        }
        if ((mb_strlen($qr_iban) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $qr_iban when calling BankAccount., must be smaller than or equal to 1000.');
        }

        $this->container['qr_iban'] = $qr_iban;

        return $this;
    }

    /**
     * Gets qr_identifier
     *
     * @return string|null
     */
    public function getQrIdentifier()
    {
        return $this->container['qr_identifier'];
    }

    /**
     * Sets qr_identifier
     *
     * @param string|null $qr_identifier qr_identifier
     *
     * @return self
     */
    public function setQrIdentifier($qr_identifier)
    {
        if (is_null($qr_identifier)) {
            throw new \InvalidArgumentException('non-nullable qr_identifier cannot be null');
        }
        if ((mb_strlen($qr_identifier) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $qr_identifier when calling BankAccount., must be smaller than or equal to 1000.');
        }

        $this->container['qr_identifier'] = $qr_identifier;

        return $this;
    }

    /**
     * Gets swift_bic
     *
     * @return string|null
     */
    public function getSwiftBic()
    {
        return $this->container['swift_bic'];
    }

    /**
     * Sets swift_bic
     *
     * @param string|null $swift_bic swift_bic
     *
     * @return self
     */
    public function setSwiftBic($swift_bic)
    {
        if (is_null($swift_bic)) {
            throw new \InvalidArgumentException('non-nullable swift_bic cannot be null');
        }
        if ((mb_strlen($swift_bic) > 11)) {
            throw new \InvalidArgumentException('invalid length for $swift_bic when calling BankAccount., must be smaller than or equal to 11.');
        }

        $this->container['swift_bic'] = $swift_bic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


