<?php
/**
 * IncomingGoods
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * IncomingGoods Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IncomingGoods implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'incomingGoods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'commercial_language' => 'string',
        'created_date' => 'int',
        'creator_id' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'customer_delivery_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'customer_invoice_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'delivery_note_number' => 'string',
        'description' => 'string',
        'dhl_receiver_id' => 'string',
        'disable_record_emailing_rule' => 'bool',
        'dropshipping_shipment_id' => 'string',
        'incoming_goods_items' => '\kruegge82\weclapp\Model\IncomingGoodsItem[]',
        'incoming_goods_number' => 'string',
        'incoming_goods_type' => 'string',
        'invoice_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'invoice_recipient_id' => 'string',
        'last_modified_date' => 'int',
        'purchase_orders' => '\kruegge82\weclapp\Model\OnlyId[]',
        'recipient_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'record_comment' => 'string',
        'record_free_text' => 'string',
        'record_opening' => 'string',
        'related_shipment_id' => 'string',
        'responsible_user_id' => 'string',
        'return_address' => '\kruegge82\weclapp\Model\RecordAddress',
        'sales_orders' => '\kruegge82\weclapp\Model\OnlyId[]',
        'sender_customer_number' => 'string',
        'sender_party_id' => 'string',
        'sender_supplier_number' => 'string',
        'sent_to_recipient' => 'bool',
        'shipping_return_carrier_id' => 'string',
        'source_warehouse_id' => 'string',
        'status' => 'string',
        'status_history' => '\kruegge82\weclapp\Model\ShipmentStatus[]',
        'tags' => 'string[]',
        'warehouse_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'commercial_language' => null,
        'created_date' => 'timestamp',
        'creator_id' => null,
        'custom_attributes' => null,
        'customer_delivery_address' => null,
        'customer_invoice_address' => null,
        'delivery_note_number' => null,
        'description' => null,
        'dhl_receiver_id' => null,
        'disable_record_emailing_rule' => null,
        'dropshipping_shipment_id' => null,
        'incoming_goods_items' => null,
        'incoming_goods_number' => null,
        'incoming_goods_type' => null,
        'invoice_address' => null,
        'invoice_recipient_id' => null,
        'last_modified_date' => 'timestamp',
        'purchase_orders' => null,
        'recipient_address' => null,
        'record_comment' => null,
        'record_free_text' => null,
        'record_opening' => null,
        'related_shipment_id' => null,
        'responsible_user_id' => null,
        'return_address' => null,
        'sales_orders' => null,
        'sender_customer_number' => null,
        'sender_party_id' => null,
        'sender_supplier_number' => null,
        'sent_to_recipient' => null,
        'shipping_return_carrier_id' => null,
        'source_warehouse_id' => null,
        'status' => null,
        'status_history' => null,
        'tags' => null,
        'warehouse_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'commercial_language' => false,
        'created_date' => false,
        'creator_id' => false,
        'custom_attributes' => false,
        'customer_delivery_address' => false,
        'customer_invoice_address' => false,
        'delivery_note_number' => false,
        'description' => false,
        'dhl_receiver_id' => false,
        'disable_record_emailing_rule' => false,
        'dropshipping_shipment_id' => false,
        'incoming_goods_items' => false,
        'incoming_goods_number' => false,
        'incoming_goods_type' => false,
        'invoice_address' => false,
        'invoice_recipient_id' => false,
        'last_modified_date' => false,
        'purchase_orders' => false,
        'recipient_address' => false,
        'record_comment' => false,
        'record_free_text' => false,
        'record_opening' => false,
        'related_shipment_id' => false,
        'responsible_user_id' => false,
        'return_address' => false,
        'sales_orders' => false,
        'sender_customer_number' => false,
        'sender_party_id' => false,
        'sender_supplier_number' => false,
        'sent_to_recipient' => false,
        'shipping_return_carrier_id' => false,
        'source_warehouse_id' => false,
        'status' => false,
        'status_history' => false,
        'tags' => false,
        'warehouse_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'commercial_language' => 'commercialLanguage',
        'created_date' => 'createdDate',
        'creator_id' => 'creatorId',
        'custom_attributes' => 'customAttributes',
        'customer_delivery_address' => 'customerDeliveryAddress',
        'customer_invoice_address' => 'customerInvoiceAddress',
        'delivery_note_number' => 'deliveryNoteNumber',
        'description' => 'description',
        'dhl_receiver_id' => 'dhlReceiverId',
        'disable_record_emailing_rule' => 'disableRecordEmailingRule',
        'dropshipping_shipment_id' => 'dropshippingShipmentId',
        'incoming_goods_items' => 'incomingGoodsItems',
        'incoming_goods_number' => 'incomingGoodsNumber',
        'incoming_goods_type' => 'incomingGoodsType',
        'invoice_address' => 'invoiceAddress',
        'invoice_recipient_id' => 'invoiceRecipientId',
        'last_modified_date' => 'lastModifiedDate',
        'purchase_orders' => 'purchaseOrders',
        'recipient_address' => 'recipientAddress',
        'record_comment' => 'recordComment',
        'record_free_text' => 'recordFreeText',
        'record_opening' => 'recordOpening',
        'related_shipment_id' => 'relatedShipmentId',
        'responsible_user_id' => 'responsibleUserId',
        'return_address' => 'returnAddress',
        'sales_orders' => 'salesOrders',
        'sender_customer_number' => 'senderCustomerNumber',
        'sender_party_id' => 'senderPartyId',
        'sender_supplier_number' => 'senderSupplierNumber',
        'sent_to_recipient' => 'sentToRecipient',
        'shipping_return_carrier_id' => 'shippingReturnCarrierId',
        'source_warehouse_id' => 'sourceWarehouseId',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'tags' => 'tags',
        'warehouse_id' => 'warehouseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'commercial_language' => 'setCommercialLanguage',
        'created_date' => 'setCreatedDate',
        'creator_id' => 'setCreatorId',
        'custom_attributes' => 'setCustomAttributes',
        'customer_delivery_address' => 'setCustomerDeliveryAddress',
        'customer_invoice_address' => 'setCustomerInvoiceAddress',
        'delivery_note_number' => 'setDeliveryNoteNumber',
        'description' => 'setDescription',
        'dhl_receiver_id' => 'setDhlReceiverId',
        'disable_record_emailing_rule' => 'setDisableRecordEmailingRule',
        'dropshipping_shipment_id' => 'setDropshippingShipmentId',
        'incoming_goods_items' => 'setIncomingGoodsItems',
        'incoming_goods_number' => 'setIncomingGoodsNumber',
        'incoming_goods_type' => 'setIncomingGoodsType',
        'invoice_address' => 'setInvoiceAddress',
        'invoice_recipient_id' => 'setInvoiceRecipientId',
        'last_modified_date' => 'setLastModifiedDate',
        'purchase_orders' => 'setPurchaseOrders',
        'recipient_address' => 'setRecipientAddress',
        'record_comment' => 'setRecordComment',
        'record_free_text' => 'setRecordFreeText',
        'record_opening' => 'setRecordOpening',
        'related_shipment_id' => 'setRelatedShipmentId',
        'responsible_user_id' => 'setResponsibleUserId',
        'return_address' => 'setReturnAddress',
        'sales_orders' => 'setSalesOrders',
        'sender_customer_number' => 'setSenderCustomerNumber',
        'sender_party_id' => 'setSenderPartyId',
        'sender_supplier_number' => 'setSenderSupplierNumber',
        'sent_to_recipient' => 'setSentToRecipient',
        'shipping_return_carrier_id' => 'setShippingReturnCarrierId',
        'source_warehouse_id' => 'setSourceWarehouseId',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'tags' => 'setTags',
        'warehouse_id' => 'setWarehouseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'commercial_language' => 'getCommercialLanguage',
        'created_date' => 'getCreatedDate',
        'creator_id' => 'getCreatorId',
        'custom_attributes' => 'getCustomAttributes',
        'customer_delivery_address' => 'getCustomerDeliveryAddress',
        'customer_invoice_address' => 'getCustomerInvoiceAddress',
        'delivery_note_number' => 'getDeliveryNoteNumber',
        'description' => 'getDescription',
        'dhl_receiver_id' => 'getDhlReceiverId',
        'disable_record_emailing_rule' => 'getDisableRecordEmailingRule',
        'dropshipping_shipment_id' => 'getDropshippingShipmentId',
        'incoming_goods_items' => 'getIncomingGoodsItems',
        'incoming_goods_number' => 'getIncomingGoodsNumber',
        'incoming_goods_type' => 'getIncomingGoodsType',
        'invoice_address' => 'getInvoiceAddress',
        'invoice_recipient_id' => 'getInvoiceRecipientId',
        'last_modified_date' => 'getLastModifiedDate',
        'purchase_orders' => 'getPurchaseOrders',
        'recipient_address' => 'getRecipientAddress',
        'record_comment' => 'getRecordComment',
        'record_free_text' => 'getRecordFreeText',
        'record_opening' => 'getRecordOpening',
        'related_shipment_id' => 'getRelatedShipmentId',
        'responsible_user_id' => 'getResponsibleUserId',
        'return_address' => 'getReturnAddress',
        'sales_orders' => 'getSalesOrders',
        'sender_customer_number' => 'getSenderCustomerNumber',
        'sender_party_id' => 'getSenderPartyId',
        'sender_supplier_number' => 'getSenderSupplierNumber',
        'sent_to_recipient' => 'getSentToRecipient',
        'shipping_return_carrier_id' => 'getShippingReturnCarrierId',
        'source_warehouse_id' => 'getSourceWarehouseId',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'tags' => 'getTags',
        'warehouse_id' => 'getWarehouseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INCOMING_GOODS_TYPE_CUSTOMER_RETURN = 'CUSTOMER_RETURN';
    public const INCOMING_GOODS_TYPE_INTERNAL = 'INTERNAL';
    public const INCOMING_GOODS_TYPE_STANDARD = 'STANDARD';
    public const INCOMING_GOODS_TYPE_SUPPLIER_COMPENSATION = 'SUPPLIER_COMPENSATION';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_DELIVERED = 'DELIVERED';
    public const STATUS_DELIVERY_NOTE_PRINTED = 'DELIVERY_NOTE_PRINTED';
    public const STATUS_INCOMING_CANCELLED = 'INCOMING_CANCELLED';
    public const STATUS_INCOMING_MOVED_INTO_STORE = 'INCOMING_MOVED_INTO_STORE';
    public const STATUS_INCOMING_SHIPPED = 'INCOMING_SHIPPED';
    public const STATUS_IN_ROUTE = 'IN_ROUTE';
    public const STATUS__NEW = 'NEW';
    public const STATUS_SHIPPED = 'SHIPPED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncomingGoodsTypeAllowableValues()
    {
        return [
            self::INCOMING_GOODS_TYPE_CUSTOMER_RETURN,
            self::INCOMING_GOODS_TYPE_INTERNAL,
            self::INCOMING_GOODS_TYPE_STANDARD,
            self::INCOMING_GOODS_TYPE_SUPPLIER_COMPENSATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CANCELLED,
            self::STATUS_DELIVERED,
            self::STATUS_DELIVERY_NOTE_PRINTED,
            self::STATUS_INCOMING_CANCELLED,
            self::STATUS_INCOMING_MOVED_INTO_STORE,
            self::STATUS_INCOMING_SHIPPED,
            self::STATUS_IN_ROUTE,
            self::STATUS__NEW,
            self::STATUS_SHIPPED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('customer_delivery_address', $data ?? [], null);
        $this->setIfExists('customer_invoice_address', $data ?? [], null);
        $this->setIfExists('delivery_note_number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('dhl_receiver_id', $data ?? [], null);
        $this->setIfExists('disable_record_emailing_rule', $data ?? [], null);
        $this->setIfExists('dropshipping_shipment_id', $data ?? [], null);
        $this->setIfExists('incoming_goods_items', $data ?? [], null);
        $this->setIfExists('incoming_goods_number', $data ?? [], null);
        $this->setIfExists('incoming_goods_type', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('invoice_recipient_id', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('purchase_orders', $data ?? [], null);
        $this->setIfExists('recipient_address', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('related_shipment_id', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('return_address', $data ?? [], null);
        $this->setIfExists('sales_orders', $data ?? [], null);
        $this->setIfExists('sender_customer_number', $data ?? [], null);
        $this->setIfExists('sender_party_id', $data ?? [], null);
        $this->setIfExists('sender_supplier_number', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('shipping_return_carrier_id', $data ?? [], null);
        $this->setIfExists('source_warehouse_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIncomingGoodsTypeAllowableValues();
        if (!is_null($this->container['incoming_goods_type']) && !in_array($this->container['incoming_goods_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'incoming_goods_type', must be one of '%s'",
                $this->container['incoming_goods_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets customer_delivery_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getCustomerDeliveryAddress()
    {
        return $this->container['customer_delivery_address'];
    }

    /**
     * Sets customer_delivery_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $customer_delivery_address customer_delivery_address
     *
     * @return self
     */
    public function setCustomerDeliveryAddress($customer_delivery_address)
    {
        if (is_null($customer_delivery_address)) {
            throw new \InvalidArgumentException('non-nullable customer_delivery_address cannot be null');
        }
        $this->container['customer_delivery_address'] = $customer_delivery_address;

        return $this;
    }

    /**
     * Gets customer_invoice_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getCustomerInvoiceAddress()
    {
        return $this->container['customer_invoice_address'];
    }

    /**
     * Sets customer_invoice_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $customer_invoice_address customer_invoice_address
     *
     * @return self
     */
    public function setCustomerInvoiceAddress($customer_invoice_address)
    {
        if (is_null($customer_invoice_address)) {
            throw new \InvalidArgumentException('non-nullable customer_invoice_address cannot be null');
        }
        $this->container['customer_invoice_address'] = $customer_invoice_address;

        return $this;
    }

    /**
     * Gets delivery_note_number
     *
     * @return string|null
     */
    public function getDeliveryNoteNumber()
    {
        return $this->container['delivery_note_number'];
    }

    /**
     * Sets delivery_note_number
     *
     * @param string|null $delivery_note_number delivery_note_number
     *
     * @return self
     */
    public function setDeliveryNoteNumber($delivery_note_number)
    {
        if (is_null($delivery_note_number)) {
            throw new \InvalidArgumentException('non-nullable delivery_note_number cannot be null');
        }
        $this->container['delivery_note_number'] = $delivery_note_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dhl_receiver_id
     *
     * @return string|null
     */
    public function getDhlReceiverId()
    {
        return $this->container['dhl_receiver_id'];
    }

    /**
     * Sets dhl_receiver_id
     *
     * @param string|null $dhl_receiver_id dhl_receiver_id
     *
     * @return self
     */
    public function setDhlReceiverId($dhl_receiver_id)
    {
        if (is_null($dhl_receiver_id)) {
            throw new \InvalidArgumentException('non-nullable dhl_receiver_id cannot be null');
        }
        $this->container['dhl_receiver_id'] = $dhl_receiver_id;

        return $this;
    }

    /**
     * Gets disable_record_emailing_rule
     *
     * @return bool|null
     */
    public function getDisableRecordEmailingRule()
    {
        return $this->container['disable_record_emailing_rule'];
    }

    /**
     * Sets disable_record_emailing_rule
     *
     * @param bool|null $disable_record_emailing_rule disable_record_emailing_rule
     *
     * @return self
     */
    public function setDisableRecordEmailingRule($disable_record_emailing_rule)
    {
        if (is_null($disable_record_emailing_rule)) {
            throw new \InvalidArgumentException('non-nullable disable_record_emailing_rule cannot be null');
        }
        $this->container['disable_record_emailing_rule'] = $disable_record_emailing_rule;

        return $this;
    }

    /**
     * Gets dropshipping_shipment_id
     *
     * @return string|null
     */
    public function getDropshippingShipmentId()
    {
        return $this->container['dropshipping_shipment_id'];
    }

    /**
     * Sets dropshipping_shipment_id
     *
     * @param string|null $dropshipping_shipment_id dropshipping_shipment_id
     *
     * @return self
     */
    public function setDropshippingShipmentId($dropshipping_shipment_id)
    {
        if (is_null($dropshipping_shipment_id)) {
            throw new \InvalidArgumentException('non-nullable dropshipping_shipment_id cannot be null');
        }
        $this->container['dropshipping_shipment_id'] = $dropshipping_shipment_id;

        return $this;
    }

    /**
     * Gets incoming_goods_items
     *
     * @return \kruegge82\weclapp\Model\IncomingGoodsItem[]|null
     */
    public function getIncomingGoodsItems()
    {
        return $this->container['incoming_goods_items'];
    }

    /**
     * Sets incoming_goods_items
     *
     * @param \kruegge82\weclapp\Model\IncomingGoodsItem[]|null $incoming_goods_items incoming_goods_items
     *
     * @return self
     */
    public function setIncomingGoodsItems($incoming_goods_items)
    {
        if (is_null($incoming_goods_items)) {
            throw new \InvalidArgumentException('non-nullable incoming_goods_items cannot be null');
        }
        $this->container['incoming_goods_items'] = $incoming_goods_items;

        return $this;
    }

    /**
     * Gets incoming_goods_number
     *
     * @return string|null
     */
    public function getIncomingGoodsNumber()
    {
        return $this->container['incoming_goods_number'];
    }

    /**
     * Sets incoming_goods_number
     *
     * @param string|null $incoming_goods_number incoming_goods_number
     *
     * @return self
     */
    public function setIncomingGoodsNumber($incoming_goods_number)
    {
        if (is_null($incoming_goods_number)) {
            throw new \InvalidArgumentException('non-nullable incoming_goods_number cannot be null');
        }
        $this->container['incoming_goods_number'] = $incoming_goods_number;

        return $this;
    }

    /**
     * Gets incoming_goods_type
     *
     * @return string|null
     */
    public function getIncomingGoodsType()
    {
        return $this->container['incoming_goods_type'];
    }

    /**
     * Sets incoming_goods_type
     *
     * @param string|null $incoming_goods_type incoming_goods_type
     *
     * @return self
     */
    public function setIncomingGoodsType($incoming_goods_type)
    {
        if (is_null($incoming_goods_type)) {
            throw new \InvalidArgumentException('non-nullable incoming_goods_type cannot be null');
        }
        $allowedValues = $this->getIncomingGoodsTypeAllowableValues();
        if (!in_array($incoming_goods_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'incoming_goods_type', must be one of '%s'",
                    $incoming_goods_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incoming_goods_type'] = $incoming_goods_type;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets invoice_recipient_id
     *
     * @return string|null
     */
    public function getInvoiceRecipientId()
    {
        return $this->container['invoice_recipient_id'];
    }

    /**
     * Sets invoice_recipient_id
     *
     * @param string|null $invoice_recipient_id invoice_recipient_id
     *
     * @return self
     */
    public function setInvoiceRecipientId($invoice_recipient_id)
    {
        if (is_null($invoice_recipient_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_recipient_id cannot be null');
        }
        $this->container['invoice_recipient_id'] = $invoice_recipient_id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets purchase_orders
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getPurchaseOrders()
    {
        return $this->container['purchase_orders'];
    }

    /**
     * Sets purchase_orders
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $purchase_orders purchase_orders
     *
     * @return self
     */
    public function setPurchaseOrders($purchase_orders)
    {
        if (is_null($purchase_orders)) {
            throw new \InvalidArgumentException('non-nullable purchase_orders cannot be null');
        }
        $this->container['purchase_orders'] = $purchase_orders;

        return $this;
    }

    /**
     * Gets recipient_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getRecipientAddress()
    {
        return $this->container['recipient_address'];
    }

    /**
     * Sets recipient_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $recipient_address recipient_address
     *
     * @return self
     */
    public function setRecipientAddress($recipient_address)
    {
        if (is_null($recipient_address)) {
            throw new \InvalidArgumentException('non-nullable recipient_address cannot be null');
        }
        $this->container['recipient_address'] = $recipient_address;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets related_shipment_id
     *
     * @return string|null
     */
    public function getRelatedShipmentId()
    {
        return $this->container['related_shipment_id'];
    }

    /**
     * Sets related_shipment_id
     *
     * @param string|null $related_shipment_id related_shipment_id
     *
     * @return self
     */
    public function setRelatedShipmentId($related_shipment_id)
    {
        if (is_null($related_shipment_id)) {
            throw new \InvalidArgumentException('non-nullable related_shipment_id cannot be null');
        }
        $this->container['related_shipment_id'] = $related_shipment_id;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets return_address
     *
     * @return \kruegge82\weclapp\Model\RecordAddress|null
     */
    public function getReturnAddress()
    {
        return $this->container['return_address'];
    }

    /**
     * Sets return_address
     *
     * @param \kruegge82\weclapp\Model\RecordAddress|null $return_address return_address
     *
     * @return self
     */
    public function setReturnAddress($return_address)
    {
        if (is_null($return_address)) {
            throw new \InvalidArgumentException('non-nullable return_address cannot be null');
        }
        $this->container['return_address'] = $return_address;

        return $this;
    }

    /**
     * Gets sales_orders
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getSalesOrders()
    {
        return $this->container['sales_orders'];
    }

    /**
     * Sets sales_orders
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $sales_orders sales_orders
     *
     * @return self
     */
    public function setSalesOrders($sales_orders)
    {
        if (is_null($sales_orders)) {
            throw new \InvalidArgumentException('non-nullable sales_orders cannot be null');
        }
        $this->container['sales_orders'] = $sales_orders;

        return $this;
    }

    /**
     * Gets sender_customer_number
     *
     * @return string|null
     */
    public function getSenderCustomerNumber()
    {
        return $this->container['sender_customer_number'];
    }

    /**
     * Sets sender_customer_number
     *
     * @param string|null $sender_customer_number sender_customer_number
     *
     * @return self
     */
    public function setSenderCustomerNumber($sender_customer_number)
    {
        if (is_null($sender_customer_number)) {
            throw new \InvalidArgumentException('non-nullable sender_customer_number cannot be null');
        }
        $this->container['sender_customer_number'] = $sender_customer_number;

        return $this;
    }

    /**
     * Gets sender_party_id
     *
     * @return string|null
     */
    public function getSenderPartyId()
    {
        return $this->container['sender_party_id'];
    }

    /**
     * Sets sender_party_id
     *
     * @param string|null $sender_party_id sender_party_id
     *
     * @return self
     */
    public function setSenderPartyId($sender_party_id)
    {
        if (is_null($sender_party_id)) {
            throw new \InvalidArgumentException('non-nullable sender_party_id cannot be null');
        }
        $this->container['sender_party_id'] = $sender_party_id;

        return $this;
    }

    /**
     * Gets sender_supplier_number
     *
     * @return string|null
     */
    public function getSenderSupplierNumber()
    {
        return $this->container['sender_supplier_number'];
    }

    /**
     * Sets sender_supplier_number
     *
     * @param string|null $sender_supplier_number sender_supplier_number
     *
     * @return self
     */
    public function setSenderSupplierNumber($sender_supplier_number)
    {
        if (is_null($sender_supplier_number)) {
            throw new \InvalidArgumentException('non-nullable sender_supplier_number cannot be null');
        }
        $this->container['sender_supplier_number'] = $sender_supplier_number;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets shipping_return_carrier_id
     *
     * @return string|null
     */
    public function getShippingReturnCarrierId()
    {
        return $this->container['shipping_return_carrier_id'];
    }

    /**
     * Sets shipping_return_carrier_id
     *
     * @param string|null $shipping_return_carrier_id shipping_return_carrier_id
     *
     * @return self
     */
    public function setShippingReturnCarrierId($shipping_return_carrier_id)
    {
        if (is_null($shipping_return_carrier_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_return_carrier_id cannot be null');
        }
        $this->container['shipping_return_carrier_id'] = $shipping_return_carrier_id;

        return $this;
    }

    /**
     * Gets source_warehouse_id
     *
     * @return string|null
     */
    public function getSourceWarehouseId()
    {
        return $this->container['source_warehouse_id'];
    }

    /**
     * Sets source_warehouse_id
     *
     * @param string|null $source_warehouse_id source_warehouse_id
     *
     * @return self
     */
    public function setSourceWarehouseId($source_warehouse_id)
    {
        if (is_null($source_warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable source_warehouse_id cannot be null');
        }
        $this->container['source_warehouse_id'] = $source_warehouse_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\ShipmentStatus[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\ShipmentStatus[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


