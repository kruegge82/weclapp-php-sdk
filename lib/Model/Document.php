<?php
/**
 * Document
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Document implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'created_date' => 'int',
        'description' => 'string',
        'document_size' => 'int',
        'document_type' => 'string',
        'last_modified_date' => 'int',
        'media_type' => 'string',
        'name' => 'string',
        'user_id' => 'string',
        'versions' => '\kruegge82\weclapp\Model\DocumentVersion[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'created_date' => 'timestamp',
        'description' => null,
        'document_size' => 'int32',
        'document_type' => null,
        'last_modified_date' => 'timestamp',
        'media_type' => null,
        'name' => null,
        'user_id' => null,
        'versions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'created_date' => false,
        'description' => false,
        'document_size' => false,
        'document_type' => false,
        'last_modified_date' => false,
        'media_type' => false,
        'name' => false,
        'user_id' => false,
        'versions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'created_date' => 'createdDate',
        'description' => 'description',
        'document_size' => 'documentSize',
        'document_type' => 'documentType',
        'last_modified_date' => 'lastModifiedDate',
        'media_type' => 'mediaType',
        'name' => 'name',
        'user_id' => 'userId',
        'versions' => 'versions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'created_date' => 'setCreatedDate',
        'description' => 'setDescription',
        'document_size' => 'setDocumentSize',
        'document_type' => 'setDocumentType',
        'last_modified_date' => 'setLastModifiedDate',
        'media_type' => 'setMediaType',
        'name' => 'setName',
        'user_id' => 'setUserId',
        'versions' => 'setVersions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'created_date' => 'getCreatedDate',
        'description' => 'getDescription',
        'document_size' => 'getDocumentSize',
        'document_type' => 'getDocumentType',
        'last_modified_date' => 'getLastModifiedDate',
        'media_type' => 'getMediaType',
        'name' => 'getName',
        'user_id' => 'getUserId',
        'versions' => 'getVersions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_TYPE_ARTICLE_DATASHEET = 'ARTICLE_DATASHEET';
    public const DOCUMENT_TYPE_ARTICLE_LABEL = 'ARTICLE_LABEL';
    public const DOCUMENT_TYPE_BLANKET_PURCHASE_ORDER = 'BLANKET_PURCHASE_ORDER';
    public const DOCUMENT_TYPE_BLANKET_SALES_ORDER = 'BLANKET_SALES_ORDER';
    public const DOCUMENT_TYPE_CANCELLATION_UBL = 'CANCELLATION_UBL';
    public const DOCUMENT_TYPE_CANCELLATION_XR = 'CANCELLATION_XR';
    public const DOCUMENT_TYPE_CONTRACT = 'CONTRACT';
    public const DOCUMENT_TYPE_CREDIT_ADVICE = 'CREDIT_ADVICE';
    public const DOCUMENT_TYPE_CREDIT_ADVICE_CANCELLATION = 'CREDIT_ADVICE_CANCELLATION';
    public const DOCUMENT_TYPE_CREDIT_ADVICE_PRELIMINARY_INVOICE = 'CREDIT_ADVICE_PRELIMINARY_INVOICE';
    public const DOCUMENT_TYPE_CREDIT_ADVICE_UBL = 'CREDIT_ADVICE_UBL';
    public const DOCUMENT_TYPE_CREDIT_ADVICE_XR = 'CREDIT_ADVICE_XR';
    public const DOCUMENT_TYPE_CRM_EVENT_LETTER = 'CRM_EVENT_LETTER';
    public const DOCUMENT_TYPE_CUSTOMER_ARTICLE_PRICE_LIST = 'CUSTOMER_ARTICLE_PRICE_LIST';
    public const DOCUMENT_TYPE_DUNNING = 'DUNNING';
    public const DOCUMENT_TYPE_INCOMING_GOODS = 'INCOMING_GOODS';
    public const DOCUMENT_TYPE_INCOMING_GOODS_FROM_RETURN = 'INCOMING_GOODS_FROM_RETURN';
    public const DOCUMENT_TYPE_INCOMING_GOODS_RETURNS_PICKUP_NOTE = 'INCOMING_GOODS_RETURNS_PICKUP_NOTE';
    public const DOCUMENT_TYPE_INVENTORY_TAKING = 'INVENTORY_TAKING';
    public const DOCUMENT_TYPE_PERFORMANCE_RECORD = 'PERFORMANCE_RECORD';
    public const DOCUMENT_TYPE_PRODUCTION_ORDER = 'PRODUCTION_ORDER';
    public const DOCUMENT_TYPE_PURCHASE_INVOICE = 'PURCHASE_INVOICE';
    public const DOCUMENT_TYPE_PURCHASE_INVOICE_FATTURAPA = 'PURCHASE_INVOICE_FATTURAPA';
    public const DOCUMENT_TYPE_PURCHASE_INVOICE_ZUGFERD = 'PURCHASE_INVOICE_ZUGFERD';
    public const DOCUMENT_TYPE_PURCHASE_ORDER = 'PURCHASE_ORDER';
    public const DOCUMENT_TYPE_PURCHASE_ORDER_CANCELLATION = 'PURCHASE_ORDER_CANCELLATION';
    public const DOCUMENT_TYPE_PURCHASE_ORDER_DEFAULT = 'PURCHASE_ORDER_DEFAULT';
    public const DOCUMENT_TYPE_PURCHASE_ORDER_REQUEST = 'PURCHASE_ORDER_REQUEST';
    public const DOCUMENT_TYPE_PURCHASE_ORDER_REQUEST_OFFER_ITEM_CSV = 'PURCHASE_ORDER_REQUEST_OFFER_ITEM_CSV';
    public const DOCUMENT_TYPE_PURCHASE_ORDER_REQUEST_SUPPLIER_DOCUMENT = 'PURCHASE_ORDER_REQUEST_SUPPLIER_DOCUMENT';
    public const DOCUMENT_TYPE_QUOTATION = 'QUOTATION';
    public const DOCUMENT_TYPE_QUOTATION_DEFAULT = 'QUOTATION_DEFAULT';
    public const DOCUMENT_TYPE_SALES_INVOICE = 'SALES_INVOICE';
    public const DOCUMENT_TYPE_SALES_INVOICE_CANCELLATION = 'SALES_INVOICE_CANCELLATION';
    public const DOCUMENT_TYPE_SALES_INVOICE_DEFAULT = 'SALES_INVOICE_DEFAULT';
    public const DOCUMENT_TYPE_SALES_INVOICE_FATTURAPA = 'SALES_INVOICE_FATTURAPA';
    public const DOCUMENT_TYPE_SALES_INVOICE_PRELIMINARY = 'SALES_INVOICE_PRELIMINARY';
    public const DOCUMENT_TYPE_SALES_INVOICE_QR = 'SALES_INVOICE_QR';
    public const DOCUMENT_TYPE_SALES_INVOICE_UBL = 'SALES_INVOICE_UBL';
    public const DOCUMENT_TYPE_SALES_INVOICE_XR = 'SALES_INVOICE_XR';
    public const DOCUMENT_TYPE_SALES_ORDER = 'SALES_ORDER';
    public const DOCUMENT_TYPE_SALES_ORDER_DEFAULT = 'SALES_ORDER_DEFAULT';
    public const DOCUMENT_TYPE_SHIPMENT_CUSTOMS_DECLARATION = 'SHIPMENT_CUSTOMS_DECLARATION';
    public const DOCUMENT_TYPE_SHIPMENT_DELIVERY_LABEL = 'SHIPMENT_DELIVERY_LABEL';
    public const DOCUMENT_TYPE_SHIPMENT_DELIVERY_NOTE = 'SHIPMENT_DELIVERY_NOTE';
    public const DOCUMENT_TYPE_SHIPMENT_DELIVERY_NOTE_DEFAULT = 'SHIPMENT_DELIVERY_NOTE_DEFAULT';
    public const DOCUMENT_TYPE_SHIPMENT_PICKING_LIST = 'SHIPMENT_PICKING_LIST';
    public const DOCUMENT_TYPE_SHIPMENT_PROFORMA_INVOICE = 'SHIPMENT_PROFORMA_INVOICE';
    public const DOCUMENT_TYPE_SHIPMENT_RETURN_DELIVERY_NOTE = 'SHIPMENT_RETURN_DELIVERY_NOTE';
    public const DOCUMENT_TYPE_SHIPMENT_RETURN_LABEL = 'SHIPMENT_RETURN_LABEL';
    public const DOCUMENT_TYPE_SHIPMENT_SERIAL_NUMBERS_CSV = 'SHIPMENT_SERIAL_NUMBERS_CSV';
    public const DOCUMENT_TYPE_TICKET = 'TICKET';
    public const DOCUMENT_TYPE_ZUGFERD_VALIDATION = 'ZUGFERD_VALIDATION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_ARTICLE_DATASHEET,
            self::DOCUMENT_TYPE_ARTICLE_LABEL,
            self::DOCUMENT_TYPE_BLANKET_PURCHASE_ORDER,
            self::DOCUMENT_TYPE_BLANKET_SALES_ORDER,
            self::DOCUMENT_TYPE_CANCELLATION_UBL,
            self::DOCUMENT_TYPE_CANCELLATION_XR,
            self::DOCUMENT_TYPE_CONTRACT,
            self::DOCUMENT_TYPE_CREDIT_ADVICE,
            self::DOCUMENT_TYPE_CREDIT_ADVICE_CANCELLATION,
            self::DOCUMENT_TYPE_CREDIT_ADVICE_PRELIMINARY_INVOICE,
            self::DOCUMENT_TYPE_CREDIT_ADVICE_UBL,
            self::DOCUMENT_TYPE_CREDIT_ADVICE_XR,
            self::DOCUMENT_TYPE_CRM_EVENT_LETTER,
            self::DOCUMENT_TYPE_CUSTOMER_ARTICLE_PRICE_LIST,
            self::DOCUMENT_TYPE_DUNNING,
            self::DOCUMENT_TYPE_INCOMING_GOODS,
            self::DOCUMENT_TYPE_INCOMING_GOODS_FROM_RETURN,
            self::DOCUMENT_TYPE_INCOMING_GOODS_RETURNS_PICKUP_NOTE,
            self::DOCUMENT_TYPE_INVENTORY_TAKING,
            self::DOCUMENT_TYPE_PERFORMANCE_RECORD,
            self::DOCUMENT_TYPE_PRODUCTION_ORDER,
            self::DOCUMENT_TYPE_PURCHASE_INVOICE,
            self::DOCUMENT_TYPE_PURCHASE_INVOICE_FATTURAPA,
            self::DOCUMENT_TYPE_PURCHASE_INVOICE_ZUGFERD,
            self::DOCUMENT_TYPE_PURCHASE_ORDER,
            self::DOCUMENT_TYPE_PURCHASE_ORDER_CANCELLATION,
            self::DOCUMENT_TYPE_PURCHASE_ORDER_DEFAULT,
            self::DOCUMENT_TYPE_PURCHASE_ORDER_REQUEST,
            self::DOCUMENT_TYPE_PURCHASE_ORDER_REQUEST_OFFER_ITEM_CSV,
            self::DOCUMENT_TYPE_PURCHASE_ORDER_REQUEST_SUPPLIER_DOCUMENT,
            self::DOCUMENT_TYPE_QUOTATION,
            self::DOCUMENT_TYPE_QUOTATION_DEFAULT,
            self::DOCUMENT_TYPE_SALES_INVOICE,
            self::DOCUMENT_TYPE_SALES_INVOICE_CANCELLATION,
            self::DOCUMENT_TYPE_SALES_INVOICE_DEFAULT,
            self::DOCUMENT_TYPE_SALES_INVOICE_FATTURAPA,
            self::DOCUMENT_TYPE_SALES_INVOICE_PRELIMINARY,
            self::DOCUMENT_TYPE_SALES_INVOICE_QR,
            self::DOCUMENT_TYPE_SALES_INVOICE_UBL,
            self::DOCUMENT_TYPE_SALES_INVOICE_XR,
            self::DOCUMENT_TYPE_SALES_ORDER,
            self::DOCUMENT_TYPE_SALES_ORDER_DEFAULT,
            self::DOCUMENT_TYPE_SHIPMENT_CUSTOMS_DECLARATION,
            self::DOCUMENT_TYPE_SHIPMENT_DELIVERY_LABEL,
            self::DOCUMENT_TYPE_SHIPMENT_DELIVERY_NOTE,
            self::DOCUMENT_TYPE_SHIPMENT_DELIVERY_NOTE_DEFAULT,
            self::DOCUMENT_TYPE_SHIPMENT_PICKING_LIST,
            self::DOCUMENT_TYPE_SHIPMENT_PROFORMA_INVOICE,
            self::DOCUMENT_TYPE_SHIPMENT_RETURN_DELIVERY_NOTE,
            self::DOCUMENT_TYPE_SHIPMENT_RETURN_LABEL,
            self::DOCUMENT_TYPE_SHIPMENT_SERIAL_NUMBERS_CSV,
            self::DOCUMENT_TYPE_TICKET,
            self::DOCUMENT_TYPE_ZUGFERD_VALIDATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('document_size', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('versions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_type', must be one of '%s'",
                $this->container['document_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['media_type'] === null) {
            $invalidProperties[] = "'media_type' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_size
     *
     * @return int|null
     */
    public function getDocumentSize()
    {
        return $this->container['document_size'];
    }

    /**
     * Sets document_size
     *
     * @param int|null $document_size document_size
     *
     * @return self
     */
    public function setDocumentSize($document_size)
    {
        if (is_null($document_size)) {
            throw new \InvalidArgumentException('non-nullable document_size cannot be null');
        }
        $this->container['document_size'] = $document_size;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_type', must be one of '%s'",
                    $document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string $media_type media_type
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (is_null($media_type)) {
            throw new \InvalidArgumentException('non-nullable media_type cannot be null');
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \kruegge82\weclapp\Model\DocumentVersion[]|null
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \kruegge82\weclapp\Model\DocumentVersion[]|null $versions versions
     *
     * @return self
     */
    public function setVersions($versions)
    {
        if (is_null($versions)) {
            throw new \InvalidArgumentException('non-nullable versions cannot be null');
        }
        $this->container['versions'] = $versions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


