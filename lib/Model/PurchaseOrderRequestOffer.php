<?php
/**
 * PurchaseOrderRequestOffer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * PurchaseOrderRequestOffer Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PurchaseOrderRequestOffer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'purchaseOrderRequestOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'commercial_language' => 'string',
        'creator_id' => 'string',
        'currency_conversion_date' => 'int',
        'currency_conversion_rate' => 'float',
        'description' => 'string',
        'disable_email_template' => 'bool',
        'end_date' => 'int',
        'gross_amount' => 'float',
        'gross_amount_in_company_currency' => 'float',
        'header_discount' => 'float',
        'header_surcharge' => 'float',
        'net_amount' => 'float',
        'net_amount_in_company_currency' => 'float',
        'non_standard_tax_id' => 'string',
        'non_standard_tax_name' => 'string',
        'offer_date' => 'int',
        'payment_method_id' => 'string',
        'payment_method_name' => 'string',
        'planned_delivery_date' => 'int',
        'purchase_order_request_offer_items' => '\kruegge82\weclapp\Model\PurchaseOrderRequestOfferItem[]',
        'record_comment' => 'string',
        'record_currency_id' => 'string',
        'record_currency_name' => 'string',
        'record_email_addresses' => '\kruegge82\weclapp\Model\EmailAddresses',
        'record_free_text' => 'string',
        'record_opening' => 'string',
        'reply_date' => 'int',
        'request_date' => 'int',
        'sent_to_recipient' => 'bool',
        'start_date' => 'int',
        'status' => '\kruegge82\weclapp\Model\PurchaseOrderRequestSupplierStatusType',
        'supplier_id' => 'string',
        'supplier_number' => 'string',
        'supplier_reference' => 'string',
        'tags' => 'string[]',
        'term_of_payment_id' => 'string',
        'term_of_payment_name' => 'string',
        'valid_from' => 'int',
        'valid_to' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'commercial_language' => null,
        'creator_id' => null,
        'currency_conversion_date' => 'timestamp',
        'currency_conversion_rate' => 'decimal',
        'description' => 'html',
        'disable_email_template' => null,
        'end_date' => 'timestamp',
        'gross_amount' => 'decimal',
        'gross_amount_in_company_currency' => 'decimal',
        'header_discount' => 'decimal',
        'header_surcharge' => 'decimal',
        'net_amount' => 'decimal',
        'net_amount_in_company_currency' => 'decimal',
        'non_standard_tax_id' => null,
        'non_standard_tax_name' => null,
        'offer_date' => 'timestamp',
        'payment_method_id' => null,
        'payment_method_name' => null,
        'planned_delivery_date' => 'timestamp',
        'purchase_order_request_offer_items' => null,
        'record_comment' => 'html',
        'record_currency_id' => null,
        'record_currency_name' => null,
        'record_email_addresses' => null,
        'record_free_text' => 'html',
        'record_opening' => 'html',
        'reply_date' => 'timestamp',
        'request_date' => 'timestamp',
        'sent_to_recipient' => null,
        'start_date' => 'timestamp',
        'status' => null,
        'supplier_id' => null,
        'supplier_number' => null,
        'supplier_reference' => null,
        'tags' => null,
        'term_of_payment_id' => null,
        'term_of_payment_name' => null,
        'valid_from' => 'timestamp',
        'valid_to' => 'timestamp'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'commercial_language' => false,
        'creator_id' => false,
        'currency_conversion_date' => false,
        'currency_conversion_rate' => false,
        'description' => false,
        'disable_email_template' => false,
        'end_date' => false,
        'gross_amount' => false,
        'gross_amount_in_company_currency' => false,
        'header_discount' => false,
        'header_surcharge' => false,
        'net_amount' => false,
        'net_amount_in_company_currency' => false,
        'non_standard_tax_id' => false,
        'non_standard_tax_name' => false,
        'offer_date' => false,
        'payment_method_id' => false,
        'payment_method_name' => false,
        'planned_delivery_date' => false,
        'purchase_order_request_offer_items' => false,
        'record_comment' => false,
        'record_currency_id' => false,
        'record_currency_name' => false,
        'record_email_addresses' => false,
        'record_free_text' => false,
        'record_opening' => false,
        'reply_date' => false,
        'request_date' => false,
        'sent_to_recipient' => false,
        'start_date' => false,
        'status' => false,
        'supplier_id' => false,
        'supplier_number' => false,
        'supplier_reference' => false,
        'tags' => false,
        'term_of_payment_id' => false,
        'term_of_payment_name' => false,
        'valid_from' => false,
        'valid_to' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'commercial_language' => 'commercialLanguage',
        'creator_id' => 'creatorId',
        'currency_conversion_date' => 'currencyConversionDate',
        'currency_conversion_rate' => 'currencyConversionRate',
        'description' => 'description',
        'disable_email_template' => 'disableEmailTemplate',
        'end_date' => 'endDate',
        'gross_amount' => 'grossAmount',
        'gross_amount_in_company_currency' => 'grossAmountInCompanyCurrency',
        'header_discount' => 'headerDiscount',
        'header_surcharge' => 'headerSurcharge',
        'net_amount' => 'netAmount',
        'net_amount_in_company_currency' => 'netAmountInCompanyCurrency',
        'non_standard_tax_id' => 'nonStandardTaxId',
        'non_standard_tax_name' => 'nonStandardTaxName',
        'offer_date' => 'offerDate',
        'payment_method_id' => 'paymentMethodId',
        'payment_method_name' => 'paymentMethodName',
        'planned_delivery_date' => 'plannedDeliveryDate',
        'purchase_order_request_offer_items' => 'purchaseOrderRequestOfferItems',
        'record_comment' => 'recordComment',
        'record_currency_id' => 'recordCurrencyId',
        'record_currency_name' => 'recordCurrencyName',
        'record_email_addresses' => 'recordEmailAddresses',
        'record_free_text' => 'recordFreeText',
        'record_opening' => 'recordOpening',
        'reply_date' => 'replyDate',
        'request_date' => 'requestDate',
        'sent_to_recipient' => 'sentToRecipient',
        'start_date' => 'startDate',
        'status' => 'status',
        'supplier_id' => 'supplierId',
        'supplier_number' => 'supplierNumber',
        'supplier_reference' => 'supplierReference',
        'tags' => 'tags',
        'term_of_payment_id' => 'termOfPaymentId',
        'term_of_payment_name' => 'termOfPaymentName',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'commercial_language' => 'setCommercialLanguage',
        'creator_id' => 'setCreatorId',
        'currency_conversion_date' => 'setCurrencyConversionDate',
        'currency_conversion_rate' => 'setCurrencyConversionRate',
        'description' => 'setDescription',
        'disable_email_template' => 'setDisableEmailTemplate',
        'end_date' => 'setEndDate',
        'gross_amount' => 'setGrossAmount',
        'gross_amount_in_company_currency' => 'setGrossAmountInCompanyCurrency',
        'header_discount' => 'setHeaderDiscount',
        'header_surcharge' => 'setHeaderSurcharge',
        'net_amount' => 'setNetAmount',
        'net_amount_in_company_currency' => 'setNetAmountInCompanyCurrency',
        'non_standard_tax_id' => 'setNonStandardTaxId',
        'non_standard_tax_name' => 'setNonStandardTaxName',
        'offer_date' => 'setOfferDate',
        'payment_method_id' => 'setPaymentMethodId',
        'payment_method_name' => 'setPaymentMethodName',
        'planned_delivery_date' => 'setPlannedDeliveryDate',
        'purchase_order_request_offer_items' => 'setPurchaseOrderRequestOfferItems',
        'record_comment' => 'setRecordComment',
        'record_currency_id' => 'setRecordCurrencyId',
        'record_currency_name' => 'setRecordCurrencyName',
        'record_email_addresses' => 'setRecordEmailAddresses',
        'record_free_text' => 'setRecordFreeText',
        'record_opening' => 'setRecordOpening',
        'reply_date' => 'setReplyDate',
        'request_date' => 'setRequestDate',
        'sent_to_recipient' => 'setSentToRecipient',
        'start_date' => 'setStartDate',
        'status' => 'setStatus',
        'supplier_id' => 'setSupplierId',
        'supplier_number' => 'setSupplierNumber',
        'supplier_reference' => 'setSupplierReference',
        'tags' => 'setTags',
        'term_of_payment_id' => 'setTermOfPaymentId',
        'term_of_payment_name' => 'setTermOfPaymentName',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'commercial_language' => 'getCommercialLanguage',
        'creator_id' => 'getCreatorId',
        'currency_conversion_date' => 'getCurrencyConversionDate',
        'currency_conversion_rate' => 'getCurrencyConversionRate',
        'description' => 'getDescription',
        'disable_email_template' => 'getDisableEmailTemplate',
        'end_date' => 'getEndDate',
        'gross_amount' => 'getGrossAmount',
        'gross_amount_in_company_currency' => 'getGrossAmountInCompanyCurrency',
        'header_discount' => 'getHeaderDiscount',
        'header_surcharge' => 'getHeaderSurcharge',
        'net_amount' => 'getNetAmount',
        'net_amount_in_company_currency' => 'getNetAmountInCompanyCurrency',
        'non_standard_tax_id' => 'getNonStandardTaxId',
        'non_standard_tax_name' => 'getNonStandardTaxName',
        'offer_date' => 'getOfferDate',
        'payment_method_id' => 'getPaymentMethodId',
        'payment_method_name' => 'getPaymentMethodName',
        'planned_delivery_date' => 'getPlannedDeliveryDate',
        'purchase_order_request_offer_items' => 'getPurchaseOrderRequestOfferItems',
        'record_comment' => 'getRecordComment',
        'record_currency_id' => 'getRecordCurrencyId',
        'record_currency_name' => 'getRecordCurrencyName',
        'record_email_addresses' => 'getRecordEmailAddresses',
        'record_free_text' => 'getRecordFreeText',
        'record_opening' => 'getRecordOpening',
        'reply_date' => 'getReplyDate',
        'request_date' => 'getRequestDate',
        'sent_to_recipient' => 'getSentToRecipient',
        'start_date' => 'getStartDate',
        'status' => 'getStatus',
        'supplier_id' => 'getSupplierId',
        'supplier_number' => 'getSupplierNumber',
        'supplier_reference' => 'getSupplierReference',
        'tags' => 'getTags',
        'term_of_payment_id' => 'getTermOfPaymentId',
        'term_of_payment_name' => 'getTermOfPaymentName',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('creator_id', $data ?? [], null);
        $this->setIfExists('currency_conversion_date', $data ?? [], null);
        $this->setIfExists('currency_conversion_rate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('disable_email_template', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('gross_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('header_discount', $data ?? [], null);
        $this->setIfExists('header_surcharge', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('net_amount_in_company_currency', $data ?? [], null);
        $this->setIfExists('non_standard_tax_id', $data ?? [], null);
        $this->setIfExists('non_standard_tax_name', $data ?? [], null);
        $this->setIfExists('offer_date', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('payment_method_name', $data ?? [], null);
        $this->setIfExists('planned_delivery_date', $data ?? [], null);
        $this->setIfExists('purchase_order_request_offer_items', $data ?? [], null);
        $this->setIfExists('record_comment', $data ?? [], null);
        $this->setIfExists('record_currency_id', $data ?? [], null);
        $this->setIfExists('record_currency_name', $data ?? [], null);
        $this->setIfExists('record_email_addresses', $data ?? [], null);
        $this->setIfExists('record_free_text', $data ?? [], null);
        $this->setIfExists('record_opening', $data ?? [], null);
        $this->setIfExists('reply_date', $data ?? [], null);
        $this->setIfExists('request_date', $data ?? [], null);
        $this->setIfExists('sent_to_recipient', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('supplier_id', $data ?? [], null);
        $this->setIfExists('supplier_number', $data ?? [], null);
        $this->setIfExists('supplier_reference', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('term_of_payment_id', $data ?? [], null);
        $this->setIfExists('term_of_payment_name', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['commercial_language']) && (mb_strlen($this->container['commercial_language']) > 255)) {
            $invalidProperties[] = "invalid value for 'commercial_language', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['currency_conversion_rate']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['currency_conversion_rate'])) {
            $invalidProperties[] = "invalid value for 'currency_conversion_rate', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gross_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount'])) {
            $invalidProperties[] = "invalid value for 'gross_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['gross_amount_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['gross_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'gross_amount_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['header_discount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['header_discount'])) {
            $invalidProperties[] = "invalid value for 'header_discount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['header_surcharge']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['header_surcharge'])) {
            $invalidProperties[] = "invalid value for 'header_surcharge', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount'])) {
            $invalidProperties[] = "invalid value for 'net_amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['net_amount_in_company_currency']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['net_amount_in_company_currency'])) {
            $invalidProperties[] = "invalid value for 'net_amount_in_company_currency', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['supplier_reference']) && (mb_strlen($this->container['supplier_reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'supplier_reference', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     * @deprecated
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     * @deprecated
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        if ((mb_strlen($commercial_language) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commercial_language when calling PurchaseOrderRequestOffer., must be smaller than or equal to 255.');
        }

        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string|null
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string|null $creator_id creator_id
     *
     * @return self
     */
    public function setCreatorId($creator_id)
    {
        if (is_null($creator_id)) {
            throw new \InvalidArgumentException('non-nullable creator_id cannot be null');
        }
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets currency_conversion_date
     *
     * @return int|null
     */
    public function getCurrencyConversionDate()
    {
        return $this->container['currency_conversion_date'];
    }

    /**
     * Sets currency_conversion_date
     *
     * @param int|null $currency_conversion_date currency_conversion_date
     *
     * @return self
     */
    public function setCurrencyConversionDate($currency_conversion_date)
    {
        if (is_null($currency_conversion_date)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_date cannot be null');
        }
        $this->container['currency_conversion_date'] = $currency_conversion_date;

        return $this;
    }

    /**
     * Gets currency_conversion_rate
     *
     * @return float|null
     * @deprecated
     */
    public function getCurrencyConversionRate()
    {
        return $this->container['currency_conversion_rate'];
    }

    /**
     * Sets currency_conversion_rate
     *
     * @param float|null $currency_conversion_rate currency_conversion_rate
     *
     * @return self
     * @deprecated
     */
    public function setCurrencyConversionRate($currency_conversion_rate)
    {
        if (is_null($currency_conversion_rate)) {
            throw new \InvalidArgumentException('non-nullable currency_conversion_rate cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($currency_conversion_rate)))) {
            throw new \InvalidArgumentException("invalid value for \$currency_conversion_rate when calling PurchaseOrderRequestOffer., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['currency_conversion_rate'] = $currency_conversion_rate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling PurchaseOrderRequestOffer., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disable_email_template
     *
     * @return bool|null
     * @deprecated
     */
    public function getDisableEmailTemplate()
    {
        return $this->container['disable_email_template'];
    }

    /**
     * Sets disable_email_template
     *
     * @param bool|null $disable_email_template disable_email_template
     *
     * @return self
     * @deprecated
     */
    public function setDisableEmailTemplate($disable_email_template)
    {
        if (is_null($disable_email_template)) {
            throw new \InvalidArgumentException('non-nullable disable_email_template cannot be null');
        }
        $this->container['disable_email_template'] = $disable_email_template;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return int|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param int|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount when calling PurchaseOrderRequestOffer., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets gross_amount_in_company_currency
     *
     * @return float|null
     */
    public function getGrossAmountInCompanyCurrency()
    {
        return $this->container['gross_amount_in_company_currency'];
    }

    /**
     * Sets gross_amount_in_company_currency
     *
     * @param float|null $gross_amount_in_company_currency gross_amount_in_company_currency
     *
     * @return self
     */
    public function setGrossAmountInCompanyCurrency($gross_amount_in_company_currency)
    {
        if (is_null($gross_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable gross_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($gross_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$gross_amount_in_company_currency when calling PurchaseOrderRequestOffer., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['gross_amount_in_company_currency'] = $gross_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets header_discount
     *
     * @return float|null
     */
    public function getHeaderDiscount()
    {
        return $this->container['header_discount'];
    }

    /**
     * Sets header_discount
     *
     * @param float|null $header_discount header_discount
     *
     * @return self
     */
    public function setHeaderDiscount($header_discount)
    {
        if (is_null($header_discount)) {
            throw new \InvalidArgumentException('non-nullable header_discount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($header_discount)))) {
            throw new \InvalidArgumentException("invalid value for \$header_discount when calling PurchaseOrderRequestOffer., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['header_discount'] = $header_discount;

        return $this;
    }

    /**
     * Gets header_surcharge
     *
     * @return float|null
     */
    public function getHeaderSurcharge()
    {
        return $this->container['header_surcharge'];
    }

    /**
     * Sets header_surcharge
     *
     * @param float|null $header_surcharge header_surcharge
     *
     * @return self
     */
    public function setHeaderSurcharge($header_surcharge)
    {
        if (is_null($header_surcharge)) {
            throw new \InvalidArgumentException('non-nullable header_surcharge cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($header_surcharge)))) {
            throw new \InvalidArgumentException("invalid value for \$header_surcharge when calling PurchaseOrderRequestOffer., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['header_surcharge'] = $header_surcharge;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount when calling PurchaseOrderRequestOffer., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets net_amount_in_company_currency
     *
     * @return float|null
     */
    public function getNetAmountInCompanyCurrency()
    {
        return $this->container['net_amount_in_company_currency'];
    }

    /**
     * Sets net_amount_in_company_currency
     *
     * @param float|null $net_amount_in_company_currency net_amount_in_company_currency
     *
     * @return self
     */
    public function setNetAmountInCompanyCurrency($net_amount_in_company_currency)
    {
        if (is_null($net_amount_in_company_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_in_company_currency cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($net_amount_in_company_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$net_amount_in_company_currency when calling PurchaseOrderRequestOffer., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['net_amount_in_company_currency'] = $net_amount_in_company_currency;

        return $this;
    }

    /**
     * Gets non_standard_tax_id
     *
     * @return string|null
     */
    public function getNonStandardTaxId()
    {
        return $this->container['non_standard_tax_id'];
    }

    /**
     * Sets non_standard_tax_id
     *
     * @param string|null $non_standard_tax_id non_standard_tax_id
     *
     * @return self
     */
    public function setNonStandardTaxId($non_standard_tax_id)
    {
        if (is_null($non_standard_tax_id)) {
            throw new \InvalidArgumentException('non-nullable non_standard_tax_id cannot be null');
        }
        $this->container['non_standard_tax_id'] = $non_standard_tax_id;

        return $this;
    }

    /**
     * Gets non_standard_tax_name
     *
     * @return string|null
     * @deprecated
     */
    public function getNonStandardTaxName()
    {
        return $this->container['non_standard_tax_name'];
    }

    /**
     * Sets non_standard_tax_name
     *
     * @param string|null $non_standard_tax_name non_standard_tax_name
     *
     * @return self
     * @deprecated
     */
    public function setNonStandardTaxName($non_standard_tax_name)
    {
        if (is_null($non_standard_tax_name)) {
            throw new \InvalidArgumentException('non-nullable non_standard_tax_name cannot be null');
        }
        $this->container['non_standard_tax_name'] = $non_standard_tax_name;

        return $this;
    }

    /**
     * Gets offer_date
     *
     * @return int|null
     */
    public function getOfferDate()
    {
        return $this->container['offer_date'];
    }

    /**
     * Sets offer_date
     *
     * @param int|null $offer_date offer_date
     *
     * @return self
     */
    public function setOfferDate($offer_date)
    {
        if (is_null($offer_date)) {
            throw new \InvalidArgumentException('non-nullable offer_date cannot be null');
        }
        $this->container['offer_date'] = $offer_date;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets payment_method_name
     *
     * @return string|null
     * @deprecated
     */
    public function getPaymentMethodName()
    {
        return $this->container['payment_method_name'];
    }

    /**
     * Sets payment_method_name
     *
     * @param string|null $payment_method_name payment_method_name
     *
     * @return self
     * @deprecated
     */
    public function setPaymentMethodName($payment_method_name)
    {
        if (is_null($payment_method_name)) {
            throw new \InvalidArgumentException('non-nullable payment_method_name cannot be null');
        }
        $this->container['payment_method_name'] = $payment_method_name;

        return $this;
    }

    /**
     * Gets planned_delivery_date
     *
     * @return int|null
     */
    public function getPlannedDeliveryDate()
    {
        return $this->container['planned_delivery_date'];
    }

    /**
     * Sets planned_delivery_date
     *
     * @param int|null $planned_delivery_date planned_delivery_date
     *
     * @return self
     */
    public function setPlannedDeliveryDate($planned_delivery_date)
    {
        if (is_null($planned_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable planned_delivery_date cannot be null');
        }
        $this->container['planned_delivery_date'] = $planned_delivery_date;

        return $this;
    }

    /**
     * Gets purchase_order_request_offer_items
     *
     * @return \kruegge82\weclapp\Model\PurchaseOrderRequestOfferItem[]|null
     */
    public function getPurchaseOrderRequestOfferItems()
    {
        return $this->container['purchase_order_request_offer_items'];
    }

    /**
     * Sets purchase_order_request_offer_items
     *
     * @param \kruegge82\weclapp\Model\PurchaseOrderRequestOfferItem[]|null $purchase_order_request_offer_items purchase_order_request_offer_items
     *
     * @return self
     */
    public function setPurchaseOrderRequestOfferItems($purchase_order_request_offer_items)
    {
        if (is_null($purchase_order_request_offer_items)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_request_offer_items cannot be null');
        }
        $this->container['purchase_order_request_offer_items'] = $purchase_order_request_offer_items;

        return $this;
    }

    /**
     * Gets record_comment
     *
     * @return string|null
     * @deprecated
     */
    public function getRecordComment()
    {
        return $this->container['record_comment'];
    }

    /**
     * Sets record_comment
     *
     * @param string|null $record_comment record_comment
     *
     * @return self
     * @deprecated
     */
    public function setRecordComment($record_comment)
    {
        if (is_null($record_comment)) {
            throw new \InvalidArgumentException('non-nullable record_comment cannot be null');
        }
        $this->container['record_comment'] = $record_comment;

        return $this;
    }

    /**
     * Gets record_currency_id
     *
     * @return string|null
     */
    public function getRecordCurrencyId()
    {
        return $this->container['record_currency_id'];
    }

    /**
     * Sets record_currency_id
     *
     * @param string|null $record_currency_id record_currency_id
     *
     * @return self
     */
    public function setRecordCurrencyId($record_currency_id)
    {
        if (is_null($record_currency_id)) {
            throw new \InvalidArgumentException('non-nullable record_currency_id cannot be null');
        }
        $this->container['record_currency_id'] = $record_currency_id;

        return $this;
    }

    /**
     * Gets record_currency_name
     *
     * @return string|null
     * @deprecated
     */
    public function getRecordCurrencyName()
    {
        return $this->container['record_currency_name'];
    }

    /**
     * Sets record_currency_name
     *
     * @param string|null $record_currency_name record_currency_name
     *
     * @return self
     * @deprecated
     */
    public function setRecordCurrencyName($record_currency_name)
    {
        if (is_null($record_currency_name)) {
            throw new \InvalidArgumentException('non-nullable record_currency_name cannot be null');
        }
        $this->container['record_currency_name'] = $record_currency_name;

        return $this;
    }

    /**
     * Gets record_email_addresses
     *
     * @return \kruegge82\weclapp\Model\EmailAddresses|null
     */
    public function getRecordEmailAddresses()
    {
        return $this->container['record_email_addresses'];
    }

    /**
     * Sets record_email_addresses
     *
     * @param \kruegge82\weclapp\Model\EmailAddresses|null $record_email_addresses record_email_addresses
     *
     * @return self
     */
    public function setRecordEmailAddresses($record_email_addresses)
    {
        if (is_null($record_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable record_email_addresses cannot be null');
        }
        $this->container['record_email_addresses'] = $record_email_addresses;

        return $this;
    }

    /**
     * Gets record_free_text
     *
     * @return string|null
     * @deprecated
     */
    public function getRecordFreeText()
    {
        return $this->container['record_free_text'];
    }

    /**
     * Sets record_free_text
     *
     * @param string|null $record_free_text record_free_text
     *
     * @return self
     * @deprecated
     */
    public function setRecordFreeText($record_free_text)
    {
        if (is_null($record_free_text)) {
            throw new \InvalidArgumentException('non-nullable record_free_text cannot be null');
        }
        $this->container['record_free_text'] = $record_free_text;

        return $this;
    }

    /**
     * Gets record_opening
     *
     * @return string|null
     * @deprecated
     */
    public function getRecordOpening()
    {
        return $this->container['record_opening'];
    }

    /**
     * Sets record_opening
     *
     * @param string|null $record_opening record_opening
     *
     * @return self
     * @deprecated
     */
    public function setRecordOpening($record_opening)
    {
        if (is_null($record_opening)) {
            throw new \InvalidArgumentException('non-nullable record_opening cannot be null');
        }
        $this->container['record_opening'] = $record_opening;

        return $this;
    }

    /**
     * Gets reply_date
     *
     * @return int|null
     */
    public function getReplyDate()
    {
        return $this->container['reply_date'];
    }

    /**
     * Sets reply_date
     *
     * @param int|null $reply_date reply_date
     *
     * @return self
     */
    public function setReplyDate($reply_date)
    {
        if (is_null($reply_date)) {
            throw new \InvalidArgumentException('non-nullable reply_date cannot be null');
        }
        $this->container['reply_date'] = $reply_date;

        return $this;
    }

    /**
     * Gets request_date
     *
     * @return int|null
     */
    public function getRequestDate()
    {
        return $this->container['request_date'];
    }

    /**
     * Sets request_date
     *
     * @param int|null $request_date request_date
     *
     * @return self
     */
    public function setRequestDate($request_date)
    {
        if (is_null($request_date)) {
            throw new \InvalidArgumentException('non-nullable request_date cannot be null');
        }
        $this->container['request_date'] = $request_date;

        return $this;
    }

    /**
     * Gets sent_to_recipient
     *
     * @return bool|null
     * @deprecated
     */
    public function getSentToRecipient()
    {
        return $this->container['sent_to_recipient'];
    }

    /**
     * Sets sent_to_recipient
     *
     * @param bool|null $sent_to_recipient sent_to_recipient
     *
     * @return self
     * @deprecated
     */
    public function setSentToRecipient($sent_to_recipient)
    {
        if (is_null($sent_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable sent_to_recipient cannot be null');
        }
        $this->container['sent_to_recipient'] = $sent_to_recipient;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\PurchaseOrderRequestSupplierStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\PurchaseOrderRequestSupplierStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string|null $supplier_id supplier_id
     *
     * @return self
     */
    public function setSupplierId($supplier_id)
    {
        if (is_null($supplier_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_id cannot be null');
        }
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets supplier_number
     *
     * @return string|null
     * @deprecated
     */
    public function getSupplierNumber()
    {
        return $this->container['supplier_number'];
    }

    /**
     * Sets supplier_number
     *
     * @param string|null $supplier_number supplier_number
     *
     * @return self
     * @deprecated
     */
    public function setSupplierNumber($supplier_number)
    {
        if (is_null($supplier_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_number cannot be null');
        }
        $this->container['supplier_number'] = $supplier_number;

        return $this;
    }

    /**
     * Gets supplier_reference
     *
     * @return string|null
     */
    public function getSupplierReference()
    {
        return $this->container['supplier_reference'];
    }

    /**
     * Sets supplier_reference
     *
     * @param string|null $supplier_reference supplier_reference
     *
     * @return self
     */
    public function setSupplierReference($supplier_reference)
    {
        if (is_null($supplier_reference)) {
            throw new \InvalidArgumentException('non-nullable supplier_reference cannot be null');
        }
        if ((mb_strlen($supplier_reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $supplier_reference when calling PurchaseOrderRequestOffer., must be smaller than or equal to 255.');
        }

        $this->container['supplier_reference'] = $supplier_reference;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     * @deprecated
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     * @deprecated
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets term_of_payment_id
     *
     * @return string|null
     */
    public function getTermOfPaymentId()
    {
        return $this->container['term_of_payment_id'];
    }

    /**
     * Sets term_of_payment_id
     *
     * @param string|null $term_of_payment_id term_of_payment_id
     *
     * @return self
     */
    public function setTermOfPaymentId($term_of_payment_id)
    {
        if (is_null($term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_id cannot be null');
        }
        $this->container['term_of_payment_id'] = $term_of_payment_id;

        return $this;
    }

    /**
     * Gets term_of_payment_name
     *
     * @return string|null
     * @deprecated
     */
    public function getTermOfPaymentName()
    {
        return $this->container['term_of_payment_name'];
    }

    /**
     * Sets term_of_payment_name
     *
     * @param string|null $term_of_payment_name term_of_payment_name
     *
     * @return self
     * @deprecated
     */
    public function setTermOfPaymentName($term_of_payment_name)
    {
        if (is_null($term_of_payment_name)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_name cannot be null');
        }
        $this->container['term_of_payment_name'] = $term_of_payment_name;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return int|null
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param int|null $valid_from valid_from
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            throw new \InvalidArgumentException('non-nullable valid_from cannot be null');
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return int|null
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param int|null $valid_to valid_to
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            throw new \InvalidArgumentException('non-nullable valid_to cannot be null');
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


