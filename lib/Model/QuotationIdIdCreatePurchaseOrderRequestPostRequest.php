<?php
/**
 * QuotationIdIdCreatePurchaseOrderRequestPostRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * QuotationIdIdCreatePurchaseOrderRequestPostRequest Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuotationIdIdCreatePurchaseOrderRequestPostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quotation_id__id__createPurchaseOrderRequest_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_type' => 'string',
        'warehouse_id' => 'string',
        'supplier_ids' => 'string[]',
        'quotation_item_ids' => 'string[]',
        'use_item_quantity' => 'bool',
        'merge_items' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_type' => null,
        'warehouse_id' => null,
        'supplier_ids' => null,
        'quotation_item_ids' => null,
        'use_item_quantity' => null,
        'merge_items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_type' => false,
        'warehouse_id' => false,
        'supplier_ids' => false,
        'quotation_item_ids' => false,
        'use_item_quantity' => false,
        'merge_items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_type' => 'requestType',
        'warehouse_id' => 'warehouseId',
        'supplier_ids' => 'supplierIds',
        'quotation_item_ids' => 'quotationItemIds',
        'use_item_quantity' => 'useItemQuantity',
        'merge_items' => 'mergeItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_type' => 'setRequestType',
        'warehouse_id' => 'setWarehouseId',
        'supplier_ids' => 'setSupplierIds',
        'quotation_item_ids' => 'setQuotationItemIds',
        'use_item_quantity' => 'setUseItemQuantity',
        'merge_items' => 'setMergeItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_type' => 'getRequestType',
        'warehouse_id' => 'getWarehouseId',
        'supplier_ids' => 'getSupplierIds',
        'quotation_item_ids' => 'getQuotationItemIds',
        'use_item_quantity' => 'getUseItemQuantity',
        'merge_items' => 'getMergeItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REQUEST_TYPE_BLANKET_ORDER_REQUEST = 'BLANKET_ORDER_REQUEST';
    public const REQUEST_TYPE_BLANKET_PURCHASE_ORDER_REQUEST = 'BLANKET_PURCHASE_ORDER_REQUEST';
    public const REQUEST_TYPE_DROP_SHIPPING_REQUEST = 'DROP_SHIPPING_REQUEST';
    public const REQUEST_TYPE_PURCHASE_ORDER_REQUEST = 'PURCHASE_ORDER_REQUEST';
    public const REQUEST_TYPE_SALES_ORDER_COMMISSION_REQUEST = 'SALES_ORDER_COMMISSION_REQUEST';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestTypeAllowableValues()
    {
        return [
            self::REQUEST_TYPE_BLANKET_ORDER_REQUEST,
            self::REQUEST_TYPE_BLANKET_PURCHASE_ORDER_REQUEST,
            self::REQUEST_TYPE_DROP_SHIPPING_REQUEST,
            self::REQUEST_TYPE_PURCHASE_ORDER_REQUEST,
            self::REQUEST_TYPE_SALES_ORDER_COMMISSION_REQUEST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('request_type', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('supplier_ids', $data ?? [], null);
        $this->setIfExists('quotation_item_ids', $data ?? [], null);
        $this->setIfExists('use_item_quantity', $data ?? [], null);
        $this->setIfExists('merge_items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_type'] === null) {
            $invalidProperties[] = "'request_type' can't be null";
        }
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!is_null($this->container['request_type']) && !in_array($this->container['request_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'request_type', must be one of '%s'",
                $this->container['request_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['warehouse_id'] === null) {
            $invalidProperties[] = "'warehouse_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_type
     *
     * @return string
     */
    public function getRequestType()
    {
        return $this->container['request_type'];
    }

    /**
     * Sets request_type
     *
     * @param string $request_type request_type
     *
     * @return self
     */
    public function setRequestType($request_type)
    {
        if (is_null($request_type)) {
            throw new \InvalidArgumentException('non-nullable request_type cannot be null');
        }
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!in_array($request_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'request_type', must be one of '%s'",
                    $request_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_type'] = $request_type;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets supplier_ids
     *
     * @return string[]|null
     */
    public function getSupplierIds()
    {
        return $this->container['supplier_ids'];
    }

    /**
     * Sets supplier_ids
     *
     * @param string[]|null $supplier_ids supplier_ids
     *
     * @return self
     */
    public function setSupplierIds($supplier_ids)
    {
        if (is_null($supplier_ids)) {
            throw new \InvalidArgumentException('non-nullable supplier_ids cannot be null');
        }
        $this->container['supplier_ids'] = $supplier_ids;

        return $this;
    }

    /**
     * Gets quotation_item_ids
     *
     * @return string[]|null
     */
    public function getQuotationItemIds()
    {
        return $this->container['quotation_item_ids'];
    }

    /**
     * Sets quotation_item_ids
     *
     * @param string[]|null $quotation_item_ids quotation_item_ids
     *
     * @return self
     */
    public function setQuotationItemIds($quotation_item_ids)
    {
        if (is_null($quotation_item_ids)) {
            throw new \InvalidArgumentException('non-nullable quotation_item_ids cannot be null');
        }
        $this->container['quotation_item_ids'] = $quotation_item_ids;

        return $this;
    }

    /**
     * Gets use_item_quantity
     *
     * @return bool|null
     */
    public function getUseItemQuantity()
    {
        return $this->container['use_item_quantity'];
    }

    /**
     * Sets use_item_quantity
     *
     * @param bool|null $use_item_quantity use_item_quantity
     *
     * @return self
     */
    public function setUseItemQuantity($use_item_quantity)
    {
        if (is_null($use_item_quantity)) {
            throw new \InvalidArgumentException('non-nullable use_item_quantity cannot be null');
        }
        $this->container['use_item_quantity'] = $use_item_quantity;

        return $this;
    }

    /**
     * Gets merge_items
     *
     * @return bool|null
     */
    public function getMergeItems()
    {
        return $this->container['merge_items'];
    }

    /**
     * Sets merge_items
     *
     * @param bool|null $merge_items merge_items
     *
     * @return self
     */
    public function setMergeItems($merge_items)
    {
        if (is_null($merge_items)) {
            throw new \InvalidArgumentException('non-nullable merge_items cannot be null');
        }
        $this->container['merge_items'] = $merge_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


