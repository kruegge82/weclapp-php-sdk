<?php
/**
 * SalesOrderGet200ResponseAdditionalProperties
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * SalesOrderGet200ResponseAdditionalProperties Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SalesOrderGet200ResponseAdditionalProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_salesOrder_get_200_response_additionalProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'availability' => '\kruegge82\weclapp\Model\DispositionInfoAvailabilityType[]',
        'availability_for_all_warehouses' => '\kruegge82\weclapp\Model\DispositionInfoAvailabilityType[]',
        'booked_billable_work' => '\kruegge82\weclapp\Model\Duration[]',
        'booked_work' => '\kruegge82\weclapp\Model\Duration[]',
        'consignment' => 'bool[]',
        'cost_of_services' => '\kruegge82\weclapp\Model\Amount[]',
        'invoiceable_services' => '\kruegge82\weclapp\Model\Amount[]',
        'invoiced_services' => '\kruegge82\weclapp\Model\Amount[]',
        'items_availability' => '\kruegge82\weclapp\Model\ItemAvailability[][]',
        'items_availability_for_all_warehouses' => '\kruegge82\weclapp\Model\ItemAvailability[][]',
        'not_invoiced_services' => '\kruegge82\weclapp\Model\Amount[]',
        'planned_billable_effort' => '\kruegge82\weclapp\Model\Duration[]',
        'planned_effort' => '\kruegge82\weclapp\Model\Duration[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'availability' => null,
        'availability_for_all_warehouses' => null,
        'booked_billable_work' => null,
        'booked_work' => null,
        'consignment' => null,
        'cost_of_services' => null,
        'invoiceable_services' => null,
        'invoiced_services' => null,
        'items_availability' => null,
        'items_availability_for_all_warehouses' => null,
        'not_invoiced_services' => null,
        'planned_billable_effort' => null,
        'planned_effort' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'availability' => false,
        'availability_for_all_warehouses' => false,
        'booked_billable_work' => false,
        'booked_work' => false,
        'consignment' => false,
        'cost_of_services' => false,
        'invoiceable_services' => false,
        'invoiced_services' => false,
        'items_availability' => false,
        'items_availability_for_all_warehouses' => false,
        'not_invoiced_services' => false,
        'planned_billable_effort' => false,
        'planned_effort' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availability' => 'availability',
        'availability_for_all_warehouses' => 'availabilityForAllWarehouses',
        'booked_billable_work' => 'bookedBillableWork',
        'booked_work' => 'bookedWork',
        'consignment' => 'consignment',
        'cost_of_services' => 'costOfServices',
        'invoiceable_services' => 'invoiceableServices',
        'invoiced_services' => 'invoicedServices',
        'items_availability' => 'itemsAvailability',
        'items_availability_for_all_warehouses' => 'itemsAvailabilityForAllWarehouses',
        'not_invoiced_services' => 'notInvoicedServices',
        'planned_billable_effort' => 'plannedBillableEffort',
        'planned_effort' => 'plannedEffort'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availability' => 'setAvailability',
        'availability_for_all_warehouses' => 'setAvailabilityForAllWarehouses',
        'booked_billable_work' => 'setBookedBillableWork',
        'booked_work' => 'setBookedWork',
        'consignment' => 'setConsignment',
        'cost_of_services' => 'setCostOfServices',
        'invoiceable_services' => 'setInvoiceableServices',
        'invoiced_services' => 'setInvoicedServices',
        'items_availability' => 'setItemsAvailability',
        'items_availability_for_all_warehouses' => 'setItemsAvailabilityForAllWarehouses',
        'not_invoiced_services' => 'setNotInvoicedServices',
        'planned_billable_effort' => 'setPlannedBillableEffort',
        'planned_effort' => 'setPlannedEffort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availability' => 'getAvailability',
        'availability_for_all_warehouses' => 'getAvailabilityForAllWarehouses',
        'booked_billable_work' => 'getBookedBillableWork',
        'booked_work' => 'getBookedWork',
        'consignment' => 'getConsignment',
        'cost_of_services' => 'getCostOfServices',
        'invoiceable_services' => 'getInvoiceableServices',
        'invoiced_services' => 'getInvoicedServices',
        'items_availability' => 'getItemsAvailability',
        'items_availability_for_all_warehouses' => 'getItemsAvailabilityForAllWarehouses',
        'not_invoiced_services' => 'getNotInvoicedServices',
        'planned_billable_effort' => 'getPlannedBillableEffort',
        'planned_effort' => 'getPlannedEffort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('availability', $data ?? [], null);
        $this->setIfExists('availability_for_all_warehouses', $data ?? [], null);
        $this->setIfExists('booked_billable_work', $data ?? [], null);
        $this->setIfExists('booked_work', $data ?? [], null);
        $this->setIfExists('consignment', $data ?? [], null);
        $this->setIfExists('cost_of_services', $data ?? [], null);
        $this->setIfExists('invoiceable_services', $data ?? [], null);
        $this->setIfExists('invoiced_services', $data ?? [], null);
        $this->setIfExists('items_availability', $data ?? [], null);
        $this->setIfExists('items_availability_for_all_warehouses', $data ?? [], null);
        $this->setIfExists('not_invoiced_services', $data ?? [], null);
        $this->setIfExists('planned_billable_effort', $data ?? [], null);
        $this->setIfExists('planned_effort', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availability
     *
     * @return \kruegge82\weclapp\Model\DispositionInfoAvailabilityType[]|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \kruegge82\weclapp\Model\DispositionInfoAvailabilityType[]|null $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        if (is_null($availability)) {
            throw new \InvalidArgumentException('non-nullable availability cannot be null');
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets availability_for_all_warehouses
     *
     * @return \kruegge82\weclapp\Model\DispositionInfoAvailabilityType[]|null
     */
    public function getAvailabilityForAllWarehouses()
    {
        return $this->container['availability_for_all_warehouses'];
    }

    /**
     * Sets availability_for_all_warehouses
     *
     * @param \kruegge82\weclapp\Model\DispositionInfoAvailabilityType[]|null $availability_for_all_warehouses availability_for_all_warehouses
     *
     * @return self
     */
    public function setAvailabilityForAllWarehouses($availability_for_all_warehouses)
    {
        if (is_null($availability_for_all_warehouses)) {
            throw new \InvalidArgumentException('non-nullable availability_for_all_warehouses cannot be null');
        }
        $this->container['availability_for_all_warehouses'] = $availability_for_all_warehouses;

        return $this;
    }

    /**
     * Gets booked_billable_work
     *
     * @return \kruegge82\weclapp\Model\Duration[]|null
     */
    public function getBookedBillableWork()
    {
        return $this->container['booked_billable_work'];
    }

    /**
     * Sets booked_billable_work
     *
     * @param \kruegge82\weclapp\Model\Duration[]|null $booked_billable_work booked_billable_work
     *
     * @return self
     */
    public function setBookedBillableWork($booked_billable_work)
    {
        if (is_null($booked_billable_work)) {
            throw new \InvalidArgumentException('non-nullable booked_billable_work cannot be null');
        }
        $this->container['booked_billable_work'] = $booked_billable_work;

        return $this;
    }

    /**
     * Gets booked_work
     *
     * @return \kruegge82\weclapp\Model\Duration[]|null
     */
    public function getBookedWork()
    {
        return $this->container['booked_work'];
    }

    /**
     * Sets booked_work
     *
     * @param \kruegge82\weclapp\Model\Duration[]|null $booked_work booked_work
     *
     * @return self
     */
    public function setBookedWork($booked_work)
    {
        if (is_null($booked_work)) {
            throw new \InvalidArgumentException('non-nullable booked_work cannot be null');
        }
        $this->container['booked_work'] = $booked_work;

        return $this;
    }

    /**
     * Gets consignment
     *
     * @return bool[]|null
     */
    public function getConsignment()
    {
        return $this->container['consignment'];
    }

    /**
     * Sets consignment
     *
     * @param bool[]|null $consignment consignment
     *
     * @return self
     */
    public function setConsignment($consignment)
    {
        if (is_null($consignment)) {
            throw new \InvalidArgumentException('non-nullable consignment cannot be null');
        }
        $this->container['consignment'] = $consignment;

        return $this;
    }

    /**
     * Gets cost_of_services
     *
     * @return \kruegge82\weclapp\Model\Amount[]|null
     */
    public function getCostOfServices()
    {
        return $this->container['cost_of_services'];
    }

    /**
     * Sets cost_of_services
     *
     * @param \kruegge82\weclapp\Model\Amount[]|null $cost_of_services cost_of_services
     *
     * @return self
     */
    public function setCostOfServices($cost_of_services)
    {
        if (is_null($cost_of_services)) {
            throw new \InvalidArgumentException('non-nullable cost_of_services cannot be null');
        }
        $this->container['cost_of_services'] = $cost_of_services;

        return $this;
    }

    /**
     * Gets invoiceable_services
     *
     * @return \kruegge82\weclapp\Model\Amount[]|null
     */
    public function getInvoiceableServices()
    {
        return $this->container['invoiceable_services'];
    }

    /**
     * Sets invoiceable_services
     *
     * @param \kruegge82\weclapp\Model\Amount[]|null $invoiceable_services invoiceable_services
     *
     * @return self
     */
    public function setInvoiceableServices($invoiceable_services)
    {
        if (is_null($invoiceable_services)) {
            throw new \InvalidArgumentException('non-nullable invoiceable_services cannot be null');
        }
        $this->container['invoiceable_services'] = $invoiceable_services;

        return $this;
    }

    /**
     * Gets invoiced_services
     *
     * @return \kruegge82\weclapp\Model\Amount[]|null
     */
    public function getInvoicedServices()
    {
        return $this->container['invoiced_services'];
    }

    /**
     * Sets invoiced_services
     *
     * @param \kruegge82\weclapp\Model\Amount[]|null $invoiced_services invoiced_services
     *
     * @return self
     */
    public function setInvoicedServices($invoiced_services)
    {
        if (is_null($invoiced_services)) {
            throw new \InvalidArgumentException('non-nullable invoiced_services cannot be null');
        }
        $this->container['invoiced_services'] = $invoiced_services;

        return $this;
    }

    /**
     * Gets items_availability
     *
     * @return \kruegge82\weclapp\Model\ItemAvailability[][]|null
     */
    public function getItemsAvailability()
    {
        return $this->container['items_availability'];
    }

    /**
     * Sets items_availability
     *
     * @param \kruegge82\weclapp\Model\ItemAvailability[][]|null $items_availability items_availability
     *
     * @return self
     */
    public function setItemsAvailability($items_availability)
    {
        if (is_null($items_availability)) {
            throw new \InvalidArgumentException('non-nullable items_availability cannot be null');
        }
        $this->container['items_availability'] = $items_availability;

        return $this;
    }

    /**
     * Gets items_availability_for_all_warehouses
     *
     * @return \kruegge82\weclapp\Model\ItemAvailability[][]|null
     */
    public function getItemsAvailabilityForAllWarehouses()
    {
        return $this->container['items_availability_for_all_warehouses'];
    }

    /**
     * Sets items_availability_for_all_warehouses
     *
     * @param \kruegge82\weclapp\Model\ItemAvailability[][]|null $items_availability_for_all_warehouses items_availability_for_all_warehouses
     *
     * @return self
     */
    public function setItemsAvailabilityForAllWarehouses($items_availability_for_all_warehouses)
    {
        if (is_null($items_availability_for_all_warehouses)) {
            throw new \InvalidArgumentException('non-nullable items_availability_for_all_warehouses cannot be null');
        }
        $this->container['items_availability_for_all_warehouses'] = $items_availability_for_all_warehouses;

        return $this;
    }

    /**
     * Gets not_invoiced_services
     *
     * @return \kruegge82\weclapp\Model\Amount[]|null
     */
    public function getNotInvoicedServices()
    {
        return $this->container['not_invoiced_services'];
    }

    /**
     * Sets not_invoiced_services
     *
     * @param \kruegge82\weclapp\Model\Amount[]|null $not_invoiced_services not_invoiced_services
     *
     * @return self
     */
    public function setNotInvoicedServices($not_invoiced_services)
    {
        if (is_null($not_invoiced_services)) {
            throw new \InvalidArgumentException('non-nullable not_invoiced_services cannot be null');
        }
        $this->container['not_invoiced_services'] = $not_invoiced_services;

        return $this;
    }

    /**
     * Gets planned_billable_effort
     *
     * @return \kruegge82\weclapp\Model\Duration[]|null
     */
    public function getPlannedBillableEffort()
    {
        return $this->container['planned_billable_effort'];
    }

    /**
     * Sets planned_billable_effort
     *
     * @param \kruegge82\weclapp\Model\Duration[]|null $planned_billable_effort planned_billable_effort
     *
     * @return self
     */
    public function setPlannedBillableEffort($planned_billable_effort)
    {
        if (is_null($planned_billable_effort)) {
            throw new \InvalidArgumentException('non-nullable planned_billable_effort cannot be null');
        }
        $this->container['planned_billable_effort'] = $planned_billable_effort;

        return $this;
    }

    /**
     * Gets planned_effort
     *
     * @return \kruegge82\weclapp\Model\Duration[]|null
     */
    public function getPlannedEffort()
    {
        return $this->container['planned_effort'];
    }

    /**
     * Sets planned_effort
     *
     * @param \kruegge82\weclapp\Model\Duration[]|null $planned_effort planned_effort
     *
     * @return self
     */
    public function setPlannedEffort($planned_effort)
    {
        if (is_null($planned_effort)) {
            throw new \InvalidArgumentException('non-nullable planned_effort cannot be null');
        }
        $this->container['planned_effort'] = $planned_effort;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


