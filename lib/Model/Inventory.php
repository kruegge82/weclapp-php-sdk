<?php
/**
 * Inventory
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Inventory Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Inventory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inventory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'counter' => 'string',
        'description' => 'string',
        'end_date' => 'int',
        'inventory_group_id' => 'string',
        'inventory_number' => 'string',
        'level_of_detail' => '\kruegge82\weclapp\Model\LevelOfDetail',
        'manager_id' => 'string',
        'recorder' => 'string',
        'start_date' => 'int',
        'status' => '\kruegge82\weclapp\Model\InventoryStatusType',
        'status_history' => '\kruegge82\weclapp\Model\InventoryStatusHistory[]',
        'warehouse_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'counter' => null,
        'description' => null,
        'end_date' => 'timestamp',
        'inventory_group_id' => null,
        'inventory_number' => null,
        'level_of_detail' => null,
        'manager_id' => null,
        'recorder' => null,
        'start_date' => 'timestamp',
        'status' => null,
        'status_history' => null,
        'warehouse_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'counter' => false,
        'description' => false,
        'end_date' => false,
        'inventory_group_id' => false,
        'inventory_number' => false,
        'level_of_detail' => false,
        'manager_id' => false,
        'recorder' => false,
        'start_date' => false,
        'status' => false,
        'status_history' => false,
        'warehouse_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'counter' => 'counter',
        'description' => 'description',
        'end_date' => 'endDate',
        'inventory_group_id' => 'inventoryGroupId',
        'inventory_number' => 'inventoryNumber',
        'level_of_detail' => 'levelOfDetail',
        'manager_id' => 'managerId',
        'recorder' => 'recorder',
        'start_date' => 'startDate',
        'status' => 'status',
        'status_history' => 'statusHistory',
        'warehouse_id' => 'warehouseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'counter' => 'setCounter',
        'description' => 'setDescription',
        'end_date' => 'setEndDate',
        'inventory_group_id' => 'setInventoryGroupId',
        'inventory_number' => 'setInventoryNumber',
        'level_of_detail' => 'setLevelOfDetail',
        'manager_id' => 'setManagerId',
        'recorder' => 'setRecorder',
        'start_date' => 'setStartDate',
        'status' => 'setStatus',
        'status_history' => 'setStatusHistory',
        'warehouse_id' => 'setWarehouseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'counter' => 'getCounter',
        'description' => 'getDescription',
        'end_date' => 'getEndDate',
        'inventory_group_id' => 'getInventoryGroupId',
        'inventory_number' => 'getInventoryNumber',
        'level_of_detail' => 'getLevelOfDetail',
        'manager_id' => 'getManagerId',
        'recorder' => 'getRecorder',
        'start_date' => 'getStartDate',
        'status' => 'getStatus',
        'status_history' => 'getStatusHistory',
        'warehouse_id' => 'getWarehouseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('counter', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('inventory_group_id', $data ?? [], null);
        $this->setIfExists('inventory_number', $data ?? [], null);
        $this->setIfExists('level_of_detail', $data ?? [], null);
        $this->setIfExists('manager_id', $data ?? [], null);
        $this->setIfExists('recorder', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['counter']) && (mb_strlen($this->container['counter']) > 255)) {
            $invalidProperties[] = "invalid value for 'counter', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['inventory_number']) && (mb_strlen($this->container['inventory_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'inventory_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['recorder']) && (mb_strlen($this->container['recorder']) > 255)) {
            $invalidProperties[] = "invalid value for 'recorder', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets counter
     *
     * @return string|null
     */
    public function getCounter()
    {
        return $this->container['counter'];
    }

    /**
     * Sets counter
     *
     * @param string|null $counter counter
     *
     * @return self
     */
    public function setCounter($counter)
    {
        if (is_null($counter)) {
            throw new \InvalidArgumentException('non-nullable counter cannot be null');
        }
        if ((mb_strlen($counter) > 255)) {
            throw new \InvalidArgumentException('invalid length for $counter when calling Inventory., must be smaller than or equal to 255.');
        }

        $this->container['counter'] = $counter;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Inventory., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return int|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param int|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets inventory_group_id
     *
     * @return string|null
     */
    public function getInventoryGroupId()
    {
        return $this->container['inventory_group_id'];
    }

    /**
     * Sets inventory_group_id
     *
     * @param string|null $inventory_group_id inventory_group_id
     *
     * @return self
     */
    public function setInventoryGroupId($inventory_group_id)
    {
        if (is_null($inventory_group_id)) {
            throw new \InvalidArgumentException('non-nullable inventory_group_id cannot be null');
        }
        $this->container['inventory_group_id'] = $inventory_group_id;

        return $this;
    }

    /**
     * Gets inventory_number
     *
     * @return string|null
     */
    public function getInventoryNumber()
    {
        return $this->container['inventory_number'];
    }

    /**
     * Sets inventory_number
     *
     * @param string|null $inventory_number inventory_number
     *
     * @return self
     */
    public function setInventoryNumber($inventory_number)
    {
        if (is_null($inventory_number)) {
            throw new \InvalidArgumentException('non-nullable inventory_number cannot be null');
        }
        if ((mb_strlen($inventory_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $inventory_number when calling Inventory., must be smaller than or equal to 255.');
        }

        $this->container['inventory_number'] = $inventory_number;

        return $this;
    }

    /**
     * Gets level_of_detail
     *
     * @return \kruegge82\weclapp\Model\LevelOfDetail|null
     */
    public function getLevelOfDetail()
    {
        return $this->container['level_of_detail'];
    }

    /**
     * Sets level_of_detail
     *
     * @param \kruegge82\weclapp\Model\LevelOfDetail|null $level_of_detail level_of_detail
     *
     * @return self
     */
    public function setLevelOfDetail($level_of_detail)
    {
        if (is_null($level_of_detail)) {
            throw new \InvalidArgumentException('non-nullable level_of_detail cannot be null');
        }
        $this->container['level_of_detail'] = $level_of_detail;

        return $this;
    }

    /**
     * Gets manager_id
     *
     * @return string|null
     */
    public function getManagerId()
    {
        return $this->container['manager_id'];
    }

    /**
     * Sets manager_id
     *
     * @param string|null $manager_id manager_id
     *
     * @return self
     */
    public function setManagerId($manager_id)
    {
        if (is_null($manager_id)) {
            throw new \InvalidArgumentException('non-nullable manager_id cannot be null');
        }
        $this->container['manager_id'] = $manager_id;

        return $this;
    }

    /**
     * Gets recorder
     *
     * @return string|null
     */
    public function getRecorder()
    {
        return $this->container['recorder'];
    }

    /**
     * Sets recorder
     *
     * @param string|null $recorder recorder
     *
     * @return self
     */
    public function setRecorder($recorder)
    {
        if (is_null($recorder)) {
            throw new \InvalidArgumentException('non-nullable recorder cannot be null');
        }
        if ((mb_strlen($recorder) > 255)) {
            throw new \InvalidArgumentException('invalid length for $recorder when calling Inventory., must be smaller than or equal to 255.');
        }

        $this->container['recorder'] = $recorder;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \kruegge82\weclapp\Model\InventoryStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \kruegge82\weclapp\Model\InventoryStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \kruegge82\weclapp\Model\InventoryStatusHistory[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \kruegge82\weclapp\Model\InventoryStatusHistory[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id warehouse_id
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


