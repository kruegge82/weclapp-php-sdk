<?php
/**
 * Ticket
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Ticket Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Ticket implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'assigned_pooling_group_id' => 'string',
        'assigned_user_id' => 'string',
        'billable' => 'bool',
        'billable_status' => 'bool',
        'cc_email_addresses' => 'string',
        'contact_id' => 'string',
        'contract_id' => 'string',
        'description' => 'string',
        'disable_email_templates' => 'bool',
        'email' => 'string',
        'entity_references' => '\kruegge82\weclapp\Model\EntityReference[]',
        'finished_date' => 'int',
        'first_name' => 'string',
        'follow_up_date' => 'int',
        'invoicing_status' => '\kruegge82\weclapp\Model\BillableInvoiceStatus',
        'is_template' => 'bool',
        'language' => 'string',
        'last_name' => 'string',
        'legacy_article_id' => 'string',
        'legacy_time_and_material_ticket' => 'bool',
        'mail2_ticket_id' => 'string',
        'mobile_phone_number' => 'string',
        'note' => 'string',
        'party_id' => 'string',
        'performance_recorded_status' => '\kruegge82\weclapp\Model\PerformanceRecordedStatus',
        'phone_number' => 'string',
        'public_page_expiration_date' => 'int',
        'public_page_uuid' => 'string',
        'resolved_your_issue' => 'bool',
        'responsible_user_id' => 'string',
        'room' => 'string',
        'sales_order_id' => 'string',
        'solution_due_date' => 'int',
        'subject' => 'string',
        'tags' => 'string[]',
        'ticket_category_id' => 'string',
        'ticket_channel_id' => 'string',
        'ticket_number' => 'string',
        'ticket_priority_id' => 'string',
        'ticket_rating' => '\kruegge82\weclapp\Model\Rating',
        'ticket_rating_comment' => 'string',
        'ticket_rating_date' => 'int',
        'ticket_service_level_agreement_id' => 'string',
        'ticket_status_id' => 'string',
        'ticket_type_id' => 'string',
        'watchers' => '\kruegge82\weclapp\Model\OnlyId[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'assigned_pooling_group_id' => null,
        'assigned_user_id' => null,
        'billable' => null,
        'billable_status' => null,
        'cc_email_addresses' => null,
        'contact_id' => null,
        'contract_id' => null,
        'description' => 'html',
        'disable_email_templates' => null,
        'email' => 'email',
        'entity_references' => null,
        'finished_date' => 'timestamp',
        'first_name' => null,
        'follow_up_date' => 'timestamp',
        'invoicing_status' => null,
        'is_template' => null,
        'language' => null,
        'last_name' => null,
        'legacy_article_id' => null,
        'legacy_time_and_material_ticket' => null,
        'mail2_ticket_id' => null,
        'mobile_phone_number' => null,
        'note' => null,
        'party_id' => null,
        'performance_recorded_status' => null,
        'phone_number' => null,
        'public_page_expiration_date' => 'timestamp',
        'public_page_uuid' => null,
        'resolved_your_issue' => null,
        'responsible_user_id' => null,
        'room' => null,
        'sales_order_id' => null,
        'solution_due_date' => 'timestamp',
        'subject' => null,
        'tags' => null,
        'ticket_category_id' => null,
        'ticket_channel_id' => null,
        'ticket_number' => null,
        'ticket_priority_id' => null,
        'ticket_rating' => null,
        'ticket_rating_comment' => null,
        'ticket_rating_date' => 'timestamp',
        'ticket_service_level_agreement_id' => null,
        'ticket_status_id' => null,
        'ticket_type_id' => null,
        'watchers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'assigned_pooling_group_id' => false,
        'assigned_user_id' => false,
        'billable' => false,
        'billable_status' => false,
        'cc_email_addresses' => false,
        'contact_id' => false,
        'contract_id' => false,
        'description' => false,
        'disable_email_templates' => false,
        'email' => false,
        'entity_references' => false,
        'finished_date' => false,
        'first_name' => false,
        'follow_up_date' => false,
        'invoicing_status' => false,
        'is_template' => false,
        'language' => false,
        'last_name' => false,
        'legacy_article_id' => false,
        'legacy_time_and_material_ticket' => false,
        'mail2_ticket_id' => false,
        'mobile_phone_number' => false,
        'note' => false,
        'party_id' => false,
        'performance_recorded_status' => false,
        'phone_number' => false,
        'public_page_expiration_date' => false,
        'public_page_uuid' => false,
        'resolved_your_issue' => false,
        'responsible_user_id' => false,
        'room' => false,
        'sales_order_id' => false,
        'solution_due_date' => false,
        'subject' => false,
        'tags' => false,
        'ticket_category_id' => false,
        'ticket_channel_id' => false,
        'ticket_number' => false,
        'ticket_priority_id' => false,
        'ticket_rating' => false,
        'ticket_rating_comment' => false,
        'ticket_rating_date' => false,
        'ticket_service_level_agreement_id' => false,
        'ticket_status_id' => false,
        'ticket_type_id' => false,
        'watchers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'assigned_pooling_group_id' => 'assignedPoolingGroupId',
        'assigned_user_id' => 'assignedUserId',
        'billable' => 'billable',
        'billable_status' => 'billableStatus',
        'cc_email_addresses' => 'ccEmailAddresses',
        'contact_id' => 'contactId',
        'contract_id' => 'contractId',
        'description' => 'description',
        'disable_email_templates' => 'disableEmailTemplates',
        'email' => 'email',
        'entity_references' => 'entityReferences',
        'finished_date' => 'finishedDate',
        'first_name' => 'firstName',
        'follow_up_date' => 'followUpDate',
        'invoicing_status' => 'invoicingStatus',
        'is_template' => 'isTemplate',
        'language' => 'language',
        'last_name' => 'lastName',
        'legacy_article_id' => 'legacyArticleId',
        'legacy_time_and_material_ticket' => 'legacyTimeAndMaterialTicket',
        'mail2_ticket_id' => 'mail2TicketId',
        'mobile_phone_number' => 'mobilePhoneNumber',
        'note' => 'note',
        'party_id' => 'partyId',
        'performance_recorded_status' => 'performanceRecordedStatus',
        'phone_number' => 'phoneNumber',
        'public_page_expiration_date' => 'publicPageExpirationDate',
        'public_page_uuid' => 'publicPageUuid',
        'resolved_your_issue' => 'resolvedYourIssue',
        'responsible_user_id' => 'responsibleUserId',
        'room' => 'room',
        'sales_order_id' => 'salesOrderId',
        'solution_due_date' => 'solutionDueDate',
        'subject' => 'subject',
        'tags' => 'tags',
        'ticket_category_id' => 'ticketCategoryId',
        'ticket_channel_id' => 'ticketChannelId',
        'ticket_number' => 'ticketNumber',
        'ticket_priority_id' => 'ticketPriorityId',
        'ticket_rating' => 'ticketRating',
        'ticket_rating_comment' => 'ticketRatingComment',
        'ticket_rating_date' => 'ticketRatingDate',
        'ticket_service_level_agreement_id' => 'ticketServiceLevelAgreementId',
        'ticket_status_id' => 'ticketStatusId',
        'ticket_type_id' => 'ticketTypeId',
        'watchers' => 'watchers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'assigned_pooling_group_id' => 'setAssignedPoolingGroupId',
        'assigned_user_id' => 'setAssignedUserId',
        'billable' => 'setBillable',
        'billable_status' => 'setBillableStatus',
        'cc_email_addresses' => 'setCcEmailAddresses',
        'contact_id' => 'setContactId',
        'contract_id' => 'setContractId',
        'description' => 'setDescription',
        'disable_email_templates' => 'setDisableEmailTemplates',
        'email' => 'setEmail',
        'entity_references' => 'setEntityReferences',
        'finished_date' => 'setFinishedDate',
        'first_name' => 'setFirstName',
        'follow_up_date' => 'setFollowUpDate',
        'invoicing_status' => 'setInvoicingStatus',
        'is_template' => 'setIsTemplate',
        'language' => 'setLanguage',
        'last_name' => 'setLastName',
        'legacy_article_id' => 'setLegacyArticleId',
        'legacy_time_and_material_ticket' => 'setLegacyTimeAndMaterialTicket',
        'mail2_ticket_id' => 'setMail2TicketId',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'note' => 'setNote',
        'party_id' => 'setPartyId',
        'performance_recorded_status' => 'setPerformanceRecordedStatus',
        'phone_number' => 'setPhoneNumber',
        'public_page_expiration_date' => 'setPublicPageExpirationDate',
        'public_page_uuid' => 'setPublicPageUuid',
        'resolved_your_issue' => 'setResolvedYourIssue',
        'responsible_user_id' => 'setResponsibleUserId',
        'room' => 'setRoom',
        'sales_order_id' => 'setSalesOrderId',
        'solution_due_date' => 'setSolutionDueDate',
        'subject' => 'setSubject',
        'tags' => 'setTags',
        'ticket_category_id' => 'setTicketCategoryId',
        'ticket_channel_id' => 'setTicketChannelId',
        'ticket_number' => 'setTicketNumber',
        'ticket_priority_id' => 'setTicketPriorityId',
        'ticket_rating' => 'setTicketRating',
        'ticket_rating_comment' => 'setTicketRatingComment',
        'ticket_rating_date' => 'setTicketRatingDate',
        'ticket_service_level_agreement_id' => 'setTicketServiceLevelAgreementId',
        'ticket_status_id' => 'setTicketStatusId',
        'ticket_type_id' => 'setTicketTypeId',
        'watchers' => 'setWatchers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'assigned_pooling_group_id' => 'getAssignedPoolingGroupId',
        'assigned_user_id' => 'getAssignedUserId',
        'billable' => 'getBillable',
        'billable_status' => 'getBillableStatus',
        'cc_email_addresses' => 'getCcEmailAddresses',
        'contact_id' => 'getContactId',
        'contract_id' => 'getContractId',
        'description' => 'getDescription',
        'disable_email_templates' => 'getDisableEmailTemplates',
        'email' => 'getEmail',
        'entity_references' => 'getEntityReferences',
        'finished_date' => 'getFinishedDate',
        'first_name' => 'getFirstName',
        'follow_up_date' => 'getFollowUpDate',
        'invoicing_status' => 'getInvoicingStatus',
        'is_template' => 'getIsTemplate',
        'language' => 'getLanguage',
        'last_name' => 'getLastName',
        'legacy_article_id' => 'getLegacyArticleId',
        'legacy_time_and_material_ticket' => 'getLegacyTimeAndMaterialTicket',
        'mail2_ticket_id' => 'getMail2TicketId',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'note' => 'getNote',
        'party_id' => 'getPartyId',
        'performance_recorded_status' => 'getPerformanceRecordedStatus',
        'phone_number' => 'getPhoneNumber',
        'public_page_expiration_date' => 'getPublicPageExpirationDate',
        'public_page_uuid' => 'getPublicPageUuid',
        'resolved_your_issue' => 'getResolvedYourIssue',
        'responsible_user_id' => 'getResponsibleUserId',
        'room' => 'getRoom',
        'sales_order_id' => 'getSalesOrderId',
        'solution_due_date' => 'getSolutionDueDate',
        'subject' => 'getSubject',
        'tags' => 'getTags',
        'ticket_category_id' => 'getTicketCategoryId',
        'ticket_channel_id' => 'getTicketChannelId',
        'ticket_number' => 'getTicketNumber',
        'ticket_priority_id' => 'getTicketPriorityId',
        'ticket_rating' => 'getTicketRating',
        'ticket_rating_comment' => 'getTicketRatingComment',
        'ticket_rating_date' => 'getTicketRatingDate',
        'ticket_service_level_agreement_id' => 'getTicketServiceLevelAgreementId',
        'ticket_status_id' => 'getTicketStatusId',
        'ticket_type_id' => 'getTicketTypeId',
        'watchers' => 'getWatchers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('assigned_pooling_group_id', $data ?? [], null);
        $this->setIfExists('assigned_user_id', $data ?? [], null);
        $this->setIfExists('billable', $data ?? [], null);
        $this->setIfExists('billable_status', $data ?? [], null);
        $this->setIfExists('cc_email_addresses', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('contract_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('disable_email_templates', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('entity_references', $data ?? [], null);
        $this->setIfExists('finished_date', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('follow_up_date', $data ?? [], null);
        $this->setIfExists('invoicing_status', $data ?? [], null);
        $this->setIfExists('is_template', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('legacy_article_id', $data ?? [], null);
        $this->setIfExists('legacy_time_and_material_ticket', $data ?? [], null);
        $this->setIfExists('mail2_ticket_id', $data ?? [], null);
        $this->setIfExists('mobile_phone_number', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('party_id', $data ?? [], null);
        $this->setIfExists('performance_recorded_status', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('public_page_expiration_date', $data ?? [], null);
        $this->setIfExists('public_page_uuid', $data ?? [], null);
        $this->setIfExists('resolved_your_issue', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('room', $data ?? [], null);
        $this->setIfExists('sales_order_id', $data ?? [], null);
        $this->setIfExists('solution_due_date', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('ticket_category_id', $data ?? [], null);
        $this->setIfExists('ticket_channel_id', $data ?? [], null);
        $this->setIfExists('ticket_number', $data ?? [], null);
        $this->setIfExists('ticket_priority_id', $data ?? [], null);
        $this->setIfExists('ticket_rating', $data ?? [], null);
        $this->setIfExists('ticket_rating_comment', $data ?? [], null);
        $this->setIfExists('ticket_rating_date', $data ?? [], null);
        $this->setIfExists('ticket_service_level_agreement_id', $data ?? [], null);
        $this->setIfExists('ticket_status_id', $data ?? [], null);
        $this->setIfExists('ticket_type_id', $data ?? [], null);
        $this->setIfExists('watchers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cc_email_addresses']) && (mb_strlen($this->container['cc_email_addresses']) > 4000)) {
            $invalidProperties[] = "invalid value for 'cc_email_addresses', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 1000)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 1000)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['mobile_phone_number']) && (mb_strlen($this->container['mobile_phone_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'mobile_phone_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 1000)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['public_page_uuid']) && (mb_strlen($this->container['public_page_uuid']) > 1000)) {
            $invalidProperties[] = "invalid value for 'public_page_uuid', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['room']) && (mb_strlen($this->container['room']) > 50)) {
            $invalidProperties[] = "invalid value for 'room', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 150)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['ticket_number']) && (mb_strlen($this->container['ticket_number']) > 64)) {
            $invalidProperties[] = "invalid value for 'ticket_number', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ticket_rating_comment']) && (mb_strlen($this->container['ticket_rating_comment']) > 1000)) {
            $invalidProperties[] = "invalid value for 'ticket_rating_comment', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets assigned_pooling_group_id
     *
     * @return string|null
     */
    public function getAssignedPoolingGroupId()
    {
        return $this->container['assigned_pooling_group_id'];
    }

    /**
     * Sets assigned_pooling_group_id
     *
     * @param string|null $assigned_pooling_group_id assigned_pooling_group_id
     *
     * @return self
     */
    public function setAssignedPoolingGroupId($assigned_pooling_group_id)
    {
        if (is_null($assigned_pooling_group_id)) {
            throw new \InvalidArgumentException('non-nullable assigned_pooling_group_id cannot be null');
        }
        $this->container['assigned_pooling_group_id'] = $assigned_pooling_group_id;

        return $this;
    }

    /**
     * Gets assigned_user_id
     *
     * @return string|null
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     *
     * @param string|null $assigned_user_id assigned_user_id
     *
     * @return self
     */
    public function setAssignedUserId($assigned_user_id)
    {
        if (is_null($assigned_user_id)) {
            throw new \InvalidArgumentException('non-nullable assigned_user_id cannot be null');
        }
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return bool|null
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param bool|null $billable billable
     *
     * @return self
     */
    public function setBillable($billable)
    {
        if (is_null($billable)) {
            throw new \InvalidArgumentException('non-nullable billable cannot be null');
        }
        $this->container['billable'] = $billable;

        return $this;
    }

    /**
     * Gets billable_status
     *
     * @return bool|null
     */
    public function getBillableStatus()
    {
        return $this->container['billable_status'];
    }

    /**
     * Sets billable_status
     *
     * @param bool|null $billable_status billable_status
     *
     * @return self
     */
    public function setBillableStatus($billable_status)
    {
        if (is_null($billable_status)) {
            throw new \InvalidArgumentException('non-nullable billable_status cannot be null');
        }
        $this->container['billable_status'] = $billable_status;

        return $this;
    }

    /**
     * Gets cc_email_addresses
     *
     * @return string|null
     */
    public function getCcEmailAddresses()
    {
        return $this->container['cc_email_addresses'];
    }

    /**
     * Sets cc_email_addresses
     *
     * @param string|null $cc_email_addresses cc_email_addresses
     *
     * @return self
     */
    public function setCcEmailAddresses($cc_email_addresses)
    {
        if (is_null($cc_email_addresses)) {
            throw new \InvalidArgumentException('non-nullable cc_email_addresses cannot be null');
        }
        if ((mb_strlen($cc_email_addresses) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $cc_email_addresses when calling Ticket., must be smaller than or equal to 4000.');
        }

        $this->container['cc_email_addresses'] = $cc_email_addresses;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        if (is_null($contact_id)) {
            throw new \InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return string|null
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string|null $contract_id contract_id
     *
     * @return self
     */
    public function setContractId($contract_id)
    {
        if (is_null($contract_id)) {
            throw new \InvalidArgumentException('non-nullable contract_id cannot be null');
        }
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Ticket., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disable_email_templates
     *
     * @return bool|null
     */
    public function getDisableEmailTemplates()
    {
        return $this->container['disable_email_templates'];
    }

    /**
     * Sets disable_email_templates
     *
     * @param bool|null $disable_email_templates disable_email_templates
     *
     * @return self
     */
    public function setDisableEmailTemplates($disable_email_templates)
    {
        if (is_null($disable_email_templates)) {
            throw new \InvalidArgumentException('non-nullable disable_email_templates cannot be null');
        }
        $this->container['disable_email_templates'] = $disable_email_templates;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets entity_references
     *
     * @return \kruegge82\weclapp\Model\EntityReference[]|null
     */
    public function getEntityReferences()
    {
        return $this->container['entity_references'];
    }

    /**
     * Sets entity_references
     *
     * @param \kruegge82\weclapp\Model\EntityReference[]|null $entity_references entity_references
     *
     * @return self
     */
    public function setEntityReferences($entity_references)
    {
        if (is_null($entity_references)) {
            throw new \InvalidArgumentException('non-nullable entity_references cannot be null');
        }
        $this->container['entity_references'] = $entity_references;

        return $this;
    }

    /**
     * Gets finished_date
     *
     * @return int|null
     */
    public function getFinishedDate()
    {
        return $this->container['finished_date'];
    }

    /**
     * Sets finished_date
     *
     * @param int|null $finished_date finished_date
     *
     * @return self
     */
    public function setFinishedDate($finished_date)
    {
        if (is_null($finished_date)) {
            throw new \InvalidArgumentException('non-nullable finished_date cannot be null');
        }
        $this->container['finished_date'] = $finished_date;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets follow_up_date
     *
     * @return int|null
     */
    public function getFollowUpDate()
    {
        return $this->container['follow_up_date'];
    }

    /**
     * Sets follow_up_date
     *
     * @param int|null $follow_up_date follow_up_date
     *
     * @return self
     */
    public function setFollowUpDate($follow_up_date)
    {
        if (is_null($follow_up_date)) {
            throw new \InvalidArgumentException('non-nullable follow_up_date cannot be null');
        }
        $this->container['follow_up_date'] = $follow_up_date;

        return $this;
    }

    /**
     * Gets invoicing_status
     *
     * @return \kruegge82\weclapp\Model\BillableInvoiceStatus|null
     */
    public function getInvoicingStatus()
    {
        return $this->container['invoicing_status'];
    }

    /**
     * Sets invoicing_status
     *
     * @param \kruegge82\weclapp\Model\BillableInvoiceStatus|null $invoicing_status invoicing_status
     *
     * @return self
     */
    public function setInvoicingStatus($invoicing_status)
    {
        if (is_null($invoicing_status)) {
            throw new \InvalidArgumentException('non-nullable invoicing_status cannot be null');
        }
        $this->container['invoicing_status'] = $invoicing_status;

        return $this;
    }

    /**
     * Gets is_template
     *
     * @return bool|null
     */
    public function getIsTemplate()
    {
        return $this->container['is_template'];
    }

    /**
     * Sets is_template
     *
     * @param bool|null $is_template is_template
     *
     * @return self
     */
    public function setIsTemplate($is_template)
    {
        if (is_null($is_template)) {
            throw new \InvalidArgumentException('non-nullable is_template cannot be null');
        }
        $this->container['is_template'] = $is_template;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        if ((mb_strlen($language) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $language when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets legacy_article_id
     *
     * @return string|null
     */
    public function getLegacyArticleId()
    {
        return $this->container['legacy_article_id'];
    }

    /**
     * Sets legacy_article_id
     *
     * @param string|null $legacy_article_id legacy_article_id
     *
     * @return self
     */
    public function setLegacyArticleId($legacy_article_id)
    {
        if (is_null($legacy_article_id)) {
            throw new \InvalidArgumentException('non-nullable legacy_article_id cannot be null');
        }
        $this->container['legacy_article_id'] = $legacy_article_id;

        return $this;
    }

    /**
     * Gets legacy_time_and_material_ticket
     *
     * @return bool|null
     */
    public function getLegacyTimeAndMaterialTicket()
    {
        return $this->container['legacy_time_and_material_ticket'];
    }

    /**
     * Sets legacy_time_and_material_ticket
     *
     * @param bool|null $legacy_time_and_material_ticket legacy_time_and_material_ticket
     *
     * @return self
     */
    public function setLegacyTimeAndMaterialTicket($legacy_time_and_material_ticket)
    {
        if (is_null($legacy_time_and_material_ticket)) {
            throw new \InvalidArgumentException('non-nullable legacy_time_and_material_ticket cannot be null');
        }
        $this->container['legacy_time_and_material_ticket'] = $legacy_time_and_material_ticket;

        return $this;
    }

    /**
     * Gets mail2_ticket_id
     *
     * @return string|null
     */
    public function getMail2TicketId()
    {
        return $this->container['mail2_ticket_id'];
    }

    /**
     * Sets mail2_ticket_id
     *
     * @param string|null $mail2_ticket_id mail2_ticket_id
     *
     * @return self
     */
    public function setMail2TicketId($mail2_ticket_id)
    {
        if (is_null($mail2_ticket_id)) {
            throw new \InvalidArgumentException('non-nullable mail2_ticket_id cannot be null');
        }
        $this->container['mail2_ticket_id'] = $mail2_ticket_id;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     *
     * @return string|null
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     *
     * @param string|null $mobile_phone_number mobile_phone_number
     *
     * @return self
     */
    public function setMobilePhoneNumber($mobile_phone_number)
    {
        if (is_null($mobile_phone_number)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone_number cannot be null');
        }
        if ((mb_strlen($mobile_phone_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone_number when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        if ((mb_strlen($note) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $note when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets party_id
     *
     * @return string|null
     */
    public function getPartyId()
    {
        return $this->container['party_id'];
    }

    /**
     * Sets party_id
     *
     * @param string|null $party_id party_id
     *
     * @return self
     */
    public function setPartyId($party_id)
    {
        if (is_null($party_id)) {
            throw new \InvalidArgumentException('non-nullable party_id cannot be null');
        }
        $this->container['party_id'] = $party_id;

        return $this;
    }

    /**
     * Gets performance_recorded_status
     *
     * @return \kruegge82\weclapp\Model\PerformanceRecordedStatus|null
     */
    public function getPerformanceRecordedStatus()
    {
        return $this->container['performance_recorded_status'];
    }

    /**
     * Sets performance_recorded_status
     *
     * @param \kruegge82\weclapp\Model\PerformanceRecordedStatus|null $performance_recorded_status performance_recorded_status
     *
     * @return self
     */
    public function setPerformanceRecordedStatus($performance_recorded_status)
    {
        if (is_null($performance_recorded_status)) {
            throw new \InvalidArgumentException('non-nullable performance_recorded_status cannot be null');
        }
        $this->container['performance_recorded_status'] = $performance_recorded_status;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        if ((mb_strlen($phone_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets public_page_expiration_date
     *
     * @return int|null
     */
    public function getPublicPageExpirationDate()
    {
        return $this->container['public_page_expiration_date'];
    }

    /**
     * Sets public_page_expiration_date
     *
     * @param int|null $public_page_expiration_date public_page_expiration_date
     *
     * @return self
     */
    public function setPublicPageExpirationDate($public_page_expiration_date)
    {
        if (is_null($public_page_expiration_date)) {
            throw new \InvalidArgumentException('non-nullable public_page_expiration_date cannot be null');
        }
        $this->container['public_page_expiration_date'] = $public_page_expiration_date;

        return $this;
    }

    /**
     * Gets public_page_uuid
     *
     * @return string|null
     */
    public function getPublicPageUuid()
    {
        return $this->container['public_page_uuid'];
    }

    /**
     * Sets public_page_uuid
     *
     * @param string|null $public_page_uuid public_page_uuid
     *
     * @return self
     */
    public function setPublicPageUuid($public_page_uuid)
    {
        if (is_null($public_page_uuid)) {
            throw new \InvalidArgumentException('non-nullable public_page_uuid cannot be null');
        }
        if ((mb_strlen($public_page_uuid) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $public_page_uuid when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['public_page_uuid'] = $public_page_uuid;

        return $this;
    }

    /**
     * Gets resolved_your_issue
     *
     * @return bool|null
     */
    public function getResolvedYourIssue()
    {
        return $this->container['resolved_your_issue'];
    }

    /**
     * Sets resolved_your_issue
     *
     * @param bool|null $resolved_your_issue resolved_your_issue
     *
     * @return self
     */
    public function setResolvedYourIssue($resolved_your_issue)
    {
        if (is_null($resolved_your_issue)) {
            throw new \InvalidArgumentException('non-nullable resolved_your_issue cannot be null');
        }
        $this->container['resolved_your_issue'] = $resolved_your_issue;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets room
     *
     * @return string|null
     */
    public function getRoom()
    {
        return $this->container['room'];
    }

    /**
     * Sets room
     *
     * @param string|null $room room
     *
     * @return self
     */
    public function setRoom($room)
    {
        if (is_null($room)) {
            throw new \InvalidArgumentException('non-nullable room cannot be null');
        }
        if ((mb_strlen($room) > 50)) {
            throw new \InvalidArgumentException('invalid length for $room when calling Ticket., must be smaller than or equal to 50.');
        }

        $this->container['room'] = $room;

        return $this;
    }

    /**
     * Gets sales_order_id
     *
     * @return string|null
     */
    public function getSalesOrderId()
    {
        return $this->container['sales_order_id'];
    }

    /**
     * Sets sales_order_id
     *
     * @param string|null $sales_order_id sales_order_id
     *
     * @return self
     */
    public function setSalesOrderId($sales_order_id)
    {
        if (is_null($sales_order_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_id cannot be null');
        }
        $this->container['sales_order_id'] = $sales_order_id;

        return $this;
    }

    /**
     * Gets solution_due_date
     *
     * @return int|null
     */
    public function getSolutionDueDate()
    {
        return $this->container['solution_due_date'];
    }

    /**
     * Sets solution_due_date
     *
     * @param int|null $solution_due_date solution_due_date
     *
     * @return self
     */
    public function setSolutionDueDate($solution_due_date)
    {
        if (is_null($solution_due_date)) {
            throw new \InvalidArgumentException('non-nullable solution_due_date cannot be null');
        }
        $this->container['solution_due_date'] = $solution_due_date;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        if ((mb_strlen($subject) > 150)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling Ticket., must be smaller than or equal to 150.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets ticket_category_id
     *
     * @return string|null
     */
    public function getTicketCategoryId()
    {
        return $this->container['ticket_category_id'];
    }

    /**
     * Sets ticket_category_id
     *
     * @param string|null $ticket_category_id ticket_category_id
     *
     * @return self
     */
    public function setTicketCategoryId($ticket_category_id)
    {
        if (is_null($ticket_category_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_category_id cannot be null');
        }
        $this->container['ticket_category_id'] = $ticket_category_id;

        return $this;
    }

    /**
     * Gets ticket_channel_id
     *
     * @return string|null
     */
    public function getTicketChannelId()
    {
        return $this->container['ticket_channel_id'];
    }

    /**
     * Sets ticket_channel_id
     *
     * @param string|null $ticket_channel_id ticket_channel_id
     *
     * @return self
     */
    public function setTicketChannelId($ticket_channel_id)
    {
        if (is_null($ticket_channel_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_channel_id cannot be null');
        }
        $this->container['ticket_channel_id'] = $ticket_channel_id;

        return $this;
    }

    /**
     * Gets ticket_number
     *
     * @return string|null
     */
    public function getTicketNumber()
    {
        return $this->container['ticket_number'];
    }

    /**
     * Sets ticket_number
     *
     * @param string|null $ticket_number ticket_number
     *
     * @return self
     */
    public function setTicketNumber($ticket_number)
    {
        if (is_null($ticket_number)) {
            throw new \InvalidArgumentException('non-nullable ticket_number cannot be null');
        }
        if ((mb_strlen($ticket_number) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ticket_number when calling Ticket., must be smaller than or equal to 64.');
        }

        $this->container['ticket_number'] = $ticket_number;

        return $this;
    }

    /**
     * Gets ticket_priority_id
     *
     * @return string|null
     */
    public function getTicketPriorityId()
    {
        return $this->container['ticket_priority_id'];
    }

    /**
     * Sets ticket_priority_id
     *
     * @param string|null $ticket_priority_id ticket_priority_id
     *
     * @return self
     */
    public function setTicketPriorityId($ticket_priority_id)
    {
        if (is_null($ticket_priority_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_priority_id cannot be null');
        }
        $this->container['ticket_priority_id'] = $ticket_priority_id;

        return $this;
    }

    /**
     * Gets ticket_rating
     *
     * @return \kruegge82\weclapp\Model\Rating|null
     */
    public function getTicketRating()
    {
        return $this->container['ticket_rating'];
    }

    /**
     * Sets ticket_rating
     *
     * @param \kruegge82\weclapp\Model\Rating|null $ticket_rating ticket_rating
     *
     * @return self
     */
    public function setTicketRating($ticket_rating)
    {
        if (is_null($ticket_rating)) {
            throw new \InvalidArgumentException('non-nullable ticket_rating cannot be null');
        }
        $this->container['ticket_rating'] = $ticket_rating;

        return $this;
    }

    /**
     * Gets ticket_rating_comment
     *
     * @return string|null
     */
    public function getTicketRatingComment()
    {
        return $this->container['ticket_rating_comment'];
    }

    /**
     * Sets ticket_rating_comment
     *
     * @param string|null $ticket_rating_comment ticket_rating_comment
     *
     * @return self
     */
    public function setTicketRatingComment($ticket_rating_comment)
    {
        if (is_null($ticket_rating_comment)) {
            throw new \InvalidArgumentException('non-nullable ticket_rating_comment cannot be null');
        }
        if ((mb_strlen($ticket_rating_comment) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $ticket_rating_comment when calling Ticket., must be smaller than or equal to 1000.');
        }

        $this->container['ticket_rating_comment'] = $ticket_rating_comment;

        return $this;
    }

    /**
     * Gets ticket_rating_date
     *
     * @return int|null
     */
    public function getTicketRatingDate()
    {
        return $this->container['ticket_rating_date'];
    }

    /**
     * Sets ticket_rating_date
     *
     * @param int|null $ticket_rating_date ticket_rating_date
     *
     * @return self
     */
    public function setTicketRatingDate($ticket_rating_date)
    {
        if (is_null($ticket_rating_date)) {
            throw new \InvalidArgumentException('non-nullable ticket_rating_date cannot be null');
        }
        $this->container['ticket_rating_date'] = $ticket_rating_date;

        return $this;
    }

    /**
     * Gets ticket_service_level_agreement_id
     *
     * @return string|null
     */
    public function getTicketServiceLevelAgreementId()
    {
        return $this->container['ticket_service_level_agreement_id'];
    }

    /**
     * Sets ticket_service_level_agreement_id
     *
     * @param string|null $ticket_service_level_agreement_id ticket_service_level_agreement_id
     *
     * @return self
     */
    public function setTicketServiceLevelAgreementId($ticket_service_level_agreement_id)
    {
        if (is_null($ticket_service_level_agreement_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_service_level_agreement_id cannot be null');
        }
        $this->container['ticket_service_level_agreement_id'] = $ticket_service_level_agreement_id;

        return $this;
    }

    /**
     * Gets ticket_status_id
     *
     * @return string|null
     */
    public function getTicketStatusId()
    {
        return $this->container['ticket_status_id'];
    }

    /**
     * Sets ticket_status_id
     *
     * @param string|null $ticket_status_id ticket_status_id
     *
     * @return self
     */
    public function setTicketStatusId($ticket_status_id)
    {
        if (is_null($ticket_status_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_status_id cannot be null');
        }
        $this->container['ticket_status_id'] = $ticket_status_id;

        return $this;
    }

    /**
     * Gets ticket_type_id
     *
     * @return string|null
     */
    public function getTicketTypeId()
    {
        return $this->container['ticket_type_id'];
    }

    /**
     * Sets ticket_type_id
     *
     * @param string|null $ticket_type_id ticket_type_id
     *
     * @return self
     */
    public function setTicketTypeId($ticket_type_id)
    {
        if (is_null($ticket_type_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_type_id cannot be null');
        }
        $this->container['ticket_type_id'] = $ticket_type_id;

        return $this;
    }

    /**
     * Gets watchers
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getWatchers()
    {
        return $this->container['watchers'];
    }

    /**
     * Sets watchers
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $watchers watchers
     *
     * @return self
     */
    public function setWatchers($watchers)
    {
        if (is_null($watchers)) {
            throw new \InvalidArgumentException('non-nullable watchers cannot be null');
        }
        $this->container['watchers'] = $watchers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


