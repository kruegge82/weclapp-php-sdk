<?php
/**
 * ProductionOrderItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * ProductionOrderItem Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductionOrderItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'productionOrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'actual_pick_date' => 'int',
        'actual_quantity' => 'float',
        'article_id' => 'string',
        'availability' => 'string',
        'availability_for_all_warehouses' => 'string',
        'created_date' => 'int',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'last_modified_date' => 'int',
        'note' => 'string',
        'picks' => '\kruegge82\weclapp\Model\ItemPick[]',
        'position_number' => 'int',
        'quantity' => 'float',
        'target_pick_date' => 'int',
        'target_quantity' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'actual_pick_date' => 'timestamp',
        'actual_quantity' => 'number',
        'article_id' => null,
        'availability' => null,
        'availability_for_all_warehouses' => null,
        'created_date' => 'timestamp',
        'custom_attributes' => null,
        'last_modified_date' => 'timestamp',
        'note' => null,
        'picks' => null,
        'position_number' => 'int32',
        'quantity' => 'number',
        'target_pick_date' => 'timestamp',
        'target_quantity' => 'number'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'actual_pick_date' => false,
        'actual_quantity' => false,
        'article_id' => false,
        'availability' => false,
        'availability_for_all_warehouses' => false,
        'created_date' => false,
        'custom_attributes' => false,
        'last_modified_date' => false,
        'note' => false,
        'picks' => false,
        'position_number' => false,
        'quantity' => false,
        'target_pick_date' => false,
        'target_quantity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'actual_pick_date' => 'actualPickDate',
        'actual_quantity' => 'actualQuantity',
        'article_id' => 'articleId',
        'availability' => 'availability',
        'availability_for_all_warehouses' => 'availabilityForAllWarehouses',
        'created_date' => 'createdDate',
        'custom_attributes' => 'customAttributes',
        'last_modified_date' => 'lastModifiedDate',
        'note' => 'note',
        'picks' => 'picks',
        'position_number' => 'positionNumber',
        'quantity' => 'quantity',
        'target_pick_date' => 'targetPickDate',
        'target_quantity' => 'targetQuantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'actual_pick_date' => 'setActualPickDate',
        'actual_quantity' => 'setActualQuantity',
        'article_id' => 'setArticleId',
        'availability' => 'setAvailability',
        'availability_for_all_warehouses' => 'setAvailabilityForAllWarehouses',
        'created_date' => 'setCreatedDate',
        'custom_attributes' => 'setCustomAttributes',
        'last_modified_date' => 'setLastModifiedDate',
        'note' => 'setNote',
        'picks' => 'setPicks',
        'position_number' => 'setPositionNumber',
        'quantity' => 'setQuantity',
        'target_pick_date' => 'setTargetPickDate',
        'target_quantity' => 'setTargetQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'actual_pick_date' => 'getActualPickDate',
        'actual_quantity' => 'getActualQuantity',
        'article_id' => 'getArticleId',
        'availability' => 'getAvailability',
        'availability_for_all_warehouses' => 'getAvailabilityForAllWarehouses',
        'created_date' => 'getCreatedDate',
        'custom_attributes' => 'getCustomAttributes',
        'last_modified_date' => 'getLastModifiedDate',
        'note' => 'getNote',
        'picks' => 'getPicks',
        'position_number' => 'getPositionNumber',
        'quantity' => 'getQuantity',
        'target_pick_date' => 'getTargetPickDate',
        'target_quantity' => 'getTargetQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AVAILABILITY_COMPLETELY_AVAILABLE = 'COMPLETELY_AVAILABLE';
    public const AVAILABILITY_NOTHING_AVAILABLE = 'NOTHING_AVAILABLE';
    public const AVAILABILITY_NOT_CHECKED = 'NOT_CHECKED';
    public const AVAILABILITY_PARTIALLY_AVAILABLE = 'PARTIALLY_AVAILABLE';
    public const AVAILABILITY_TRANSFER_REQUIRED = 'TRANSFER_REQUIRED';
    public const AVAILABILITY_FOR_ALL_WAREHOUSES_COMPLETELY_AVAILABLE = 'COMPLETELY_AVAILABLE';
    public const AVAILABILITY_FOR_ALL_WAREHOUSES_NOTHING_AVAILABLE = 'NOTHING_AVAILABLE';
    public const AVAILABILITY_FOR_ALL_WAREHOUSES_NOT_CHECKED = 'NOT_CHECKED';
    public const AVAILABILITY_FOR_ALL_WAREHOUSES_PARTIALLY_AVAILABLE = 'PARTIALLY_AVAILABLE';
    public const AVAILABILITY_FOR_ALL_WAREHOUSES_TRANSFER_REQUIRED = 'TRANSFER_REQUIRED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvailabilityAllowableValues()
    {
        return [
            self::AVAILABILITY_COMPLETELY_AVAILABLE,
            self::AVAILABILITY_NOTHING_AVAILABLE,
            self::AVAILABILITY_NOT_CHECKED,
            self::AVAILABILITY_PARTIALLY_AVAILABLE,
            self::AVAILABILITY_TRANSFER_REQUIRED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvailabilityForAllWarehousesAllowableValues()
    {
        return [
            self::AVAILABILITY_FOR_ALL_WAREHOUSES_COMPLETELY_AVAILABLE,
            self::AVAILABILITY_FOR_ALL_WAREHOUSES_NOTHING_AVAILABLE,
            self::AVAILABILITY_FOR_ALL_WAREHOUSES_NOT_CHECKED,
            self::AVAILABILITY_FOR_ALL_WAREHOUSES_PARTIALLY_AVAILABLE,
            self::AVAILABILITY_FOR_ALL_WAREHOUSES_TRANSFER_REQUIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('actual_pick_date', $data ?? [], null);
        $this->setIfExists('actual_quantity', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], null);
        $this->setIfExists('availability_for_all_warehouses', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('picks', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('target_pick_date', $data ?? [], null);
        $this->setIfExists('target_quantity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAvailabilityAllowableValues();
        if (!is_null($this->container['availability']) && !in_array($this->container['availability'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'availability', must be one of '%s'",
                $this->container['availability'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAvailabilityForAllWarehousesAllowableValues();
        if (!is_null($this->container['availability_for_all_warehouses']) && !in_array($this->container['availability_for_all_warehouses'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'availability_for_all_warehouses', must be one of '%s'",
                $this->container['availability_for_all_warehouses'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets actual_pick_date
     *
     * @return int|null
     */
    public function getActualPickDate()
    {
        return $this->container['actual_pick_date'];
    }

    /**
     * Sets actual_pick_date
     *
     * @param int|null $actual_pick_date actual_pick_date
     *
     * @return self
     */
    public function setActualPickDate($actual_pick_date)
    {
        if (is_null($actual_pick_date)) {
            throw new \InvalidArgumentException('non-nullable actual_pick_date cannot be null');
        }
        $this->container['actual_pick_date'] = $actual_pick_date;

        return $this;
    }

    /**
     * Gets actual_quantity
     *
     * @return float|null
     */
    public function getActualQuantity()
    {
        return $this->container['actual_quantity'];
    }

    /**
     * Sets actual_quantity
     *
     * @param float|null $actual_quantity actual_quantity
     *
     * @return self
     */
    public function setActualQuantity($actual_quantity)
    {
        if (is_null($actual_quantity)) {
            throw new \InvalidArgumentException('non-nullable actual_quantity cannot be null');
        }
        $this->container['actual_quantity'] = $actual_quantity;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return string|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param string|null $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        if (is_null($availability)) {
            throw new \InvalidArgumentException('non-nullable availability cannot be null');
        }
        $allowedValues = $this->getAvailabilityAllowableValues();
        if (!in_array($availability, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'availability', must be one of '%s'",
                    $availability,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets availability_for_all_warehouses
     *
     * @return string|null
     */
    public function getAvailabilityForAllWarehouses()
    {
        return $this->container['availability_for_all_warehouses'];
    }

    /**
     * Sets availability_for_all_warehouses
     *
     * @param string|null $availability_for_all_warehouses availability_for_all_warehouses
     *
     * @return self
     */
    public function setAvailabilityForAllWarehouses($availability_for_all_warehouses)
    {
        if (is_null($availability_for_all_warehouses)) {
            throw new \InvalidArgumentException('non-nullable availability_for_all_warehouses cannot be null');
        }
        $allowedValues = $this->getAvailabilityForAllWarehousesAllowableValues();
        if (!in_array($availability_for_all_warehouses, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'availability_for_all_warehouses', must be one of '%s'",
                    $availability_for_all_warehouses,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['availability_for_all_warehouses'] = $availability_for_all_warehouses;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets picks
     *
     * @return \kruegge82\weclapp\Model\ItemPick[]|null
     */
    public function getPicks()
    {
        return $this->container['picks'];
    }

    /**
     * Sets picks
     *
     * @param \kruegge82\weclapp\Model\ItemPick[]|null $picks picks
     *
     * @return self
     */
    public function setPicks($picks)
    {
        if (is_null($picks)) {
            throw new \InvalidArgumentException('non-nullable picks cannot be null');
        }
        $this->container['picks'] = $picks;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets target_pick_date
     *
     * @return int|null
     */
    public function getTargetPickDate()
    {
        return $this->container['target_pick_date'];
    }

    /**
     * Sets target_pick_date
     *
     * @param int|null $target_pick_date target_pick_date
     *
     * @return self
     */
    public function setTargetPickDate($target_pick_date)
    {
        if (is_null($target_pick_date)) {
            throw new \InvalidArgumentException('non-nullable target_pick_date cannot be null');
        }
        $this->container['target_pick_date'] = $target_pick_date;

        return $this;
    }

    /**
     * Gets target_quantity
     *
     * @return float|null
     */
    public function getTargetQuantity()
    {
        return $this->container['target_quantity'];
    }

    /**
     * Sets target_quantity
     *
     * @param float|null $target_quantity target_quantity
     *
     * @return self
     */
    public function setTargetQuantity($target_quantity)
    {
        if (is_null($target_quantity)) {
            throw new \InvalidArgumentException('non-nullable target_quantity cannot be null');
        }
        $this->container['target_quantity'] = $target_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


