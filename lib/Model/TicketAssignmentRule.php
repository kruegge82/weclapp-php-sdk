<?php
/**
 * TicketAssignmentRule
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * TicketAssignmentRule Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TicketAssignmentRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ticketAssignmentRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'assigned_pooling_group_id' => 'string',
        'assignee_user_id' => 'string',
        'business_holidays_id' => 'string',
        'business_hours_id' => 'string',
        'commercial_language' => 'string',
        'distribution_channel' => '\kruegge82\weclapp\Model\DistributionChannel',
        'parties' => '\kruegge82\weclapp\Model\OnlyId[]',
        'responsible_user_id' => 'string',
        'target_status_id' => 'string',
        'ticket_assignee_type' => '\kruegge82\weclapp\Model\TicketAssigneeType',
        'ticket_category_id' => 'string',
        'ticket_channel_id' => 'string',
        'ticket_priority_id' => 'string',
        'ticket_type_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'assigned_pooling_group_id' => null,
        'assignee_user_id' => null,
        'business_holidays_id' => null,
        'business_hours_id' => null,
        'commercial_language' => null,
        'distribution_channel' => null,
        'parties' => null,
        'responsible_user_id' => null,
        'target_status_id' => null,
        'ticket_assignee_type' => null,
        'ticket_category_id' => null,
        'ticket_channel_id' => null,
        'ticket_priority_id' => null,
        'ticket_type_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'assigned_pooling_group_id' => false,
        'assignee_user_id' => false,
        'business_holidays_id' => false,
        'business_hours_id' => false,
        'commercial_language' => false,
        'distribution_channel' => false,
        'parties' => false,
        'responsible_user_id' => false,
        'target_status_id' => false,
        'ticket_assignee_type' => false,
        'ticket_category_id' => false,
        'ticket_channel_id' => false,
        'ticket_priority_id' => false,
        'ticket_type_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'assigned_pooling_group_id' => 'assignedPoolingGroupId',
        'assignee_user_id' => 'assigneeUserId',
        'business_holidays_id' => 'businessHolidaysId',
        'business_hours_id' => 'businessHoursId',
        'commercial_language' => 'commercialLanguage',
        'distribution_channel' => 'distributionChannel',
        'parties' => 'parties',
        'responsible_user_id' => 'responsibleUserId',
        'target_status_id' => 'targetStatusId',
        'ticket_assignee_type' => 'ticketAssigneeType',
        'ticket_category_id' => 'ticketCategoryId',
        'ticket_channel_id' => 'ticketChannelId',
        'ticket_priority_id' => 'ticketPriorityId',
        'ticket_type_id' => 'ticketTypeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'assigned_pooling_group_id' => 'setAssignedPoolingGroupId',
        'assignee_user_id' => 'setAssigneeUserId',
        'business_holidays_id' => 'setBusinessHolidaysId',
        'business_hours_id' => 'setBusinessHoursId',
        'commercial_language' => 'setCommercialLanguage',
        'distribution_channel' => 'setDistributionChannel',
        'parties' => 'setParties',
        'responsible_user_id' => 'setResponsibleUserId',
        'target_status_id' => 'setTargetStatusId',
        'ticket_assignee_type' => 'setTicketAssigneeType',
        'ticket_category_id' => 'setTicketCategoryId',
        'ticket_channel_id' => 'setTicketChannelId',
        'ticket_priority_id' => 'setTicketPriorityId',
        'ticket_type_id' => 'setTicketTypeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'assigned_pooling_group_id' => 'getAssignedPoolingGroupId',
        'assignee_user_id' => 'getAssigneeUserId',
        'business_holidays_id' => 'getBusinessHolidaysId',
        'business_hours_id' => 'getBusinessHoursId',
        'commercial_language' => 'getCommercialLanguage',
        'distribution_channel' => 'getDistributionChannel',
        'parties' => 'getParties',
        'responsible_user_id' => 'getResponsibleUserId',
        'target_status_id' => 'getTargetStatusId',
        'ticket_assignee_type' => 'getTicketAssigneeType',
        'ticket_category_id' => 'getTicketCategoryId',
        'ticket_channel_id' => 'getTicketChannelId',
        'ticket_priority_id' => 'getTicketPriorityId',
        'ticket_type_id' => 'getTicketTypeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('assigned_pooling_group_id', $data ?? [], null);
        $this->setIfExists('assignee_user_id', $data ?? [], null);
        $this->setIfExists('business_holidays_id', $data ?? [], null);
        $this->setIfExists('business_hours_id', $data ?? [], null);
        $this->setIfExists('commercial_language', $data ?? [], null);
        $this->setIfExists('distribution_channel', $data ?? [], null);
        $this->setIfExists('parties', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('target_status_id', $data ?? [], null);
        $this->setIfExists('ticket_assignee_type', $data ?? [], null);
        $this->setIfExists('ticket_category_id', $data ?? [], null);
        $this->setIfExists('ticket_channel_id', $data ?? [], null);
        $this->setIfExists('ticket_priority_id', $data ?? [], null);
        $this->setIfExists('ticket_type_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['commercial_language']) && (mb_strlen($this->container['commercial_language']) > 255)) {
            $invalidProperties[] = "invalid value for 'commercial_language', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets assigned_pooling_group_id
     *
     * @return string|null
     */
    public function getAssignedPoolingGroupId()
    {
        return $this->container['assigned_pooling_group_id'];
    }

    /**
     * Sets assigned_pooling_group_id
     *
     * @param string|null $assigned_pooling_group_id assigned_pooling_group_id
     *
     * @return self
     */
    public function setAssignedPoolingGroupId($assigned_pooling_group_id)
    {
        if (is_null($assigned_pooling_group_id)) {
            throw new \InvalidArgumentException('non-nullable assigned_pooling_group_id cannot be null');
        }
        $this->container['assigned_pooling_group_id'] = $assigned_pooling_group_id;

        return $this;
    }

    /**
     * Gets assignee_user_id
     *
     * @return string|null
     */
    public function getAssigneeUserId()
    {
        return $this->container['assignee_user_id'];
    }

    /**
     * Sets assignee_user_id
     *
     * @param string|null $assignee_user_id assignee_user_id
     *
     * @return self
     */
    public function setAssigneeUserId($assignee_user_id)
    {
        if (is_null($assignee_user_id)) {
            throw new \InvalidArgumentException('non-nullable assignee_user_id cannot be null');
        }
        $this->container['assignee_user_id'] = $assignee_user_id;

        return $this;
    }

    /**
     * Gets business_holidays_id
     *
     * @return string|null
     */
    public function getBusinessHolidaysId()
    {
        return $this->container['business_holidays_id'];
    }

    /**
     * Sets business_holidays_id
     *
     * @param string|null $business_holidays_id business_holidays_id
     *
     * @return self
     */
    public function setBusinessHolidaysId($business_holidays_id)
    {
        if (is_null($business_holidays_id)) {
            throw new \InvalidArgumentException('non-nullable business_holidays_id cannot be null');
        }
        $this->container['business_holidays_id'] = $business_holidays_id;

        return $this;
    }

    /**
     * Gets business_hours_id
     *
     * @return string|null
     */
    public function getBusinessHoursId()
    {
        return $this->container['business_hours_id'];
    }

    /**
     * Sets business_hours_id
     *
     * @param string|null $business_hours_id business_hours_id
     *
     * @return self
     */
    public function setBusinessHoursId($business_hours_id)
    {
        if (is_null($business_hours_id)) {
            throw new \InvalidArgumentException('non-nullable business_hours_id cannot be null');
        }
        $this->container['business_hours_id'] = $business_hours_id;

        return $this;
    }

    /**
     * Gets commercial_language
     *
     * @return string|null
     */
    public function getCommercialLanguage()
    {
        return $this->container['commercial_language'];
    }

    /**
     * Sets commercial_language
     *
     * @param string|null $commercial_language commercial_language
     *
     * @return self
     */
    public function setCommercialLanguage($commercial_language)
    {
        if (is_null($commercial_language)) {
            throw new \InvalidArgumentException('non-nullable commercial_language cannot be null');
        }
        if ((mb_strlen($commercial_language) > 255)) {
            throw new \InvalidArgumentException('invalid length for $commercial_language when calling TicketAssignmentRule., must be smaller than or equal to 255.');
        }

        $this->container['commercial_language'] = $commercial_language;

        return $this;
    }

    /**
     * Gets distribution_channel
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel|null
     */
    public function getDistributionChannel()
    {
        return $this->container['distribution_channel'];
    }

    /**
     * Sets distribution_channel
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel|null $distribution_channel distribution_channel
     *
     * @return self
     */
    public function setDistributionChannel($distribution_channel)
    {
        if (is_null($distribution_channel)) {
            throw new \InvalidArgumentException('non-nullable distribution_channel cannot be null');
        }
        $this->container['distribution_channel'] = $distribution_channel;

        return $this;
    }

    /**
     * Gets parties
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getParties()
    {
        return $this->container['parties'];
    }

    /**
     * Sets parties
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $parties parties
     *
     * @return self
     */
    public function setParties($parties)
    {
        if (is_null($parties)) {
            throw new \InvalidArgumentException('non-nullable parties cannot be null');
        }
        $this->container['parties'] = $parties;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets target_status_id
     *
     * @return string|null
     */
    public function getTargetStatusId()
    {
        return $this->container['target_status_id'];
    }

    /**
     * Sets target_status_id
     *
     * @param string|null $target_status_id target_status_id
     *
     * @return self
     */
    public function setTargetStatusId($target_status_id)
    {
        if (is_null($target_status_id)) {
            throw new \InvalidArgumentException('non-nullable target_status_id cannot be null');
        }
        $this->container['target_status_id'] = $target_status_id;

        return $this;
    }

    /**
     * Gets ticket_assignee_type
     *
     * @return \kruegge82\weclapp\Model\TicketAssigneeType|null
     */
    public function getTicketAssigneeType()
    {
        return $this->container['ticket_assignee_type'];
    }

    /**
     * Sets ticket_assignee_type
     *
     * @param \kruegge82\weclapp\Model\TicketAssigneeType|null $ticket_assignee_type ticket_assignee_type
     *
     * @return self
     */
    public function setTicketAssigneeType($ticket_assignee_type)
    {
        if (is_null($ticket_assignee_type)) {
            throw new \InvalidArgumentException('non-nullable ticket_assignee_type cannot be null');
        }
        $this->container['ticket_assignee_type'] = $ticket_assignee_type;

        return $this;
    }

    /**
     * Gets ticket_category_id
     *
     * @return string|null
     */
    public function getTicketCategoryId()
    {
        return $this->container['ticket_category_id'];
    }

    /**
     * Sets ticket_category_id
     *
     * @param string|null $ticket_category_id ticket_category_id
     *
     * @return self
     */
    public function setTicketCategoryId($ticket_category_id)
    {
        if (is_null($ticket_category_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_category_id cannot be null');
        }
        $this->container['ticket_category_id'] = $ticket_category_id;

        return $this;
    }

    /**
     * Gets ticket_channel_id
     *
     * @return string|null
     */
    public function getTicketChannelId()
    {
        return $this->container['ticket_channel_id'];
    }

    /**
     * Sets ticket_channel_id
     *
     * @param string|null $ticket_channel_id ticket_channel_id
     *
     * @return self
     */
    public function setTicketChannelId($ticket_channel_id)
    {
        if (is_null($ticket_channel_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_channel_id cannot be null');
        }
        $this->container['ticket_channel_id'] = $ticket_channel_id;

        return $this;
    }

    /**
     * Gets ticket_priority_id
     *
     * @return string|null
     */
    public function getTicketPriorityId()
    {
        return $this->container['ticket_priority_id'];
    }

    /**
     * Sets ticket_priority_id
     *
     * @param string|null $ticket_priority_id ticket_priority_id
     *
     * @return self
     */
    public function setTicketPriorityId($ticket_priority_id)
    {
        if (is_null($ticket_priority_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_priority_id cannot be null');
        }
        $this->container['ticket_priority_id'] = $ticket_priority_id;

        return $this;
    }

    /**
     * Gets ticket_type_id
     *
     * @return string|null
     */
    public function getTicketTypeId()
    {
        return $this->container['ticket_type_id'];
    }

    /**
     * Sets ticket_type_id
     *
     * @param string|null $ticket_type_id ticket_type_id
     *
     * @return self
     */
    public function setTicketTypeId($ticket_type_id)
    {
        if (is_null($ticket_type_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_type_id cannot be null');
        }
        $this->container['ticket_type_id'] = $ticket_type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


