<?php
/**
 * TaskGet200ResponseAdditionalProperties
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * TaskGet200ResponseAdditionalProperties Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskGet200ResponseAdditionalProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_task_get_200_response_additionalProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'booked_billable_work' => '\kruegge82\weclapp\Model\Duration[]',
        'booked_work' => '\kruegge82\weclapp\Model\Duration[]',
        'cost_of_services' => '\kruegge82\weclapp\Model\Amount[]',
        'full_position_number' => 'string[]',
        'order_item_number' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'booked_billable_work' => null,
        'booked_work' => null,
        'cost_of_services' => null,
        'full_position_number' => null,
        'order_item_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'booked_billable_work' => false,
        'booked_work' => false,
        'cost_of_services' => false,
        'full_position_number' => false,
        'order_item_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'booked_billable_work' => 'bookedBillableWork',
        'booked_work' => 'bookedWork',
        'cost_of_services' => 'costOfServices',
        'full_position_number' => 'fullPositionNumber',
        'order_item_number' => 'orderItemNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'booked_billable_work' => 'setBookedBillableWork',
        'booked_work' => 'setBookedWork',
        'cost_of_services' => 'setCostOfServices',
        'full_position_number' => 'setFullPositionNumber',
        'order_item_number' => 'setOrderItemNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'booked_billable_work' => 'getBookedBillableWork',
        'booked_work' => 'getBookedWork',
        'cost_of_services' => 'getCostOfServices',
        'full_position_number' => 'getFullPositionNumber',
        'order_item_number' => 'getOrderItemNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('booked_billable_work', $data ?? [], null);
        $this->setIfExists('booked_work', $data ?? [], null);
        $this->setIfExists('cost_of_services', $data ?? [], null);
        $this->setIfExists('full_position_number', $data ?? [], null);
        $this->setIfExists('order_item_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets booked_billable_work
     *
     * @return \kruegge82\weclapp\Model\Duration[]|null
     */
    public function getBookedBillableWork()
    {
        return $this->container['booked_billable_work'];
    }

    /**
     * Sets booked_billable_work
     *
     * @param \kruegge82\weclapp\Model\Duration[]|null $booked_billable_work booked_billable_work
     *
     * @return self
     */
    public function setBookedBillableWork($booked_billable_work)
    {
        if (is_null($booked_billable_work)) {
            throw new \InvalidArgumentException('non-nullable booked_billable_work cannot be null');
        }
        $this->container['booked_billable_work'] = $booked_billable_work;

        return $this;
    }

    /**
     * Gets booked_work
     *
     * @return \kruegge82\weclapp\Model\Duration[]|null
     */
    public function getBookedWork()
    {
        return $this->container['booked_work'];
    }

    /**
     * Sets booked_work
     *
     * @param \kruegge82\weclapp\Model\Duration[]|null $booked_work booked_work
     *
     * @return self
     */
    public function setBookedWork($booked_work)
    {
        if (is_null($booked_work)) {
            throw new \InvalidArgumentException('non-nullable booked_work cannot be null');
        }
        $this->container['booked_work'] = $booked_work;

        return $this;
    }

    /**
     * Gets cost_of_services
     *
     * @return \kruegge82\weclapp\Model\Amount[]|null
     */
    public function getCostOfServices()
    {
        return $this->container['cost_of_services'];
    }

    /**
     * Sets cost_of_services
     *
     * @param \kruegge82\weclapp\Model\Amount[]|null $cost_of_services cost_of_services
     *
     * @return self
     */
    public function setCostOfServices($cost_of_services)
    {
        if (is_null($cost_of_services)) {
            throw new \InvalidArgumentException('non-nullable cost_of_services cannot be null');
        }
        $this->container['cost_of_services'] = $cost_of_services;

        return $this;
    }

    /**
     * Gets full_position_number
     *
     * @return string[]|null
     */
    public function getFullPositionNumber()
    {
        return $this->container['full_position_number'];
    }

    /**
     * Sets full_position_number
     *
     * @param string[]|null $full_position_number full_position_number
     *
     * @return self
     */
    public function setFullPositionNumber($full_position_number)
    {
        if (is_null($full_position_number)) {
            throw new \InvalidArgumentException('non-nullable full_position_number cannot be null');
        }
        $this->container['full_position_number'] = $full_position_number;

        return $this;
    }

    /**
     * Gets order_item_number
     *
     * @return string[]|null
     */
    public function getOrderItemNumber()
    {
        return $this->container['order_item_number'];
    }

    /**
     * Sets order_item_number
     *
     * @param string[]|null $order_item_number order_item_number
     *
     * @return self
     */
    public function setOrderItemNumber($order_item_number)
    {
        if (is_null($order_item_number)) {
            throw new \InvalidArgumentException('non-nullable order_item_number cannot be null');
        }
        $this->container['order_item_number'] = $order_item_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


