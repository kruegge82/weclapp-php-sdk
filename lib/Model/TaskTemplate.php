<?php
/**
 * TaskTemplate
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * TaskTemplate Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskTemplate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'taskTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'article_id' => 'string',
        'assignees' => '\kruegge82\weclapp\Model\TaskTemplateAssignee[]',
        'creator_user_id' => 'string',
        'description' => 'string',
        'entity_references' => '\kruegge82\weclapp\Model\EntityReference[]',
        'name' => 'string',
        'parent_task_template_id' => 'string',
        'planned_effort' => 'int',
        'position_number' => 'int',
        'subject' => 'string',
        'task_priority' => '\kruegge82\weclapp\Model\TaskPriority',
        'task_topics' => '\kruegge82\weclapp\Model\OnlyId[]',
        'task_types' => '\kruegge82\weclapp\Model\OnlyId[]',
        'task_visibility_type' => '\kruegge82\weclapp\Model\TaskVisibilityType',
        'watchers' => '\kruegge82\weclapp\Model\OnlyId[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'article_id' => null,
        'assignees' => null,
        'creator_user_id' => null,
        'description' => 'html',
        'entity_references' => null,
        'name' => null,
        'parent_task_template_id' => null,
        'planned_effort' => 'int64',
        'position_number' => 'int32',
        'subject' => null,
        'task_priority' => null,
        'task_topics' => null,
        'task_types' => null,
        'task_visibility_type' => null,
        'watchers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'article_id' => false,
        'assignees' => false,
        'creator_user_id' => false,
        'description' => false,
        'entity_references' => false,
        'name' => false,
        'parent_task_template_id' => false,
        'planned_effort' => false,
        'position_number' => false,
        'subject' => false,
        'task_priority' => false,
        'task_topics' => false,
        'task_types' => false,
        'task_visibility_type' => false,
        'watchers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'article_id' => 'articleId',
        'assignees' => 'assignees',
        'creator_user_id' => 'creatorUserId',
        'description' => 'description',
        'entity_references' => 'entityReferences',
        'name' => 'name',
        'parent_task_template_id' => 'parentTaskTemplateId',
        'planned_effort' => 'plannedEffort',
        'position_number' => 'positionNumber',
        'subject' => 'subject',
        'task_priority' => 'taskPriority',
        'task_topics' => 'taskTopics',
        'task_types' => 'taskTypes',
        'task_visibility_type' => 'taskVisibilityType',
        'watchers' => 'watchers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'article_id' => 'setArticleId',
        'assignees' => 'setAssignees',
        'creator_user_id' => 'setCreatorUserId',
        'description' => 'setDescription',
        'entity_references' => 'setEntityReferences',
        'name' => 'setName',
        'parent_task_template_id' => 'setParentTaskTemplateId',
        'planned_effort' => 'setPlannedEffort',
        'position_number' => 'setPositionNumber',
        'subject' => 'setSubject',
        'task_priority' => 'setTaskPriority',
        'task_topics' => 'setTaskTopics',
        'task_types' => 'setTaskTypes',
        'task_visibility_type' => 'setTaskVisibilityType',
        'watchers' => 'setWatchers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'article_id' => 'getArticleId',
        'assignees' => 'getAssignees',
        'creator_user_id' => 'getCreatorUserId',
        'description' => 'getDescription',
        'entity_references' => 'getEntityReferences',
        'name' => 'getName',
        'parent_task_template_id' => 'getParentTaskTemplateId',
        'planned_effort' => 'getPlannedEffort',
        'position_number' => 'getPositionNumber',
        'subject' => 'getSubject',
        'task_priority' => 'getTaskPriority',
        'task_topics' => 'getTaskTopics',
        'task_types' => 'getTaskTypes',
        'task_visibility_type' => 'getTaskVisibilityType',
        'watchers' => 'getWatchers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('assignees', $data ?? [], null);
        $this->setIfExists('creator_user_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('entity_references', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('parent_task_template_id', $data ?? [], null);
        $this->setIfExists('planned_effort', $data ?? [], null);
        $this->setIfExists('position_number', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('task_priority', $data ?? [], null);
        $this->setIfExists('task_topics', $data ?? [], null);
        $this->setIfExists('task_types', $data ?? [], null);
        $this->setIfExists('task_visibility_type', $data ?? [], null);
        $this->setIfExists('watchers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets assignees
     *
     * @return \kruegge82\weclapp\Model\TaskTemplateAssignee[]|null
     */
    public function getAssignees()
    {
        return $this->container['assignees'];
    }

    /**
     * Sets assignees
     *
     * @param \kruegge82\weclapp\Model\TaskTemplateAssignee[]|null $assignees assignees
     *
     * @return self
     */
    public function setAssignees($assignees)
    {
        if (is_null($assignees)) {
            throw new \InvalidArgumentException('non-nullable assignees cannot be null');
        }
        $this->container['assignees'] = $assignees;

        return $this;
    }

    /**
     * Gets creator_user_id
     *
     * @return string|null
     */
    public function getCreatorUserId()
    {
        return $this->container['creator_user_id'];
    }

    /**
     * Sets creator_user_id
     *
     * @param string|null $creator_user_id creator_user_id
     *
     * @return self
     */
    public function setCreatorUserId($creator_user_id)
    {
        if (is_null($creator_user_id)) {
            throw new \InvalidArgumentException('non-nullable creator_user_id cannot be null');
        }
        $this->container['creator_user_id'] = $creator_user_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entity_references
     *
     * @return \kruegge82\weclapp\Model\EntityReference[]|null
     */
    public function getEntityReferences()
    {
        return $this->container['entity_references'];
    }

    /**
     * Sets entity_references
     *
     * @param \kruegge82\weclapp\Model\EntityReference[]|null $entity_references entity_references
     *
     * @return self
     */
    public function setEntityReferences($entity_references)
    {
        if (is_null($entity_references)) {
            throw new \InvalidArgumentException('non-nullable entity_references cannot be null');
        }
        $this->container['entity_references'] = $entity_references;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TaskTemplate., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_task_template_id
     *
     * @return string|null
     */
    public function getParentTaskTemplateId()
    {
        return $this->container['parent_task_template_id'];
    }

    /**
     * Sets parent_task_template_id
     *
     * @param string|null $parent_task_template_id parent_task_template_id
     *
     * @return self
     */
    public function setParentTaskTemplateId($parent_task_template_id)
    {
        if (is_null($parent_task_template_id)) {
            throw new \InvalidArgumentException('non-nullable parent_task_template_id cannot be null');
        }
        $this->container['parent_task_template_id'] = $parent_task_template_id;

        return $this;
    }

    /**
     * Gets planned_effort
     *
     * @return int|null
     */
    public function getPlannedEffort()
    {
        return $this->container['planned_effort'];
    }

    /**
     * Sets planned_effort
     *
     * @param int|null $planned_effort planned_effort
     *
     * @return self
     */
    public function setPlannedEffort($planned_effort)
    {
        if (is_null($planned_effort)) {
            throw new \InvalidArgumentException('non-nullable planned_effort cannot be null');
        }
        $this->container['planned_effort'] = $planned_effort;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int|null
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int|null $position_number position_number
     *
     * @return self
     */
    public function setPositionNumber($position_number)
    {
        if (is_null($position_number)) {
            throw new \InvalidArgumentException('non-nullable position_number cannot be null');
        }
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets task_priority
     *
     * @return \kruegge82\weclapp\Model\TaskPriority|null
     */
    public function getTaskPriority()
    {
        return $this->container['task_priority'];
    }

    /**
     * Sets task_priority
     *
     * @param \kruegge82\weclapp\Model\TaskPriority|null $task_priority task_priority
     *
     * @return self
     */
    public function setTaskPriority($task_priority)
    {
        if (is_null($task_priority)) {
            throw new \InvalidArgumentException('non-nullable task_priority cannot be null');
        }
        $this->container['task_priority'] = $task_priority;

        return $this;
    }

    /**
     * Gets task_topics
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getTaskTopics()
    {
        return $this->container['task_topics'];
    }

    /**
     * Sets task_topics
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $task_topics task_topics
     *
     * @return self
     */
    public function setTaskTopics($task_topics)
    {
        if (is_null($task_topics)) {
            throw new \InvalidArgumentException('non-nullable task_topics cannot be null');
        }
        $this->container['task_topics'] = $task_topics;

        return $this;
    }

    /**
     * Gets task_types
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getTaskTypes()
    {
        return $this->container['task_types'];
    }

    /**
     * Sets task_types
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $task_types task_types
     *
     * @return self
     */
    public function setTaskTypes($task_types)
    {
        if (is_null($task_types)) {
            throw new \InvalidArgumentException('non-nullable task_types cannot be null');
        }
        $this->container['task_types'] = $task_types;

        return $this;
    }

    /**
     * Gets task_visibility_type
     *
     * @return \kruegge82\weclapp\Model\TaskVisibilityType|null
     */
    public function getTaskVisibilityType()
    {
        return $this->container['task_visibility_type'];
    }

    /**
     * Sets task_visibility_type
     *
     * @param \kruegge82\weclapp\Model\TaskVisibilityType|null $task_visibility_type task_visibility_type
     *
     * @return self
     */
    public function setTaskVisibilityType($task_visibility_type)
    {
        if (is_null($task_visibility_type)) {
            throw new \InvalidArgumentException('non-nullable task_visibility_type cannot be null');
        }
        $this->container['task_visibility_type'] = $task_visibility_type;

        return $this;
    }

    /**
     * Gets watchers
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getWatchers()
    {
        return $this->container['watchers'];
    }

    /**
     * Sets watchers
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $watchers watchers
     *
     * @return self
     */
    public function setWatchers($watchers)
    {
        if (is_null($watchers)) {
            throw new \InvalidArgumentException('non-nullable watchers cannot be null');
        }
        $this->container['watchers'] = $watchers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


