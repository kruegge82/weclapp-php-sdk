<?php
/**
 * BankTransaction
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * BankTransaction Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'bankTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'account_for_costs_of_monetary_traffic_id' => 'string',
        'account_for_dunning_fee_id' => 'string',
        'amount' => 'float',
        'amount_costs_of_monetary_traffic' => 'float',
        'cleared' => 'bool',
        'created_by_id' => 'string',
        'currency_id' => 'string',
        'description' => 'string',
        'effective_date' => 'int',
        'external_record_number' => 'string',
        'origin' => '\kruegge82\weclapp\Model\MoneyTransactionSource',
        'party_id' => 'string',
        'payment_method_id' => 'string',
        'payment_tolerance_account_id' => 'string',
        'payment_type' => '\kruegge82\weclapp\Model\PaymentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'account_for_costs_of_monetary_traffic_id' => null,
        'account_for_dunning_fee_id' => null,
        'amount' => 'decimal',
        'amount_costs_of_monetary_traffic' => 'decimal',
        'cleared' => null,
        'created_by_id' => null,
        'currency_id' => null,
        'description' => null,
        'effective_date' => 'timestamp',
        'external_record_number' => null,
        'origin' => null,
        'party_id' => null,
        'payment_method_id' => null,
        'payment_tolerance_account_id' => null,
        'payment_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'account_for_costs_of_monetary_traffic_id' => false,
        'account_for_dunning_fee_id' => false,
        'amount' => false,
        'amount_costs_of_monetary_traffic' => false,
        'cleared' => false,
        'created_by_id' => false,
        'currency_id' => false,
        'description' => false,
        'effective_date' => false,
        'external_record_number' => false,
        'origin' => false,
        'party_id' => false,
        'payment_method_id' => false,
        'payment_tolerance_account_id' => false,
        'payment_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'account_for_costs_of_monetary_traffic_id' => 'accountForCostsOfMonetaryTrafficId',
        'account_for_dunning_fee_id' => 'accountForDunningFeeId',
        'amount' => 'amount',
        'amount_costs_of_monetary_traffic' => 'amountCostsOfMonetaryTraffic',
        'cleared' => 'cleared',
        'created_by_id' => 'createdById',
        'currency_id' => 'currencyId',
        'description' => 'description',
        'effective_date' => 'effectiveDate',
        'external_record_number' => 'externalRecordNumber',
        'origin' => 'origin',
        'party_id' => 'partyId',
        'payment_method_id' => 'paymentMethodId',
        'payment_tolerance_account_id' => 'paymentToleranceAccountId',
        'payment_type' => 'paymentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'account_for_costs_of_monetary_traffic_id' => 'setAccountForCostsOfMonetaryTrafficId',
        'account_for_dunning_fee_id' => 'setAccountForDunningFeeId',
        'amount' => 'setAmount',
        'amount_costs_of_monetary_traffic' => 'setAmountCostsOfMonetaryTraffic',
        'cleared' => 'setCleared',
        'created_by_id' => 'setCreatedById',
        'currency_id' => 'setCurrencyId',
        'description' => 'setDescription',
        'effective_date' => 'setEffectiveDate',
        'external_record_number' => 'setExternalRecordNumber',
        'origin' => 'setOrigin',
        'party_id' => 'setPartyId',
        'payment_method_id' => 'setPaymentMethodId',
        'payment_tolerance_account_id' => 'setPaymentToleranceAccountId',
        'payment_type' => 'setPaymentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'account_for_costs_of_monetary_traffic_id' => 'getAccountForCostsOfMonetaryTrafficId',
        'account_for_dunning_fee_id' => 'getAccountForDunningFeeId',
        'amount' => 'getAmount',
        'amount_costs_of_monetary_traffic' => 'getAmountCostsOfMonetaryTraffic',
        'cleared' => 'getCleared',
        'created_by_id' => 'getCreatedById',
        'currency_id' => 'getCurrencyId',
        'description' => 'getDescription',
        'effective_date' => 'getEffectiveDate',
        'external_record_number' => 'getExternalRecordNumber',
        'origin' => 'getOrigin',
        'party_id' => 'getPartyId',
        'payment_method_id' => 'getPaymentMethodId',
        'payment_tolerance_account_id' => 'getPaymentToleranceAccountId',
        'payment_type' => 'getPaymentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('account_for_costs_of_monetary_traffic_id', $data ?? [], null);
        $this->setIfExists('account_for_dunning_fee_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_costs_of_monetary_traffic', $data ?? [], null);
        $this->setIfExists('cleared', $data ?? [], null);
        $this->setIfExists('created_by_id', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('external_record_number', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('party_id', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('payment_tolerance_account_id', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['amount']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['amount'])) {
            $invalidProperties[] = "invalid value for 'amount', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['amount_costs_of_monetary_traffic']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['amount_costs_of_monetary_traffic'])) {
            $invalidProperties[] = "invalid value for 'amount_costs_of_monetary_traffic', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_record_number']) && (mb_strlen($this->container['external_record_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'external_record_number', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets account_for_costs_of_monetary_traffic_id
     *
     * @return string|null
     */
    public function getAccountForCostsOfMonetaryTrafficId()
    {
        return $this->container['account_for_costs_of_monetary_traffic_id'];
    }

    /**
     * Sets account_for_costs_of_monetary_traffic_id
     *
     * @param string|null $account_for_costs_of_monetary_traffic_id account_for_costs_of_monetary_traffic_id
     *
     * @return self
     */
    public function setAccountForCostsOfMonetaryTrafficId($account_for_costs_of_monetary_traffic_id)
    {
        if (is_null($account_for_costs_of_monetary_traffic_id)) {
            throw new \InvalidArgumentException('non-nullable account_for_costs_of_monetary_traffic_id cannot be null');
        }
        $this->container['account_for_costs_of_monetary_traffic_id'] = $account_for_costs_of_monetary_traffic_id;

        return $this;
    }

    /**
     * Gets account_for_dunning_fee_id
     *
     * @return string|null
     */
    public function getAccountForDunningFeeId()
    {
        return $this->container['account_for_dunning_fee_id'];
    }

    /**
     * Sets account_for_dunning_fee_id
     *
     * @param string|null $account_for_dunning_fee_id account_for_dunning_fee_id
     *
     * @return self
     */
    public function setAccountForDunningFeeId($account_for_dunning_fee_id)
    {
        if (is_null($account_for_dunning_fee_id)) {
            throw new \InvalidArgumentException('non-nullable account_for_dunning_fee_id cannot be null');
        }
        $this->container['account_for_dunning_fee_id'] = $account_for_dunning_fee_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($amount)))) {
            throw new \InvalidArgumentException("invalid value for \$amount when calling BankTransaction., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_costs_of_monetary_traffic
     *
     * @return float|null
     */
    public function getAmountCostsOfMonetaryTraffic()
    {
        return $this->container['amount_costs_of_monetary_traffic'];
    }

    /**
     * Sets amount_costs_of_monetary_traffic
     *
     * @param float|null $amount_costs_of_monetary_traffic amount_costs_of_monetary_traffic
     *
     * @return self
     */
    public function setAmountCostsOfMonetaryTraffic($amount_costs_of_monetary_traffic)
    {
        if (is_null($amount_costs_of_monetary_traffic)) {
            throw new \InvalidArgumentException('non-nullable amount_costs_of_monetary_traffic cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($amount_costs_of_monetary_traffic)))) {
            throw new \InvalidArgumentException("invalid value for \$amount_costs_of_monetary_traffic when calling BankTransaction., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['amount_costs_of_monetary_traffic'] = $amount_costs_of_monetary_traffic;

        return $this;
    }

    /**
     * Gets cleared
     *
     * @return bool|null
     */
    public function getCleared()
    {
        return $this->container['cleared'];
    }

    /**
     * Sets cleared
     *
     * @param bool|null $cleared cleared
     *
     * @return self
     */
    public function setCleared($cleared)
    {
        if (is_null($cleared)) {
            throw new \InvalidArgumentException('non-nullable cleared cannot be null');
        }
        $this->container['cleared'] = $cleared;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return string|null
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param string|null $created_by_id created_by_id
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        if (is_null($created_by_id)) {
            throw new \InvalidArgumentException('non-nullable created_by_id cannot be null');
        }
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            throw new \InvalidArgumentException('non-nullable currency_id cannot be null');
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling BankTransaction., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return int|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param int|null $effective_date effective_date
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets external_record_number
     *
     * @return string|null
     */
    public function getExternalRecordNumber()
    {
        return $this->container['external_record_number'];
    }

    /**
     * Sets external_record_number
     *
     * @param string|null $external_record_number external_record_number
     *
     * @return self
     */
    public function setExternalRecordNumber($external_record_number)
    {
        if (is_null($external_record_number)) {
            throw new \InvalidArgumentException('non-nullable external_record_number cannot be null');
        }
        if ((mb_strlen($external_record_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $external_record_number when calling BankTransaction., must be smaller than or equal to 1000.');
        }

        $this->container['external_record_number'] = $external_record_number;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \kruegge82\weclapp\Model\MoneyTransactionSource|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \kruegge82\weclapp\Model\MoneyTransactionSource|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets party_id
     *
     * @return string|null
     */
    public function getPartyId()
    {
        return $this->container['party_id'];
    }

    /**
     * Sets party_id
     *
     * @param string|null $party_id party_id
     *
     * @return self
     */
    public function setPartyId($party_id)
    {
        if (is_null($party_id)) {
            throw new \InvalidArgumentException('non-nullable party_id cannot be null');
        }
        $this->container['party_id'] = $party_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets payment_tolerance_account_id
     *
     * @return string|null
     */
    public function getPaymentToleranceAccountId()
    {
        return $this->container['payment_tolerance_account_id'];
    }

    /**
     * Sets payment_tolerance_account_id
     *
     * @param string|null $payment_tolerance_account_id payment_tolerance_account_id
     *
     * @return self
     */
    public function setPaymentToleranceAccountId($payment_tolerance_account_id)
    {
        if (is_null($payment_tolerance_account_id)) {
            throw new \InvalidArgumentException('non-nullable payment_tolerance_account_id cannot be null');
        }
        $this->container['payment_tolerance_account_id'] = $payment_tolerance_account_id;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \kruegge82\weclapp\Model\PaymentType|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \kruegge82\weclapp\Model\PaymentType|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


