<?php
/**
 * TransportationOrderIdIdCreatePickPostRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * TransportationOrderIdIdCreatePickPostRequest Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransportationOrderIdIdCreatePickPostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_transportationOrder_id__id__createPick_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'batch_number' => 'string',
        'existing_reservations' => '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPostRequestExistingReservationsInner[]',
        'internal_transport_reference_id' => 'string',
        'order_item_id' => 'string',
        'packaging_unit_base_article_id' => 'string',
        'quantity' => 'float',
        'serial_numbers' => 'string[]',
        'storage_place_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'batch_number' => null,
        'existing_reservations' => null,
        'internal_transport_reference_id' => null,
        'order_item_id' => null,
        'packaging_unit_base_article_id' => null,
        'quantity' => 'decimal',
        'serial_numbers' => null,
        'storage_place_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'batch_number' => false,
        'existing_reservations' => false,
        'internal_transport_reference_id' => false,
        'order_item_id' => false,
        'packaging_unit_base_article_id' => false,
        'quantity' => false,
        'serial_numbers' => false,
        'storage_place_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batch_number' => 'batchNumber',
        'existing_reservations' => 'existingReservations',
        'internal_transport_reference_id' => 'internalTransportReferenceId',
        'order_item_id' => 'orderItemId',
        'packaging_unit_base_article_id' => 'packagingUnitBaseArticleId',
        'quantity' => 'quantity',
        'serial_numbers' => 'serialNumbers',
        'storage_place_id' => 'storagePlaceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batch_number' => 'setBatchNumber',
        'existing_reservations' => 'setExistingReservations',
        'internal_transport_reference_id' => 'setInternalTransportReferenceId',
        'order_item_id' => 'setOrderItemId',
        'packaging_unit_base_article_id' => 'setPackagingUnitBaseArticleId',
        'quantity' => 'setQuantity',
        'serial_numbers' => 'setSerialNumbers',
        'storage_place_id' => 'setStoragePlaceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batch_number' => 'getBatchNumber',
        'existing_reservations' => 'getExistingReservations',
        'internal_transport_reference_id' => 'getInternalTransportReferenceId',
        'order_item_id' => 'getOrderItemId',
        'packaging_unit_base_article_id' => 'getPackagingUnitBaseArticleId',
        'quantity' => 'getQuantity',
        'serial_numbers' => 'getSerialNumbers',
        'storage_place_id' => 'getStoragePlaceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('batch_number', $data ?? [], null);
        $this->setIfExists('existing_reservations', $data ?? [], null);
        $this->setIfExists('internal_transport_reference_id', $data ?? [], null);
        $this->setIfExists('order_item_id', $data ?? [], null);
        $this->setIfExists('packaging_unit_base_article_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('serial_numbers', $data ?? [], null);
        $this->setIfExists('storage_place_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['packaging_unit_base_article_id'] === null) {
            $invalidProperties[] = "'packaging_unit_base_article_id' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['storage_place_id'] === null) {
            $invalidProperties[] = "'storage_place_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batch_number
     *
     * @return string|null
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string|null $batch_number batch_number
     *
     * @return self
     */
    public function setBatchNumber($batch_number)
    {
        if (is_null($batch_number)) {
            throw new \InvalidArgumentException('non-nullable batch_number cannot be null');
        }
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets existing_reservations
     *
     * @return \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPostRequestExistingReservationsInner[]|null
     */
    public function getExistingReservations()
    {
        return $this->container['existing_reservations'];
    }

    /**
     * Sets existing_reservations
     *
     * @param \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPostRequestExistingReservationsInner[]|null $existing_reservations existing_reservations
     *
     * @return self
     */
    public function setExistingReservations($existing_reservations)
    {
        if (is_null($existing_reservations)) {
            throw new \InvalidArgumentException('non-nullable existing_reservations cannot be null');
        }
        $this->container['existing_reservations'] = $existing_reservations;

        return $this;
    }

    /**
     * Gets internal_transport_reference_id
     *
     * @return string|null
     */
    public function getInternalTransportReferenceId()
    {
        return $this->container['internal_transport_reference_id'];
    }

    /**
     * Sets internal_transport_reference_id
     *
     * @param string|null $internal_transport_reference_id internal_transport_reference_id
     *
     * @return self
     */
    public function setInternalTransportReferenceId($internal_transport_reference_id)
    {
        if (is_null($internal_transport_reference_id)) {
            throw new \InvalidArgumentException('non-nullable internal_transport_reference_id cannot be null');
        }
        $this->container['internal_transport_reference_id'] = $internal_transport_reference_id;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return string|null
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param string|null $order_item_id order_item_id
     *
     * @return self
     */
    public function setOrderItemId($order_item_id)
    {
        if (is_null($order_item_id)) {
            throw new \InvalidArgumentException('non-nullable order_item_id cannot be null');
        }
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets packaging_unit_base_article_id
     *
     * @return string
     */
    public function getPackagingUnitBaseArticleId()
    {
        return $this->container['packaging_unit_base_article_id'];
    }

    /**
     * Sets packaging_unit_base_article_id
     *
     * @param string $packaging_unit_base_article_id packaging_unit_base_article_id
     *
     * @return self
     */
    public function setPackagingUnitBaseArticleId($packaging_unit_base_article_id)
    {
        if (is_null($packaging_unit_base_article_id)) {
            throw new \InvalidArgumentException('non-nullable packaging_unit_base_article_id cannot be null');
        }
        $this->container['packaging_unit_base_article_id'] = $packaging_unit_base_article_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets serial_numbers
     *
     * @return string[]|null
     */
    public function getSerialNumbers()
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers
     *
     * @param string[]|null $serial_numbers serial_numbers
     *
     * @return self
     */
    public function setSerialNumbers($serial_numbers)
    {
        if (is_null($serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable serial_numbers cannot be null');
        }
        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }

    /**
     * Gets storage_place_id
     *
     * @return string
     */
    public function getStoragePlaceId()
    {
        return $this->container['storage_place_id'];
    }

    /**
     * Sets storage_place_id
     *
     * @param string $storage_place_id storage_place_id
     *
     * @return self
     */
    public function setStoragePlaceId($storage_place_id)
    {
        if (is_null($storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable storage_place_id cannot be null');
        }
        $this->container['storage_place_id'] = $storage_place_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


