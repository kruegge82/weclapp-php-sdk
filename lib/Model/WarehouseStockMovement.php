<?php
/**
 * WarehouseStockMovement
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * WarehouseStockMovement Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WarehouseStockMovement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'warehouseStockMovement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'article_id' => 'string',
        'batch_number_id' => 'string',
        'cost_center_id' => 'string',
        'incoming_goods_item_id' => 'string',
        'internal_transport_reference_id' => 'string',
        'movement_note' => 'string',
        'movement_number' => 'string',
        'posting_date' => 'int',
        'production_order_id' => 'string',
        'quantity' => 'float',
        'sales_order_item_id' => 'string',
        'serial_numbers' => '\kruegge82\weclapp\Model\OnlyId[]',
        'shipment_item_id' => 'string',
        'stock_movement_type' => '\kruegge82\weclapp\Model\StockMovementType',
        'storage_place_id' => 'string',
        'transportation_order_id' => 'string',
        'user_id' => 'string',
        'valuation_price' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'article_id' => null,
        'batch_number_id' => null,
        'cost_center_id' => null,
        'incoming_goods_item_id' => null,
        'internal_transport_reference_id' => null,
        'movement_note' => null,
        'movement_number' => null,
        'posting_date' => 'timestamp',
        'production_order_id' => null,
        'quantity' => 'decimal',
        'sales_order_item_id' => null,
        'serial_numbers' => null,
        'shipment_item_id' => null,
        'stock_movement_type' => null,
        'storage_place_id' => null,
        'transportation_order_id' => null,
        'user_id' => null,
        'valuation_price' => 'decimal'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'article_id' => false,
        'batch_number_id' => false,
        'cost_center_id' => false,
        'incoming_goods_item_id' => false,
        'internal_transport_reference_id' => false,
        'movement_note' => false,
        'movement_number' => false,
        'posting_date' => false,
        'production_order_id' => false,
        'quantity' => false,
        'sales_order_item_id' => false,
        'serial_numbers' => false,
        'shipment_item_id' => false,
        'stock_movement_type' => false,
        'storage_place_id' => false,
        'transportation_order_id' => false,
        'user_id' => false,
        'valuation_price' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'article_id' => 'articleId',
        'batch_number_id' => 'batchNumberId',
        'cost_center_id' => 'costCenterId',
        'incoming_goods_item_id' => 'incomingGoodsItemId',
        'internal_transport_reference_id' => 'internalTransportReferenceId',
        'movement_note' => 'movementNote',
        'movement_number' => 'movementNumber',
        'posting_date' => 'postingDate',
        'production_order_id' => 'productionOrderId',
        'quantity' => 'quantity',
        'sales_order_item_id' => 'salesOrderItemId',
        'serial_numbers' => 'serialNumbers',
        'shipment_item_id' => 'shipmentItemId',
        'stock_movement_type' => 'stockMovementType',
        'storage_place_id' => 'storagePlaceId',
        'transportation_order_id' => 'transportationOrderId',
        'user_id' => 'userId',
        'valuation_price' => 'valuationPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'article_id' => 'setArticleId',
        'batch_number_id' => 'setBatchNumberId',
        'cost_center_id' => 'setCostCenterId',
        'incoming_goods_item_id' => 'setIncomingGoodsItemId',
        'internal_transport_reference_id' => 'setInternalTransportReferenceId',
        'movement_note' => 'setMovementNote',
        'movement_number' => 'setMovementNumber',
        'posting_date' => 'setPostingDate',
        'production_order_id' => 'setProductionOrderId',
        'quantity' => 'setQuantity',
        'sales_order_item_id' => 'setSalesOrderItemId',
        'serial_numbers' => 'setSerialNumbers',
        'shipment_item_id' => 'setShipmentItemId',
        'stock_movement_type' => 'setStockMovementType',
        'storage_place_id' => 'setStoragePlaceId',
        'transportation_order_id' => 'setTransportationOrderId',
        'user_id' => 'setUserId',
        'valuation_price' => 'setValuationPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'article_id' => 'getArticleId',
        'batch_number_id' => 'getBatchNumberId',
        'cost_center_id' => 'getCostCenterId',
        'incoming_goods_item_id' => 'getIncomingGoodsItemId',
        'internal_transport_reference_id' => 'getInternalTransportReferenceId',
        'movement_note' => 'getMovementNote',
        'movement_number' => 'getMovementNumber',
        'posting_date' => 'getPostingDate',
        'production_order_id' => 'getProductionOrderId',
        'quantity' => 'getQuantity',
        'sales_order_item_id' => 'getSalesOrderItemId',
        'serial_numbers' => 'getSerialNumbers',
        'shipment_item_id' => 'getShipmentItemId',
        'stock_movement_type' => 'getStockMovementType',
        'storage_place_id' => 'getStoragePlaceId',
        'transportation_order_id' => 'getTransportationOrderId',
        'user_id' => 'getUserId',
        'valuation_price' => 'getValuationPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('article_id', $data ?? [], null);
        $this->setIfExists('batch_number_id', $data ?? [], null);
        $this->setIfExists('cost_center_id', $data ?? [], null);
        $this->setIfExists('incoming_goods_item_id', $data ?? [], null);
        $this->setIfExists('internal_transport_reference_id', $data ?? [], null);
        $this->setIfExists('movement_note', $data ?? [], null);
        $this->setIfExists('movement_number', $data ?? [], null);
        $this->setIfExists('posting_date', $data ?? [], null);
        $this->setIfExists('production_order_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('sales_order_item_id', $data ?? [], null);
        $this->setIfExists('serial_numbers', $data ?? [], null);
        $this->setIfExists('shipment_item_id', $data ?? [], null);
        $this->setIfExists('stock_movement_type', $data ?? [], null);
        $this->setIfExists('storage_place_id', $data ?? [], null);
        $this->setIfExists('transportation_order_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('valuation_price', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['movement_number']) && (mb_strlen($this->container['movement_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'movement_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['quantity']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['quantity'])) {
            $invalidProperties[] = "invalid value for 'quantity', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['valuation_price']) && !preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['valuation_price'])) {
            $invalidProperties[] = "invalid value for 'valuation_price', must be conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string|null
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string|null $article_id article_id
     *
     * @return self
     */
    public function setArticleId($article_id)
    {
        if (is_null($article_id)) {
            throw new \InvalidArgumentException('non-nullable article_id cannot be null');
        }
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets batch_number_id
     *
     * @return string|null
     */
    public function getBatchNumberId()
    {
        return $this->container['batch_number_id'];
    }

    /**
     * Sets batch_number_id
     *
     * @param string|null $batch_number_id batch_number_id
     *
     * @return self
     */
    public function setBatchNumberId($batch_number_id)
    {
        if (is_null($batch_number_id)) {
            throw new \InvalidArgumentException('non-nullable batch_number_id cannot be null');
        }
        $this->container['batch_number_id'] = $batch_number_id;

        return $this;
    }

    /**
     * Gets cost_center_id
     *
     * @return string|null
     */
    public function getCostCenterId()
    {
        return $this->container['cost_center_id'];
    }

    /**
     * Sets cost_center_id
     *
     * @param string|null $cost_center_id cost_center_id
     *
     * @return self
     */
    public function setCostCenterId($cost_center_id)
    {
        if (is_null($cost_center_id)) {
            throw new \InvalidArgumentException('non-nullable cost_center_id cannot be null');
        }
        $this->container['cost_center_id'] = $cost_center_id;

        return $this;
    }

    /**
     * Gets incoming_goods_item_id
     *
     * @return string|null
     */
    public function getIncomingGoodsItemId()
    {
        return $this->container['incoming_goods_item_id'];
    }

    /**
     * Sets incoming_goods_item_id
     *
     * @param string|null $incoming_goods_item_id incoming_goods_item_id
     *
     * @return self
     */
    public function setIncomingGoodsItemId($incoming_goods_item_id)
    {
        if (is_null($incoming_goods_item_id)) {
            throw new \InvalidArgumentException('non-nullable incoming_goods_item_id cannot be null');
        }
        $this->container['incoming_goods_item_id'] = $incoming_goods_item_id;

        return $this;
    }

    /**
     * Gets internal_transport_reference_id
     *
     * @return string|null
     */
    public function getInternalTransportReferenceId()
    {
        return $this->container['internal_transport_reference_id'];
    }

    /**
     * Sets internal_transport_reference_id
     *
     * @param string|null $internal_transport_reference_id internal_transport_reference_id
     *
     * @return self
     */
    public function setInternalTransportReferenceId($internal_transport_reference_id)
    {
        if (is_null($internal_transport_reference_id)) {
            throw new \InvalidArgumentException('non-nullable internal_transport_reference_id cannot be null');
        }
        $this->container['internal_transport_reference_id'] = $internal_transport_reference_id;

        return $this;
    }

    /**
     * Gets movement_note
     *
     * @return string|null
     */
    public function getMovementNote()
    {
        return $this->container['movement_note'];
    }

    /**
     * Sets movement_note
     *
     * @param string|null $movement_note movement_note
     *
     * @return self
     */
    public function setMovementNote($movement_note)
    {
        if (is_null($movement_note)) {
            throw new \InvalidArgumentException('non-nullable movement_note cannot be null');
        }
        $this->container['movement_note'] = $movement_note;

        return $this;
    }

    /**
     * Gets movement_number
     *
     * @return string|null
     */
    public function getMovementNumber()
    {
        return $this->container['movement_number'];
    }

    /**
     * Sets movement_number
     *
     * @param string|null $movement_number movement_number
     *
     * @return self
     */
    public function setMovementNumber($movement_number)
    {
        if (is_null($movement_number)) {
            throw new \InvalidArgumentException('non-nullable movement_number cannot be null');
        }
        if ((mb_strlen($movement_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $movement_number when calling WarehouseStockMovement., must be smaller than or equal to 30.');
        }

        $this->container['movement_number'] = $movement_number;

        return $this;
    }

    /**
     * Gets posting_date
     *
     * @return int|null
     */
    public function getPostingDate()
    {
        return $this->container['posting_date'];
    }

    /**
     * Sets posting_date
     *
     * @param int|null $posting_date posting_date
     *
     * @return self
     */
    public function setPostingDate($posting_date)
    {
        if (is_null($posting_date)) {
            throw new \InvalidArgumentException('non-nullable posting_date cannot be null');
        }
        $this->container['posting_date'] = $posting_date;

        return $this;
    }

    /**
     * Gets production_order_id
     *
     * @return string|null
     */
    public function getProductionOrderId()
    {
        return $this->container['production_order_id'];
    }

    /**
     * Sets production_order_id
     *
     * @param string|null $production_order_id production_order_id
     *
     * @return self
     */
    public function setProductionOrderId($production_order_id)
    {
        if (is_null($production_order_id)) {
            throw new \InvalidArgumentException('non-nullable production_order_id cannot be null');
        }
        $this->container['production_order_id'] = $production_order_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($quantity)))) {
            throw new \InvalidArgumentException("invalid value for \$quantity when calling WarehouseStockMovement., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets sales_order_item_id
     *
     * @return string|null
     */
    public function getSalesOrderItemId()
    {
        return $this->container['sales_order_item_id'];
    }

    /**
     * Sets sales_order_item_id
     *
     * @param string|null $sales_order_item_id sales_order_item_id
     *
     * @return self
     */
    public function setSalesOrderItemId($sales_order_item_id)
    {
        if (is_null($sales_order_item_id)) {
            throw new \InvalidArgumentException('non-nullable sales_order_item_id cannot be null');
        }
        $this->container['sales_order_item_id'] = $sales_order_item_id;

        return $this;
    }

    /**
     * Gets serial_numbers
     *
     * @return \kruegge82\weclapp\Model\OnlyId[]|null
     */
    public function getSerialNumbers()
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers
     *
     * @param \kruegge82\weclapp\Model\OnlyId[]|null $serial_numbers serial_numbers
     *
     * @return self
     */
    public function setSerialNumbers($serial_numbers)
    {
        if (is_null($serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable serial_numbers cannot be null');
        }
        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }

    /**
     * Gets shipment_item_id
     *
     * @return string|null
     */
    public function getShipmentItemId()
    {
        return $this->container['shipment_item_id'];
    }

    /**
     * Sets shipment_item_id
     *
     * @param string|null $shipment_item_id shipment_item_id
     *
     * @return self
     */
    public function setShipmentItemId($shipment_item_id)
    {
        if (is_null($shipment_item_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_item_id cannot be null');
        }
        $this->container['shipment_item_id'] = $shipment_item_id;

        return $this;
    }

    /**
     * Gets stock_movement_type
     *
     * @return \kruegge82\weclapp\Model\StockMovementType|null
     */
    public function getStockMovementType()
    {
        return $this->container['stock_movement_type'];
    }

    /**
     * Sets stock_movement_type
     *
     * @param \kruegge82\weclapp\Model\StockMovementType|null $stock_movement_type stock_movement_type
     *
     * @return self
     */
    public function setStockMovementType($stock_movement_type)
    {
        if (is_null($stock_movement_type)) {
            throw new \InvalidArgumentException('non-nullable stock_movement_type cannot be null');
        }
        $this->container['stock_movement_type'] = $stock_movement_type;

        return $this;
    }

    /**
     * Gets storage_place_id
     *
     * @return string|null
     */
    public function getStoragePlaceId()
    {
        return $this->container['storage_place_id'];
    }

    /**
     * Sets storage_place_id
     *
     * @param string|null $storage_place_id storage_place_id
     *
     * @return self
     */
    public function setStoragePlaceId($storage_place_id)
    {
        if (is_null($storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable storage_place_id cannot be null');
        }
        $this->container['storage_place_id'] = $storage_place_id;

        return $this;
    }

    /**
     * Gets transportation_order_id
     *
     * @return string|null
     */
    public function getTransportationOrderId()
    {
        return $this->container['transportation_order_id'];
    }

    /**
     * Sets transportation_order_id
     *
     * @param string|null $transportation_order_id transportation_order_id
     *
     * @return self
     */
    public function setTransportationOrderId($transportation_order_id)
    {
        if (is_null($transportation_order_id)) {
            throw new \InvalidArgumentException('non-nullable transportation_order_id cannot be null');
        }
        $this->container['transportation_order_id'] = $transportation_order_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets valuation_price
     *
     * @return float|null
     */
    public function getValuationPrice()
    {
        return $this->container['valuation_price'];
    }

    /**
     * Sets valuation_price
     *
     * @param float|null $valuation_price valuation_price
     *
     * @return self
     */
    public function setValuationPrice($valuation_price)
    {
        if (is_null($valuation_price)) {
            throw new \InvalidArgumentException('non-nullable valuation_price cannot be null');
        }

        if ((!preg_match("/^-?([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($valuation_price)))) {
            throw new \InvalidArgumentException("invalid value for \$valuation_price when calling WarehouseStockMovement., must conform to the pattern /^-?([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['valuation_price'] = $valuation_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


