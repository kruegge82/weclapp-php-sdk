<?php
/**
 * Lead
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Lead Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Lead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'lead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'addresses' => '\kruegge82\weclapp\Model\Address[]',
        'birth_date' => 'int',
        'company' => 'string',
        'company2' => 'string',
        'delivery_address_id' => 'string',
        'email' => 'string',
        'fax' => 'string',
        'first_name' => 'string',
        'invoice_address_id' => 'string',
        'last_name' => 'string',
        'middle_name' => 'string',
        'mobile_phone1' => 'string',
        'online_accounts' => '\kruegge82\weclapp\Model\OnlineAccount[]',
        'party_type' => '\kruegge82\weclapp\Model\PartyType',
        'person_company' => 'string',
        'person_department_id' => 'string',
        'person_role_id' => 'string',
        'phone' => 'string',
        'primary_address_id' => 'string',
        'salutation' => '\kruegge82\weclapp\Model\Salutation',
        'tags' => 'string[]',
        'title' => 'string',
        'title_id' => 'string',
        'website' => 'string',
        'commercial_language_id' => 'string',
        'contacts' => '\kruegge82\weclapp\Model\Contact[]',
        'currency_id' => 'string',
        'currency_name' => 'string',
        'primary_contact_id' => 'string',
        'sector_id' => 'string',
        'sector_name' => 'string',
        'annual_revenue' => 'float',
        'company_size_id' => 'string',
        'company_size_name' => 'string',
        'customer_category_id' => 'string',
        'customer_category_name' => 'string',
        'parent_party_id' => 'string',
        'payment_method_id' => 'string',
        'payment_method_name' => 'string',
        'responsible_user_id' => 'string',
        'responsible_user_username' => 'string',
        'shipment_method_id' => 'string',
        'shipment_method_name' => 'string',
        'term_of_payment_id' => 'string',
        'term_of_payment_name' => 'string',
        'vat_registration_number' => 'string',
        'description' => 'string',
        'lead_number' => 'string',
        'lead_rating_id' => 'string',
        'lead_rating_name' => 'string',
        'lead_source_id' => 'string',
        'lead_source_name' => 'string',
        'lead_status' => '\kruegge82\weclapp\Model\LeadStatus',
        'lead_topics' => '\kruegge82\weclapp\Model\Entity[]',
        'loss_description' => 'string',
        'loss_reason_id' => 'string',
        'loss_reason_name' => 'string',
        'old_lead_number' => 'string',
        'opt_in' => 'bool',
        'opt_in_letter' => 'bool',
        'opt_in_phone' => 'bool',
        'opt_in_sms' => 'bool',
        'responsible_user_fixed' => 'bool',
        'sales_channel' => '\kruegge82\weclapp\Model\DistributionChannel',
        'sales_stage_id' => 'string',
        'sales_stage_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'custom_attributes' => null,
        'addresses' => null,
        'birth_date' => 'timestamp',
        'company' => null,
        'company2' => null,
        'delivery_address_id' => null,
        'email' => 'email',
        'fax' => null,
        'first_name' => null,
        'invoice_address_id' => null,
        'last_name' => null,
        'middle_name' => null,
        'mobile_phone1' => null,
        'online_accounts' => null,
        'party_type' => null,
        'person_company' => null,
        'person_department_id' => null,
        'person_role_id' => null,
        'phone' => null,
        'primary_address_id' => null,
        'salutation' => null,
        'tags' => null,
        'title' => null,
        'title_id' => null,
        'website' => null,
        'commercial_language_id' => null,
        'contacts' => null,
        'currency_id' => null,
        'currency_name' => null,
        'primary_contact_id' => null,
        'sector_id' => null,
        'sector_name' => null,
        'annual_revenue' => 'decimal',
        'company_size_id' => null,
        'company_size_name' => null,
        'customer_category_id' => null,
        'customer_category_name' => null,
        'parent_party_id' => null,
        'payment_method_id' => null,
        'payment_method_name' => null,
        'responsible_user_id' => null,
        'responsible_user_username' => null,
        'shipment_method_id' => null,
        'shipment_method_name' => null,
        'term_of_payment_id' => null,
        'term_of_payment_name' => null,
        'vat_registration_number' => null,
        'description' => 'html',
        'lead_number' => null,
        'lead_rating_id' => null,
        'lead_rating_name' => null,
        'lead_source_id' => null,
        'lead_source_name' => null,
        'lead_status' => null,
        'lead_topics' => null,
        'loss_description' => null,
        'loss_reason_id' => null,
        'loss_reason_name' => null,
        'old_lead_number' => null,
        'opt_in' => null,
        'opt_in_letter' => null,
        'opt_in_phone' => null,
        'opt_in_sms' => null,
        'responsible_user_fixed' => null,
        'sales_channel' => null,
        'sales_stage_id' => null,
        'sales_stage_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'custom_attributes' => false,
        'addresses' => false,
        'birth_date' => false,
        'company' => false,
        'company2' => false,
        'delivery_address_id' => false,
        'email' => false,
        'fax' => false,
        'first_name' => false,
        'invoice_address_id' => false,
        'last_name' => false,
        'middle_name' => false,
        'mobile_phone1' => false,
        'online_accounts' => false,
        'party_type' => false,
        'person_company' => false,
        'person_department_id' => false,
        'person_role_id' => false,
        'phone' => false,
        'primary_address_id' => false,
        'salutation' => false,
        'tags' => false,
        'title' => false,
        'title_id' => false,
        'website' => false,
        'commercial_language_id' => false,
        'contacts' => false,
        'currency_id' => false,
        'currency_name' => false,
        'primary_contact_id' => false,
        'sector_id' => false,
        'sector_name' => false,
        'annual_revenue' => false,
        'company_size_id' => false,
        'company_size_name' => false,
        'customer_category_id' => false,
        'customer_category_name' => false,
        'parent_party_id' => false,
        'payment_method_id' => false,
        'payment_method_name' => false,
        'responsible_user_id' => false,
        'responsible_user_username' => false,
        'shipment_method_id' => false,
        'shipment_method_name' => false,
        'term_of_payment_id' => false,
        'term_of_payment_name' => false,
        'vat_registration_number' => false,
        'description' => false,
        'lead_number' => false,
        'lead_rating_id' => false,
        'lead_rating_name' => false,
        'lead_source_id' => false,
        'lead_source_name' => false,
        'lead_status' => false,
        'lead_topics' => false,
        'loss_description' => false,
        'loss_reason_id' => false,
        'loss_reason_name' => false,
        'old_lead_number' => false,
        'opt_in' => false,
        'opt_in_letter' => false,
        'opt_in_phone' => false,
        'opt_in_sms' => false,
        'responsible_user_fixed' => false,
        'sales_channel' => false,
        'sales_stage_id' => false,
        'sales_stage_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'custom_attributes' => 'customAttributes',
        'addresses' => 'addresses',
        'birth_date' => 'birthDate',
        'company' => 'company',
        'company2' => 'company2',
        'delivery_address_id' => 'deliveryAddressId',
        'email' => 'email',
        'fax' => 'fax',
        'first_name' => 'firstName',
        'invoice_address_id' => 'invoiceAddressId',
        'last_name' => 'lastName',
        'middle_name' => 'middleName',
        'mobile_phone1' => 'mobilePhone1',
        'online_accounts' => 'onlineAccounts',
        'party_type' => 'partyType',
        'person_company' => 'personCompany',
        'person_department_id' => 'personDepartmentId',
        'person_role_id' => 'personRoleId',
        'phone' => 'phone',
        'primary_address_id' => 'primaryAddressId',
        'salutation' => 'salutation',
        'tags' => 'tags',
        'title' => 'title',
        'title_id' => 'titleId',
        'website' => 'website',
        'commercial_language_id' => 'commercialLanguageId',
        'contacts' => 'contacts',
        'currency_id' => 'currencyId',
        'currency_name' => 'currencyName',
        'primary_contact_id' => 'primaryContactId',
        'sector_id' => 'sectorId',
        'sector_name' => 'sectorName',
        'annual_revenue' => 'annualRevenue',
        'company_size_id' => 'companySizeId',
        'company_size_name' => 'companySizeName',
        'customer_category_id' => 'customerCategoryId',
        'customer_category_name' => 'customerCategoryName',
        'parent_party_id' => 'parentPartyId',
        'payment_method_id' => 'paymentMethodId',
        'payment_method_name' => 'paymentMethodName',
        'responsible_user_id' => 'responsibleUserId',
        'responsible_user_username' => 'responsibleUserUsername',
        'shipment_method_id' => 'shipmentMethodId',
        'shipment_method_name' => 'shipmentMethodName',
        'term_of_payment_id' => 'termOfPaymentId',
        'term_of_payment_name' => 'termOfPaymentName',
        'vat_registration_number' => 'vatRegistrationNumber',
        'description' => 'description',
        'lead_number' => 'leadNumber',
        'lead_rating_id' => 'leadRatingId',
        'lead_rating_name' => 'leadRatingName',
        'lead_source_id' => 'leadSourceId',
        'lead_source_name' => 'leadSourceName',
        'lead_status' => 'leadStatus',
        'lead_topics' => 'leadTopics',
        'loss_description' => 'lossDescription',
        'loss_reason_id' => 'lossReasonId',
        'loss_reason_name' => 'lossReasonName',
        'old_lead_number' => 'oldLeadNumber',
        'opt_in' => 'optIn',
        'opt_in_letter' => 'optInLetter',
        'opt_in_phone' => 'optInPhone',
        'opt_in_sms' => 'optInSms',
        'responsible_user_fixed' => 'responsibleUserFixed',
        'sales_channel' => 'salesChannel',
        'sales_stage_id' => 'salesStageId',
        'sales_stage_name' => 'salesStageName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'custom_attributes' => 'setCustomAttributes',
        'addresses' => 'setAddresses',
        'birth_date' => 'setBirthDate',
        'company' => 'setCompany',
        'company2' => 'setCompany2',
        'delivery_address_id' => 'setDeliveryAddressId',
        'email' => 'setEmail',
        'fax' => 'setFax',
        'first_name' => 'setFirstName',
        'invoice_address_id' => 'setInvoiceAddressId',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'mobile_phone1' => 'setMobilePhone1',
        'online_accounts' => 'setOnlineAccounts',
        'party_type' => 'setPartyType',
        'person_company' => 'setPersonCompany',
        'person_department_id' => 'setPersonDepartmentId',
        'person_role_id' => 'setPersonRoleId',
        'phone' => 'setPhone',
        'primary_address_id' => 'setPrimaryAddressId',
        'salutation' => 'setSalutation',
        'tags' => 'setTags',
        'title' => 'setTitle',
        'title_id' => 'setTitleId',
        'website' => 'setWebsite',
        'commercial_language_id' => 'setCommercialLanguageId',
        'contacts' => 'setContacts',
        'currency_id' => 'setCurrencyId',
        'currency_name' => 'setCurrencyName',
        'primary_contact_id' => 'setPrimaryContactId',
        'sector_id' => 'setSectorId',
        'sector_name' => 'setSectorName',
        'annual_revenue' => 'setAnnualRevenue',
        'company_size_id' => 'setCompanySizeId',
        'company_size_name' => 'setCompanySizeName',
        'customer_category_id' => 'setCustomerCategoryId',
        'customer_category_name' => 'setCustomerCategoryName',
        'parent_party_id' => 'setParentPartyId',
        'payment_method_id' => 'setPaymentMethodId',
        'payment_method_name' => 'setPaymentMethodName',
        'responsible_user_id' => 'setResponsibleUserId',
        'responsible_user_username' => 'setResponsibleUserUsername',
        'shipment_method_id' => 'setShipmentMethodId',
        'shipment_method_name' => 'setShipmentMethodName',
        'term_of_payment_id' => 'setTermOfPaymentId',
        'term_of_payment_name' => 'setTermOfPaymentName',
        'vat_registration_number' => 'setVatRegistrationNumber',
        'description' => 'setDescription',
        'lead_number' => 'setLeadNumber',
        'lead_rating_id' => 'setLeadRatingId',
        'lead_rating_name' => 'setLeadRatingName',
        'lead_source_id' => 'setLeadSourceId',
        'lead_source_name' => 'setLeadSourceName',
        'lead_status' => 'setLeadStatus',
        'lead_topics' => 'setLeadTopics',
        'loss_description' => 'setLossDescription',
        'loss_reason_id' => 'setLossReasonId',
        'loss_reason_name' => 'setLossReasonName',
        'old_lead_number' => 'setOldLeadNumber',
        'opt_in' => 'setOptIn',
        'opt_in_letter' => 'setOptInLetter',
        'opt_in_phone' => 'setOptInPhone',
        'opt_in_sms' => 'setOptInSms',
        'responsible_user_fixed' => 'setResponsibleUserFixed',
        'sales_channel' => 'setSalesChannel',
        'sales_stage_id' => 'setSalesStageId',
        'sales_stage_name' => 'setSalesStageName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'custom_attributes' => 'getCustomAttributes',
        'addresses' => 'getAddresses',
        'birth_date' => 'getBirthDate',
        'company' => 'getCompany',
        'company2' => 'getCompany2',
        'delivery_address_id' => 'getDeliveryAddressId',
        'email' => 'getEmail',
        'fax' => 'getFax',
        'first_name' => 'getFirstName',
        'invoice_address_id' => 'getInvoiceAddressId',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'mobile_phone1' => 'getMobilePhone1',
        'online_accounts' => 'getOnlineAccounts',
        'party_type' => 'getPartyType',
        'person_company' => 'getPersonCompany',
        'person_department_id' => 'getPersonDepartmentId',
        'person_role_id' => 'getPersonRoleId',
        'phone' => 'getPhone',
        'primary_address_id' => 'getPrimaryAddressId',
        'salutation' => 'getSalutation',
        'tags' => 'getTags',
        'title' => 'getTitle',
        'title_id' => 'getTitleId',
        'website' => 'getWebsite',
        'commercial_language_id' => 'getCommercialLanguageId',
        'contacts' => 'getContacts',
        'currency_id' => 'getCurrencyId',
        'currency_name' => 'getCurrencyName',
        'primary_contact_id' => 'getPrimaryContactId',
        'sector_id' => 'getSectorId',
        'sector_name' => 'getSectorName',
        'annual_revenue' => 'getAnnualRevenue',
        'company_size_id' => 'getCompanySizeId',
        'company_size_name' => 'getCompanySizeName',
        'customer_category_id' => 'getCustomerCategoryId',
        'customer_category_name' => 'getCustomerCategoryName',
        'parent_party_id' => 'getParentPartyId',
        'payment_method_id' => 'getPaymentMethodId',
        'payment_method_name' => 'getPaymentMethodName',
        'responsible_user_id' => 'getResponsibleUserId',
        'responsible_user_username' => 'getResponsibleUserUsername',
        'shipment_method_id' => 'getShipmentMethodId',
        'shipment_method_name' => 'getShipmentMethodName',
        'term_of_payment_id' => 'getTermOfPaymentId',
        'term_of_payment_name' => 'getTermOfPaymentName',
        'vat_registration_number' => 'getVatRegistrationNumber',
        'description' => 'getDescription',
        'lead_number' => 'getLeadNumber',
        'lead_rating_id' => 'getLeadRatingId',
        'lead_rating_name' => 'getLeadRatingName',
        'lead_source_id' => 'getLeadSourceId',
        'lead_source_name' => 'getLeadSourceName',
        'lead_status' => 'getLeadStatus',
        'lead_topics' => 'getLeadTopics',
        'loss_description' => 'getLossDescription',
        'loss_reason_id' => 'getLossReasonId',
        'loss_reason_name' => 'getLossReasonName',
        'old_lead_number' => 'getOldLeadNumber',
        'opt_in' => 'getOptIn',
        'opt_in_letter' => 'getOptInLetter',
        'opt_in_phone' => 'getOptInPhone',
        'opt_in_sms' => 'getOptInSms',
        'responsible_user_fixed' => 'getResponsibleUserFixed',
        'sales_channel' => 'getSalesChannel',
        'sales_stage_id' => 'getSalesStageId',
        'sales_stage_name' => 'getSalesStageName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('company2', $data ?? [], null);
        $this->setIfExists('delivery_address_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('invoice_address_id', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('mobile_phone1', $data ?? [], null);
        $this->setIfExists('online_accounts', $data ?? [], null);
        $this->setIfExists('party_type', $data ?? [], null);
        $this->setIfExists('person_company', $data ?? [], null);
        $this->setIfExists('person_department_id', $data ?? [], null);
        $this->setIfExists('person_role_id', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('primary_address_id', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('title_id', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('commercial_language_id', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('currency_name', $data ?? [], null);
        $this->setIfExists('primary_contact_id', $data ?? [], null);
        $this->setIfExists('sector_id', $data ?? [], null);
        $this->setIfExists('sector_name', $data ?? [], null);
        $this->setIfExists('annual_revenue', $data ?? [], null);
        $this->setIfExists('company_size_id', $data ?? [], null);
        $this->setIfExists('company_size_name', $data ?? [], null);
        $this->setIfExists('customer_category_id', $data ?? [], null);
        $this->setIfExists('customer_category_name', $data ?? [], null);
        $this->setIfExists('parent_party_id', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('payment_method_name', $data ?? [], null);
        $this->setIfExists('responsible_user_id', $data ?? [], null);
        $this->setIfExists('responsible_user_username', $data ?? [], null);
        $this->setIfExists('shipment_method_id', $data ?? [], null);
        $this->setIfExists('shipment_method_name', $data ?? [], null);
        $this->setIfExists('term_of_payment_id', $data ?? [], null);
        $this->setIfExists('term_of_payment_name', $data ?? [], null);
        $this->setIfExists('vat_registration_number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('lead_number', $data ?? [], null);
        $this->setIfExists('lead_rating_id', $data ?? [], null);
        $this->setIfExists('lead_rating_name', $data ?? [], null);
        $this->setIfExists('lead_source_id', $data ?? [], null);
        $this->setIfExists('lead_source_name', $data ?? [], null);
        $this->setIfExists('lead_status', $data ?? [], null);
        $this->setIfExists('lead_topics', $data ?? [], null);
        $this->setIfExists('loss_description', $data ?? [], null);
        $this->setIfExists('loss_reason_id', $data ?? [], null);
        $this->setIfExists('loss_reason_name', $data ?? [], null);
        $this->setIfExists('old_lead_number', $data ?? [], null);
        $this->setIfExists('opt_in', $data ?? [], null);
        $this->setIfExists('opt_in_letter', $data ?? [], null);
        $this->setIfExists('opt_in_phone', $data ?? [], null);
        $this->setIfExists('opt_in_sms', $data ?? [], null);
        $this->setIfExists('responsible_user_fixed', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
        $this->setIfExists('sales_stage_id', $data ?? [], null);
        $this->setIfExists('sales_stage_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 1000)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['company2']) && (mb_strlen($this->container['company2']) > 1000)) {
            $invalidProperties[] = "invalid value for 'company2', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 1000)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['fax']) && (mb_strlen($this->container['fax']) > 1000)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['mobile_phone1']) && (mb_strlen($this->container['mobile_phone1']) > 1000)) {
            $invalidProperties[] = "invalid value for 'mobile_phone1', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['person_company']) && (mb_strlen($this->container['person_company']) > 1000)) {
            $invalidProperties[] = "invalid value for 'person_company', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 1000)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 1000)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['annual_revenue']) && !preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", $this->container['annual_revenue'])) {
            $invalidProperties[] = "invalid value for 'annual_revenue', must be conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.";
        }

        if (!is_null($this->container['vat_registration_number']) && (mb_strlen($this->container['vat_registration_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'vat_registration_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['lead_number']) && (mb_strlen($this->container['lead_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'lead_number', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['loss_description']) && (mb_strlen($this->container['loss_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'loss_description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['old_lead_number']) && (mb_strlen($this->container['old_lead_number']) > 1000)) {
            $invalidProperties[] = "invalid value for 'old_lead_number', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \kruegge82\weclapp\Model\Address[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \kruegge82\weclapp\Model\Address[]|null $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return int|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param int|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        if ((mb_strlen($company) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $company when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets company2
     *
     * @return string|null
     */
    public function getCompany2()
    {
        return $this->container['company2'];
    }

    /**
     * Sets company2
     *
     * @param string|null $company2 company2
     *
     * @return self
     */
    public function setCompany2($company2)
    {
        if (is_null($company2)) {
            throw new \InvalidArgumentException('non-nullable company2 cannot be null');
        }
        if ((mb_strlen($company2) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $company2 when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['company2'] = $company2;

        return $this;
    }

    /**
     * Gets delivery_address_id
     *
     * @return string|null
     */
    public function getDeliveryAddressId()
    {
        return $this->container['delivery_address_id'];
    }

    /**
     * Sets delivery_address_id
     *
     * @param string|null $delivery_address_id delivery_address_id
     *
     * @return self
     */
    public function setDeliveryAddressId($delivery_address_id)
    {
        if (is_null($delivery_address_id)) {
            throw new \InvalidArgumentException('non-nullable delivery_address_id cannot be null');
        }
        $this->container['delivery_address_id'] = $delivery_address_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        if ((mb_strlen($fax) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets invoice_address_id
     *
     * @return string|null
     */
    public function getInvoiceAddressId()
    {
        return $this->container['invoice_address_id'];
    }

    /**
     * Sets invoice_address_id
     *
     * @param string|null $invoice_address_id invoice_address_id
     *
     * @return self
     */
    public function setInvoiceAddressId($invoice_address_id)
    {
        if (is_null($invoice_address_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_address_id cannot be null');
        }
        $this->container['invoice_address_id'] = $invoice_address_id;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        if ((mb_strlen($middle_name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets mobile_phone1
     *
     * @return string|null
     */
    public function getMobilePhone1()
    {
        return $this->container['mobile_phone1'];
    }

    /**
     * Sets mobile_phone1
     *
     * @param string|null $mobile_phone1 mobile_phone1
     *
     * @return self
     */
    public function setMobilePhone1($mobile_phone1)
    {
        if (is_null($mobile_phone1)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone1 cannot be null');
        }
        if ((mb_strlen($mobile_phone1) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone1 when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['mobile_phone1'] = $mobile_phone1;

        return $this;
    }

    /**
     * Gets online_accounts
     *
     * @return \kruegge82\weclapp\Model\OnlineAccount[]|null
     */
    public function getOnlineAccounts()
    {
        return $this->container['online_accounts'];
    }

    /**
     * Sets online_accounts
     *
     * @param \kruegge82\weclapp\Model\OnlineAccount[]|null $online_accounts online_accounts
     *
     * @return self
     */
    public function setOnlineAccounts($online_accounts)
    {
        if (is_null($online_accounts)) {
            throw new \InvalidArgumentException('non-nullable online_accounts cannot be null');
        }
        $this->container['online_accounts'] = $online_accounts;

        return $this;
    }

    /**
     * Gets party_type
     *
     * @return \kruegge82\weclapp\Model\PartyType|null
     */
    public function getPartyType()
    {
        return $this->container['party_type'];
    }

    /**
     * Sets party_type
     *
     * @param \kruegge82\weclapp\Model\PartyType|null $party_type party_type
     *
     * @return self
     */
    public function setPartyType($party_type)
    {
        if (is_null($party_type)) {
            throw new \InvalidArgumentException('non-nullable party_type cannot be null');
        }
        $this->container['party_type'] = $party_type;

        return $this;
    }

    /**
     * Gets person_company
     *
     * @return string|null
     */
    public function getPersonCompany()
    {
        return $this->container['person_company'];
    }

    /**
     * Sets person_company
     *
     * @param string|null $person_company person_company
     *
     * @return self
     */
    public function setPersonCompany($person_company)
    {
        if (is_null($person_company)) {
            throw new \InvalidArgumentException('non-nullable person_company cannot be null');
        }
        if ((mb_strlen($person_company) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $person_company when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['person_company'] = $person_company;

        return $this;
    }

    /**
     * Gets person_department_id
     *
     * @return string|null
     */
    public function getPersonDepartmentId()
    {
        return $this->container['person_department_id'];
    }

    /**
     * Sets person_department_id
     *
     * @param string|null $person_department_id person_department_id
     *
     * @return self
     */
    public function setPersonDepartmentId($person_department_id)
    {
        if (is_null($person_department_id)) {
            throw new \InvalidArgumentException('non-nullable person_department_id cannot be null');
        }
        $this->container['person_department_id'] = $person_department_id;

        return $this;
    }

    /**
     * Gets person_role_id
     *
     * @return string|null
     */
    public function getPersonRoleId()
    {
        return $this->container['person_role_id'];
    }

    /**
     * Sets person_role_id
     *
     * @param string|null $person_role_id person_role_id
     *
     * @return self
     */
    public function setPersonRoleId($person_role_id)
    {
        if (is_null($person_role_id)) {
            throw new \InvalidArgumentException('non-nullable person_role_id cannot be null');
        }
        $this->container['person_role_id'] = $person_role_id;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        if ((mb_strlen($phone) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets primary_address_id
     *
     * @return string|null
     */
    public function getPrimaryAddressId()
    {
        return $this->container['primary_address_id'];
    }

    /**
     * Sets primary_address_id
     *
     * @param string|null $primary_address_id primary_address_id
     *
     * @return self
     */
    public function setPrimaryAddressId($primary_address_id)
    {
        if (is_null($primary_address_id)) {
            throw new \InvalidArgumentException('non-nullable primary_address_id cannot be null');
        }
        $this->container['primary_address_id'] = $primary_address_id;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return \kruegge82\weclapp\Model\Salutation|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param \kruegge82\weclapp\Model\Salutation|null $salutation salutation
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            throw new \InvalidArgumentException('non-nullable salutation cannot be null');
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     * @deprecated
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     * @deprecated
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_id
     *
     * @return string|null
     */
    public function getTitleId()
    {
        return $this->container['title_id'];
    }

    /**
     * Sets title_id
     *
     * @param string|null $title_id title_id
     *
     * @return self
     */
    public function setTitleId($title_id)
    {
        if (is_null($title_id)) {
            throw new \InvalidArgumentException('non-nullable title_id cannot be null');
        }
        $this->container['title_id'] = $title_id;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        if ((mb_strlen($website) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $website when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets commercial_language_id
     *
     * @return string|null
     */
    public function getCommercialLanguageId()
    {
        return $this->container['commercial_language_id'];
    }

    /**
     * Sets commercial_language_id
     *
     * @param string|null $commercial_language_id commercial_language_id
     *
     * @return self
     */
    public function setCommercialLanguageId($commercial_language_id)
    {
        if (is_null($commercial_language_id)) {
            throw new \InvalidArgumentException('non-nullable commercial_language_id cannot be null');
        }
        $this->container['commercial_language_id'] = $commercial_language_id;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \kruegge82\weclapp\Model\Contact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \kruegge82\weclapp\Model\Contact[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        if (is_null($currency_id)) {
            throw new \InvalidArgumentException('non-nullable currency_id cannot be null');
        }
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_name
     *
     * @return string|null
     * @deprecated
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     *
     * @param string|null $currency_name currency_name
     *
     * @return self
     * @deprecated
     */
    public function setCurrencyName($currency_name)
    {
        if (is_null($currency_name)) {
            throw new \InvalidArgumentException('non-nullable currency_name cannot be null');
        }
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets primary_contact_id
     *
     * @return string|null
     */
    public function getPrimaryContactId()
    {
        return $this->container['primary_contact_id'];
    }

    /**
     * Sets primary_contact_id
     *
     * @param string|null $primary_contact_id primary_contact_id
     *
     * @return self
     */
    public function setPrimaryContactId($primary_contact_id)
    {
        if (is_null($primary_contact_id)) {
            throw new \InvalidArgumentException('non-nullable primary_contact_id cannot be null');
        }
        $this->container['primary_contact_id'] = $primary_contact_id;

        return $this;
    }

    /**
     * Gets sector_id
     *
     * @return string|null
     */
    public function getSectorId()
    {
        return $this->container['sector_id'];
    }

    /**
     * Sets sector_id
     *
     * @param string|null $sector_id sector_id
     *
     * @return self
     */
    public function setSectorId($sector_id)
    {
        if (is_null($sector_id)) {
            throw new \InvalidArgumentException('non-nullable sector_id cannot be null');
        }
        $this->container['sector_id'] = $sector_id;

        return $this;
    }

    /**
     * Gets sector_name
     *
     * @return string|null
     * @deprecated
     */
    public function getSectorName()
    {
        return $this->container['sector_name'];
    }

    /**
     * Sets sector_name
     *
     * @param string|null $sector_name sector_name
     *
     * @return self
     * @deprecated
     */
    public function setSectorName($sector_name)
    {
        if (is_null($sector_name)) {
            throw new \InvalidArgumentException('non-nullable sector_name cannot be null');
        }
        $this->container['sector_name'] = $sector_name;

        return $this;
    }

    /**
     * Gets annual_revenue
     *
     * @return float|null
     */
    public function getAnnualRevenue()
    {
        return $this->container['annual_revenue'];
    }

    /**
     * Sets annual_revenue
     *
     * @param float|null $annual_revenue annual_revenue
     *
     * @return self
     */
    public function setAnnualRevenue($annual_revenue)
    {
        if (is_null($annual_revenue)) {
            throw new \InvalidArgumentException('non-nullable annual_revenue cannot be null');
        }

        if ((!preg_match("/^([0-9]{1,13})([.][0-9]{1,5})?$/", ObjectSerializer::toString($annual_revenue)))) {
            throw new \InvalidArgumentException("invalid value for \$annual_revenue when calling Lead., must conform to the pattern /^([0-9]{1,13})([.][0-9]{1,5})?$/.");
        }

        $this->container['annual_revenue'] = $annual_revenue;

        return $this;
    }

    /**
     * Gets company_size_id
     *
     * @return string|null
     */
    public function getCompanySizeId()
    {
        return $this->container['company_size_id'];
    }

    /**
     * Sets company_size_id
     *
     * @param string|null $company_size_id company_size_id
     *
     * @return self
     */
    public function setCompanySizeId($company_size_id)
    {
        if (is_null($company_size_id)) {
            throw new \InvalidArgumentException('non-nullable company_size_id cannot be null');
        }
        $this->container['company_size_id'] = $company_size_id;

        return $this;
    }

    /**
     * Gets company_size_name
     *
     * @return string|null
     * @deprecated
     */
    public function getCompanySizeName()
    {
        return $this->container['company_size_name'];
    }

    /**
     * Sets company_size_name
     *
     * @param string|null $company_size_name company_size_name
     *
     * @return self
     * @deprecated
     */
    public function setCompanySizeName($company_size_name)
    {
        if (is_null($company_size_name)) {
            throw new \InvalidArgumentException('non-nullable company_size_name cannot be null');
        }
        $this->container['company_size_name'] = $company_size_name;

        return $this;
    }

    /**
     * Gets customer_category_id
     *
     * @return string|null
     */
    public function getCustomerCategoryId()
    {
        return $this->container['customer_category_id'];
    }

    /**
     * Sets customer_category_id
     *
     * @param string|null $customer_category_id customer_category_id
     *
     * @return self
     */
    public function setCustomerCategoryId($customer_category_id)
    {
        if (is_null($customer_category_id)) {
            throw new \InvalidArgumentException('non-nullable customer_category_id cannot be null');
        }
        $this->container['customer_category_id'] = $customer_category_id;

        return $this;
    }

    /**
     * Gets customer_category_name
     *
     * @return string|null
     * @deprecated
     */
    public function getCustomerCategoryName()
    {
        return $this->container['customer_category_name'];
    }

    /**
     * Sets customer_category_name
     *
     * @param string|null $customer_category_name customer_category_name
     *
     * @return self
     * @deprecated
     */
    public function setCustomerCategoryName($customer_category_name)
    {
        if (is_null($customer_category_name)) {
            throw new \InvalidArgumentException('non-nullable customer_category_name cannot be null');
        }
        $this->container['customer_category_name'] = $customer_category_name;

        return $this;
    }

    /**
     * Gets parent_party_id
     *
     * @return string|null
     */
    public function getParentPartyId()
    {
        return $this->container['parent_party_id'];
    }

    /**
     * Sets parent_party_id
     *
     * @param string|null $parent_party_id parent_party_id
     *
     * @return self
     */
    public function setParentPartyId($parent_party_id)
    {
        if (is_null($parent_party_id)) {
            throw new \InvalidArgumentException('non-nullable parent_party_id cannot be null');
        }
        $this->container['parent_party_id'] = $parent_party_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets payment_method_name
     *
     * @return string|null
     * @deprecated
     */
    public function getPaymentMethodName()
    {
        return $this->container['payment_method_name'];
    }

    /**
     * Sets payment_method_name
     *
     * @param string|null $payment_method_name payment_method_name
     *
     * @return self
     * @deprecated
     */
    public function setPaymentMethodName($payment_method_name)
    {
        if (is_null($payment_method_name)) {
            throw new \InvalidArgumentException('non-nullable payment_method_name cannot be null');
        }
        $this->container['payment_method_name'] = $payment_method_name;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return string|null
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param string|null $responsible_user_id responsible_user_id
     *
     * @return self
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        if (is_null($responsible_user_id)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_id cannot be null');
        }
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets responsible_user_username
     *
     * @return string|null
     * @deprecated
     */
    public function getResponsibleUserUsername()
    {
        return $this->container['responsible_user_username'];
    }

    /**
     * Sets responsible_user_username
     *
     * @param string|null $responsible_user_username responsible_user_username
     *
     * @return self
     * @deprecated
     */
    public function setResponsibleUserUsername($responsible_user_username)
    {
        if (is_null($responsible_user_username)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_username cannot be null');
        }
        $this->container['responsible_user_username'] = $responsible_user_username;

        return $this;
    }

    /**
     * Gets shipment_method_id
     *
     * @return string|null
     */
    public function getShipmentMethodId()
    {
        return $this->container['shipment_method_id'];
    }

    /**
     * Sets shipment_method_id
     *
     * @param string|null $shipment_method_id shipment_method_id
     *
     * @return self
     */
    public function setShipmentMethodId($shipment_method_id)
    {
        if (is_null($shipment_method_id)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_id cannot be null');
        }
        $this->container['shipment_method_id'] = $shipment_method_id;

        return $this;
    }

    /**
     * Gets shipment_method_name
     *
     * @return string|null
     * @deprecated
     */
    public function getShipmentMethodName()
    {
        return $this->container['shipment_method_name'];
    }

    /**
     * Sets shipment_method_name
     *
     * @param string|null $shipment_method_name shipment_method_name
     *
     * @return self
     * @deprecated
     */
    public function setShipmentMethodName($shipment_method_name)
    {
        if (is_null($shipment_method_name)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_name cannot be null');
        }
        $this->container['shipment_method_name'] = $shipment_method_name;

        return $this;
    }

    /**
     * Gets term_of_payment_id
     *
     * @return string|null
     */
    public function getTermOfPaymentId()
    {
        return $this->container['term_of_payment_id'];
    }

    /**
     * Sets term_of_payment_id
     *
     * @param string|null $term_of_payment_id term_of_payment_id
     *
     * @return self
     */
    public function setTermOfPaymentId($term_of_payment_id)
    {
        if (is_null($term_of_payment_id)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_id cannot be null');
        }
        $this->container['term_of_payment_id'] = $term_of_payment_id;

        return $this;
    }

    /**
     * Gets term_of_payment_name
     *
     * @return string|null
     * @deprecated
     */
    public function getTermOfPaymentName()
    {
        return $this->container['term_of_payment_name'];
    }

    /**
     * Sets term_of_payment_name
     *
     * @param string|null $term_of_payment_name term_of_payment_name
     *
     * @return self
     * @deprecated
     */
    public function setTermOfPaymentName($term_of_payment_name)
    {
        if (is_null($term_of_payment_name)) {
            throw new \InvalidArgumentException('non-nullable term_of_payment_name cannot be null');
        }
        $this->container['term_of_payment_name'] = $term_of_payment_name;

        return $this;
    }

    /**
     * Gets vat_registration_number
     *
     * @return string|null
     */
    public function getVatRegistrationNumber()
    {
        return $this->container['vat_registration_number'];
    }

    /**
     * Sets vat_registration_number
     *
     * @param string|null $vat_registration_number vat_registration_number
     *
     * @return self
     */
    public function setVatRegistrationNumber($vat_registration_number)
    {
        if (is_null($vat_registration_number)) {
            throw new \InvalidArgumentException('non-nullable vat_registration_number cannot be null');
        }
        if ((mb_strlen($vat_registration_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration_number when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['vat_registration_number'] = $vat_registration_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Lead., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets lead_number
     *
     * @return string|null
     */
    public function getLeadNumber()
    {
        return $this->container['lead_number'];
    }

    /**
     * Sets lead_number
     *
     * @param string|null $lead_number lead_number
     *
     * @return self
     */
    public function setLeadNumber($lead_number)
    {
        if (is_null($lead_number)) {
            throw new \InvalidArgumentException('non-nullable lead_number cannot be null');
        }
        if ((mb_strlen($lead_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $lead_number when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['lead_number'] = $lead_number;

        return $this;
    }

    /**
     * Gets lead_rating_id
     *
     * @return string|null
     */
    public function getLeadRatingId()
    {
        return $this->container['lead_rating_id'];
    }

    /**
     * Sets lead_rating_id
     *
     * @param string|null $lead_rating_id lead_rating_id
     *
     * @return self
     */
    public function setLeadRatingId($lead_rating_id)
    {
        if (is_null($lead_rating_id)) {
            throw new \InvalidArgumentException('non-nullable lead_rating_id cannot be null');
        }
        $this->container['lead_rating_id'] = $lead_rating_id;

        return $this;
    }

    /**
     * Gets lead_rating_name
     *
     * @return string|null
     * @deprecated
     */
    public function getLeadRatingName()
    {
        return $this->container['lead_rating_name'];
    }

    /**
     * Sets lead_rating_name
     *
     * @param string|null $lead_rating_name lead_rating_name
     *
     * @return self
     * @deprecated
     */
    public function setLeadRatingName($lead_rating_name)
    {
        if (is_null($lead_rating_name)) {
            throw new \InvalidArgumentException('non-nullable lead_rating_name cannot be null');
        }
        $this->container['lead_rating_name'] = $lead_rating_name;

        return $this;
    }

    /**
     * Gets lead_source_id
     *
     * @return string|null
     */
    public function getLeadSourceId()
    {
        return $this->container['lead_source_id'];
    }

    /**
     * Sets lead_source_id
     *
     * @param string|null $lead_source_id lead_source_id
     *
     * @return self
     */
    public function setLeadSourceId($lead_source_id)
    {
        if (is_null($lead_source_id)) {
            throw new \InvalidArgumentException('non-nullable lead_source_id cannot be null');
        }
        $this->container['lead_source_id'] = $lead_source_id;

        return $this;
    }

    /**
     * Gets lead_source_name
     *
     * @return string|null
     * @deprecated
     */
    public function getLeadSourceName()
    {
        return $this->container['lead_source_name'];
    }

    /**
     * Sets lead_source_name
     *
     * @param string|null $lead_source_name lead_source_name
     *
     * @return self
     * @deprecated
     */
    public function setLeadSourceName($lead_source_name)
    {
        if (is_null($lead_source_name)) {
            throw new \InvalidArgumentException('non-nullable lead_source_name cannot be null');
        }
        $this->container['lead_source_name'] = $lead_source_name;

        return $this;
    }

    /**
     * Gets lead_status
     *
     * @return \kruegge82\weclapp\Model\LeadStatus|null
     */
    public function getLeadStatus()
    {
        return $this->container['lead_status'];
    }

    /**
     * Sets lead_status
     *
     * @param \kruegge82\weclapp\Model\LeadStatus|null $lead_status lead_status
     *
     * @return self
     */
    public function setLeadStatus($lead_status)
    {
        if (is_null($lead_status)) {
            throw new \InvalidArgumentException('non-nullable lead_status cannot be null');
        }
        $this->container['lead_status'] = $lead_status;

        return $this;
    }

    /**
     * Gets lead_topics
     *
     * @return \kruegge82\weclapp\Model\Entity[]|null
     * @deprecated
     */
    public function getLeadTopics()
    {
        return $this->container['lead_topics'];
    }

    /**
     * Sets lead_topics
     *
     * @param \kruegge82\weclapp\Model\Entity[]|null $lead_topics lead_topics
     *
     * @return self
     * @deprecated
     */
    public function setLeadTopics($lead_topics)
    {
        if (is_null($lead_topics)) {
            throw new \InvalidArgumentException('non-nullable lead_topics cannot be null');
        }
        $this->container['lead_topics'] = $lead_topics;

        return $this;
    }

    /**
     * Gets loss_description
     *
     * @return string|null
     */
    public function getLossDescription()
    {
        return $this->container['loss_description'];
    }

    /**
     * Sets loss_description
     *
     * @param string|null $loss_description loss_description
     *
     * @return self
     */
    public function setLossDescription($loss_description)
    {
        if (is_null($loss_description)) {
            throw new \InvalidArgumentException('non-nullable loss_description cannot be null');
        }
        if ((mb_strlen($loss_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $loss_description when calling Lead., must be smaller than or equal to 255.');
        }

        $this->container['loss_description'] = $loss_description;

        return $this;
    }

    /**
     * Gets loss_reason_id
     *
     * @return string|null
     */
    public function getLossReasonId()
    {
        return $this->container['loss_reason_id'];
    }

    /**
     * Sets loss_reason_id
     *
     * @param string|null $loss_reason_id loss_reason_id
     *
     * @return self
     */
    public function setLossReasonId($loss_reason_id)
    {
        if (is_null($loss_reason_id)) {
            throw new \InvalidArgumentException('non-nullable loss_reason_id cannot be null');
        }
        $this->container['loss_reason_id'] = $loss_reason_id;

        return $this;
    }

    /**
     * Gets loss_reason_name
     *
     * @return string|null
     * @deprecated
     */
    public function getLossReasonName()
    {
        return $this->container['loss_reason_name'];
    }

    /**
     * Sets loss_reason_name
     *
     * @param string|null $loss_reason_name loss_reason_name
     *
     * @return self
     * @deprecated
     */
    public function setLossReasonName($loss_reason_name)
    {
        if (is_null($loss_reason_name)) {
            throw new \InvalidArgumentException('non-nullable loss_reason_name cannot be null');
        }
        $this->container['loss_reason_name'] = $loss_reason_name;

        return $this;
    }

    /**
     * Gets old_lead_number
     *
     * @return string|null
     */
    public function getOldLeadNumber()
    {
        return $this->container['old_lead_number'];
    }

    /**
     * Sets old_lead_number
     *
     * @param string|null $old_lead_number old_lead_number
     *
     * @return self
     */
    public function setOldLeadNumber($old_lead_number)
    {
        if (is_null($old_lead_number)) {
            throw new \InvalidArgumentException('non-nullable old_lead_number cannot be null');
        }
        if ((mb_strlen($old_lead_number) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $old_lead_number when calling Lead., must be smaller than or equal to 1000.');
        }

        $this->container['old_lead_number'] = $old_lead_number;

        return $this;
    }

    /**
     * Gets opt_in
     *
     * @return bool|null
     */
    public function getOptIn()
    {
        return $this->container['opt_in'];
    }

    /**
     * Sets opt_in
     *
     * @param bool|null $opt_in opt_in
     *
     * @return self
     */
    public function setOptIn($opt_in)
    {
        if (is_null($opt_in)) {
            throw new \InvalidArgumentException('non-nullable opt_in cannot be null');
        }
        $this->container['opt_in'] = $opt_in;

        return $this;
    }

    /**
     * Gets opt_in_letter
     *
     * @return bool|null
     */
    public function getOptInLetter()
    {
        return $this->container['opt_in_letter'];
    }

    /**
     * Sets opt_in_letter
     *
     * @param bool|null $opt_in_letter opt_in_letter
     *
     * @return self
     */
    public function setOptInLetter($opt_in_letter)
    {
        if (is_null($opt_in_letter)) {
            throw new \InvalidArgumentException('non-nullable opt_in_letter cannot be null');
        }
        $this->container['opt_in_letter'] = $opt_in_letter;

        return $this;
    }

    /**
     * Gets opt_in_phone
     *
     * @return bool|null
     */
    public function getOptInPhone()
    {
        return $this->container['opt_in_phone'];
    }

    /**
     * Sets opt_in_phone
     *
     * @param bool|null $opt_in_phone opt_in_phone
     *
     * @return self
     */
    public function setOptInPhone($opt_in_phone)
    {
        if (is_null($opt_in_phone)) {
            throw new \InvalidArgumentException('non-nullable opt_in_phone cannot be null');
        }
        $this->container['opt_in_phone'] = $opt_in_phone;

        return $this;
    }

    /**
     * Gets opt_in_sms
     *
     * @return bool|null
     */
    public function getOptInSms()
    {
        return $this->container['opt_in_sms'];
    }

    /**
     * Sets opt_in_sms
     *
     * @param bool|null $opt_in_sms opt_in_sms
     *
     * @return self
     */
    public function setOptInSms($opt_in_sms)
    {
        if (is_null($opt_in_sms)) {
            throw new \InvalidArgumentException('non-nullable opt_in_sms cannot be null');
        }
        $this->container['opt_in_sms'] = $opt_in_sms;

        return $this;
    }

    /**
     * Gets responsible_user_fixed
     *
     * @return bool|null
     */
    public function getResponsibleUserFixed()
    {
        return $this->container['responsible_user_fixed'];
    }

    /**
     * Sets responsible_user_fixed
     *
     * @param bool|null $responsible_user_fixed responsible_user_fixed
     *
     * @return self
     */
    public function setResponsibleUserFixed($responsible_user_fixed)
    {
        if (is_null($responsible_user_fixed)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_fixed cannot be null');
        }
        $this->container['responsible_user_fixed'] = $responsible_user_fixed;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \kruegge82\weclapp\Model\DistributionChannel|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \kruegge82\weclapp\Model\DistributionChannel|null $sales_channel sales_channel
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets sales_stage_id
     *
     * @return string|null
     */
    public function getSalesStageId()
    {
        return $this->container['sales_stage_id'];
    }

    /**
     * Sets sales_stage_id
     *
     * @param string|null $sales_stage_id sales_stage_id
     *
     * @return self
     */
    public function setSalesStageId($sales_stage_id)
    {
        if (is_null($sales_stage_id)) {
            throw new \InvalidArgumentException('non-nullable sales_stage_id cannot be null');
        }
        $this->container['sales_stage_id'] = $sales_stage_id;

        return $this;
    }

    /**
     * Gets sales_stage_name
     *
     * @return string|null
     * @deprecated
     */
    public function getSalesStageName()
    {
        return $this->container['sales_stage_name'];
    }

    /**
     * Sets sales_stage_name
     *
     * @param string|null $sales_stage_name sales_stage_name
     *
     * @return self
     * @deprecated
     */
    public function setSalesStageName($sales_stage_name)
    {
        if (is_null($sales_stage_name)) {
            throw new \InvalidArgumentException('non-nullable sales_stage_name cannot be null');
        }
        $this->container['sales_stage_name'] = $sales_stage_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


