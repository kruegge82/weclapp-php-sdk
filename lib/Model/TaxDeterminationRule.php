<?php
/**
 * TaxDeterminationRule
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * TaxDeterminationRule Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaxDeterminationRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'taxDeterminationRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'accounting_code_id' => 'string',
        'created_date' => 'int',
        'customer_debtor_accounting_code_id' => 'string',
        'dispatch_country_code' => 'string',
        'end_date' => 'int',
        'last_modified_date' => 'int',
        'party_type' => 'string',
        'recipient_country_code' => 'string',
        'sales' => 'bool',
        'start_date' => 'int',
        'tax_id' => 'string',
        'tax_rate_type' => 'string',
        'valid_vat_id' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'accounting_code_id' => null,
        'created_date' => 'timestamp',
        'customer_debtor_accounting_code_id' => null,
        'dispatch_country_code' => null,
        'end_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'party_type' => null,
        'recipient_country_code' => null,
        'sales' => null,
        'start_date' => 'timestamp',
        'tax_id' => null,
        'tax_rate_type' => null,
        'valid_vat_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'accounting_code_id' => false,
        'created_date' => false,
        'customer_debtor_accounting_code_id' => false,
        'dispatch_country_code' => false,
        'end_date' => false,
        'last_modified_date' => false,
        'party_type' => false,
        'recipient_country_code' => false,
        'sales' => false,
        'start_date' => false,
        'tax_id' => false,
        'tax_rate_type' => false,
        'valid_vat_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'accounting_code_id' => 'accountingCodeId',
        'created_date' => 'createdDate',
        'customer_debtor_accounting_code_id' => 'customerDebtorAccountingCodeId',
        'dispatch_country_code' => 'dispatchCountryCode',
        'end_date' => 'endDate',
        'last_modified_date' => 'lastModifiedDate',
        'party_type' => 'partyType',
        'recipient_country_code' => 'recipientCountryCode',
        'sales' => 'sales',
        'start_date' => 'startDate',
        'tax_id' => 'taxId',
        'tax_rate_type' => 'taxRateType',
        'valid_vat_id' => 'validVatId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'accounting_code_id' => 'setAccountingCodeId',
        'created_date' => 'setCreatedDate',
        'customer_debtor_accounting_code_id' => 'setCustomerDebtorAccountingCodeId',
        'dispatch_country_code' => 'setDispatchCountryCode',
        'end_date' => 'setEndDate',
        'last_modified_date' => 'setLastModifiedDate',
        'party_type' => 'setPartyType',
        'recipient_country_code' => 'setRecipientCountryCode',
        'sales' => 'setSales',
        'start_date' => 'setStartDate',
        'tax_id' => 'setTaxId',
        'tax_rate_type' => 'setTaxRateType',
        'valid_vat_id' => 'setValidVatId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'accounting_code_id' => 'getAccountingCodeId',
        'created_date' => 'getCreatedDate',
        'customer_debtor_accounting_code_id' => 'getCustomerDebtorAccountingCodeId',
        'dispatch_country_code' => 'getDispatchCountryCode',
        'end_date' => 'getEndDate',
        'last_modified_date' => 'getLastModifiedDate',
        'party_type' => 'getPartyType',
        'recipient_country_code' => 'getRecipientCountryCode',
        'sales' => 'getSales',
        'start_date' => 'getStartDate',
        'tax_id' => 'getTaxId',
        'tax_rate_type' => 'getTaxRateType',
        'valid_vat_id' => 'getValidVatId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PARTY_TYPE_ORGANIZATION = 'ORGANIZATION';
    public const PARTY_TYPE_PERSON = 'PERSON';
    public const TAX_RATE_TYPE_REDUCED = 'REDUCED';
    public const TAX_RATE_TYPE_SLIGHTLY_REDUCED = 'SLIGHTLY_REDUCED';
    public const TAX_RATE_TYPE_STANDARD = 'STANDARD';
    public const TAX_RATE_TYPE_SUPER_REDUCED = 'SUPER_REDUCED';
    public const TAX_RATE_TYPE_ZERO = 'ZERO';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartyTypeAllowableValues()
    {
        return [
            self::PARTY_TYPE_ORGANIZATION,
            self::PARTY_TYPE_PERSON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxRateTypeAllowableValues()
    {
        return [
            self::TAX_RATE_TYPE_REDUCED,
            self::TAX_RATE_TYPE_SLIGHTLY_REDUCED,
            self::TAX_RATE_TYPE_STANDARD,
            self::TAX_RATE_TYPE_SUPER_REDUCED,
            self::TAX_RATE_TYPE_ZERO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('accounting_code_id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('customer_debtor_accounting_code_id', $data ?? [], null);
        $this->setIfExists('dispatch_country_code', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('party_type', $data ?? [], null);
        $this->setIfExists('recipient_country_code', $data ?? [], null);
        $this->setIfExists('sales', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('tax_rate_type', $data ?? [], null);
        $this->setIfExists('valid_vat_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPartyTypeAllowableValues();
        if (!is_null($this->container['party_type']) && !in_array($this->container['party_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'party_type', must be one of '%s'",
                $this->container['party_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tax_id'] === null) {
            $invalidProperties[] = "'tax_id' can't be null";
        }
        $allowedValues = $this->getTaxRateTypeAllowableValues();
        if (!is_null($this->container['tax_rate_type']) && !in_array($this->container['tax_rate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_rate_type', must be one of '%s'",
                $this->container['tax_rate_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets accounting_code_id
     *
     * @return string|null
     */
    public function getAccountingCodeId()
    {
        return $this->container['accounting_code_id'];
    }

    /**
     * Sets accounting_code_id
     *
     * @param string|null $accounting_code_id accounting_code_id
     *
     * @return self
     */
    public function setAccountingCodeId($accounting_code_id)
    {
        if (is_null($accounting_code_id)) {
            throw new \InvalidArgumentException('non-nullable accounting_code_id cannot be null');
        }
        $this->container['accounting_code_id'] = $accounting_code_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets customer_debtor_accounting_code_id
     *
     * @return string|null
     */
    public function getCustomerDebtorAccountingCodeId()
    {
        return $this->container['customer_debtor_accounting_code_id'];
    }

    /**
     * Sets customer_debtor_accounting_code_id
     *
     * @param string|null $customer_debtor_accounting_code_id customer_debtor_accounting_code_id
     *
     * @return self
     */
    public function setCustomerDebtorAccountingCodeId($customer_debtor_accounting_code_id)
    {
        if (is_null($customer_debtor_accounting_code_id)) {
            throw new \InvalidArgumentException('non-nullable customer_debtor_accounting_code_id cannot be null');
        }
        $this->container['customer_debtor_accounting_code_id'] = $customer_debtor_accounting_code_id;

        return $this;
    }

    /**
     * Gets dispatch_country_code
     *
     * @return string|null
     */
    public function getDispatchCountryCode()
    {
        return $this->container['dispatch_country_code'];
    }

    /**
     * Sets dispatch_country_code
     *
     * @param string|null $dispatch_country_code dispatch_country_code
     *
     * @return self
     */
    public function setDispatchCountryCode($dispatch_country_code)
    {
        if (is_null($dispatch_country_code)) {
            throw new \InvalidArgumentException('non-nullable dispatch_country_code cannot be null');
        }
        $this->container['dispatch_country_code'] = $dispatch_country_code;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return int|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param int|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets party_type
     *
     * @return string|null
     */
    public function getPartyType()
    {
        return $this->container['party_type'];
    }

    /**
     * Sets party_type
     *
     * @param string|null $party_type party_type
     *
     * @return self
     */
    public function setPartyType($party_type)
    {
        if (is_null($party_type)) {
            throw new \InvalidArgumentException('non-nullable party_type cannot be null');
        }
        $allowedValues = $this->getPartyTypeAllowableValues();
        if (!in_array($party_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'party_type', must be one of '%s'",
                    $party_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['party_type'] = $party_type;

        return $this;
    }

    /**
     * Gets recipient_country_code
     *
     * @return string|null
     */
    public function getRecipientCountryCode()
    {
        return $this->container['recipient_country_code'];
    }

    /**
     * Sets recipient_country_code
     *
     * @param string|null $recipient_country_code recipient_country_code
     *
     * @return self
     */
    public function setRecipientCountryCode($recipient_country_code)
    {
        if (is_null($recipient_country_code)) {
            throw new \InvalidArgumentException('non-nullable recipient_country_code cannot be null');
        }
        $this->container['recipient_country_code'] = $recipient_country_code;

        return $this;
    }

    /**
     * Gets sales
     *
     * @return bool|null
     */
    public function getSales()
    {
        return $this->container['sales'];
    }

    /**
     * Sets sales
     *
     * @param bool|null $sales sales
     *
     * @return self
     */
    public function setSales($sales)
    {
        if (is_null($sales)) {
            throw new \InvalidArgumentException('non-nullable sales cannot be null');
        }
        $this->container['sales'] = $sales;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return int|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param int|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id tax_id
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets tax_rate_type
     *
     * @return string|null
     */
    public function getTaxRateType()
    {
        return $this->container['tax_rate_type'];
    }

    /**
     * Sets tax_rate_type
     *
     * @param string|null $tax_rate_type tax_rate_type
     *
     * @return self
     */
    public function setTaxRateType($tax_rate_type)
    {
        if (is_null($tax_rate_type)) {
            throw new \InvalidArgumentException('non-nullable tax_rate_type cannot be null');
        }
        $allowedValues = $this->getTaxRateTypeAllowableValues();
        if (!in_array($tax_rate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_rate_type', must be one of '%s'",
                    $tax_rate_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_rate_type'] = $tax_rate_type;

        return $this;
    }

    /**
     * Gets valid_vat_id
     *
     * @return bool|null
     */
    public function getValidVatId()
    {
        return $this->container['valid_vat_id'];
    }

    /**
     * Sets valid_vat_id
     *
     * @param bool|null $valid_vat_id valid_vat_id
     *
     * @return self
     */
    public function setValidVatId($valid_vat_id)
    {
        if (is_null($valid_vat_id)) {
            throw new \InvalidArgumentException('non-nullable valid_vat_id cannot be null');
        }
        $this->container['valid_vat_id'] = $valid_vat_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


