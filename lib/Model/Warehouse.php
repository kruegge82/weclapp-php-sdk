<?php
/**
 * Warehouse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * Warehouse Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Warehouse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'warehouse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'active' => 'bool',
        'created_date' => 'int',
        'custom_attributes' => '\kruegge82\weclapp\Model\CustomAttribute[]',
        'default_consolidation_storage_place_id' => 'string',
        'default_production_storage_place_id' => 'string',
        'default_returns_storage_place_id' => 'string',
        'default_storage_place_id' => 'string',
        'delivery_address' => '\kruegge82\weclapp\Model\Address',
        'direct_booking_internal_transport_reference_id' => 'string',
        'invoice_address' => '\kruegge82\weclapp\Model\Address',
        'last_modified_date' => 'int',
        'loading_equipment_storage_place' => '\kruegge82\weclapp\Model\MinimalStoragePlace',
        'name' => 'string',
        'primary_address' => '\kruegge82\weclapp\Model\Address',
        'short_identifier' => 'string',
        'standard' => 'bool',
        'transit_storage_place' => '\kruegge82\weclapp\Model\MinimalStoragePlace',
        'warehouse_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'active' => null,
        'created_date' => 'timestamp',
        'custom_attributes' => null,
        'default_consolidation_storage_place_id' => null,
        'default_production_storage_place_id' => null,
        'default_returns_storage_place_id' => null,
        'default_storage_place_id' => null,
        'delivery_address' => null,
        'direct_booking_internal_transport_reference_id' => null,
        'invoice_address' => null,
        'last_modified_date' => 'timestamp',
        'loading_equipment_storage_place' => null,
        'name' => null,
        'primary_address' => null,
        'short_identifier' => null,
        'standard' => null,
        'transit_storage_place' => null,
        'warehouse_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'active' => false,
        'created_date' => false,
        'custom_attributes' => false,
        'default_consolidation_storage_place_id' => false,
        'default_production_storage_place_id' => false,
        'default_returns_storage_place_id' => false,
        'default_storage_place_id' => false,
        'delivery_address' => false,
        'direct_booking_internal_transport_reference_id' => false,
        'invoice_address' => false,
        'last_modified_date' => false,
        'loading_equipment_storage_place' => false,
        'name' => false,
        'primary_address' => false,
        'short_identifier' => false,
        'standard' => false,
        'transit_storage_place' => false,
        'warehouse_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'active' => 'active',
        'created_date' => 'createdDate',
        'custom_attributes' => 'customAttributes',
        'default_consolidation_storage_place_id' => 'defaultConsolidationStoragePlaceId',
        'default_production_storage_place_id' => 'defaultProductionStoragePlaceId',
        'default_returns_storage_place_id' => 'defaultReturnsStoragePlaceId',
        'default_storage_place_id' => 'defaultStoragePlaceId',
        'delivery_address' => 'deliveryAddress',
        'direct_booking_internal_transport_reference_id' => 'directBookingInternalTransportReferenceId',
        'invoice_address' => 'invoiceAddress',
        'last_modified_date' => 'lastModifiedDate',
        'loading_equipment_storage_place' => 'loadingEquipmentStoragePlace',
        'name' => 'name',
        'primary_address' => 'primaryAddress',
        'short_identifier' => 'shortIdentifier',
        'standard' => 'standard',
        'transit_storage_place' => 'transitStoragePlace',
        'warehouse_type' => 'warehouseType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'active' => 'setActive',
        'created_date' => 'setCreatedDate',
        'custom_attributes' => 'setCustomAttributes',
        'default_consolidation_storage_place_id' => 'setDefaultConsolidationStoragePlaceId',
        'default_production_storage_place_id' => 'setDefaultProductionStoragePlaceId',
        'default_returns_storage_place_id' => 'setDefaultReturnsStoragePlaceId',
        'default_storage_place_id' => 'setDefaultStoragePlaceId',
        'delivery_address' => 'setDeliveryAddress',
        'direct_booking_internal_transport_reference_id' => 'setDirectBookingInternalTransportReferenceId',
        'invoice_address' => 'setInvoiceAddress',
        'last_modified_date' => 'setLastModifiedDate',
        'loading_equipment_storage_place' => 'setLoadingEquipmentStoragePlace',
        'name' => 'setName',
        'primary_address' => 'setPrimaryAddress',
        'short_identifier' => 'setShortIdentifier',
        'standard' => 'setStandard',
        'transit_storage_place' => 'setTransitStoragePlace',
        'warehouse_type' => 'setWarehouseType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'active' => 'getActive',
        'created_date' => 'getCreatedDate',
        'custom_attributes' => 'getCustomAttributes',
        'default_consolidation_storage_place_id' => 'getDefaultConsolidationStoragePlaceId',
        'default_production_storage_place_id' => 'getDefaultProductionStoragePlaceId',
        'default_returns_storage_place_id' => 'getDefaultReturnsStoragePlaceId',
        'default_storage_place_id' => 'getDefaultStoragePlaceId',
        'delivery_address' => 'getDeliveryAddress',
        'direct_booking_internal_transport_reference_id' => 'getDirectBookingInternalTransportReferenceId',
        'invoice_address' => 'getInvoiceAddress',
        'last_modified_date' => 'getLastModifiedDate',
        'loading_equipment_storage_place' => 'getLoadingEquipmentStoragePlace',
        'name' => 'getName',
        'primary_address' => 'getPrimaryAddress',
        'short_identifier' => 'getShortIdentifier',
        'standard' => 'getStandard',
        'transit_storage_place' => 'getTransitStoragePlace',
        'warehouse_type' => 'getWarehouseType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const WAREHOUSE_TYPE_CONSIGNMENT = 'CONSIGNMENT';
    public const WAREHOUSE_TYPE_DROP_SHIPPING = 'DROP_SHIPPING';
    public const WAREHOUSE_TYPE_STANDARD = 'STANDARD';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarehouseTypeAllowableValues()
    {
        return [
            self::WAREHOUSE_TYPE_CONSIGNMENT,
            self::WAREHOUSE_TYPE_DROP_SHIPPING,
            self::WAREHOUSE_TYPE_STANDARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
        $this->setIfExists('default_consolidation_storage_place_id', $data ?? [], null);
        $this->setIfExists('default_production_storage_place_id', $data ?? [], null);
        $this->setIfExists('default_returns_storage_place_id', $data ?? [], null);
        $this->setIfExists('default_storage_place_id', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('direct_booking_internal_transport_reference_id', $data ?? [], null);
        $this->setIfExists('invoice_address', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('loading_equipment_storage_place', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('primary_address', $data ?? [], null);
        $this->setIfExists('short_identifier', $data ?? [], null);
        $this->setIfExists('standard', $data ?? [], null);
        $this->setIfExists('transit_storage_place', $data ?? [], null);
        $this->setIfExists('warehouse_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getWarehouseTypeAllowableValues();
        if (!is_null($this->container['warehouse_type']) && !in_array($this->container['warehouse_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'warehouse_type', must be one of '%s'",
                $this->container['warehouse_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \kruegge82\weclapp\Model\CustomAttribute[]|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \kruegge82\weclapp\Model\CustomAttribute[]|null $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets default_consolidation_storage_place_id
     *
     * @return string|null
     */
    public function getDefaultConsolidationStoragePlaceId()
    {
        return $this->container['default_consolidation_storage_place_id'];
    }

    /**
     * Sets default_consolidation_storage_place_id
     *
     * @param string|null $default_consolidation_storage_place_id default_consolidation_storage_place_id
     *
     * @return self
     */
    public function setDefaultConsolidationStoragePlaceId($default_consolidation_storage_place_id)
    {
        if (is_null($default_consolidation_storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable default_consolidation_storage_place_id cannot be null');
        }
        $this->container['default_consolidation_storage_place_id'] = $default_consolidation_storage_place_id;

        return $this;
    }

    /**
     * Gets default_production_storage_place_id
     *
     * @return string|null
     */
    public function getDefaultProductionStoragePlaceId()
    {
        return $this->container['default_production_storage_place_id'];
    }

    /**
     * Sets default_production_storage_place_id
     *
     * @param string|null $default_production_storage_place_id default_production_storage_place_id
     *
     * @return self
     */
    public function setDefaultProductionStoragePlaceId($default_production_storage_place_id)
    {
        if (is_null($default_production_storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable default_production_storage_place_id cannot be null');
        }
        $this->container['default_production_storage_place_id'] = $default_production_storage_place_id;

        return $this;
    }

    /**
     * Gets default_returns_storage_place_id
     *
     * @return string|null
     */
    public function getDefaultReturnsStoragePlaceId()
    {
        return $this->container['default_returns_storage_place_id'];
    }

    /**
     * Sets default_returns_storage_place_id
     *
     * @param string|null $default_returns_storage_place_id default_returns_storage_place_id
     *
     * @return self
     */
    public function setDefaultReturnsStoragePlaceId($default_returns_storage_place_id)
    {
        if (is_null($default_returns_storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable default_returns_storage_place_id cannot be null');
        }
        $this->container['default_returns_storage_place_id'] = $default_returns_storage_place_id;

        return $this;
    }

    /**
     * Gets default_storage_place_id
     *
     * @return string|null
     */
    public function getDefaultStoragePlaceId()
    {
        return $this->container['default_storage_place_id'];
    }

    /**
     * Sets default_storage_place_id
     *
     * @param string|null $default_storage_place_id default_storage_place_id
     *
     * @return self
     */
    public function setDefaultStoragePlaceId($default_storage_place_id)
    {
        if (is_null($default_storage_place_id)) {
            throw new \InvalidArgumentException('non-nullable default_storage_place_id cannot be null');
        }
        $this->container['default_storage_place_id'] = $default_storage_place_id;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \kruegge82\weclapp\Model\Address|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \kruegge82\weclapp\Model\Address|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets direct_booking_internal_transport_reference_id
     *
     * @return string|null
     */
    public function getDirectBookingInternalTransportReferenceId()
    {
        return $this->container['direct_booking_internal_transport_reference_id'];
    }

    /**
     * Sets direct_booking_internal_transport_reference_id
     *
     * @param string|null $direct_booking_internal_transport_reference_id direct_booking_internal_transport_reference_id
     *
     * @return self
     */
    public function setDirectBookingInternalTransportReferenceId($direct_booking_internal_transport_reference_id)
    {
        if (is_null($direct_booking_internal_transport_reference_id)) {
            throw new \InvalidArgumentException('non-nullable direct_booking_internal_transport_reference_id cannot be null');
        }
        $this->container['direct_booking_internal_transport_reference_id'] = $direct_booking_internal_transport_reference_id;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return \kruegge82\weclapp\Model\Address|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param \kruegge82\weclapp\Model\Address|null $invoice_address invoice_address
     *
     * @return self
     */
    public function setInvoiceAddress($invoice_address)
    {
        if (is_null($invoice_address)) {
            throw new \InvalidArgumentException('non-nullable invoice_address cannot be null');
        }
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets loading_equipment_storage_place
     *
     * @return \kruegge82\weclapp\Model\MinimalStoragePlace|null
     */
    public function getLoadingEquipmentStoragePlace()
    {
        return $this->container['loading_equipment_storage_place'];
    }

    /**
     * Sets loading_equipment_storage_place
     *
     * @param \kruegge82\weclapp\Model\MinimalStoragePlace|null $loading_equipment_storage_place loading_equipment_storage_place
     *
     * @return self
     */
    public function setLoadingEquipmentStoragePlace($loading_equipment_storage_place)
    {
        if (is_null($loading_equipment_storage_place)) {
            throw new \InvalidArgumentException('non-nullable loading_equipment_storage_place cannot be null');
        }
        $this->container['loading_equipment_storage_place'] = $loading_equipment_storage_place;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets primary_address
     *
     * @return \kruegge82\weclapp\Model\Address|null
     */
    public function getPrimaryAddress()
    {
        return $this->container['primary_address'];
    }

    /**
     * Sets primary_address
     *
     * @param \kruegge82\weclapp\Model\Address|null $primary_address primary_address
     *
     * @return self
     */
    public function setPrimaryAddress($primary_address)
    {
        if (is_null($primary_address)) {
            throw new \InvalidArgumentException('non-nullable primary_address cannot be null');
        }
        $this->container['primary_address'] = $primary_address;

        return $this;
    }

    /**
     * Gets short_identifier
     *
     * @return string|null
     */
    public function getShortIdentifier()
    {
        return $this->container['short_identifier'];
    }

    /**
     * Sets short_identifier
     *
     * @param string|null $short_identifier short_identifier
     *
     * @return self
     */
    public function setShortIdentifier($short_identifier)
    {
        if (is_null($short_identifier)) {
            throw new \InvalidArgumentException('non-nullable short_identifier cannot be null');
        }
        $this->container['short_identifier'] = $short_identifier;

        return $this;
    }

    /**
     * Gets standard
     *
     * @return bool|null
     */
    public function getStandard()
    {
        return $this->container['standard'];
    }

    /**
     * Sets standard
     *
     * @param bool|null $standard standard
     *
     * @return self
     */
    public function setStandard($standard)
    {
        if (is_null($standard)) {
            throw new \InvalidArgumentException('non-nullable standard cannot be null');
        }
        $this->container['standard'] = $standard;

        return $this;
    }

    /**
     * Gets transit_storage_place
     *
     * @return \kruegge82\weclapp\Model\MinimalStoragePlace|null
     */
    public function getTransitStoragePlace()
    {
        return $this->container['transit_storage_place'];
    }

    /**
     * Sets transit_storage_place
     *
     * @param \kruegge82\weclapp\Model\MinimalStoragePlace|null $transit_storage_place transit_storage_place
     *
     * @return self
     */
    public function setTransitStoragePlace($transit_storage_place)
    {
        if (is_null($transit_storage_place)) {
            throw new \InvalidArgumentException('non-nullable transit_storage_place cannot be null');
        }
        $this->container['transit_storage_place'] = $transit_storage_place;

        return $this;
    }

    /**
     * Gets warehouse_type
     *
     * @return string|null
     */
    public function getWarehouseType()
    {
        return $this->container['warehouse_type'];
    }

    /**
     * Sets warehouse_type
     *
     * @param string|null $warehouse_type warehouse_type
     *
     * @return self
     */
    public function setWarehouseType($warehouse_type)
    {
        if (is_null($warehouse_type)) {
            throw new \InvalidArgumentException('non-nullable warehouse_type cannot be null');
        }
        $allowedValues = $this->getWarehouseTypeAllowableValues();
        if (!in_array($warehouse_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'warehouse_type', must be one of '%s'",
                    $warehouse_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warehouse_type'] = $warehouse_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


