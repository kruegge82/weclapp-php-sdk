<?php
/**
 * ProjectOrderStatusPage
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Model;

use \ArrayAccess;
use \kruegge82\weclapp\ObjectSerializer;

/**
 * ProjectOrderStatusPage Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProjectOrderStatusPage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'projectOrderStatusPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => 'int',
        'last_modified_date' => 'int',
        'version' => 'string',
        'comments_visible' => 'bool',
        'create_comments' => 'bool',
        'display_all_team_members' => 'bool',
        'documents_visible' => 'bool',
        'main_tasks_visible' => 'bool',
        'name' => 'string',
        'planned_work_visibility' => '\kruegge82\weclapp\Model\NoLoginProjectOrderPlannedWorkVisibility',
        'project_order_id' => 'string',
        'project_status_page_url' => 'string',
        'realized_work_visibility' => '\kruegge82\weclapp\Model\NoLoginProjectOrderRealizedWorkVisibility',
        'sub_tasks_visible' => 'bool',
        'tickets_visible' => 'bool',
        'upload_document' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_date' => 'timestamp',
        'last_modified_date' => 'timestamp',
        'version' => null,
        'comments_visible' => null,
        'create_comments' => null,
        'display_all_team_members' => null,
        'documents_visible' => null,
        'main_tasks_visible' => null,
        'name' => null,
        'planned_work_visibility' => null,
        'project_order_id' => null,
        'project_status_page_url' => null,
        'realized_work_visibility' => null,
        'sub_tasks_visible' => null,
        'tickets_visible' => null,
        'upload_document' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_date' => false,
        'last_modified_date' => false,
        'version' => false,
        'comments_visible' => false,
        'create_comments' => false,
        'display_all_team_members' => false,
        'documents_visible' => false,
        'main_tasks_visible' => false,
        'name' => false,
        'planned_work_visibility' => false,
        'project_order_id' => false,
        'project_status_page_url' => false,
        'realized_work_visibility' => false,
        'sub_tasks_visible' => false,
        'tickets_visible' => false,
        'upload_document' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'createdDate',
        'last_modified_date' => 'lastModifiedDate',
        'version' => 'version',
        'comments_visible' => 'commentsVisible',
        'create_comments' => 'createComments',
        'display_all_team_members' => 'displayAllTeamMembers',
        'documents_visible' => 'documentsVisible',
        'main_tasks_visible' => 'mainTasksVisible',
        'name' => 'name',
        'planned_work_visibility' => 'plannedWorkVisibility',
        'project_order_id' => 'projectOrderId',
        'project_status_page_url' => 'projectStatusPageUrl',
        'realized_work_visibility' => 'realizedWorkVisibility',
        'sub_tasks_visible' => 'subTasksVisible',
        'tickets_visible' => 'ticketsVisible',
        'upload_document' => 'uploadDocument'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'last_modified_date' => 'setLastModifiedDate',
        'version' => 'setVersion',
        'comments_visible' => 'setCommentsVisible',
        'create_comments' => 'setCreateComments',
        'display_all_team_members' => 'setDisplayAllTeamMembers',
        'documents_visible' => 'setDocumentsVisible',
        'main_tasks_visible' => 'setMainTasksVisible',
        'name' => 'setName',
        'planned_work_visibility' => 'setPlannedWorkVisibility',
        'project_order_id' => 'setProjectOrderId',
        'project_status_page_url' => 'setProjectStatusPageUrl',
        'realized_work_visibility' => 'setRealizedWorkVisibility',
        'sub_tasks_visible' => 'setSubTasksVisible',
        'tickets_visible' => 'setTicketsVisible',
        'upload_document' => 'setUploadDocument'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'last_modified_date' => 'getLastModifiedDate',
        'version' => 'getVersion',
        'comments_visible' => 'getCommentsVisible',
        'create_comments' => 'getCreateComments',
        'display_all_team_members' => 'getDisplayAllTeamMembers',
        'documents_visible' => 'getDocumentsVisible',
        'main_tasks_visible' => 'getMainTasksVisible',
        'name' => 'getName',
        'planned_work_visibility' => 'getPlannedWorkVisibility',
        'project_order_id' => 'getProjectOrderId',
        'project_status_page_url' => 'getProjectStatusPageUrl',
        'realized_work_visibility' => 'getRealizedWorkVisibility',
        'sub_tasks_visible' => 'getSubTasksVisible',
        'tickets_visible' => 'getTicketsVisible',
        'upload_document' => 'getUploadDocument'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('comments_visible', $data ?? [], null);
        $this->setIfExists('create_comments', $data ?? [], null);
        $this->setIfExists('display_all_team_members', $data ?? [], null);
        $this->setIfExists('documents_visible', $data ?? [], null);
        $this->setIfExists('main_tasks_visible', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('planned_work_visibility', $data ?? [], null);
        $this->setIfExists('project_order_id', $data ?? [], null);
        $this->setIfExists('project_status_page_url', $data ?? [], null);
        $this->setIfExists('realized_work_visibility', $data ?? [], null);
        $this->setIfExists('sub_tasks_visible', $data ?? [], null);
        $this->setIfExists('tickets_visible', $data ?? [], null);
        $this->setIfExists('upload_document', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 150)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 150.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets comments_visible
     *
     * @return bool|null
     */
    public function getCommentsVisible()
    {
        return $this->container['comments_visible'];
    }

    /**
     * Sets comments_visible
     *
     * @param bool|null $comments_visible comments_visible
     *
     * @return self
     */
    public function setCommentsVisible($comments_visible)
    {
        if (is_null($comments_visible)) {
            throw new \InvalidArgumentException('non-nullable comments_visible cannot be null');
        }
        $this->container['comments_visible'] = $comments_visible;

        return $this;
    }

    /**
     * Gets create_comments
     *
     * @return bool|null
     */
    public function getCreateComments()
    {
        return $this->container['create_comments'];
    }

    /**
     * Sets create_comments
     *
     * @param bool|null $create_comments create_comments
     *
     * @return self
     */
    public function setCreateComments($create_comments)
    {
        if (is_null($create_comments)) {
            throw new \InvalidArgumentException('non-nullable create_comments cannot be null');
        }
        $this->container['create_comments'] = $create_comments;

        return $this;
    }

    /**
     * Gets display_all_team_members
     *
     * @return bool|null
     */
    public function getDisplayAllTeamMembers()
    {
        return $this->container['display_all_team_members'];
    }

    /**
     * Sets display_all_team_members
     *
     * @param bool|null $display_all_team_members display_all_team_members
     *
     * @return self
     */
    public function setDisplayAllTeamMembers($display_all_team_members)
    {
        if (is_null($display_all_team_members)) {
            throw new \InvalidArgumentException('non-nullable display_all_team_members cannot be null');
        }
        $this->container['display_all_team_members'] = $display_all_team_members;

        return $this;
    }

    /**
     * Gets documents_visible
     *
     * @return bool|null
     */
    public function getDocumentsVisible()
    {
        return $this->container['documents_visible'];
    }

    /**
     * Sets documents_visible
     *
     * @param bool|null $documents_visible documents_visible
     *
     * @return self
     */
    public function setDocumentsVisible($documents_visible)
    {
        if (is_null($documents_visible)) {
            throw new \InvalidArgumentException('non-nullable documents_visible cannot be null');
        }
        $this->container['documents_visible'] = $documents_visible;

        return $this;
    }

    /**
     * Gets main_tasks_visible
     *
     * @return bool|null
     */
    public function getMainTasksVisible()
    {
        return $this->container['main_tasks_visible'];
    }

    /**
     * Sets main_tasks_visible
     *
     * @param bool|null $main_tasks_visible main_tasks_visible
     *
     * @return self
     */
    public function setMainTasksVisible($main_tasks_visible)
    {
        if (is_null($main_tasks_visible)) {
            throw new \InvalidArgumentException('non-nullable main_tasks_visible cannot be null');
        }
        $this->container['main_tasks_visible'] = $main_tasks_visible;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProjectOrderStatusPage., must be smaller than or equal to 150.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets planned_work_visibility
     *
     * @return \kruegge82\weclapp\Model\NoLoginProjectOrderPlannedWorkVisibility|null
     */
    public function getPlannedWorkVisibility()
    {
        return $this->container['planned_work_visibility'];
    }

    /**
     * Sets planned_work_visibility
     *
     * @param \kruegge82\weclapp\Model\NoLoginProjectOrderPlannedWorkVisibility|null $planned_work_visibility planned_work_visibility
     *
     * @return self
     */
    public function setPlannedWorkVisibility($planned_work_visibility)
    {
        if (is_null($planned_work_visibility)) {
            throw new \InvalidArgumentException('non-nullable planned_work_visibility cannot be null');
        }
        $this->container['planned_work_visibility'] = $planned_work_visibility;

        return $this;
    }

    /**
     * Gets project_order_id
     *
     * @return string|null
     */
    public function getProjectOrderId()
    {
        return $this->container['project_order_id'];
    }

    /**
     * Sets project_order_id
     *
     * @param string|null $project_order_id project_order_id
     *
     * @return self
     */
    public function setProjectOrderId($project_order_id)
    {
        if (is_null($project_order_id)) {
            throw new \InvalidArgumentException('non-nullable project_order_id cannot be null');
        }
        $this->container['project_order_id'] = $project_order_id;

        return $this;
    }

    /**
     * Gets project_status_page_url
     *
     * @return string|null
     */
    public function getProjectStatusPageUrl()
    {
        return $this->container['project_status_page_url'];
    }

    /**
     * Sets project_status_page_url
     *
     * @param string|null $project_status_page_url project_status_page_url
     *
     * @return self
     */
    public function setProjectStatusPageUrl($project_status_page_url)
    {
        if (is_null($project_status_page_url)) {
            throw new \InvalidArgumentException('non-nullable project_status_page_url cannot be null');
        }
        $this->container['project_status_page_url'] = $project_status_page_url;

        return $this;
    }

    /**
     * Gets realized_work_visibility
     *
     * @return \kruegge82\weclapp\Model\NoLoginProjectOrderRealizedWorkVisibility|null
     */
    public function getRealizedWorkVisibility()
    {
        return $this->container['realized_work_visibility'];
    }

    /**
     * Sets realized_work_visibility
     *
     * @param \kruegge82\weclapp\Model\NoLoginProjectOrderRealizedWorkVisibility|null $realized_work_visibility realized_work_visibility
     *
     * @return self
     */
    public function setRealizedWorkVisibility($realized_work_visibility)
    {
        if (is_null($realized_work_visibility)) {
            throw new \InvalidArgumentException('non-nullable realized_work_visibility cannot be null');
        }
        $this->container['realized_work_visibility'] = $realized_work_visibility;

        return $this;
    }

    /**
     * Gets sub_tasks_visible
     *
     * @return bool|null
     */
    public function getSubTasksVisible()
    {
        return $this->container['sub_tasks_visible'];
    }

    /**
     * Sets sub_tasks_visible
     *
     * @param bool|null $sub_tasks_visible sub_tasks_visible
     *
     * @return self
     */
    public function setSubTasksVisible($sub_tasks_visible)
    {
        if (is_null($sub_tasks_visible)) {
            throw new \InvalidArgumentException('non-nullable sub_tasks_visible cannot be null');
        }
        $this->container['sub_tasks_visible'] = $sub_tasks_visible;

        return $this;
    }

    /**
     * Gets tickets_visible
     *
     * @return bool|null
     */
    public function getTicketsVisible()
    {
        return $this->container['tickets_visible'];
    }

    /**
     * Sets tickets_visible
     *
     * @param bool|null $tickets_visible tickets_visible
     *
     * @return self
     */
    public function setTicketsVisible($tickets_visible)
    {
        if (is_null($tickets_visible)) {
            throw new \InvalidArgumentException('non-nullable tickets_visible cannot be null');
        }
        $this->container['tickets_visible'] = $tickets_visible;

        return $this;
    }

    /**
     * Gets upload_document
     *
     * @return bool|null
     */
    public function getUploadDocument()
    {
        return $this->container['upload_document'];
    }

    /**
     * Sets upload_document
     *
     * @param bool|null $upload_document upload_document
     *
     * @return self
     */
    public function setUploadDocument($upload_document)
    {
        if (is_null($upload_document)) {
            throw new \InvalidArgumentException('non-nullable upload_document cannot be null');
        }
        $this->container['upload_document'] = $upload_document;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


