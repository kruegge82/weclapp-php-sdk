<?php
/**
 * DocumentApi
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use kruegge82\weclapp\ApiException;
use kruegge82\weclapp\Configuration;
use kruegge82\weclapp\FormDataProcessor;
use kruegge82\weclapp\HeaderSelector;
use kruegge82\weclapp\ObjectSerializer;

/**
 * DocumentApi Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'documentCopyPost' => [
            'application/json',
        ],
        'documentCountGet' => [
            'application/json',
        ],
        'documentGet' => [
            'application/json',
        ],
        'documentIdIdCopyPost' => [
            'application/json',
        ],
        'documentIdIdDelete' => [
            'application/json',
        ],
        'documentIdIdDownloadDocumentVersionGet' => [
            'application/json',
        ],
        'documentIdIdDownloadDocumentVersionsZippedGet' => [
            'application/json',
        ],
        'documentIdIdDownloadGet' => [
            'application/json',
        ],
        'documentIdIdGet' => [
            'application/json',
        ],
        'documentIdIdPut' => [
            'application/json',
        ],
        'documentIdIdUploadPost' => [
            'application/pdf',
            'image/jpeg',
            'image/png',
        ],
        'documentUploadPost' => [
            'application/pdf',
            'image/jpeg',
            'image/png',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation documentCopyPost
     *
     * @param  \kruegge82\weclapp\Model\DocumentCopyPostRequest $document_copy_post_request document_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopyPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\DocumentCopyPost200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentCopyPost($document_copy_post_request, string $contentType = self::contentTypes['documentCopyPost'][0])
    {
        list($response) = $this->documentCopyPostWithHttpInfo($document_copy_post_request, $contentType);
        return $response;
    }

    /**
     * Operation documentCopyPostWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\DocumentCopyPostRequest $document_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopyPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\DocumentCopyPost200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentCopyPostWithHttpInfo($document_copy_post_request, string $contentType = self::contentTypes['documentCopyPost'][0])
    {
        $request = $this->documentCopyPostRequest($document_copy_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentCopyPostAsync
     *
     * @param  \kruegge82\weclapp\Model\DocumentCopyPostRequest $document_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentCopyPostAsync($document_copy_post_request, string $contentType = self::contentTypes['documentCopyPost'][0])
    {
        return $this->documentCopyPostAsyncWithHttpInfo($document_copy_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentCopyPostAsyncWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\DocumentCopyPostRequest $document_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentCopyPostAsyncWithHttpInfo($document_copy_post_request, string $contentType = self::contentTypes['documentCopyPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\DocumentCopyPost200Response';
        $request = $this->documentCopyPostRequest($document_copy_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentCopyPost'
     *
     * @param  \kruegge82\weclapp\Model\DocumentCopyPostRequest $document_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentCopyPostRequest($document_copy_post_request, string $contentType = self::contentTypes['documentCopyPost'][0])
    {

        // verify the required parameter 'document_copy_post_request' is set
        if ($document_copy_post_request === null || (is_array($document_copy_post_request) && count($document_copy_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_copy_post_request when calling documentCopyPost'
            );
        }


        $resourcePath = '/document/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($document_copy_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($document_copy_post_request));
            } else {
                $httpBody = $document_copy_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentCountGet
     *
     * count document
     *
     * @param  string $entity_id entity_id (required)
     * @param  string $entity_name entity_name (required)
     * @param  string|null $filter filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCountGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\AccountingTransactionCountGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentCountGet($entity_id, $entity_name, $filter = null, string $contentType = self::contentTypes['documentCountGet'][0])
    {
        list($response) = $this->documentCountGetWithHttpInfo($entity_id, $entity_name, $filter, $contentType);
        return $response;
    }

    /**
     * Operation documentCountGetWithHttpInfo
     *
     * count document
     *
     * @param  string $entity_id (required)
     * @param  string $entity_name (required)
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCountGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\AccountingTransactionCountGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentCountGetWithHttpInfo($entity_id, $entity_name, $filter = null, string $contentType = self::contentTypes['documentCountGet'][0])
    {
        $request = $this->documentCountGetRequest($entity_id, $entity_name, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentCountGetAsync
     *
     * count document
     *
     * @param  string $entity_id (required)
     * @param  string $entity_name (required)
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentCountGetAsync($entity_id, $entity_name, $filter = null, string $contentType = self::contentTypes['documentCountGet'][0])
    {
        return $this->documentCountGetAsyncWithHttpInfo($entity_id, $entity_name, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentCountGetAsyncWithHttpInfo
     *
     * count document
     *
     * @param  string $entity_id (required)
     * @param  string $entity_name (required)
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentCountGetAsyncWithHttpInfo($entity_id, $entity_name, $filter = null, string $contentType = self::contentTypes['documentCountGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response';
        $request = $this->documentCountGetRequest($entity_id, $entity_name, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentCountGet'
     *
     * @param  string $entity_id (required)
     * @param  string $entity_name (required)
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentCountGetRequest($entity_id, $entity_name, $filter = null, string $contentType = self::contentTypes['documentCountGet'][0])
    {

        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling documentCountGet'
            );
        }

        // verify the required parameter 'entity_name' is set
        if ($entity_name === null || (is_array($entity_name) && count($entity_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_name when calling documentCountGet'
            );
        }



        $resourcePath = '/document/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entity_id,
            'entityId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entity_name,
            'entityName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentGet
     *
     * query document
     *
     * @param  string $entity_id entity_id (required)
     * @param  string $entity_name entity_name (required)
     * @param  int|null $page page (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  bool|null $serialize_nulls serialize_nulls (optional)
     * @param  string|null $sort sort (optional)
     * @param  string|null $filter filter (optional)
     * @param  string|null $properties properties (optional)
     * @param  string|null $include_referenced_entities include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\DocumentGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentGet($entity_id, $entity_name, $page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['documentGet'][0])
    {
        list($response) = $this->documentGetWithHttpInfo($entity_id, $entity_name, $page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);
        return $response;
    }

    /**
     * Operation documentGetWithHttpInfo
     *
     * query document
     *
     * @param  string $entity_id (required)
     * @param  string $entity_name (required)
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\DocumentGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentGetWithHttpInfo($entity_id, $entity_name, $page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['documentGet'][0])
    {
        $request = $this->documentGetRequest($entity_id, $entity_name, $page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\DocumentGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\DocumentGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\DocumentGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentGetAsync
     *
     * query document
     *
     * @param  string $entity_id (required)
     * @param  string $entity_name (required)
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentGetAsync($entity_id, $entity_name, $page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['documentGet'][0])
    {
        return $this->documentGetAsyncWithHttpInfo($entity_id, $entity_name, $page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentGetAsyncWithHttpInfo
     *
     * query document
     *
     * @param  string $entity_id (required)
     * @param  string $entity_name (required)
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentGetAsyncWithHttpInfo($entity_id, $entity_name, $page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['documentGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\DocumentGet200Response';
        $request = $this->documentGetRequest($entity_id, $entity_name, $page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentGet'
     *
     * @param  string $entity_id (required)
     * @param  string $entity_name (required)
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentGetRequest($entity_id, $entity_name, $page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['documentGet'][0])
    {

        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling documentGet'
            );
        }

        // verify the required parameter 'entity_name' is set
        if ($entity_name === null || (is_array($entity_name) && count($entity_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_name when calling documentGet'
            );
        }









        $resourcePath = '/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serialize_nulls,
            'serializeNulls', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $properties,
            'properties', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_referenced_entities,
            'includeReferencedEntities', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entity_id,
            'entityId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entity_name,
            'entityName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdIdCopyPost
     *
     * @param  string $id id (required)
     * @param  \kruegge82\weclapp\Model\DocumentIdIdCopyPostRequest $document_id_id_copy_post_request document_id_id_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdCopyPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\DocumentCopyPost200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentIdIdCopyPost($id, $document_id_id_copy_post_request, string $contentType = self::contentTypes['documentIdIdCopyPost'][0])
    {
        list($response) = $this->documentIdIdCopyPostWithHttpInfo($id, $document_id_id_copy_post_request, $contentType);
        return $response;
    }

    /**
     * Operation documentIdIdCopyPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\DocumentIdIdCopyPostRequest $document_id_id_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdCopyPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\DocumentCopyPost200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdIdCopyPostWithHttpInfo($id, $document_id_id_copy_post_request, string $contentType = self::contentTypes['documentIdIdCopyPost'][0])
    {
        $request = $this->documentIdIdCopyPostRequest($id, $document_id_id_copy_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentIdIdCopyPostAsync
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\DocumentIdIdCopyPostRequest $document_id_id_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdCopyPostAsync($id, $document_id_id_copy_post_request, string $contentType = self::contentTypes['documentIdIdCopyPost'][0])
    {
        return $this->documentIdIdCopyPostAsyncWithHttpInfo($id, $document_id_id_copy_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdIdCopyPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\DocumentIdIdCopyPostRequest $document_id_id_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdCopyPostAsyncWithHttpInfo($id, $document_id_id_copy_post_request, string $contentType = self::contentTypes['documentIdIdCopyPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\DocumentCopyPost200Response';
        $request = $this->documentIdIdCopyPostRequest($id, $document_id_id_copy_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdIdCopyPost'
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\DocumentIdIdCopyPostRequest $document_id_id_copy_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdCopyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdIdCopyPostRequest($id, $document_id_id_copy_post_request, string $contentType = self::contentTypes['documentIdIdCopyPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdIdCopyPost'
            );
        }

        // verify the required parameter 'document_id_id_copy_post_request' is set
        if ($document_id_id_copy_post_request === null || (is_array($document_id_id_copy_post_request) && count($document_id_id_copy_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id_id_copy_post_request when calling documentIdIdCopyPost'
            );
        }


        $resourcePath = '/document/id/{id}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($document_id_id_copy_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($document_id_id_copy_post_request));
            } else {
                $httpBody = $document_id_id_copy_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdIdDelete
     *
     * delete a document
     *
     * @param  string $id id (required)
     * @param  bool|null $dry_run dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDelete'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function documentIdIdDelete($id, $dry_run = null, string $contentType = self::contentTypes['documentIdIdDelete'][0])
    {
        $this->documentIdIdDeleteWithHttpInfo($id, $dry_run, $contentType);
    }

    /**
     * Operation documentIdIdDeleteWithHttpInfo
     *
     * delete a document
     *
     * @param  string $id (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDelete'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdIdDeleteWithHttpInfo($id, $dry_run = null, string $contentType = self::contentTypes['documentIdIdDelete'][0])
    {
        $request = $this->documentIdIdDeleteRequest($id, $dry_run, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentIdIdDeleteAsync
     *
     * delete a document
     *
     * @param  string $id (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdDeleteAsync($id, $dry_run = null, string $contentType = self::contentTypes['documentIdIdDelete'][0])
    {
        return $this->documentIdIdDeleteAsyncWithHttpInfo($id, $dry_run, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdIdDeleteAsyncWithHttpInfo
     *
     * delete a document
     *
     * @param  string $id (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdDeleteAsyncWithHttpInfo($id, $dry_run = null, string $contentType = self::contentTypes['documentIdIdDelete'][0])
    {
        $returnType = '';
        $request = $this->documentIdIdDeleteRequest($id, $dry_run, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdIdDelete'
     *
     * @param  string $id (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdIdDeleteRequest($id, $dry_run = null, string $contentType = self::contentTypes['documentIdIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdIdDelete'
            );
        }



        $resourcePath = '/document/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dry_run,
            'dryRun', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdIdDownloadDocumentVersionGet
     *
     * @param  string $id id (required)
     * @param  string|null $version_id version_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentIdIdDownloadDocumentVersionGet($id, $version_id = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionGet'][0])
    {
        list($response) = $this->documentIdIdDownloadDocumentVersionGetWithHttpInfo($id, $version_id, $contentType);
        return $response;
    }

    /**
     * Operation documentIdIdDownloadDocumentVersionGetWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string|null $version_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdIdDownloadDocumentVersionGetWithHttpInfo($id, $version_id = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionGet'][0])
    {
        $request = $this->documentIdIdDownloadDocumentVersionGetRequest($id, $version_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentIdIdDownloadDocumentVersionGetAsync
     *
     * @param  string $id (required)
     * @param  string|null $version_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdDownloadDocumentVersionGetAsync($id, $version_id = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionGet'][0])
    {
        return $this->documentIdIdDownloadDocumentVersionGetAsyncWithHttpInfo($id, $version_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdIdDownloadDocumentVersionGetAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string|null $version_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdDownloadDocumentVersionGetAsyncWithHttpInfo($id, $version_id = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->documentIdIdDownloadDocumentVersionGetRequest($id, $version_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdIdDownloadDocumentVersionGet'
     *
     * @param  string $id (required)
     * @param  string|null $version_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdIdDownloadDocumentVersionGetRequest($id, $version_id = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdIdDownloadDocumentVersionGet'
            );
        }



        $resourcePath = '/document/id/{id}/downloadDocumentVersion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version_id,
            'versionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/pdf', 'image/jpeg', 'image/png', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdIdDownloadDocumentVersionsZippedGet
     *
     * @param  string $id id (required)
     * @param  string|null $filename filename (optional)
     * @param  string[]|null $ids ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentIdIdDownloadDocumentVersionsZippedGet($id, $filename = null, $ids = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'][0])
    {
        list($response) = $this->documentIdIdDownloadDocumentVersionsZippedGetWithHttpInfo($id, $filename, $ids, $contentType);
        return $response;
    }

    /**
     * Operation documentIdIdDownloadDocumentVersionsZippedGetWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string|null $filename (optional)
     * @param  string[]|null $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdIdDownloadDocumentVersionsZippedGetWithHttpInfo($id, $filename = null, $ids = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'][0])
    {
        $request = $this->documentIdIdDownloadDocumentVersionsZippedGetRequest($id, $filename, $ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentIdIdDownloadDocumentVersionsZippedGetAsync
     *
     * @param  string $id (required)
     * @param  string|null $filename (optional)
     * @param  string[]|null $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdDownloadDocumentVersionsZippedGetAsync($id, $filename = null, $ids = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'][0])
    {
        return $this->documentIdIdDownloadDocumentVersionsZippedGetAsyncWithHttpInfo($id, $filename, $ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdIdDownloadDocumentVersionsZippedGetAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string|null $filename (optional)
     * @param  string[]|null $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdDownloadDocumentVersionsZippedGetAsyncWithHttpInfo($id, $filename = null, $ids = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->documentIdIdDownloadDocumentVersionsZippedGetRequest($id, $filename, $ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdIdDownloadDocumentVersionsZippedGet'
     *
     * @param  string $id (required)
     * @param  string|null $filename (optional)
     * @param  string[]|null $ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdIdDownloadDocumentVersionsZippedGetRequest($id, $filename = null, $ids = null, string $contentType = self::contentTypes['documentIdIdDownloadDocumentVersionsZippedGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdIdDownloadDocumentVersionsZippedGet'
            );
        }




        $resourcePath = '/document/id/{id}/downloadDocumentVersionsZipped';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filename,
            'filename', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/pdf', 'image/jpeg', 'image/png', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdIdDownloadGet
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentIdIdDownloadGet($id, string $contentType = self::contentTypes['documentIdIdDownloadGet'][0])
    {
        list($response) = $this->documentIdIdDownloadGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation documentIdIdDownloadGetWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdIdDownloadGetWithHttpInfo($id, string $contentType = self::contentTypes['documentIdIdDownloadGet'][0])
    {
        $request = $this->documentIdIdDownloadGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentIdIdDownloadGetAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdDownloadGetAsync($id, string $contentType = self::contentTypes['documentIdIdDownloadGet'][0])
    {
        return $this->documentIdIdDownloadGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdIdDownloadGetAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdDownloadGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['documentIdIdDownloadGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->documentIdIdDownloadGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdIdDownloadGet'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdDownloadGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdIdDownloadGetRequest($id, string $contentType = self::contentTypes['documentIdIdDownloadGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdIdDownloadGet'
            );
        }


        $resourcePath = '/document/id/{id}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/pdf', 'image/jpeg', 'image/png', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdIdGet
     *
     * query a specific document
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\Document|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentIdIdGet($id, string $contentType = self::contentTypes['documentIdIdGet'][0])
    {
        list($response) = $this->documentIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation documentIdIdGetWithHttpInfo
     *
     * query a specific document
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\Document|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['documentIdIdGet'][0])
    {
        $request = $this->documentIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\Document',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentIdIdGetAsync
     *
     * query a specific document
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdGetAsync($id, string $contentType = self::contentTypes['documentIdIdGet'][0])
    {
        return $this->documentIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdIdGetAsyncWithHttpInfo
     *
     * query a specific document
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['documentIdIdGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\Document';
        $request = $this->documentIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdIdGet'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdIdGetRequest($id, string $contentType = self::contentTypes['documentIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdIdGet'
            );
        }


        $resourcePath = '/document/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdIdPut
     *
     * update a document
     *
     * @param  string $id id (required)
     * @param  \kruegge82\weclapp\Model\Document $document document (required)
     * @param  bool|null $dry_run dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdPut'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\Document|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentIdIdPut($id, $document, $dry_run = null, string $contentType = self::contentTypes['documentIdIdPut'][0])
    {
        list($response) = $this->documentIdIdPutWithHttpInfo($id, $document, $dry_run, $contentType);
        return $response;
    }

    /**
     * Operation documentIdIdPutWithHttpInfo
     *
     * update a document
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\Document $document (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdPut'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\Document|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdIdPutWithHttpInfo($id, $document, $dry_run = null, string $contentType = self::contentTypes['documentIdIdPut'][0])
    {
        $request = $this->documentIdIdPutRequest($id, $document, $dry_run, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\Document',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentIdIdPutAsync
     *
     * update a document
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\Document $document (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdPutAsync($id, $document, $dry_run = null, string $contentType = self::contentTypes['documentIdIdPut'][0])
    {
        return $this->documentIdIdPutAsyncWithHttpInfo($id, $document, $dry_run, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdIdPutAsyncWithHttpInfo
     *
     * update a document
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\Document $document (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdPutAsyncWithHttpInfo($id, $document, $dry_run = null, string $contentType = self::contentTypes['documentIdIdPut'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\Document';
        $request = $this->documentIdIdPutRequest($id, $document, $dry_run, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdIdPut'
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\Document $document (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdIdPutRequest($id, $document, $dry_run = null, string $contentType = self::contentTypes['documentIdIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdIdPut'
            );
        }

        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling documentIdIdPut'
            );
        }



        $resourcePath = '/document/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dry_run,
            'dryRun', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($document)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($document));
            } else {
                $httpBody = $document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentIdIdUploadPost
     *
     * @param  string $id id (required)
     * @param  \SplFileObject $body body (required)
     * @param  string|null $comment comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdUploadPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\DocumentCopyPost200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentIdIdUploadPost($id, $body, $comment = null, string $contentType = self::contentTypes['documentIdIdUploadPost'][0])
    {
        list($response) = $this->documentIdIdUploadPostWithHttpInfo($id, $body, $comment, $contentType);
        return $response;
    }

    /**
     * Operation documentIdIdUploadPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \SplFileObject $body (required)
     * @param  string|null $comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdUploadPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\DocumentCopyPost200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentIdIdUploadPostWithHttpInfo($id, $body, $comment = null, string $contentType = self::contentTypes['documentIdIdUploadPost'][0])
    {
        $request = $this->documentIdIdUploadPostRequest($id, $body, $comment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentIdIdUploadPostAsync
     *
     * @param  string $id (required)
     * @param  \SplFileObject $body (required)
     * @param  string|null $comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdUploadPostAsync($id, $body, $comment = null, string $contentType = self::contentTypes['documentIdIdUploadPost'][0])
    {
        return $this->documentIdIdUploadPostAsyncWithHttpInfo($id, $body, $comment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentIdIdUploadPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \SplFileObject $body (required)
     * @param  string|null $comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentIdIdUploadPostAsyncWithHttpInfo($id, $body, $comment = null, string $contentType = self::contentTypes['documentIdIdUploadPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\DocumentCopyPost200Response';
        $request = $this->documentIdIdUploadPostRequest($id, $body, $comment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentIdIdUploadPost'
     *
     * @param  string $id (required)
     * @param  \SplFileObject $body (required)
     * @param  string|null $comment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentIdIdUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentIdIdUploadPostRequest($id, $body, $comment = null, string $contentType = self::contentTypes['documentIdIdUploadPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling documentIdIdUploadPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling documentIdIdUploadPost'
            );
        }



        $resourcePath = '/document/id/{id}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $comment,
            'comment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentUploadPost
     *
     * @param  string $entity_name entity_name (required)
     * @param  string $entity_id entity_id (required)
     * @param  string $name name (required)
     * @param  \SplFileObject $body body (required)
     * @param  string|null $description description (optional)
     * @param  \kruegge82\weclapp\Model\DocumentType|null $document_type document_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\DocumentCopyPost200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function documentUploadPost($entity_name, $entity_id, $name, $body, $description = null, $document_type = null, string $contentType = self::contentTypes['documentUploadPost'][0])
    {
        list($response) = $this->documentUploadPostWithHttpInfo($entity_name, $entity_id, $name, $body, $description, $document_type, $contentType);
        return $response;
    }

    /**
     * Operation documentUploadPostWithHttpInfo
     *
     * @param  string $entity_name (required)
     * @param  string $entity_id (required)
     * @param  string $name (required)
     * @param  \SplFileObject $body (required)
     * @param  string|null $description (optional)
     * @param  \kruegge82\weclapp\Model\DocumentType|null $document_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\DocumentCopyPost200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentUploadPostWithHttpInfo($entity_name, $entity_id, $name, $body, $description = null, $document_type = null, string $contentType = self::contentTypes['documentUploadPost'][0])
    {
        $request = $this->documentUploadPostRequest($entity_name, $entity_id, $name, $body, $description, $document_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\DocumentCopyPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation documentUploadPostAsync
     *
     * @param  string $entity_name (required)
     * @param  string $entity_id (required)
     * @param  string $name (required)
     * @param  \SplFileObject $body (required)
     * @param  string|null $description (optional)
     * @param  \kruegge82\weclapp\Model\DocumentType|null $document_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentUploadPostAsync($entity_name, $entity_id, $name, $body, $description = null, $document_type = null, string $contentType = self::contentTypes['documentUploadPost'][0])
    {
        return $this->documentUploadPostAsyncWithHttpInfo($entity_name, $entity_id, $name, $body, $description, $document_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentUploadPostAsyncWithHttpInfo
     *
     * @param  string $entity_name (required)
     * @param  string $entity_id (required)
     * @param  string $name (required)
     * @param  \SplFileObject $body (required)
     * @param  string|null $description (optional)
     * @param  \kruegge82\weclapp\Model\DocumentType|null $document_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function documentUploadPostAsyncWithHttpInfo($entity_name, $entity_id, $name, $body, $description = null, $document_type = null, string $contentType = self::contentTypes['documentUploadPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\DocumentCopyPost200Response';
        $request = $this->documentUploadPostRequest($entity_name, $entity_id, $name, $body, $description, $document_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentUploadPost'
     *
     * @param  string $entity_name (required)
     * @param  string $entity_id (required)
     * @param  string $name (required)
     * @param  \SplFileObject $body (required)
     * @param  string|null $description (optional)
     * @param  \kruegge82\weclapp\Model\DocumentType|null $document_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentUploadPostRequest($entity_name, $entity_id, $name, $body, $description = null, $document_type = null, string $contentType = self::contentTypes['documentUploadPost'][0])
    {

        // verify the required parameter 'entity_name' is set
        if ($entity_name === null || (is_array($entity_name) && count($entity_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_name when calling documentUploadPost'
            );
        }

        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling documentUploadPost'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling documentUploadPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling documentUploadPost'
            );
        }




        $resourcePath = '/document/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entity_name,
            'entityName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entity_id,
            'entityId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_type,
            'documentType', // param base name
            'DocumentType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
