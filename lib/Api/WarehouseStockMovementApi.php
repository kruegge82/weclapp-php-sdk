<?php
/**
 * WarehouseStockMovementApi
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use kruegge82\weclapp\ApiException;
use kruegge82\weclapp\Configuration;
use kruegge82\weclapp\FormDataProcessor;
use kruegge82\weclapp\HeaderSelector;
use kruegge82\weclapp\ObjectSerializer;

/**
 * WarehouseStockMovementApi Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WarehouseStockMovementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'warehouseStockMovementBookDirectStockTransferPost' => [
            'application/json',
        ],
        'warehouseStockMovementBookFromLoadingEquipmentPlacePost' => [
            'application/json',
        ],
        'warehouseStockMovementBookIncomingMovementPost' => [
            'application/json',
        ],
        'warehouseStockMovementBookOntoInternalTransportReferencePost' => [
            'application/json',
        ],
        'warehouseStockMovementBookOutgoingMovementPost' => [
            'application/json',
        ],
        'warehouseStockMovementBookToLoadingEquipmentPlacePost' => [
            'application/json',
        ],
        'warehouseStockMovementCountGet' => [
            'application/json',
        ],
        'warehouseStockMovementGet' => [
            'application/json',
        ],
        'warehouseStockMovementIdIdGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation warehouseStockMovementBookDirectStockTransferPost
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookDirectStockTransferPostRequest $warehouse_stock_movement_book_direct_stock_transfer_post_request warehouse_stock_movement_book_direct_stock_transfer_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementBookDirectStockTransferPost($warehouse_stock_movement_book_direct_stock_transfer_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'][0])
    {
        list($response) = $this->warehouseStockMovementBookDirectStockTransferPostWithHttpInfo($warehouse_stock_movement_book_direct_stock_transfer_post_request, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementBookDirectStockTransferPostWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookDirectStockTransferPostRequest $warehouse_stock_movement_book_direct_stock_transfer_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementBookDirectStockTransferPostWithHttpInfo($warehouse_stock_movement_book_direct_stock_transfer_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'][0])
    {
        $request = $this->warehouseStockMovementBookDirectStockTransferPostRequest($warehouse_stock_movement_book_direct_stock_transfer_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementBookDirectStockTransferPostAsync
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookDirectStockTransferPostRequest $warehouse_stock_movement_book_direct_stock_transfer_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookDirectStockTransferPostAsync($warehouse_stock_movement_book_direct_stock_transfer_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'][0])
    {
        return $this->warehouseStockMovementBookDirectStockTransferPostAsyncWithHttpInfo($warehouse_stock_movement_book_direct_stock_transfer_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementBookDirectStockTransferPostAsyncWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookDirectStockTransferPostRequest $warehouse_stock_movement_book_direct_stock_transfer_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookDirectStockTransferPostAsyncWithHttpInfo($warehouse_stock_movement_book_direct_stock_transfer_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response';
        $request = $this->warehouseStockMovementBookDirectStockTransferPostRequest($warehouse_stock_movement_book_direct_stock_transfer_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementBookDirectStockTransferPost'
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookDirectStockTransferPostRequest $warehouse_stock_movement_book_direct_stock_transfer_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementBookDirectStockTransferPostRequest($warehouse_stock_movement_book_direct_stock_transfer_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookDirectStockTransferPost'][0])
    {

        // verify the required parameter 'warehouse_stock_movement_book_direct_stock_transfer_post_request' is set
        if ($warehouse_stock_movement_book_direct_stock_transfer_post_request === null || (is_array($warehouse_stock_movement_book_direct_stock_transfer_post_request) && count($warehouse_stock_movement_book_direct_stock_transfer_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_stock_movement_book_direct_stock_transfer_post_request when calling warehouseStockMovementBookDirectStockTransferPost'
            );
        }


        $resourcePath = '/warehouseStockMovement/bookDirectStockTransfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($warehouse_stock_movement_book_direct_stock_transfer_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($warehouse_stock_movement_book_direct_stock_transfer_post_request));
            } else {
                $httpBody = $warehouse_stock_movement_book_direct_stock_transfer_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseStockMovementBookFromLoadingEquipmentPlacePost
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookFromLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_from_loading_equipment_place_post_request warehouse_stock_movement_book_from_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementBookFromLoadingEquipmentPlacePost($warehouse_stock_movement_book_from_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'][0])
    {
        list($response) = $this->warehouseStockMovementBookFromLoadingEquipmentPlacePostWithHttpInfo($warehouse_stock_movement_book_from_loading_equipment_place_post_request, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementBookFromLoadingEquipmentPlacePostWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookFromLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_from_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementBookFromLoadingEquipmentPlacePostWithHttpInfo($warehouse_stock_movement_book_from_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'][0])
    {
        $request = $this->warehouseStockMovementBookFromLoadingEquipmentPlacePostRequest($warehouse_stock_movement_book_from_loading_equipment_place_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementBookFromLoadingEquipmentPlacePostAsync
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookFromLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_from_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookFromLoadingEquipmentPlacePostAsync($warehouse_stock_movement_book_from_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'][0])
    {
        return $this->warehouseStockMovementBookFromLoadingEquipmentPlacePostAsyncWithHttpInfo($warehouse_stock_movement_book_from_loading_equipment_place_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementBookFromLoadingEquipmentPlacePostAsyncWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookFromLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_from_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookFromLoadingEquipmentPlacePostAsyncWithHttpInfo($warehouse_stock_movement_book_from_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response';
        $request = $this->warehouseStockMovementBookFromLoadingEquipmentPlacePostRequest($warehouse_stock_movement_book_from_loading_equipment_place_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementBookFromLoadingEquipmentPlacePost'
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookFromLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_from_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementBookFromLoadingEquipmentPlacePostRequest($warehouse_stock_movement_book_from_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookFromLoadingEquipmentPlacePost'][0])
    {

        // verify the required parameter 'warehouse_stock_movement_book_from_loading_equipment_place_post_request' is set
        if ($warehouse_stock_movement_book_from_loading_equipment_place_post_request === null || (is_array($warehouse_stock_movement_book_from_loading_equipment_place_post_request) && count($warehouse_stock_movement_book_from_loading_equipment_place_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_stock_movement_book_from_loading_equipment_place_post_request when calling warehouseStockMovementBookFromLoadingEquipmentPlacePost'
            );
        }


        $resourcePath = '/warehouseStockMovement/bookFromLoadingEquipmentPlace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($warehouse_stock_movement_book_from_loading_equipment_place_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($warehouse_stock_movement_book_from_loading_equipment_place_post_request));
            } else {
                $httpBody = $warehouse_stock_movement_book_from_loading_equipment_place_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseStockMovementBookIncomingMovementPost
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookIncomingMovementPostRequest $warehouse_stock_movement_book_incoming_movement_post_request warehouse_stock_movement_book_incoming_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookIncomingMovementPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementBookIncomingMovementPost($warehouse_stock_movement_book_incoming_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookIncomingMovementPost'][0])
    {
        list($response) = $this->warehouseStockMovementBookIncomingMovementPostWithHttpInfo($warehouse_stock_movement_book_incoming_movement_post_request, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementBookIncomingMovementPostWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookIncomingMovementPostRequest $warehouse_stock_movement_book_incoming_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookIncomingMovementPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementBookIncomingMovementPostWithHttpInfo($warehouse_stock_movement_book_incoming_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookIncomingMovementPost'][0])
    {
        $request = $this->warehouseStockMovementBookIncomingMovementPostRequest($warehouse_stock_movement_book_incoming_movement_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementBookIncomingMovementPostAsync
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookIncomingMovementPostRequest $warehouse_stock_movement_book_incoming_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookIncomingMovementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookIncomingMovementPostAsync($warehouse_stock_movement_book_incoming_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookIncomingMovementPost'][0])
    {
        return $this->warehouseStockMovementBookIncomingMovementPostAsyncWithHttpInfo($warehouse_stock_movement_book_incoming_movement_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementBookIncomingMovementPostAsyncWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookIncomingMovementPostRequest $warehouse_stock_movement_book_incoming_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookIncomingMovementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookIncomingMovementPostAsyncWithHttpInfo($warehouse_stock_movement_book_incoming_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookIncomingMovementPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response';
        $request = $this->warehouseStockMovementBookIncomingMovementPostRequest($warehouse_stock_movement_book_incoming_movement_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementBookIncomingMovementPost'
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookIncomingMovementPostRequest $warehouse_stock_movement_book_incoming_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookIncomingMovementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementBookIncomingMovementPostRequest($warehouse_stock_movement_book_incoming_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookIncomingMovementPost'][0])
    {

        // verify the required parameter 'warehouse_stock_movement_book_incoming_movement_post_request' is set
        if ($warehouse_stock_movement_book_incoming_movement_post_request === null || (is_array($warehouse_stock_movement_book_incoming_movement_post_request) && count($warehouse_stock_movement_book_incoming_movement_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_stock_movement_book_incoming_movement_post_request when calling warehouseStockMovementBookIncomingMovementPost'
            );
        }


        $resourcePath = '/warehouseStockMovement/bookIncomingMovement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($warehouse_stock_movement_book_incoming_movement_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($warehouse_stock_movement_book_incoming_movement_post_request));
            } else {
                $httpBody = $warehouse_stock_movement_book_incoming_movement_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseStockMovementBookOntoInternalTransportReferencePost
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOntoInternalTransportReferencePostRequest $warehouse_stock_movement_book_onto_internal_transport_reference_post_request warehouse_stock_movement_book_onto_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementBookOntoInternalTransportReferencePost($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'][0])
    {
        list($response) = $this->warehouseStockMovementBookOntoInternalTransportReferencePostWithHttpInfo($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementBookOntoInternalTransportReferencePostWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOntoInternalTransportReferencePostRequest $warehouse_stock_movement_book_onto_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementBookOntoInternalTransportReferencePostWithHttpInfo($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'][0])
    {
        $request = $this->warehouseStockMovementBookOntoInternalTransportReferencePostRequest($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementBookOntoInternalTransportReferencePostAsync
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOntoInternalTransportReferencePostRequest $warehouse_stock_movement_book_onto_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookOntoInternalTransportReferencePostAsync($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'][0])
    {
        return $this->warehouseStockMovementBookOntoInternalTransportReferencePostAsyncWithHttpInfo($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementBookOntoInternalTransportReferencePostAsyncWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOntoInternalTransportReferencePostRequest $warehouse_stock_movement_book_onto_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookOntoInternalTransportReferencePostAsyncWithHttpInfo($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response';
        $request = $this->warehouseStockMovementBookOntoInternalTransportReferencePostRequest($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementBookOntoInternalTransportReferencePost'
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOntoInternalTransportReferencePostRequest $warehouse_stock_movement_book_onto_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementBookOntoInternalTransportReferencePostRequest($warehouse_stock_movement_book_onto_internal_transport_reference_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOntoInternalTransportReferencePost'][0])
    {

        // verify the required parameter 'warehouse_stock_movement_book_onto_internal_transport_reference_post_request' is set
        if ($warehouse_stock_movement_book_onto_internal_transport_reference_post_request === null || (is_array($warehouse_stock_movement_book_onto_internal_transport_reference_post_request) && count($warehouse_stock_movement_book_onto_internal_transport_reference_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_stock_movement_book_onto_internal_transport_reference_post_request when calling warehouseStockMovementBookOntoInternalTransportReferencePost'
            );
        }


        $resourcePath = '/warehouseStockMovement/bookOntoInternalTransportReference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($warehouse_stock_movement_book_onto_internal_transport_reference_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($warehouse_stock_movement_book_onto_internal_transport_reference_post_request));
            } else {
                $httpBody = $warehouse_stock_movement_book_onto_internal_transport_reference_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseStockMovementBookOutgoingMovementPost
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOutgoingMovementPostRequest $warehouse_stock_movement_book_outgoing_movement_post_request warehouse_stock_movement_book_outgoing_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementBookOutgoingMovementPost($warehouse_stock_movement_book_outgoing_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'][0])
    {
        list($response) = $this->warehouseStockMovementBookOutgoingMovementPostWithHttpInfo($warehouse_stock_movement_book_outgoing_movement_post_request, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementBookOutgoingMovementPostWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOutgoingMovementPostRequest $warehouse_stock_movement_book_outgoing_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementBookOutgoingMovementPostWithHttpInfo($warehouse_stock_movement_book_outgoing_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'][0])
    {
        $request = $this->warehouseStockMovementBookOutgoingMovementPostRequest($warehouse_stock_movement_book_outgoing_movement_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementBookOutgoingMovementPostAsync
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOutgoingMovementPostRequest $warehouse_stock_movement_book_outgoing_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookOutgoingMovementPostAsync($warehouse_stock_movement_book_outgoing_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'][0])
    {
        return $this->warehouseStockMovementBookOutgoingMovementPostAsyncWithHttpInfo($warehouse_stock_movement_book_outgoing_movement_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementBookOutgoingMovementPostAsyncWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOutgoingMovementPostRequest $warehouse_stock_movement_book_outgoing_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookOutgoingMovementPostAsyncWithHttpInfo($warehouse_stock_movement_book_outgoing_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response';
        $request = $this->warehouseStockMovementBookOutgoingMovementPostRequest($warehouse_stock_movement_book_outgoing_movement_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementBookOutgoingMovementPost'
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookOutgoingMovementPostRequest $warehouse_stock_movement_book_outgoing_movement_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementBookOutgoingMovementPostRequest($warehouse_stock_movement_book_outgoing_movement_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookOutgoingMovementPost'][0])
    {

        // verify the required parameter 'warehouse_stock_movement_book_outgoing_movement_post_request' is set
        if ($warehouse_stock_movement_book_outgoing_movement_post_request === null || (is_array($warehouse_stock_movement_book_outgoing_movement_post_request) && count($warehouse_stock_movement_book_outgoing_movement_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_stock_movement_book_outgoing_movement_post_request when calling warehouseStockMovementBookOutgoingMovementPost'
            );
        }


        $resourcePath = '/warehouseStockMovement/bookOutgoingMovement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($warehouse_stock_movement_book_outgoing_movement_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($warehouse_stock_movement_book_outgoing_movement_post_request));
            } else {
                $httpBody = $warehouse_stock_movement_book_outgoing_movement_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseStockMovementBookToLoadingEquipmentPlacePost
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookToLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_to_loading_equipment_place_post_request warehouse_stock_movement_book_to_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementBookToLoadingEquipmentPlacePost($warehouse_stock_movement_book_to_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'][0])
    {
        list($response) = $this->warehouseStockMovementBookToLoadingEquipmentPlacePostWithHttpInfo($warehouse_stock_movement_book_to_loading_equipment_place_post_request, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementBookToLoadingEquipmentPlacePostWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookToLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_to_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementBookToLoadingEquipmentPlacePostWithHttpInfo($warehouse_stock_movement_book_to_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'][0])
    {
        $request = $this->warehouseStockMovementBookToLoadingEquipmentPlacePostRequest($warehouse_stock_movement_book_to_loading_equipment_place_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementBookToLoadingEquipmentPlacePostAsync
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookToLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_to_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookToLoadingEquipmentPlacePostAsync($warehouse_stock_movement_book_to_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'][0])
    {
        return $this->warehouseStockMovementBookToLoadingEquipmentPlacePostAsyncWithHttpInfo($warehouse_stock_movement_book_to_loading_equipment_place_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementBookToLoadingEquipmentPlacePostAsyncWithHttpInfo
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookToLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_to_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementBookToLoadingEquipmentPlacePostAsyncWithHttpInfo($warehouse_stock_movement_book_to_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response';
        $request = $this->warehouseStockMovementBookToLoadingEquipmentPlacePostRequest($warehouse_stock_movement_book_to_loading_equipment_place_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementBookToLoadingEquipmentPlacePost'
     *
     * @param  \kruegge82\weclapp\Model\WarehouseStockMovementBookToLoadingEquipmentPlacePostRequest $warehouse_stock_movement_book_to_loading_equipment_place_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementBookToLoadingEquipmentPlacePostRequest($warehouse_stock_movement_book_to_loading_equipment_place_post_request, string $contentType = self::contentTypes['warehouseStockMovementBookToLoadingEquipmentPlacePost'][0])
    {

        // verify the required parameter 'warehouse_stock_movement_book_to_loading_equipment_place_post_request' is set
        if ($warehouse_stock_movement_book_to_loading_equipment_place_post_request === null || (is_array($warehouse_stock_movement_book_to_loading_equipment_place_post_request) && count($warehouse_stock_movement_book_to_loading_equipment_place_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_stock_movement_book_to_loading_equipment_place_post_request when calling warehouseStockMovementBookToLoadingEquipmentPlacePost'
            );
        }


        $resourcePath = '/warehouseStockMovement/bookToLoadingEquipmentPlace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($warehouse_stock_movement_book_to_loading_equipment_place_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($warehouse_stock_movement_book_to_loading_equipment_place_post_request));
            } else {
                $httpBody = $warehouse_stock_movement_book_to_loading_equipment_place_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseStockMovementCountGet
     *
     * count warehouseStockMovement
     *
     * @param  string|null $filter filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementCountGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\AccountingTransactionCountGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementCountGet($filter = null, string $contentType = self::contentTypes['warehouseStockMovementCountGet'][0])
    {
        list($response) = $this->warehouseStockMovementCountGetWithHttpInfo($filter, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementCountGetWithHttpInfo
     *
     * count warehouseStockMovement
     *
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementCountGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\AccountingTransactionCountGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementCountGetWithHttpInfo($filter = null, string $contentType = self::contentTypes['warehouseStockMovementCountGet'][0])
    {
        $request = $this->warehouseStockMovementCountGetRequest($filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementCountGetAsync
     *
     * count warehouseStockMovement
     *
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementCountGetAsync($filter = null, string $contentType = self::contentTypes['warehouseStockMovementCountGet'][0])
    {
        return $this->warehouseStockMovementCountGetAsyncWithHttpInfo($filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementCountGetAsyncWithHttpInfo
     *
     * count warehouseStockMovement
     *
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementCountGetAsyncWithHttpInfo($filter = null, string $contentType = self::contentTypes['warehouseStockMovementCountGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response';
        $request = $this->warehouseStockMovementCountGetRequest($filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementCountGet'
     *
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementCountGetRequest($filter = null, string $contentType = self::contentTypes['warehouseStockMovementCountGet'][0])
    {



        $resourcePath = '/warehouseStockMovement/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseStockMovementGet
     *
     * query warehouseStockMovement
     *
     * @param  int|null $page page (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  bool|null $serialize_nulls serialize_nulls (optional)
     * @param  string|null $sort sort (optional)
     * @param  string|null $filter filter (optional)
     * @param  string|null $properties properties (optional)
     * @param  string|null $include_referenced_entities include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementGet($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['warehouseStockMovementGet'][0])
    {
        list($response) = $this->warehouseStockMovementGetWithHttpInfo($page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementGetWithHttpInfo
     *
     * query warehouseStockMovement
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\WarehouseStockMovementGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementGetWithHttpInfo($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['warehouseStockMovementGet'][0])
    {
        $request = $this->warehouseStockMovementGetRequest($page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementGetAsync
     *
     * query warehouseStockMovement
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementGetAsync($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['warehouseStockMovementGet'][0])
    {
        return $this->warehouseStockMovementGetAsyncWithHttpInfo($page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementGetAsyncWithHttpInfo
     *
     * query warehouseStockMovement
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementGetAsyncWithHttpInfo($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['warehouseStockMovementGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\WarehouseStockMovementGet200Response';
        $request = $this->warehouseStockMovementGetRequest($page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementGet'
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementGetRequest($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['warehouseStockMovementGet'][0])
    {









        $resourcePath = '/warehouseStockMovement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serialize_nulls,
            'serializeNulls', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $properties,
            'properties', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_referenced_entities,
            'includeReferencedEntities', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseStockMovementIdIdGet
     *
     * query a specific warehouseStockMovement
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementIdIdGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\WarehouseStockMovement|\kruegge82\weclapp\Model\ApiProblem
     */
    public function warehouseStockMovementIdIdGet($id, string $contentType = self::contentTypes['warehouseStockMovementIdIdGet'][0])
    {
        list($response) = $this->warehouseStockMovementIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation warehouseStockMovementIdIdGetWithHttpInfo
     *
     * query a specific warehouseStockMovement
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementIdIdGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\WarehouseStockMovement|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseStockMovementIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['warehouseStockMovementIdIdGet'][0])
    {
        $request = $this->warehouseStockMovementIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\WarehouseStockMovement',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\WarehouseStockMovement',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\WarehouseStockMovement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation warehouseStockMovementIdIdGetAsync
     *
     * query a specific warehouseStockMovement
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementIdIdGetAsync($id, string $contentType = self::contentTypes['warehouseStockMovementIdIdGet'][0])
    {
        return $this->warehouseStockMovementIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseStockMovementIdIdGetAsyncWithHttpInfo
     *
     * query a specific warehouseStockMovement
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseStockMovementIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['warehouseStockMovementIdIdGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\WarehouseStockMovement';
        $request = $this->warehouseStockMovementIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseStockMovementIdIdGet'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warehouseStockMovementIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warehouseStockMovementIdIdGetRequest($id, string $contentType = self::contentTypes['warehouseStockMovementIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling warehouseStockMovementIdIdGet'
            );
        }


        $resourcePath = '/warehouseStockMovement/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
