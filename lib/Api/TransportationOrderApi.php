<?php
/**
 * TransportationOrderApi
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * weclapp API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\weclapp\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use kruegge82\weclapp\ApiException;
use kruegge82\weclapp\Configuration;
use kruegge82\weclapp\FormDataProcessor;
use kruegge82\weclapp\HeaderSelector;
use kruegge82\weclapp\ObjectSerializer;

/**
 * TransportationOrderApi Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\weclapp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransportationOrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'transportationOrderCountGet' => [
            'application/json',
        ],
        'transportationOrderGet' => [
            'application/json',
        ],
        'transportationOrderIdIdCreatePickPost' => [
            'application/json',
        ],
        'transportationOrderIdIdCreatePickingListPost' => [
            'application/json',
        ],
        'transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost' => [
            'application/json',
        ],
        'transportationOrderIdIdDelete' => [
            'application/json',
        ],
        'transportationOrderIdIdGet' => [
            'application/json',
        ],
        'transportationOrderIdIdInternalTransportReferencesForPickUpGet' => [
            'application/json',
        ],
        'transportationOrderIdIdPickPickPost' => [
            'application/json',
        ],
        'transportationOrderIdIdPut' => [
            'application/json',
        ],
        'transportationOrderIdIdPutDownInternalTransportReferencePost' => [
            'application/json',
        ],
        'transportationOrderPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation transportationOrderCountGet
     *
     * count transportationOrder
     *
     * @param  string|null $filter filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderCountGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\AccountingTransactionCountGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderCountGet($filter = null, string $contentType = self::contentTypes['transportationOrderCountGet'][0])
    {
        list($response) = $this->transportationOrderCountGetWithHttpInfo($filter, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderCountGetWithHttpInfo
     *
     * count transportationOrder
     *
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderCountGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\AccountingTransactionCountGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderCountGetWithHttpInfo($filter = null, string $contentType = self::contentTypes['transportationOrderCountGet'][0])
    {
        $request = $this->transportationOrderCountGetRequest($filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderCountGetAsync
     *
     * count transportationOrder
     *
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderCountGetAsync($filter = null, string $contentType = self::contentTypes['transportationOrderCountGet'][0])
    {
        return $this->transportationOrderCountGetAsyncWithHttpInfo($filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderCountGetAsyncWithHttpInfo
     *
     * count transportationOrder
     *
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderCountGetAsyncWithHttpInfo($filter = null, string $contentType = self::contentTypes['transportationOrderCountGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\AccountingTransactionCountGet200Response';
        $request = $this->transportationOrderCountGetRequest($filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderCountGet'
     *
     * @param  string|null $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderCountGetRequest($filter = null, string $contentType = self::contentTypes['transportationOrderCountGet'][0])
    {



        $resourcePath = '/transportationOrder/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderGet
     *
     * query transportationOrder
     *
     * @param  int|null $page page (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  bool|null $serialize_nulls serialize_nulls (optional)
     * @param  string|null $sort sort (optional)
     * @param  string|null $filter filter (optional)
     * @param  string|null $properties properties (optional)
     * @param  string|null $include_referenced_entities include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\TransportationOrderGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderGet($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['transportationOrderGet'][0])
    {
        list($response) = $this->transportationOrderGetWithHttpInfo($page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderGetWithHttpInfo
     *
     * query transportationOrder
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\TransportationOrderGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderGetWithHttpInfo($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['transportationOrderGet'][0])
    {
        $request = $this->transportationOrderGetRequest($page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\TransportationOrderGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\TransportationOrderGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\TransportationOrderGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderGetAsync
     *
     * query transportationOrder
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderGetAsync($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['transportationOrderGet'][0])
    {
        return $this->transportationOrderGetAsyncWithHttpInfo($page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderGetAsyncWithHttpInfo
     *
     * query transportationOrder
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderGetAsyncWithHttpInfo($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['transportationOrderGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\TransportationOrderGet200Response';
        $request = $this->transportationOrderGetRequest($page, $page_size, $serialize_nulls, $sort, $filter, $properties, $include_referenced_entities, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderGet'
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  bool|null $serialize_nulls (optional)
     * @param  string|null $sort (optional)
     * @param  string|null $filter (optional)
     * @param  string|null $properties (optional)
     * @param  string|null $include_referenced_entities (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderGetRequest($page = null, $page_size = null, $serialize_nulls = null, $sort = null, $filter = null, $properties = null, $include_referenced_entities = null, string $contentType = self::contentTypes['transportationOrderGet'][0])
    {









        $resourcePath = '/transportationOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serialize_nulls,
            'serializeNulls', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $properties,
            'properties', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_referenced_entities,
            'includeReferencedEntities', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdCreatePickPost
     *
     * @param  string $id id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPostRequest $transportation_order_id_id_create_pick_post_request transportation_order_id_id_create_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderIdIdCreatePickPost($id, $transportation_order_id_id_create_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickPost'][0])
    {
        list($response) = $this->transportationOrderIdIdCreatePickPostWithHttpInfo($id, $transportation_order_id_id_create_pick_post_request, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderIdIdCreatePickPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPostRequest $transportation_order_id_id_create_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdCreatePickPostWithHttpInfo($id, $transportation_order_id_id_create_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickPost'][0])
    {
        $request = $this->transportationOrderIdIdCreatePickPostRequest($id, $transportation_order_id_id_create_pick_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdCreatePickPostAsync
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPostRequest $transportation_order_id_id_create_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdCreatePickPostAsync($id, $transportation_order_id_id_create_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickPost'][0])
    {
        return $this->transportationOrderIdIdCreatePickPostAsyncWithHttpInfo($id, $transportation_order_id_id_create_pick_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdCreatePickPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPostRequest $transportation_order_id_id_create_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdCreatePickPostAsyncWithHttpInfo($id, $transportation_order_id_id_create_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response';
        $request = $this->transportationOrderIdIdCreatePickPostRequest($id, $transportation_order_id_id_create_pick_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdCreatePickPost'
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPostRequest $transportation_order_id_id_create_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdCreatePickPostRequest($id, $transportation_order_id_id_create_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdCreatePickPost'
            );
        }

        // verify the required parameter 'transportation_order_id_id_create_pick_post_request' is set
        if ($transportation_order_id_id_create_pick_post_request === null || (is_array($transportation_order_id_id_create_pick_post_request) && count($transportation_order_id_id_create_pick_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transportation_order_id_id_create_pick_post_request when calling transportationOrderIdIdCreatePickPost'
            );
        }


        $resourcePath = '/transportationOrder/id/{id}/createPick';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transportation_order_id_id_create_pick_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transportation_order_id_id_create_pick_post_request));
            } else {
                $httpBody = $transportation_order_id_id_create_pick_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdCreatePickingListPost
     *
     * @param  string $id id (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickingListPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderIdIdCreatePickingListPost($id, $body, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickingListPost'][0])
    {
        list($response) = $this->transportationOrderIdIdCreatePickingListPostWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderIdIdCreatePickingListPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickingListPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdCreatePickingListPostWithHttpInfo($id, $body, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickingListPost'][0])
    {
        $request = $this->transportationOrderIdIdCreatePickingListPostRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdCreatePickingListPostAsync
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickingListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdCreatePickingListPostAsync($id, $body, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickingListPost'][0])
    {
        return $this->transportationOrderIdIdCreatePickingListPostAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdCreatePickingListPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickingListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdCreatePickingListPostAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickingListPost'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->transportationOrderIdIdCreatePickingListPostRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdCreatePickingListPost'
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreatePickingListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdCreatePickingListPostRequest($id, $body, string $contentType = self::contentTypes['transportationOrderIdIdCreatePickingListPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdCreatePickingListPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling transportationOrderIdIdCreatePickingListPost'
            );
        }


        $resourcePath = '/transportationOrder/id/{id}/createPickingList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/pdf', 'image/jpeg', 'image/png', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost
     *
     * @param  string $id id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostRequest $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'][0])
    {
        list($response) = $this->transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostWithHttpInfo($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostRequest $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostWithHttpInfo($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'][0])
    {
        $request = $this->transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostRequest($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostAsync
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostRequest $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostAsync($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'][0])
    {
        return $this->transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostAsyncWithHttpInfo($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostRequest $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostAsyncWithHttpInfo($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response';
        $request = $this->transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostRequest($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostRequest $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPostRequest($id, $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request, string $contentType = self::contentTypes['transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'
            );
        }

        // verify the required parameter 'transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request' is set
        if ($transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request === null || (is_array($transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request) && count($transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request when calling transportationOrderIdIdCreateTransportationOrderFromUnpickedRecordsPost'
            );
        }


        $resourcePath = '/transportationOrder/id/{id}/createTransportationOrderFromUnpickedRecords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request));
            } else {
                $httpBody = $transportation_order_id_id_create_transportation_order_from_unpicked_records_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdDelete
     *
     * delete a transportationOrder
     *
     * @param  string $id id (required)
     * @param  bool|null $dry_run dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdDelete'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function transportationOrderIdIdDelete($id, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdDelete'][0])
    {
        $this->transportationOrderIdIdDeleteWithHttpInfo($id, $dry_run, $contentType);
    }

    /**
     * Operation transportationOrderIdIdDeleteWithHttpInfo
     *
     * delete a transportationOrder
     *
     * @param  string $id (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdDelete'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdDeleteWithHttpInfo($id, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdDelete'][0])
    {
        $request = $this->transportationOrderIdIdDeleteRequest($id, $dry_run, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdDeleteAsync
     *
     * delete a transportationOrder
     *
     * @param  string $id (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdDeleteAsync($id, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdDelete'][0])
    {
        return $this->transportationOrderIdIdDeleteAsyncWithHttpInfo($id, $dry_run, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdDeleteAsyncWithHttpInfo
     *
     * delete a transportationOrder
     *
     * @param  string $id (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdDeleteAsyncWithHttpInfo($id, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdDelete'][0])
    {
        $returnType = '';
        $request = $this->transportationOrderIdIdDeleteRequest($id, $dry_run, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdDelete'
     *
     * @param  string $id (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdDeleteRequest($id, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdDelete'
            );
        }



        $resourcePath = '/transportationOrder/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dry_run,
            'dryRun', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdGet
     *
     * query a specific transportationOrder
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\TransportationOrder|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderIdIdGet($id, string $contentType = self::contentTypes['transportationOrderIdIdGet'][0])
    {
        list($response) = $this->transportationOrderIdIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderIdIdGetWithHttpInfo
     *
     * query a specific transportationOrder
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\TransportationOrder|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdGetWithHttpInfo($id, string $contentType = self::contentTypes['transportationOrderIdIdGet'][0])
    {
        $request = $this->transportationOrderIdIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\TransportationOrder',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\TransportationOrder',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\TransportationOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdGetAsync
     *
     * query a specific transportationOrder
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdGetAsync($id, string $contentType = self::contentTypes['transportationOrderIdIdGet'][0])
    {
        return $this->transportationOrderIdIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdGetAsyncWithHttpInfo
     *
     * query a specific transportationOrder
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['transportationOrderIdIdGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\TransportationOrder';
        $request = $this->transportationOrderIdIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdGet'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdGetRequest($id, string $contentType = self::contentTypes['transportationOrderIdIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdGet'
            );
        }


        $resourcePath = '/transportationOrder/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdInternalTransportReferencesForPickUpGet
     *
     * @param  string $id id (required)
     * @param  bool|null $ignore_current_loading_equipment ignore_current_loading_equipment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\InternalTransportReferenceGet200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderIdIdInternalTransportReferencesForPickUpGet($id, $ignore_current_loading_equipment = null, string $contentType = self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'][0])
    {
        list($response) = $this->transportationOrderIdIdInternalTransportReferencesForPickUpGetWithHttpInfo($id, $ignore_current_loading_equipment, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderIdIdInternalTransportReferencesForPickUpGetWithHttpInfo
     *
     * @param  string $id (required)
     * @param  bool|null $ignore_current_loading_equipment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\InternalTransportReferenceGet200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdInternalTransportReferencesForPickUpGetWithHttpInfo($id, $ignore_current_loading_equipment = null, string $contentType = self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'][0])
    {
        $request = $this->transportationOrderIdIdInternalTransportReferencesForPickUpGetRequest($id, $ignore_current_loading_equipment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\InternalTransportReferenceGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\InternalTransportReferenceGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\InternalTransportReferenceGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdInternalTransportReferencesForPickUpGetAsync
     *
     * @param  string $id (required)
     * @param  bool|null $ignore_current_loading_equipment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdInternalTransportReferencesForPickUpGetAsync($id, $ignore_current_loading_equipment = null, string $contentType = self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'][0])
    {
        return $this->transportationOrderIdIdInternalTransportReferencesForPickUpGetAsyncWithHttpInfo($id, $ignore_current_loading_equipment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdInternalTransportReferencesForPickUpGetAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  bool|null $ignore_current_loading_equipment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdInternalTransportReferencesForPickUpGetAsyncWithHttpInfo($id, $ignore_current_loading_equipment = null, string $contentType = self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\InternalTransportReferenceGet200Response';
        $request = $this->transportationOrderIdIdInternalTransportReferencesForPickUpGetRequest($id, $ignore_current_loading_equipment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdInternalTransportReferencesForPickUpGet'
     *
     * @param  string $id (required)
     * @param  bool|null $ignore_current_loading_equipment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdInternalTransportReferencesForPickUpGetRequest($id, $ignore_current_loading_equipment = null, string $contentType = self::contentTypes['transportationOrderIdIdInternalTransportReferencesForPickUpGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdInternalTransportReferencesForPickUpGet'
            );
        }



        $resourcePath = '/transportationOrder/id/{id}/internalTransportReferencesForPickUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignore_current_loading_equipment,
            'ignoreCurrentLoadingEquipment', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdPickPickPost
     *
     * @param  string $id id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPickPickPostRequest $transportation_order_id_id_pick_pick_post_request transportation_order_id_id_pick_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPickPickPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderIdIdPickPickPost($id, $transportation_order_id_id_pick_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPickPickPost'][0])
    {
        list($response) = $this->transportationOrderIdIdPickPickPostWithHttpInfo($id, $transportation_order_id_id_pick_pick_post_request, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderIdIdPickPickPostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPickPickPostRequest $transportation_order_id_id_pick_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPickPickPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdPickPickPostWithHttpInfo($id, $transportation_order_id_id_pick_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPickPickPost'][0])
    {
        $request = $this->transportationOrderIdIdPickPickPostRequest($id, $transportation_order_id_id_pick_pick_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdPickPickPostAsync
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPickPickPostRequest $transportation_order_id_id_pick_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPickPickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdPickPickPostAsync($id, $transportation_order_id_id_pick_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPickPickPost'][0])
    {
        return $this->transportationOrderIdIdPickPickPostAsyncWithHttpInfo($id, $transportation_order_id_id_pick_pick_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdPickPickPostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPickPickPostRequest $transportation_order_id_id_pick_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPickPickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdPickPickPostAsyncWithHttpInfo($id, $transportation_order_id_id_pick_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPickPickPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response';
        $request = $this->transportationOrderIdIdPickPickPostRequest($id, $transportation_order_id_id_pick_pick_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdPickPickPost'
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPickPickPostRequest $transportation_order_id_id_pick_pick_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPickPickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdPickPickPostRequest($id, $transportation_order_id_id_pick_pick_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPickPickPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdPickPickPost'
            );
        }

        // verify the required parameter 'transportation_order_id_id_pick_pick_post_request' is set
        if ($transportation_order_id_id_pick_pick_post_request === null || (is_array($transportation_order_id_id_pick_pick_post_request) && count($transportation_order_id_id_pick_pick_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transportation_order_id_id_pick_pick_post_request when calling transportationOrderIdIdPickPickPost'
            );
        }


        $resourcePath = '/transportationOrder/id/{id}/pickPick';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transportation_order_id_id_pick_pick_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transportation_order_id_id_pick_pick_post_request));
            } else {
                $httpBody = $transportation_order_id_id_pick_pick_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdPut
     *
     * update a transportationOrder
     *
     * @param  string $id id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order transportation_order (required)
     * @param  bool|null $dry_run dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPut'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\TransportationOrder|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderIdIdPut($id, $transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdPut'][0])
    {
        list($response) = $this->transportationOrderIdIdPutWithHttpInfo($id, $transportation_order, $dry_run, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderIdIdPutWithHttpInfo
     *
     * update a transportationOrder
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPut'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\TransportationOrder|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdPutWithHttpInfo($id, $transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdPut'][0])
    {
        $request = $this->transportationOrderIdIdPutRequest($id, $transportation_order, $dry_run, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\TransportationOrder',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\TransportationOrder',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\TransportationOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdPutAsync
     *
     * update a transportationOrder
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdPutAsync($id, $transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdPut'][0])
    {
        return $this->transportationOrderIdIdPutAsyncWithHttpInfo($id, $transportation_order, $dry_run, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdPutAsyncWithHttpInfo
     *
     * update a transportationOrder
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdPutAsyncWithHttpInfo($id, $transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdPut'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\TransportationOrder';
        $request = $this->transportationOrderIdIdPutRequest($id, $transportation_order, $dry_run, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdPut'
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdPutRequest($id, $transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderIdIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdPut'
            );
        }

        // verify the required parameter 'transportation_order' is set
        if ($transportation_order === null || (is_array($transportation_order) && count($transportation_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transportation_order when calling transportationOrderIdIdPut'
            );
        }



        $resourcePath = '/transportationOrder/id/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dry_run,
            'dryRun', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transportation_order)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transportation_order));
            } else {
                $httpBody = $transportation_order;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderIdIdPutDownInternalTransportReferencePost
     *
     * @param  string $id id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPutDownInternalTransportReferencePostRequest $transportation_order_id_id_put_down_internal_transport_reference_post_request transportation_order_id_id_put_down_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderIdIdPutDownInternalTransportReferencePost($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'][0])
    {
        list($response) = $this->transportationOrderIdIdPutDownInternalTransportReferencePostWithHttpInfo($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderIdIdPutDownInternalTransportReferencePostWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPutDownInternalTransportReferencePostRequest $transportation_order_id_id_put_down_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderIdIdPutDownInternalTransportReferencePostWithHttpInfo($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'][0])
    {
        $request = $this->transportationOrderIdIdPutDownInternalTransportReferencePostRequest($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderIdIdPutDownInternalTransportReferencePostAsync
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPutDownInternalTransportReferencePostRequest $transportation_order_id_id_put_down_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdPutDownInternalTransportReferencePostAsync($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'][0])
    {
        return $this->transportationOrderIdIdPutDownInternalTransportReferencePostAsyncWithHttpInfo($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderIdIdPutDownInternalTransportReferencePostAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPutDownInternalTransportReferencePostRequest $transportation_order_id_id_put_down_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderIdIdPutDownInternalTransportReferencePostAsyncWithHttpInfo($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\TransportationOrderIdIdCreatePickPost200Response';
        $request = $this->transportationOrderIdIdPutDownInternalTransportReferencePostRequest($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderIdIdPutDownInternalTransportReferencePost'
     *
     * @param  string $id (required)
     * @param  \kruegge82\weclapp\Model\TransportationOrderIdIdPutDownInternalTransportReferencePostRequest $transportation_order_id_id_put_down_internal_transport_reference_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderIdIdPutDownInternalTransportReferencePostRequest($id, $transportation_order_id_id_put_down_internal_transport_reference_post_request, string $contentType = self::contentTypes['transportationOrderIdIdPutDownInternalTransportReferencePost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transportationOrderIdIdPutDownInternalTransportReferencePost'
            );
        }

        // verify the required parameter 'transportation_order_id_id_put_down_internal_transport_reference_post_request' is set
        if ($transportation_order_id_id_put_down_internal_transport_reference_post_request === null || (is_array($transportation_order_id_id_put_down_internal_transport_reference_post_request) && count($transportation_order_id_id_put_down_internal_transport_reference_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transportation_order_id_id_put_down_internal_transport_reference_post_request when calling transportationOrderIdIdPutDownInternalTransportReferencePost'
            );
        }


        $resourcePath = '/transportationOrder/id/{id}/putDownInternalTransportReference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transportation_order_id_id_put_down_internal_transport_reference_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transportation_order_id_id_put_down_internal_transport_reference_post_request));
            } else {
                $httpBody = $transportation_order_id_id_put_down_internal_transport_reference_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transportationOrderPost
     *
     * create a transportationOrder
     *
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order transportation_order (required)
     * @param  bool|null $dry_run dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \kruegge82\weclapp\Model\TransportationOrder|\kruegge82\weclapp\Model\ApiProblem
     */
    public function transportationOrderPost($transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderPost'][0])
    {
        list($response) = $this->transportationOrderPostWithHttpInfo($transportation_order, $dry_run, $contentType);
        return $response;
    }

    /**
     * Operation transportationOrderPostWithHttpInfo
     *
     * create a transportationOrder
     *
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderPost'] to see the possible values for this operation
     *
     * @throws \kruegge82\weclapp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \kruegge82\weclapp\Model\TransportationOrder|\kruegge82\weclapp\Model\ApiProblem, HTTP status code, HTTP response headers (array of strings)
     */
    public function transportationOrderPostWithHttpInfo($transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderPost'][0])
    {
        $request = $this->transportationOrderPostRequest($transportation_order, $dry_run, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\TransportationOrder',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\kruegge82\weclapp\Model\TransportationOrder',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\TransportationOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\weclapp\Model\ApiProblem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transportationOrderPostAsync
     *
     * create a transportationOrder
     *
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderPostAsync($transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderPost'][0])
    {
        return $this->transportationOrderPostAsyncWithHttpInfo($transportation_order, $dry_run, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transportationOrderPostAsyncWithHttpInfo
     *
     * create a transportationOrder
     *
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transportationOrderPostAsyncWithHttpInfo($transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderPost'][0])
    {
        $returnType = '\kruegge82\weclapp\Model\TransportationOrder';
        $request = $this->transportationOrderPostRequest($transportation_order, $dry_run, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transportationOrderPost'
     *
     * @param  \kruegge82\weclapp\Model\TransportationOrder $transportation_order (required)
     * @param  bool|null $dry_run (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transportationOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transportationOrderPostRequest($transportation_order, $dry_run = null, string $contentType = self::contentTypes['transportationOrderPost'][0])
    {

        // verify the required parameter 'transportation_order' is set
        if ($transportation_order === null || (is_array($transportation_order) && count($transportation_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transportation_order when calling transportationOrderPost'
            );
        }



        $resourcePath = '/transportationOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dry_run,
            'dryRun', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transportation_order)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transportation_order));
            } else {
                $httpBody = $transportation_order;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('AuthenticationToken');
        if ($apiKey !== null) {
            $headers['AuthenticationToken'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
